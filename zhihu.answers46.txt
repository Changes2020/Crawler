[
  {
    "question": "\n如何看待Apache再次接受阿里开源产品捐赠 移动开发框架Weex进入孵化\n",
    "author": "vczero",
    "content": "\n\n<textarea hidden class=\"content\">以下是我个人的一些想法和感受，仅此而已。&lt;br&gt;&lt;br&gt;前几次，我在外面分享演讲，希望通过布道把weex团队的一些声音带给大家，也严苛要求自己希望能够带去的是团队的一些思考，希望得到更多的反馈。希望可以在社区研发透明，讨论公开的情况下，大家在社区里面得到共识。&lt;br&gt;&lt;br&gt;前段时间，跟kylin项目的luke老师在聊，关于社区，关于apache的事。luke老师是国内在apache项目上资深人士，之前是eBay的总监. 为了捐赠apache，luke老师给了很多的建议，也直言不讳的发起了很多的讨论. 这只是一个细节，还有诸多如此的讨论.&lt;br&gt;&lt;br&gt;明天，我会把这个跟团队布道的同学传达过去，希望可以更加透明的表达自己的思考。以后，即使不是我在布道，我也希望，在社区里大家可以开诚布公，一起聊聊关于对Apache这个事的想法。&lt;br&gt;&lt;br&gt;luke老师说，捐赠了apache后，weex就不再是阿里的weex了，而是社区的，今后的所有规则都要符合社区. 这一块本来就是做开源的必须想清楚的事，也需要达成一致. 因此，我个人至少看到得是 weex在开源上的一些讨论，一些思考。&lt;br&gt;&lt;br&gt;总而言之，weex是社区的weex，是社区同学一起努力的成果，这个是我个人想总结的，是个人内心的真实想法。&lt;br&gt;&lt;br&gt;其实，是不是可以开一个专题，就单独说说apache的事儿，不涉及任何项目。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n以下是我个人的一些想法和感受，仅此而已。 前几次，我在外面分享演讲，希望通过布道把weex团队的一些声音带给大家，也严苛要求自己希望能够带去的是团队的一些思考，希望得到更多的反馈。希望可以在社区研发透明，讨论公开的情况下，大家在社区里面得到共…\n\n<a href=\"/question/53662027/answer/136071523\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-12-16\" target=\"_blank\" href=\"/question/53662027/answer/136071523\">编辑于 2016-12-16</a></p>\n\n",
    "link": "https://zhihu.com/question/53662027/answer/136071523"
  },
  {
    "question": "\n很迷茫，不知道自己现在是要继续学习 React.js 还是系统地学习 JS？\n",
    "author": "王德福",
    "content": "\n\n<textarea hidden class=\"content\">大家都在说&lt;b&gt;基础&lt;/b&gt;很重要，原型链很重要，闭包很重要，但是对于年轻的前端来说，闭包为何重要，原型链在哪里用，这是两个哲学问题啊。&lt;br&gt;&lt;br&gt;所以这些名词好像就是&lt;b&gt;初级前端&lt;/b&gt;和&lt;b&gt;中级前端&lt;/b&gt;的一道&lt;b&gt;分水岭&lt;/b&gt;，年轻的前端不是无法掌握闭包，而是没有接触使用闭包的&lt;b&gt;场景&lt;/b&gt;。如果项目用了&lt;b&gt;面向对象&lt;/b&gt;的编程思想，要封装对象的&lt;b&gt;私有函数&lt;/b&gt;，师傅教你套模板写，随手就是一个闭包，天天写闭包，不会用才怪。&lt;br&gt;&lt;br&gt;因此闭包算是高级特性，或者重中之重的基础么？也可能你在上班的第一天就开始用闭包，但是依然不知道道理。所以在我看来这些算不得基础，基础的东西就是纯粹的语法。&lt;br&gt;&lt;br&gt;比如我问过学生一个问题：&lt;br&gt;&lt;blockquote&gt;$('.title').css({color: 'red'})&lt;br&gt;这句代码中$是什么？&lt;br&gt;color可以加引号么？可以不加么？&lt;/blockquote&gt;很多人用了很多年jQuery，但是从来没想过$是什么吧。&lt;br&gt;&lt;br&gt;$是个函数名，因为后面紧接着了一个括号，而$('.title')是一个对象，并且具有css方法，而css方法可以接受一个对象作为参数，既然是对象，那么键名可以省略引号。&lt;br&gt;&lt;br&gt;关于this的四种情况，也就是最后一个new比较奇怪，毕竟是引入了新的语法。&lt;br&gt;&lt;br&gt;而我们看待一个函数，无非就是三件事：&lt;br&gt;1. 传入&lt;b&gt;几个参数&lt;/b&gt;，分别是什么&lt;b&gt;类型&lt;/b&gt;，有没有重载。&lt;br&gt;2. 函数&lt;b&gt;做了什么&lt;/b&gt;，怎么使用了this，有没有修改外部变量/DOM。&lt;br&gt;3. 函数&lt;b&gt;返回值&lt;/b&gt;是什么类型。&lt;br&gt;&lt;br&gt;比如bind是什么。&lt;br&gt;1. 传入一个&lt;b&gt;对象&lt;/b&gt;&lt;br&gt;2. 把这个对象作为调用函数的指定this&lt;br&gt;3. 返回这个绑定了this的&lt;b&gt;函数&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;所以bind返回了一个函数，如此一来就不会和call搞混了（我也不是很懂能搞混是什么鬼...）&lt;br&gt;&lt;br&gt;不涉及数据结构和算法的事情，都是语法可以搞得定的，如果你还不能做到每天轻松阅读50页犀牛书并且轻松看懂所有代码，那么不妨从最基础的语法练习开始。当对语法的掌握炉火纯青的时候，看书和学习自然会觉得阻力小了很多。&lt;br&gt;&lt;br&gt;想要学react，但是基础不牢，当然会觉得心虚，这也就是你来提问的原因。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n大家都在说<b>基础</b>很重要，原型链很重要，闭包很重要，但是对于年轻的前端来说，闭包为何重要，原型链在哪里用，这是两个哲学问题啊。 所以这些名词好像就是<b>初级前端</b>和<b>中级前端</b>的一道<b>分水岭</b>，年轻的前端不是无法掌握闭包，而是没有接触使用闭包的<b>场景</b>。如果项…\n\n<a href=\"/question/53100150/answer/133744066\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-11-30\" target=\"_blank\" href=\"/question/53100150/answer/133744066\">编辑于 2016-12-01</a></p>\n\n",
    "link": "https://zhihu.com/question/53100150/answer/133744066"
  },
  {
    "question": "\n初创团队的交互设计和视觉设计和前端 UI 谁来做？\n",
    "author": "范凌",
    "content": "\n\n<textarea hidden class=\"content\">设计成为科技创业企业不可或缺的一部分，用户体验成为界定产品好坏的决定性因素。&lt;br&gt;首先讲讲创业公司需要什么设计？对初创公司最直接结果来看，包括两种设计：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;品牌设计：&lt;/b&gt;包括标识、名片、信头、T恤、宣传资料等。很多创业者会因为时间和经费的原因忽视品牌的作用。其实在产品被验证之前，品牌是最能够表达创始人的使命、价值、性格的。品牌设计的关键是标识和一套标识使用的规范，当然对于科技创业企业来说，我认为品牌设计与传统机构所使用的有不同，我会在最后阐述。&lt;/li&gt;&lt;li&gt;&lt;b&gt;产品设计：&lt;/b&gt;网页或移动端主要是界面设计，硬件再加上工业设计，O2O的产品还包括服务设计。总而言之，产品设计包括两个方面的问题：第一，一个产品是否能够解决某个特定的问题；第二，一个产品是否能够创造极致的用户体验？&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic4.zhimg.com/3f192cf6588ce72dfc34a1af4ff60b93_b.jpg&quot; data-rawwidth=&quot;938&quot; data-rawheight=&quot;456&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;938&quot; data-original=&quot;https://pic4.zhimg.com/3f192cf6588ce72dfc34a1af4ff60b93_r.jpg&quot;&gt;（Google的品牌设计）&lt;br&gt;最理想的科技企业解决设计问题的方式有三种：&lt;br&gt;&lt;ol&gt;&lt;li&gt;在创始团队中就加上设计的基因。Airbnb、Pinterest、Kickstarter、小米等一系列的创业企业有什么共性？他们都有设计师作为创始人，我也很看好设计师创业。失败的案例也有，比如Fab，和最近越来越不得志的Path。&lt;/li&gt;&lt;li&gt;在产品开发团队由设计师领衔。最好的案例是苹果，Jony Ive已经成为后乔布斯时代苹果最重要的代表人物。Facebook、Google、小米最近一两年都有收购设计公司和团队，把设计融入产品开发。&lt;/li&gt;&lt;li&gt;找最好的设计师合作，比如锤子手机所合作的ammunition（Robert Brunner），Jawbone合作的Fuseproject（Yves Béhar）。&lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic2.zhimg.com/a4ffc6b185fe02ea804edfba46244d09_b.jpg&quot; data-rawwidth=&quot;670&quot; data-rawheight=&quot;447&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;670&quot; data-original=&quot;https://pic2.zhimg.com/a4ffc6b185fe02ea804edfba46244d09_r.jpg&quot;&gt;(最著名的设计师创始人：Airbnb的创始人Brian Chesky和Joe Gebbia，两位都是罗德岛设计学院平面设计专业毕业生）&lt;br&gt;--&lt;br&gt;这三种方式对还处于早期的创业团队来说还是比较困难的，第1、2种都需要缘分，第3种需要高昂的预算。那么是否还有第4种更可以操作的方式？&lt;br&gt;&lt;br&gt;在回答这个问题之前，我先介绍一下不同等级的设计师的能力区别，稍后可以来个“田忌赛马”。举个例子：比如有个初创公司需要增加用户注册数。&lt;br&gt;&lt;ul&gt;&lt;li&gt;初级的设计师会设计好注册页面，这个是一个“美工”的工作，假设注册页面是鼓励用户注册的必然方式；&lt;/li&gt;&lt;li&gt;中级的设计师会设计有趣的注册“体验”；&lt;/li&gt;&lt;li&gt;高级的设计师会设计一个“系统”，这个系统会和运营、产品策划和用户提议一起协同，确保在整个产品的体验中，用户注册自然而然。&lt;/li&gt;&lt;li&gt;再往上就是设计师合伙人，增加用户注册需要了解现在是什么用户在注册？哪些人还没有注册？在一个安卓系统安全app的案例中，用户最大规模的获取可能不在于改变现在产品的任何部分，而在于设计一个新的形象，这个形象会吸引那些对安卓安全完全没有概念的女性和长者。总而言之，越是高级的设计师越是处理抽象的问题。&lt;/li&gt;&lt;/ul&gt;--&lt;br&gt;如果早期团队（B轮之前）需要一个多快好省的解决方案，我会做如下建议：&lt;br&gt;&lt;ul&gt;&lt;li&gt;同时要做品牌和产品两个部分的设计；&lt;/li&gt;&lt;li&gt;品牌部分的设计可以外包，好处是：a、品牌设计的工作时间在1-2个月左右，不必为此专门招设计师，不论是工资支出还是为此付出的招人时间支出都不值得；b、好的品牌设计需要非常优秀的设计师，这些人很难成为团队的一员，更有可能以项目合作的方式。&lt;/li&gt;&lt;li&gt;品牌设计除了常规的企业视觉传达（logo、名片、信纸、服装等）外，还需要包括两个部分内容：a、品牌宣传资料和模板，比如：创始人的pitch deck，易拉宝、海报等的板式、字体等；b、需要设计网页或者App产品的核心页面。这部分特别重要，因为产品本身可能会不断迭代，用外包的方式不合适。但是通过几个核心页设计产品的框架和UI导则。&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic1.zhimg.com/7155f6b146c6a2c1d2264abc031d8588_b.jpg&quot; data-rawwidth=&quot;1600&quot; data-rawheight=&quot;781&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1600&quot; data-original=&quot;https://pic1.zhimg.com/7155f6b146c6a2c1d2264abc031d8588_r.jpg&quot;&gt;（medium的UI导则）&lt;br&gt;&lt;br&gt;这样做的好处显而易见，产品的基本逻辑和设计风格都已经有了，从品牌到产品有很强的一致性。更重要的是，这样做可以帮助早期团队精兵简政。与程序员都喜欢和优秀程序员扎堆一样，设计师也喜欢扎堆。早期团队对于设计师的吸引力不大，更可能招到比较初级的设计师，即使如此，通过产品的核心页面和UI导则可以比较容易的和工程师一起完成产品和以后的迭代。&lt;br&gt;--&lt;br&gt;这些经验是我作为很多创业公司的设计顾问，自己设计实践和教学过程中的总结，加之在特赞 | Tezign网站上进行对接案例中总结出来的一些经验，希望对各位创业者有帮助。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/3f192cf6588ce72dfc34a1af4ff60b93_200x112.jpg\" data-rawwidth=\"938\" data-rawheight=\"456\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/3f192cf6588ce72dfc34a1af4ff60b93_r.jpg\">\n设计成为科技创业企业不可或缺的一部分，用户体验成为界定产品好坏的决定性因素。 首先讲讲创业公司需要什么设计？对初创公司最直接结果来看，包括两种设计： <b>品牌设计：</b>包括标识、名片、信头、T恤、宣传资料等。很多创业者会因为时间和经费的原因忽视品牌…\n\n<a href=\"/question/19563871/answer/46482175\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-02\" target=\"_blank\" href=\"/question/19563871/answer/46482175\">编辑于 2015-05-02</a></p>\n\n",
    "link": "https://zhihu.com/question/19563871/answer/46482175"
  },
  {
    "question": "\nBAAS（后端即服务） 是前端的春天吗？还是一片红海？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">感谢邀请。&lt;br&gt;&lt;br&gt;BaaS是对前端的利好，确定无疑。&lt;br&gt;&lt;br&gt;看一看这些年B/S产品的发展，可以看出这么一个规律：页面逐渐应用化。&lt;br&gt;&lt;br&gt;从最早的B/S产品架构看，页面层属于MVC中的V，是由服务端输出的，服务端的输出结果是页面。&lt;br&gt;&lt;br&gt;［M］－［C］－［V］   ｜   浏览器&lt;br&gt;&lt;br&gt;后来逐步AJAX化了之后，也增加了一些输出数据的接口。&lt;br&gt;&lt;br&gt;［M］－［C］－［V / Data］      ｜   浏览器&lt;br&gt;&lt;br&gt;但由于现在的产品一般都带移动端了，对于iOS和Android本地应用来说，它对后端的需求是完全接口化的，这就意味着，之前的图里面，数据接口的部分还要扩大。&lt;br&gt;&lt;br&gt;举例来说，之前的页面可能这样：&lt;br&gt;&lt;br&gt;界面有一个列表，列表的初始部分是服务端查好了，用模板生成，发给浏览器，然后如果后续再有增删，通过AJAX去取增量数据。&lt;br&gt;&lt;br&gt;DAO里面有两个接口，一个是getAllItems，一个是addItem，只有addItem会包装出来暴露给前端，而getAllItems没有暴露出来，只在服务端视图模板层调用了。&lt;br&gt;&lt;br&gt;但现在来了移动端，就不同了，它是本地应用，程序在本地，数据在服务端，不可能在服务端渲染模板了，只能把列表数据发给服务端，这时候就得把列表查询接口也暴露出来了。&lt;br&gt;&lt;br&gt;这时候从Web端看，发现你后端已经把所有接口都暴露出来了，而且随着页面的应用化，SPA等相关技术的兴起，他也逐渐把页面改造，改成不需要后端返回HTML，而是也从接口来，逐渐地，后端就只要提供接口了。&lt;br&gt;&lt;br&gt;然后就形成了前后端的天然分离：&lt;br&gt;&lt;br&gt;后端的服务化，API化&lt;br&gt;前端的多样化，静态化&lt;br&gt;&lt;br&gt;对于移动端来说，它的前端是天然静态的，对于Web端来说，它的形态就逐渐变成纯静态HTML，然后整个系统的所有页面代码，都是静态的HTML，JS，CSS，都能往CDN上放，访问更加快速了。&lt;br&gt;&lt;br&gt;在这个时候，BaaS有什么好处呢？&lt;br&gt;&lt;br&gt;最近这些年，我们可以看到一个规律，那就是前端更加多样化，而后端其实更容易抽象。比如说，后端提供的就是数据存取（有模式或者无模式，后者越来越流行），数据推送，实时通信等等，这些都是可以抽象化的，可以以一种比较直观的方式配置出来，生成接口，前端能够专注实现各种拉风效果。&lt;br&gt;&lt;br&gt;这几年创业团队越来越多，对于这些人来说，用IaaS有很大制约，他必须先买服务器，配置子网络，负载均衡，防火墙，IP映射，搭建环境，配置数据库，编写数据访问层，等等等等，而这一切，只是为了能让他的Web界面或者移动端能存储少量数据。这个过程浪费的精力太可怕了，要知道，本来两个人一周能做好的原型，很可能因为这些，又多花了一个月。&lt;br&gt;&lt;br&gt;但是有BaaS就不同了，比如用LeanCloud，就直接用它的SDK，后端存储什么都不用担心。又比如想要应用内社交，即时通信，都可以用现成组件，只需调用即可，除非这个产品有很差异化的需求，80%是不需要再自己搞服务端的，这当然是非常好的事。&lt;br&gt;&lt;br&gt;现在假设有做前端，或者移动端的人创业，之前他不得不拉上一个后端，不然自己就不得不去做那些不熟悉的事情，折腾各种服务器，现在有BaaS，他所有事情都在自己的专业技能范围内，效率当然是很高，对他当然是大大的利好了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n感谢邀请。 BaaS是对前端的利好，确定无疑。 看一看这些年B/S产品的发展，可以看出这么一个规律：页面逐渐应用化。 从最早的B/S产品架构看，页面层属于MVC中的V，是由服务端输出的，服务端的输出结果是页面。 ［M］－［C］－［V］ ｜ 浏览器 后来逐步AJAX化…\n\n<a href=\"/question/27087120/answer/35255408\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-12-16\" target=\"_blank\" href=\"/question/27087120/answer/35255408\">编辑于 2014-12-16</a></p>\n\n",
    "link": "https://zhihu.com/question/27087120/answer/35255408"
  },
  {
    "question": "\nECMAScript 6 会重蹈 ECMAScript 4 的覆辙吗？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">完全赞同 &lt;a data-title=&quot;@尤雨溪&quot; data-editable=&quot;true&quot; class=&quot;member_mention&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt; 的答案。补充几点：&lt;br&gt;&lt;br&gt;1. ES3之后的JS语言进化的尝试很早就开始了，同时有若干个方案，有具体实现的包括&lt;a href=&quot;//link.zhihu.com/?target=http%3A//JScript.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;JScript.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;、ActionScript 3等。但作为ES4/JS2而为人所知的，是Mozilla的草案。草案本身不是BE写的，而是Waldemar Horwat。对这个草案到现在我还留有深刻印象的一个有趣特性就是基于namespace的API version。&lt;br&gt;&lt;br&gt;2. 2005年开始重启ES4/JS2，实际上抛弃了Mozilla的草案，而转而以ActionScript 3为基础，当时Mozilla和Adobe走得很近，Adobe还开源了自己的VM送给Mozilla。这草案在某些方面比现在的ES6要走得更远，比如有相当强大的类型系统，支持泛型、nullable、interface、union type等——当然从现在的趋势看，ES7或ES8早晚会加入这些东西。这草案也继承了老的Mozilla JS2草案中的一些特性。比如前面提到的namespace——这特性与C++/C#中的namespace不同，我理解更接近某种弱化的annotation，比如public/private是以内置namespace实现的。&lt;br&gt;&lt;br&gt;3. ES4被干掉我个人觉得很大程度上是“政治”原因而非技术原因。注意本段均为带有强烈个人观点的阴谋论叙述。事情发生变化就是起于Macromedia被Adobe收购。当时Flash平台如日中天，Adobe收购MM之后一下子成为了足以和微软对抗的巨头——既有垄断性平台，又有极其完整的涵盖从设计到开发所有工具的产品线。现在连Web唯一的开发语言都要以AS3为底本了！这个时候，搅屎棍DC出现了。他作为Yahoo!这个落后生产力的公司代表的个人代表，以其技术偏见为由，私下找到微软密谋。微软正愁如何对付Adobe，这下一拍即合，当即由DC为主炮制了ES 3.1出来跟ES4分庭抗礼，为此连自家的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//JScript.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;JScript.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;也做了炮灰。另一方面，自大的Adobe却似乎在梦游，除了傻兮兮的拿ES4作为广告标签来宣传自己的AS3（当然后来被叫停，但也已造成社区对其的不满），在ECMA TC39中却听不到它们的声音——我一直都没搞清在ECMA TC39中谁是Adobe的代表。在关键公司中，Google当时还没有进入此领域（V8是2008年开始的），Apple还处在复兴前夜（iPhone是2007年发布的，WebKit在2005年刚刚开源），Opera从来就没有什么话语权，Adobe在梦游……网站方面，今天引领Web开发的Facebook和Twitter当时不知道在干什么，唯一代表Yahoo!就那个德行。在开发者社区这里，当时Node还没出现（2009年），JS语言社区主要都是缺乏语言设计和大型编程经验的网页开发者，水平低、容易忽悠。总之，能决定JS未来的，只有Mozilla和Microsoft，或者说只有微软——因为此时Microsoft在浏览器相关领域仍然具有垄断话语权。于是，DC狐假虎威，BE孤掌难鸣，后来发生的事情就像 &lt;a data-title=&quot;@尤雨溪&quot; data-editable=&quot;true&quot; class=&quot;member_mention&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt; 描述的那样了。&lt;br&gt;&lt;br&gt;4. 客观的说，ES5除了从ES4中吸收的get/set之外，都只是小小的补丁，就这么些东西，折腾了好几年，实在是作死的节奏，极端让人失望。要不是Node横空出世和Web App大爆发，JavaScript的前景还真是一片灰暗。&lt;br&gt;&lt;br&gt;5. 我还是很敬佩BE的。虽然他被DC摆了一道，让整个语言发展大开倒车，当时连我都觉得不能忍，但是他还是找到了妥协（Harmony）的道路。ES3.1改名为ES5其实有僭越（就这么点东西好意思叫ES5？），但是也为ES6铺平了道路。ES4草案中还是有相当数量的特性最终被ES6继承了。包括 let、destructuring assign、generator 等。另一些特性则以更好的方式重生，如 ES6 module 之于 ES4 package，ES6 Symbol 之于 ES4 namespace 等。其他那些特性如 array comprehensions、运算符重载、decimal类型等，无论会不会在未来加入，自ES6开始的语言进化的道路已经确定，不再是搅屎棍或某个公司所能阻碍的了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n完全赞同 <a data-title=\"@尤雨溪\" data-editable=\"true\" class=\"member_mention\" href=\"//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f\" data-hash=\"cfdec6226ece879d2571fbc274372e9f\" data-hovercard=\"p$b$cfdec6226ece879d2571fbc274372e9f\">@尤雨溪</a> 的答案。补充几点： 1. ES3之后的JS语言进化的尝试很早就开始了，同时有若干个方案，有具体实现的包括<a href=\"//link.zhihu.com/?target=http%3A//JScript.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">JScript.NET</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>、ActionScript 3等。但作为ES4/JS2而为人所知的，是Mozilla的草案。草案本身不是BE写的，而是Waldemar Horwat。…\n\n<a href=\"/question/24715618/answer/34813745\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/24715618/answer/34813745\">发布于 2014-12-09</a></p>\n\n",
    "link": "https://zhihu.com/question/24715618/answer/34813745"
  },
  {
    "question": "\nJavaScript一个疑问，[ ] （空数组）== true ? 请看问题说明。\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">JavaScript spec的规定其他答案已经详细描述了，我讲一下概念模型上如何理解这件事情。&lt;br&gt;&lt;br&gt;&lt;br&gt;隐式转换能让你的代码更为简洁，比如针对boolean的隐式转换，让 if 语句中的表达式变得更短。但隐式的东西也会带来理解成本。&lt;br&gt;&lt;br&gt;不同语言对类型隐式转换的限制程度是不一样的。有些语言强调严格，比如 Java / C# 里，if 语句的表达式必须严格返回 boolean。有些语言则很宽松，甚至允许自定义隐式转换的规则。&lt;br&gt;&lt;br&gt;JavaScript 由于历史原因，相对来说是比较宽松的，它为所有的类型都定义了到 boolean 的隐式转换规则，即所谓 truthy （被隐式转换为 true）和 falsy（被隐式转换为 false）。但是并不允许自定义 boolean 隐式转换。依照规则，所有的对象都是 truthy 的，即使是空数组或空对象。&lt;br&gt;&lt;br&gt;到 boolean 的隐式转换，服务于所有需要 boolean 值的地方，比如 if、while 等语句，&amp;amp;&amp;amp;、|| 等逻辑运算。&lt;br&gt;&lt;br&gt;但是boolean隐式转换并不作用于 == 和 != 等比较运算。比较运算依赖的是对象到number/string值的隐式转换。在其他语言里，对比较运算的自定义行为通常通过运算符重载或者通过equals()约定。然而JS却并非如此。JS选择了通过允许自定义对象到number/string值的隐式转换来间接的自定义比较运算的行为。&lt;br&gt;&lt;br&gt;这种设计本身其实倒没有什么太大的问题。之所以理解起来略困难，是因为比较运算同时考虑了许多的因素，如考虑对象的两种隐式转换，一种是转换为number，一种是转换为string，但又排除了其他隐式转换如到boolean的。因此产生了如题主感觉的不一致的困惑。&lt;br&gt;&lt;br&gt;我们来看 &lt;a data-hash=&quot;46ae003a00d8a91ea559901d4d108c54&quot; href=&quot;//www.zhihu.com/people/46ae003a00d8a91ea559901d4d108c54&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@lunarorbitx&quot; data-hovercard=&quot;p$b$46ae003a00d8a91ea559901d4d108c54&quot;&gt;@lunarorbitx&lt;/a&gt; 所贴规则：&lt;br&gt;&lt;blockquote&gt;—如果一个值是null，另一个是undefined，则它们相等。&lt;br&gt;—如果一个值是数字，另一个是字符串，先将字符串转换成数字，然后使用转换后的值进行比   较。&lt;br&gt;—如果其中一个值是true，则将其转换为1再进行比较。如果其中一个值是false，则将其转换为0再进行比较。&lt;br&gt;—如果一个值是对象，另一个值是数字或字符串，则将对象转换为原始值，然后再进行比较。&lt;br&gt;—其他类型之间的比较均不相等。&lt;/blockquote&gt;看起来只是一条条规则，但是这些规则的目的是满足以下的 use cases（按照重要程度排序）：&lt;br&gt;&lt;br&gt;1. 空值测试：空值（null、undefined） ≠ 非空值（所有不是null、undefined的值）&lt;br&gt;典型代码： if (x == null) ...&lt;br&gt;&lt;br&gt;2. 数值比较：数值（number）与另一个数值（number以及可转换为number的字符串或对象）之间的相等性比较，且数值（number） ≠ 非数值（NaN、无法转换为数值的字符串和对象）&lt;br&gt;典型代码： if (x == 42) ...&lt;br&gt;注意，数值大小比较也遵循一样的规则：if (x &amp;gt; 42) ...&lt;br&gt;&lt;br&gt;3. 字符串比较：字符串（string）与另一个字符串（string以及对象的string形式）之间的相等性比较&lt;br&gt;典型代码：if (s == 'ok') ...&lt;br&gt;注意，字符串顺序比较也遵循一样的规则：if (s &amp;gt; 'A') ...&lt;br&gt;&lt;br&gt;4. 同一引用测试：是否引用了相同对象&lt;br&gt;典型代码：if (target == obj) ...&lt;br&gt;&lt;br&gt;你可以发现其中并没有boolean，boolean直接被当成了1（true）和0（false）的数值，按照数值比较处理。这是因为，（语言设计者认为）你通常不会（也不应该）写 if (x == true) ... ，而是直接写 if (x) ... 。我们极少需要比较两个布尔测试结果是否相等（即是否同为truthy或falsy），更多的情况是分别判断同为truthy（a &amp;amp;&amp;amp; b）和同为falsy（!a &amp;amp;&amp;amp; !b）的情况。如果真的比较两个值的相等性，其中一个为boolean，另一个为非boolean值，更符合直觉的结果显然是false（不等）。至于0/1视同为false/true，是由于C以及许多语言（如perl、python等）传统上没有单独的boolean类型，而直接用0/1。&lt;br&gt;&lt;br&gt;&lt;br&gt;以上解释了 == 隐式转换规则背后的原因。简单来说，题主看到的矛盾不在这个设计所针对的主要use cases之列。实际上 == 隐式转换规则必然带来某些矛盾之处，比如放弃了相等的传递性（即a == b，b == c 但不保证 a == c）。&lt;br&gt;&lt;br&gt;最后，即使完全理解了 == 隐式转换的所有规则，我还是建议尽量避免使用 == 和 != 运算符。truthy/falsy的隐式转换基本不会造成什么工程上的负面影响，但是 == 背后的隐式转换却不然，参见：&lt;a href=&quot;https://www.zhihu.com/question/31442029/answer/77931120&quot; class=&quot;internal&quot;&gt;Javascript 中 == 和 === 区别是什么？ - 贺师俊的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;前述的 use cases，&lt;br&gt;数值比较或字符串比较，直接用 === ，必要时显式调用 parseInt、parseFloat、valueOf、toString 等；&lt;br&gt;同一引用测试，直接用 === ；&lt;br&gt;只有空值测试，因为机制比较简单，可仍然用 x == null，不过也可以使用 x === null || x === undefined 这更明确的写法。&lt;br&gt;&lt;br&gt;&lt;br&gt;完。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nJavaScript spec的规定其他答案已经详细描述了，我讲一下概念模型上如何理解这件事情。 隐式转换能让你的代码更为简洁，比如针对boolean的隐式转换，让 if 语句中的表达式变得更短。但隐式的东西也会带来理解成本。 不同语言对类型隐式转换的限制程度是不一…\n\n<a href=\"/question/47555543/answer/106644151\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/47555543/answer/106644151\">发布于 2016-06-18</a></p>\n\n",
    "link": "https://zhihu.com/question/47555543/answer/106644151"
  },
  {
    "question": "\n做前端如何克服新技术焦虑？\n",
    "author": "貘吃馍香",
    "content": "\n\n<textarea hidden class=\"content\">药我这问题干啥&lt;br&gt;题主说的新技术我一个都不会啊&lt;br&gt;&lt;br&gt;这个圈儿挺怪的&lt;br&gt;头半年是怎么都得搞新技术&lt;br&gt;不整新技术就是low&lt;br&gt;后半年这风儿就刮到得基础好了&lt;br&gt;貌似新技术就是看看就行了的架势&lt;br&gt;基础不好才是low&lt;br&gt;&lt;br&gt;这圈里的个别货能不能别老揣着明白装糊涂&lt;br&gt;动不动就搞偏激&lt;br&gt;整新闻&lt;br&gt;&lt;br&gt;其实是并重的&lt;br&gt;新技术通常是用来解决复用问题&lt;br&gt;其实也就是说的开发效率工程效率问题&lt;br&gt;这跟个人技术水平成长关系不大&lt;br&gt;&lt;br&gt;如同国内合资车厂&lt;br&gt;引进流水线设备与部件解决的是生产效率问题&lt;br&gt;但是&lt;br&gt;如果没有自主发动机等技术&lt;br&gt;仅仅有以上这些&lt;br&gt;只是给外资打工罢了&lt;br&gt;只能满足于组装速度&lt;br&gt;永远不可能做成世界品牌&lt;br&gt;&lt;br&gt;梅赛德斯奔驰引擎是不仅可以用于机动车上的&lt;br&gt;还能用作为战斗机引擎&lt;br&gt;这就是自主技术的通用性&lt;br&gt;&lt;br&gt;如果你在部件与流水线设备上迷茫&lt;br&gt;那肯定是你欠缺了其相关知识&lt;br&gt;&lt;br&gt;“如果选择了xxx，或许就不用这么麻烦了...“&lt;br&gt;等自然而然的换成&lt;br&gt;“如果用自己写的xxx，这bug可能就不会有，也就不用看丫是怎么实现的这么麻烦了“&lt;br&gt;那你就可以对流水线设备选择不迷茫了</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n药我这问题干啥 题主说的新技术我一个都不会啊 这个圈儿挺怪的 头半年是怎么都得搞新技术 不整新技术就是low 后半年这风儿就刮到得基础好了 貌似新技术就是看看就行了的架势 基础不好才是low 这圈里的个别货能不能别老揣着明白装糊涂 动不动就搞偏激 整新闻…\n\n<a href=\"/question/46820352/answer/104903062\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-06-08\" target=\"_blank\" href=\"/question/46820352/answer/104903062\">编辑于 2016-06-08</a></p>\n\n",
    "link": "https://zhihu.com/question/46820352/answer/104903062"
  },
  {
    "question": "\n前端使用面向对象式编程 还是 函数式编程 针对什么问题用什么方式 分别有什么具体案例？\n",
    "author": "戴嘉华",
    "content": "\n\n<textarea hidden class=\"content\">bark居然有两个参数？人家都是先把它 curry 化，把它变成 one-argument pure function&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;咦？dog 实例呢？哈哈，fp 哪有数据。&lt;br&gt;&lt;br&gt;=============== 分割线 ===============&lt;br&gt;FP 其实挺适合前端开发，JavaScript 有 First-Class Function，使得函数可以用变量存储起来；函数也可以作为参数传入函数，也可以作为函数的返回结果（所谓的 Higher-Order Function）。这样就使得 JS 可以使用很多 FP 的玩法。&lt;br&gt;&lt;br&gt;FP 的 Pure Function 的概念我觉得在前端非常适用。一个函数的计算返回结果只依赖于它本身的参数，并且它在计算的过程中没有对外部的状态进行修改（也就是传说中的没有副作用），那么就可以把这个函数称之为 Pure Function。&lt;br&gt;&lt;br&gt;举个例子：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// impure&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pure&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changeInnerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'good'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// impure&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;add 函数计算过程中依赖外部变量 a， 所以你调用它的时候根本不知道它会返回什么样的结果；而 add2 则不会，因为它的结算结果只依赖于它的两个参数。然而 changeInnerHTML 函数也是 impure 的，因为它修改了 DOM 的状态，也就是产生了“副作用”。&lt;br&gt;&lt;br&gt;前端工程的复杂性其实主要是由状态管理造成的。用户点击某个按钮，页面显示 Loading，然后发送请求去后台请求数据，最后在页面上进行显示。这个过程你需要维护一个加载的状态，后台的数据，页面的状态。假设你现在写了好几个函数，这几个函数都可以修改这些状态，那么你就需要小心翼翼地，因为你根本不知道哪些函数会改掉某个变量。当你查看某个函数的逻辑的时候，你可能需要翻越很长的代码去看看另外那个函数对这个变量做了什么。所以我觉得有句话说得很有道理：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;Shared mutable state is the root of all evil&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;但是状态修改是无法避免的（你肯定要操作 DOM 对吧），但是我们可以尽量减少共享状态，尽量多地写 Pure Function。Pure Function 可以组成另外的 Pure Function，然后小心翼翼地用一个 Impure Function 把数据灌进去，然后把计算结果小心翼翼地灌倒另外一个 Impure Function 里面。重点就是尽量地把没有副作用的 Pure Function 当作是管道那样连接起来，数据流过这些管道。&lt;br&gt;&lt;br&gt;这里有两个比较重要的地方，一个是 composition，一个是 currying。currying 帮助你实现 one-argument function，一个参数的函数。composition 帮助你实现 one-argument 的函数拼接。&lt;br&gt;&lt;br&gt;这样做好处多多：&lt;br&gt;&lt;br&gt;1. 代码高度模块化，复用性强&lt;br&gt;2. Pure Function 的可测试性无敌&lt;br&gt;3. 维护代码成本降低，大脑负载降低。因为对于 Pure Function 你根本不用在乎外部的变量。&lt;br&gt;4. 声明式编程可以让你在更高的思维层次进行编码&lt;br&gt;&lt;br&gt;感觉 currying 和 composition 可以重点讲讲。&lt;br&gt;&lt;br&gt;&lt;b&gt;currying&lt;/b&gt;&lt;br&gt;&lt;br&gt;估计很多人刚学 JS 的时候都学过这玩意儿：&lt;br&gt;&lt;br&gt;两个数相加：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;但是现在每次都要传 a, b 进去，如果我现在实现一个 +1 的功能，每次都要 add (a, b)，我们可以把这个函数 currying 化：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;现在 add(1) 会返回一个函数，而不是直接计算结果。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这样就很好了，我们把一个函数的参数从两个变成了一个。使用这种技术，我们可以把一个多参数的函数搞成一个参数的函数。虽然你学过 currying ，但是可能根本没用过，但是 currying 技术非常好用实用（本人天天用，安利一波）。而实际上，有很多第三方的库可以帮我们把一个函数 currying 化。例如大名鼎鼎的 lodash：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lodash/fp'&lt;/span&gt;\n\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;add1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// =&amp;gt; 4&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;所以，对于阮老师的栗子我觉得更好的写法是：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lodash/fp'&lt;/span&gt;\n\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;现在 barkLoudly 是一个 one-argument function了。&lt;br&gt;&lt;br&gt;&lt;b&gt;composition&lt;/b&gt;&lt;br&gt;&lt;br&gt;composition 指的就是函数之间的组合，可以让你把各个 one-argument pure function 像管道那样连接起来。例如你要让一条狗叫，你先要有一个条狗，所以你先要有钱买狗。从大局上来看，我们输入的是 money 输出的是狗叫。这就是我们的大局的 pure function，而这个 pure function 是由几个的 pure function 组合而成。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeMoney&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyOneDog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...})&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyLabrador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyOneDog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Labrador'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dogApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buyLabrador&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;makeMoney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;\n\n&lt;span class=&quot;nx&quot;&gt;dogApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;在这个例子里面，我们把 buyOneDog currying 化了，两个参数变成了一个参数的 buyLabrador，所以这代码的含义就是，用了三千块买了一只拉布拉多，它叫得很大声。&lt;br&gt;&lt;br&gt;但是 f(g(h())) 这种方式看着实在蛋疼，其实它就是把一个函数的结果作为参数传入另一个函数，再把结果传给另外一个函数，如此往复。而也有现成的 lib 帮我们让它变得更好看一点：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dogApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyLabrador&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeMoney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// === const dogApp = (money) =&amp;gt; barkLoudly(buyLabrador(makeMoney(money)))&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;所以完整的写法应该是：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lodash/fp'&lt;/span&gt;\n\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;how&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;who&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeMoney&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...}&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyOneDog&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;curry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;money&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...})&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyLabrador&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyOneDog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Labrador'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dogApp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;barkLoudly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buyLabrador&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeMoney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n\n&lt;span class=&quot;nx&quot;&gt;dogApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;看到了吗，除了最后一行调用，其他都是函数。认真地观察，可以看到一个整数3000是怎么流过一个管道变成另外一个东西，然后再流过另外一个管道，最后变成了狗叫。&lt;br&gt;&lt;br&gt;还有很多玩法，甚至还可以玩 monad。待续再写写...</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nbark居然有两个参数？人家都是先把它 curry 化，把它变成 one-argument pure function const bark = _.curry((how, who) =&gt; { ... })\nconst barkLoudly = bark(loudly) 咦？dog 实例呢？哈哈，fp 哪有数据。 =============== 分割线 =============== FP 其…\n\n<a href=\"/question/42094770/answer/93689490\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-04-04\" target=\"_blank\" href=\"/question/42094770/answer/93689490\">编辑于 2016-04-05</a></p>\n\n",
    "link": "https://zhihu.com/question/42094770/answer/93689490"
  },
  {
    "question": "\n如何评价 Webpack 2 新引入的 Tree-shaking 代码优化技术？\n",
    "author": "顾轶灵",
    "content": "\n\n<textarea hidden class=\"content\">看了一篇 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//rollupjs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rollup.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 作者解释 tree-shaking 的文章：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//medium.com/%40Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80%23.1ndfj9dqd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tree-shaking versus dead code elimination&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;br&gt;在 JS 中的这种 tree-shaking 是他命名的。webpack 中应该是类似的做法，就先说说 rollup.js。&lt;br&gt;&lt;br&gt;首先，rollup.js 的 tree-shaking 不光是模块级别的，但是也仅处理了顶层 AST。（比 CommonJS/AMD 的按需打包稍细，但不深入 AST 更深层的部分）。Tree-shaking 是无用代码移除（DCE, dead code elimination）的一个方法，但和传统的方法不太一样。Tree-shaking 找到需要的代码，灌入最终的结果；传统 DCE 找到执行不到的代码，从 AST 里清除。（在我看来传统的这种方式更应该被称为 tree-shaking，即摇一下把 AST 中的 dead branch 给抖下来。）作者还用了一个和 DCE 相对应的说法：Live code inclusion。这种方式在目前流行的模块式开发、最后通过 entry 打包出 bundle 的模式下，才有实际意义。&lt;br&gt;&lt;br&gt;有人总结了一个定义：DCE 消灭不可能执行的代码，tree-shaking 消灭没有用到的代码。作者表示这个定义可以接受。但他表示，因为 tree-shaking 还不完善，所以建议使用中最好先用 rollup.js 再过 UglifyJS。&lt;br&gt;&lt;br&gt;webpack 支持 tree-shaking 以后，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//rauschma.de/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Axel Rauschmayer&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 写了个 webpack + Babel 进行 tree-shaking 的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.2ality.com/2015/12/webpack-tree-shaking.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;例子&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：&lt;br&gt;&lt;br&gt;helpers.js&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;main.js&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./helpers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'output'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;在配合 Webpack + Babel 编译后，输出的 bundle 中，helper 模块代码如下：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__webpack_require__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    \n        &lt;span class=&quot;cm&quot;&gt;/* harmony export */&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;cm&quot;&gt;/* unused harmony export bar */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    \n        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;可以看出 exports 中已经没有了 bar 这个方法，于是再配合简单的代码压缩：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;    function (t, n, r) {\n        function e() {\n            return &quot;foo&quot;\n        }\n    \n        n.foo = e\n    }\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;bar 的代码就被干掉了。&lt;br&gt;&lt;br&gt;而这个例子在 rollup 里，最终以 IIFE 语法输出的整个 bundle 是这样的：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'foo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'output'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;我个人的理解是，在你需要处理的代码对外不产生副作用时， tree-shaking 效果还不错，rollup.js 生成的 bundle 会更小一些。看一下它的在线 demo 就知道，模块合并以后都在同一个作用域下，直接用变量名就可以访问各个模块的接口；而不是 webpack 这样每个模块外还要包一层函数定义，再通过合并进去的 define/require 相互调用。Tree-shaking 不是代码压缩，所以还是得配合压缩工具来用。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n看了一篇 <a href=\"//link.zhihu.com/?target=http%3A//rollupjs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">rollup.js<i class=\"icon-external\"></i></a> 作者解释 tree-shaking 的文章：<a href=\"//link.zhihu.com/?target=https%3A//medium.com/%40Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80%23.1ndfj9dqd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Tree-shaking versus dead code elimination<i class=\"icon-external\"></i></a>。 在 JS 中的这种 tree-shaking 是他命名的。webpack 中应该是类似的做法，就先说说 rollup.js。 首先，rollup.js 的 tree-shaking 不光是模块级别的，但是也…\n\n<a href=\"/question/41922432/answer/93068390\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-03-31\" target=\"_blank\" href=\"/question/41922432/answer/93068390\">编辑于 2016-03-31</a></p>\n\n",
    "link": "https://zhihu.com/question/41922432/answer/93068390"
  },
  {
    "question": "\n若想学 HTML，应从哪里入手？\n",
    "author": "陈贤安",
    "content": "\n\n<textarea hidden class=\"content\"> HTML 是一门标记语言，学习 HTML 就是学习它的标签代表什么意思，以及如何使用这些标签将内容组织起来。完全不用学编程语言。只需要一本书：O'Reilly 的《HTML &amp;amp; XHTML权威指南》。把书翻完，然后随便从网上找一篇有标题、列表、表格等结构组成稍微复杂的文章，用 HTML 组织起来，你就算入门了。&lt;br&gt;&lt;br&gt;接下来，你要学会美化你精心组织起来的文章，买一本同是 O'Reilly 的《CSS 权威指南》。&lt;br&gt;&lt;br&gt;如果你想要网页动起来，买一本也是 O'Reilly 的《JavaScript 权威指南》。&lt;br&gt;&lt;br&gt;当你用心看完这三本书，你已经是合格的前端工程师了。 </textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nHTML 是一门标记语言，学习 HTML 就是学习它的标签代表什么意思，以及如何使用这些标签将内容组织起来。完全不用学编程语言。只需要一本书：O'Reilly 的《HTML &amp; XHTML权威指南》。把书翻完，然后随便从网上找一篇有标题、列表、表格等结构组成稍微复杂的文…\n\n<a href=\"/question/19753196/answer/12853584\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-07-06\" target=\"_blank\" href=\"/question/19753196/answer/12853584\">编辑于 2011-07-06</a></p>\n\n",
    "link": "https://zhihu.com/question/19753196/answer/12853584"
  },
  {
    "question": "\nVue.js会一直维护吗？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">1. 会持续维护。&lt;br&gt;2. 建议你们上 GitHub 看下 Vue 的 commit 数量、持续时间、issue 的数量和修复速度。同类框架里面做到长期保持个位数甚至 0 可重现 bug 的也就 Vue 了。&lt;br&gt;3. Vue 已经开发了一年半以上了，国外很多用于生产环境的用例，并不是什么刚流行起来的玩具。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n1. 会持续维护。 2. 建议你们上 GitHub 看下 Vue 的 commit 数量、持续时间、issue 的数量和修复速度。同类框架里面做到长期保持个位数甚至 0 可重现 bug 的也就 Vue 了。 3. Vue 已经开发了一年半以上了，国外很多用于生产环境的用例，并不是什么刚流行起…\n\n<a href=\"/question/35352200/answer/62358753\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-09-05\" target=\"_blank\" href=\"/question/35352200/answer/62358753\">编辑于 2015-09-05</a></p>\n\n",
    "link": "https://zhihu.com/question/35352200/answer/62358753"
  },
  {
    "question": "\n参加2015年8月8日上海第二届 CSS Conf 大会是个什么样的体验？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">职业写流水账的来了！&lt;br&gt;&lt;br&gt;这次首先说正事吧，我CSS方面比较薄弱，只能尽自己可能去听了，说得不对的欢迎大家打我。&lt;br&gt;&lt;br&gt;一、手机淘宝CSS实践启示录&lt;br&gt;&lt;br&gt;这个主题是勾股讲的，老朋友了，内容我感觉很不错。主要讲的是屏幕适配，采用何种方式作为基准，然后不同比例的屏幕，采取横向固定，纵向断点（响应式）的思路。另外对于字体部分，需要特殊对待，在更大文字跟更多内容之间权衡，所以整个方案，布局之类都是用的相对的大小，而字体是用px比较合适。&lt;br&gt;&lt;br&gt;二、New W3C CSS Checker&lt;br&gt;&lt;br&gt;著名老外Mike Smith讲的，并且配有职业翻译，著名的高博同学。其实这个主题不翻译也没关系的，只是可能大家会抓不住笑点。高博翻译得挺好。&lt;br&gt;&lt;br&gt;这个东西主要是用来检查CSS的一些编写错误，比如说，拼写错误，漏掉的分号，括号之类，或者属性名，属性值写错。老版本的这个东西，是Java写的，而且很多年不维护了，跟不上形势的发展，所以打算搞新的。&lt;br&gt;&lt;br&gt;另外提到Mozilla也在搞新的浏览器核心，忘了叫什么了，用于取代Gecko，使用Rust写的，之前版本是C++。然后谈了一阵Rust，这个东西的好处我大致知道，语法感觉像C++跟Go之类的合体？目前这个新核心支持到CSS2.1，我感觉进度还是不乐观啊，虽然两年做到这个程度，但是要追上现在的版本，那还得好多好多好多年吧，毕竟后面东西比以前的多多了？（我说得不对请打我，这是个人认知）&lt;br&gt;&lt;br&gt;三、企业CSS应用&lt;br&gt;&lt;br&gt;这个主题，感觉标题起得不好，而且内容不够格叫这个标题。在我看来，如果讲这个标题，至少要有一半篇幅花在样式与组件的合作、工作流程、压缩合并策略等方面，但实际上只谈了非工程化的方面。&lt;br&gt;&lt;br&gt;其他部分没有什么特别的，有一点是很好的，就是强调了attribute选择器的使用，觉得应当优先用它，而不是class。这一点对我很有启发，而且我觉得说得非常有道理。他用angular的一个directive演示了例子，我觉得不光angular，就算是其他不管什么框架实现的自定义属性都是可以的，比如vue。&lt;br&gt;&lt;br&gt;用属性选择器，确实可以把选择器组织得精炼很多，而且复用粒度也会更好（因为自定义属性的配合）。后来提问的时候米粽提了个是否要用data-开头做自定义属性，我觉得问题不大，虽然那样可以规范一些。&lt;br&gt;&lt;br&gt;四、CSS预处理器老调新弹&lt;br&gt;&lt;br&gt;这个是 &lt;a data-hash=&quot;f7f6a8fa75165069749ef3b8bedb53e7&quot; href=&quot;//www.zhihu.com/people/f7f6a8fa75165069749ef3b8bedb53e7&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@郑海波&quot; data-tip=&quot;p$b$f7f6a8fa75165069749ef3b8bedb53e7&quot; data-hovercard=&quot;p$b$f7f6a8fa75165069749ef3b8bedb53e7&quot;&gt;@郑海波&lt;/a&gt;讲的，说实话，我之前对他的印象停留在regular框架上，以为他是一个技能偏向js的人，但听了这一场之后，才感觉他技能太全面。&lt;br&gt;&lt;br&gt;postcss这些东西，我之前都只是大致了解，偶尔在  &lt;a data-hash=&quot;00204de7c36594a75f8fcd96ca96313b&quot; href=&quot;//www.zhihu.com/people/00204de7c36594a75f8fcd96ca96313b&quot; class=&quot;member_mention&quot; data-hovercard=&quot;p$b$00204de7c36594a75f8fcd96ca96313b&quot;&gt;@一丝&lt;/a&gt; 的微博上看见，然后好奇点进去看看。主要问题是我在CSS这条线上太薄弱了，也没有实践过LESS，SASS之类的东西，只能跟着感觉听。听了都觉得很有道理，然而说不出所以然来， &lt;a data-hash=&quot;596c0a5fdd9b36cea06bac348d418824&quot; href=&quot;//www.zhihu.com/people/596c0a5fdd9b36cea06bac348d418824&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@顾轶灵&quot; data-tip=&quot;p$b$596c0a5fdd9b36cea06bac348d418824&quot; data-hovercard=&quot;p$b$596c0a5fdd9b36cea06bac348d418824&quot;&gt;@顾轶灵&lt;/a&gt;跟一丝， &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-tip=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;可以点评下……&lt;br&gt;&lt;br&gt;五、高性能CSS动画&lt;br&gt;&lt;br&gt;360的女工程师讲的，整个内容其实不算多难，但是总结得非常好，组织得非常好，讲得更是非常好。具体知识点不太好总结，比如如何使用Chrome的Timeline标签页查看动画运行状况，比如reflow和paint的各种情形。没去的建议看录像。&lt;br&gt;&lt;br&gt;六、重拾 CSS 的乐趣&lt;br&gt;&lt;br&gt;特别好评！这个主题是CSS魔法讲的，我从未见过能讲得这么好的人，演讲技巧max，情怀max，趣味性max，选题也非常好，请大家看录像，不解释。&lt;br&gt;&lt;br&gt;七、移动下的CSS布局&lt;br&gt;&lt;br&gt;这个主题，感觉跟勾股的相比，过于普通了。&lt;br&gt;&lt;br&gt;八、中文排版需求&lt;br&gt;&lt;br&gt;这个可惜我错过了，当时在外面跟 &lt;a data-hash=&quot;0d9b98af12015c94cff646a6fc0773b5&quot; href=&quot;//www.zhihu.com/people/0d9b98af12015c94cff646a6fc0773b5&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@寸志&quot; data-tip=&quot;p$b$0d9b98af12015c94cff646a6fc0773b5&quot; data-hovercard=&quot;p$b$0d9b98af12015c94cff646a6fc0773b5&quot;&gt;@寸志&lt;/a&gt;和 &lt;a data-hash=&quot;85de6407f2219137df29b4249b91cfd5&quot; href=&quot;//www.zhihu.com/people/85de6407f2219137df29b4249b91cfd5&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@郭达峰&quot; data-tip=&quot;p$b$85de6407f2219137df29b4249b91cfd5&quot; data-hovercard=&quot;p$b$85de6407f2219137df29b4249b91cfd5&quot;&gt;@郭达峰&lt;/a&gt;聊天，后来听有人说非常好，打算后面回顾一下录像吧。有看过的同学欢迎说一下感想。&lt;br&gt;&lt;br&gt;特别声明，我是CSS渣，以上总结不代表分享者真实水平，只代表个人渺小的感受。&lt;br&gt;&lt;br&gt;=======================================================================&lt;br&gt;&lt;br&gt;好了，正经话到此为止，可以痛快水了。&lt;br&gt;&lt;br&gt;第一届CSS conf我没去，因为自己是CSS渣，而且地点在北京，感觉略远。这次在上海，而且上海有sofish这么可爱的人，当然是要去一下的。&lt;br&gt;&lt;br&gt;我是周五中午到的，在路上看到很多好看的云，下午在附近转了下，下了点雨，天气闷闷的，晚上吃了小杨生煎，决定把这个东西跟汤包一样列入我的禁忌食品，因为我性子急，吃这种东西一定会被烫到，好惨啊。&lt;br&gt;&lt;br&gt;吃完回去一身汗，洗了个澡，把T恤洗了下，没多久，看群里说到 &lt;a data-hash=&quot;2814e14e58ae77624bc618ec44db3f14&quot; href=&quot;//www.zhihu.com/people/2814e14e58ae77624bc618ec44db3f14&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@小雪&quot; data-tip=&quot;p$b$2814e14e58ae77624bc618ec44db3f14&quot; data-hovercard=&quot;p$b$2814e14e58ae77624bc618ec44db3f14&quot;&gt;@小雪&lt;/a&gt; 快要到了，然后郑海波在小杨生煎，决定去找他们聊天，但T恤没干，直接穿着湿的过去了，反正天热也无所谓。&lt;br&gt;&lt;br&gt;一聊发现郑居然跟我住一个店，小雪住附近，就一起送她过去了，然后听到 &lt;a data-hash=&quot;069063bb94c6cc7b262a7afc6ded767d&quot; href=&quot;//www.zhihu.com/people/069063bb94c6cc7b262a7afc6ded767d&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@林小志&quot; data-tip=&quot;p$b$069063bb94c6cc7b262a7afc6ded767d&quot; data-hovercard=&quot;p$b$069063bb94c6cc7b262a7afc6ded767d&quot;&gt;@林小志&lt;/a&gt;喊吃夜宵去，就三个人一起走过去。凭借超强的方向感定位感，顺利找到，在场的除了小志，还有大漠，情封，林毅，还有特别清秀可爱的轨迹妹子！一聊又聊了两个小时，聊得好high，我要减肥，只喝了点雪碧，什么都没吃，他们吃烧烤和龙虾好开心。&lt;br&gt;&lt;br&gt;周六早上打车去会场，发现居然在携程旁边，到得略早，看到已经到了一些人了，比如裕波，还有我司一些同事，统计了一下，惊奇地发现我司居然来了10多个人。旁边有个人抽奖抽到不知哪家，好像upyun的一个充电宝，特别特别可爱，我也去试验了一下，只有鼠标垫……不过拿了一件7牛的T恤，回去试试。&lt;br&gt;&lt;br&gt;这时候微信群里面已经乱得不行了，各种红包，各种贴图，叔的低端安卓机都快卡死了。。。照例来了很多人，比如小雪，比如 &lt;a data-hash=&quot;d7008a6d78ac2b00b4e5a10c58701b29&quot; href=&quot;//www.zhihu.com/people/d7008a6d78ac2b00b4e5a10c58701b29&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@yuanyuanVivian&quot; data-tip=&quot;p$b$d7008a6d78ac2b00b4e5a10c58701b29&quot; data-hovercard=&quot;p$b$d7008a6d78ac2b00b4e5a10c58701b29&quot;&gt;@yuanyuanVivian&lt;/a&gt;，比如 &lt;a data-hash=&quot;596c0a5fdd9b36cea06bac348d418824&quot; href=&quot;//www.zhihu.com/people/596c0a5fdd9b36cea06bac348d418824&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@顾轶灵&quot; data-tip=&quot;p$b$596c0a5fdd9b36cea06bac348d418824&quot; data-hovercard=&quot;p$b$596c0a5fdd9b36cea06bac348d418824&quot;&gt;@顾轶灵&lt;/a&gt;，比如米粽，比如贺老，已经无法一一列出了，后来女神 &lt;a data-hash=&quot;0999189bddb6ba96ac860ef510325e4b&quot; href=&quot;//www.zhihu.com/people/0999189bddb6ba96ac860ef510325e4b&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Ovilia&quot; data-tip=&quot;p$b$0999189bddb6ba96ac860ef510325e4b&quot; data-hovercard=&quot;p$b$0999189bddb6ba96ac860ef510325e4b&quot;&gt;@Ovilia&lt;/a&gt;穿一身鲜艳的裙子，携一名闺蜜款款入场，吸引无数眼球。&lt;br&gt;&lt;br&gt;另外，群里的人们，你们这么黑我真的好吗？中间上了一次厕所，回来发现两句：民工哥跟一个妹子一起出去了。民工哥又跟一个妹子一起回来了。………………你们节操呢？？？&lt;br&gt;&lt;br&gt;中午吃饭，这个饭菜，是故意的吗，因为我不吃海带不吃鱿鱼不吃木耳，所以……同事看了看我跟旁边妹子的饭盒，说你俩怎么回事，一个光吃了菜，一个光吃了饭……&lt;br&gt;&lt;br&gt;吃完饭见到了梁杰，聊了一会，他又掏出一本程序员健康的书要送我，我说买过了。。。还是送别人好。下午又来了好多人啊， &lt;a data-hash=&quot;00204de7c36594a75f8fcd96ca96313b&quot; href=&quot;//www.zhihu.com/people/00204de7c36594a75f8fcd96ca96313b&quot; class=&quot;member_mention&quot; data-tip=&quot;p$b$00204de7c36594a75f8fcd96ca96313b&quot; data-hovercard=&quot;p$b$00204de7c36594a75f8fcd96ca96313b&quot;&gt;@一丝&lt;/a&gt; ,小豪，还看到winter了，感觉这货又肥了，目测得有200斤了吧，手里拿一把折扇，上面五个什么字的，居然给忘了：朕心寒至极？点头猪也在旁边一个劲笑，感觉她越来越呆萌了。&lt;br&gt;&lt;br&gt;五花肉也出现了，一来就是：叔叔叔叔。。。我照例画了个圆圈。然后看到那个谁了，id叫次碳酸钴，特别萌的人，也是饿了么的，多可爱啊。&lt;br&gt;&lt;br&gt;哎，说起饿了么，好像发现漏了什么很重要的事：sofish今天领证了！在此特别恭喜小鱼和ciao，祝白头偕老，一生幸福！&lt;br&gt;&lt;br&gt;然后就是跟寸志和郭达峰聊，跟这两个2货互黑，然后很乖的 &lt;a data-hash=&quot;790dccce26904cdcd11b0fad3bac37b7&quot; href=&quot;//www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7&quot; class=&quot;member_mention&quot; data-tip=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot; data-hovercard=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot;&gt;@题叶&lt;/a&gt;也出现了，一起聊了会，全体拍了个合影就散了，他们大部队吃饭去了，我跟同事一起吃完回了宾馆，等小雪和郑海波吃完回来又聊了很久到12点。每次出来都有码农可以聊好开心啊！&lt;br&gt;&lt;br&gt;=====================================================================&lt;br&gt;&lt;br&gt;中午就要回南京了，估计上午也是一直睡觉的状态。回顾这两天，收获满满，有此类活动还是要坚决出来参加，虽然我是CSS渣，但我至少得知道大家都在搞些什么啊，不然以后做技术选型就麻烦了。&lt;br&gt;&lt;br&gt;在前端领域，每年新的好玩东西太多了，多出来看看，听听，会很有好处，跟人聊也是很快乐的，我就喜欢跟年轻的有激情的码农聊，就像上次跟小宇聊，产生很多灵感。&lt;br&gt;&lt;br&gt;另外这次活动，由于领域的特点，妹子好多啊，当然叔叔只看代码，并不关注这些。&lt;br&gt;&lt;br&gt;好像写完了，那就这样。感谢邀请。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n职业写流水账的来了！ 这次首先说正事吧，我CSS方面比较薄弱，只能尽自己可能去听了，说得不对的欢迎大家打我。 一、手机淘宝CSS实践启示录 这个主题是勾股讲的，老朋友了，内容我感觉很不错。主要讲的是屏幕适配，采用何种方式作为基准，然后不同比例的屏…\n\n<a href=\"/question/34272250/answer/58364712\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-09\" target=\"_blank\" href=\"/question/34272250/answer/58364712\">编辑于 2015-08-09</a></p>\n\n",
    "link": "https://zhihu.com/question/34272250/answer/58364712"
  },
  {
    "question": "\nDart、CoffeeScript、TypeScript 和 JavaScript 哪种最适合专门学习？\n",
    "author": "田乐",
    "content": "\n\n<textarea hidden class=\"content\">有些人学习了一门新的语言的语法，然后继续用自己熟悉的方式去写代码。&lt;br&gt;有些人学习语言的时候，学习的这门语言设计的意图，寻找这种语言编程（抽象和表达）的感觉。&lt;br&gt;&lt;br&gt;CoffeeScript 的作者带给我们声明式的语法。函数式 (functional) 编程是声明式 (declarative) 编程的一种方式。所以使用 CoffeeScript 我们可以体会这些编程泛型的表达方式，减少副作用。这是学习 CoffeeScript 最大的意义。减少逗号、括弧这些只是增强表达能力的一些副作用而已（这句话只是玩笑）。CoffeeScript 的很多语法，list-comprehension, ranging, destructive-assignment, every statements has return 都是从声明式语言里面学习的概念（尤其是 Haskell）。&lt;br&gt;&lt;br&gt;其余的几个语言更多的是从工程的角度去优化 javascript 的一些问题，而不是指引你用新的方式去构建你的程序。但是他们和 coffeescript 在一点是相同的，他们都属于 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//c2.com/cgi/wiki%3FSymbioticLanguages&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Symbiotic Languages&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; Jeremy Ashkenas 有个很好的视频介绍了这个概念 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ashkenas.com/dotjs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dotJS. Symbiotic Languages&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，就是通过翻译在一种语言上面构建另外一种语言，两者可以相互转换。这是一种趋势。&lt;br&gt;&lt;br&gt;不过回到前面说的那个点，很重要的地方在于学习一门语言你得到什么。学会他的设计意图是一个很好的理由。所以我个人推荐在这三者里面选择 CoffeeScript。&lt;br&gt;&lt;br&gt;Update at 26 Nov 2014:&lt;br&gt;&lt;br&gt;今年我对这几个语言又有了新的认识，因为组里有几个 Functional Programming 大牛 Erik Meijer 的学生来实习，他们都力挺强类型。我们一起讨论了 TypeScript 和 Dart 的现状，其中 TypeScript 是微软这个充满 Language Nerd 的公司的一个产品，从类型系统来说是这几个里面最好的。但是我的朋友主要抱怨的是 TypeScript compiler 实在太慢了，会慢到影响开发效率的地步。Dart 依然还是怪怪的。而且 Dart 和 TypeScript 对混合语言项目的支持不太好，他们的 Build Chain 不太容易和其它 Build 系统交织在一起。这一方面容易 vendor lock，另一方面也难以实现逐步迁移。&lt;br&gt;&lt;br&gt;coffeescript 在今年热度已经下降了。因为 vanila javascript 和 ES6 transcompiler 越来越流行？而且 CoffeeScript 的一些偏 ruby 语法可能对于那些后知后觉但是行动扎实的程序员（我其实是描述&quot;早期实践者 - early adopter&quot; 相反的 &quot;后期实践者 - late adopter&quot;）并不友好，所以新进选择 coffeescript 的人少于其它几个技术。coffeescript 里面借鉴了 Haskell 的一些概念，然后照猫画虎的实现了一些很不错的功能。但是实际上这些翻译从概念上不算正确。所以想要真的学会强类型的 functional programming，推荐还是去直接学习 Haskell。&lt;br&gt;&lt;br&gt;再有我现在非常认同 Facebook 团队对前段发展方向的判断。尽量使用 ES6/ES7 然后 transcompile 回去。如果想要强类型检查，尽量使用无侵入的方案，或者是可选的方案，Facebook 的 Flow 就是一个很好的方案，这样可以保证最好的库兼容性。在前端架构方面还有 Flux 这个架构，还有 React 这个 immutable 的库。这些都是极好的方向，我会尽量把他们也应用到我工作中的。&lt;br&gt;&lt;br&gt;Update at 8 Apr 2013:&lt;br&gt;&lt;ul&gt;&lt;li&gt;Dart 内置的 Packaging 是一种很好的趋势，我们真心需要一种语言级别内置的 one stop 的 module/packaging tool（我看到 hax 同学曾经和 Douglas C 大神对峙过这个问题，很好玩）。而且 Dart 的目的是跳过翻译的步骤，以后直接在浏览器里面嵌入一个 Dart 解释引擎与 V8 并行，可以达到更好的效率。Dart 和 TypeScript 都尝试在 Javascript 上面增加 Type 信息，这样就可以在运行时极大的优化代码的效率，所以对于工程上是非常有意义的。&lt;/li&gt;&lt;li&gt;还有一个非常有意思的东西是 asm.js，他是 javascript 的子集，而且也有类型。它让基于 llvm 的 c-javascript 和 javascript-c cross compiling 成为可能，这可以实现你写 c 但是让你的程序在 javascript interpreter/vm 里面执行，或者让你的 javascript 程序利用 llvm 实现优化。最近 Mozilla 展示的浏览器里面的 Unreal Engine 就利用了它。这个技术对于 c/c++ 占统治地位的游戏行业非常重要，所以值得高度关注。它们走了 Chrome 的 NaCL （盐，一种 native extension，用来实现高效的在浏览器运行图形应用）完全不同的路线，非常巧妙！&lt;/li&gt;&lt;li&gt;大家要高明白很多高级语言存在的意义在于更好的表达能力，而不完全是性能为主的。所以我们可以让 javascript 更加高级，这样的路线就会有 ClojureScript 或者 Coffeescript 都可以归作声明式（declarative）的尝试，而增加 type 倾向于编译期优化的这些语言，他们从工程角度增强 javascript。&lt;/li&gt;&lt;li&gt;所以大家还是要问这个问题，code for fun 还是 code for 饭。如果你的兴趣是实现一个更好的工业强度的语言，那么可以关注 Dart，或者 TypeScript。如果你想看看如何嫁接一些表达方式更加不同的语言，那么 coffeescript 是非常好的选择。&lt;/li&gt;&lt;/ul&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n有些人学习了一门新的语言的语法，然后继续用自己熟悉的方式去写代码。 有些人学习语言的时候，学习的这门语言设计的意图，寻找这种语言编程（抽象和表达）的感觉。 CoffeeScript 的作者带给我们声明式的语法。函数式 (functional) 编程是声明式 (declarati…\n\n<a href=\"/question/20833518/answer/16365711\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-03-13\" target=\"_blank\" href=\"/question/20833518/answer/16365711\">编辑于 2014-11-27</a></p>\n\n",
    "link": "https://zhihu.com/question/20833518/answer/16365711"
  },
  {
    "question": "\n有关javascript函数对象？\n",
    "author": "RednaxelaFX",
    "content": "\n\n<textarea hidden class=\"content\">因为题主误以为JavaScript的花括号只有一种用法了。&lt;br&gt;——函数是对象没错，但是函数的字面量跟对象字面量的语法不一样。&lt;br&gt;&lt;br&gt;在解答题主的问题前，必须要演示一下JavaScript可以直接内嵌URL的功能：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//www.zhihu.com&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;…当然是个忽悠。&lt;br&gt;上面这段代码可以正确被调用，foo()会返回'bar'。那么那个URL是怎么回事？&lt;br&gt;这里，&quot;http:&quot;被看作了标签语句（label statement），而后面的&quot;//&lt;a href=&quot;http://www.zhihu.com&quot; class=&quot;internal&quot;&gt;知乎 - 与世界分享你的知识、经验和见解&lt;/a&gt;&quot;则是单行注释。也就是说在这个上下文里，两者都不起任何作用。&lt;br&gt;&lt;br&gt;JavaScript里，一对花括号&lt;br&gt;&lt;ul&gt;&lt;li&gt;可以在函数声明/函数表达式中用于括住函数体。&lt;i&gt;题主实际用到的是这个&lt;/i&gt;；&lt;/li&gt;&lt;li&gt;可以是块语句（block statement）用于把若干语句打包为一块，例如用于while、for等控制流语句中；&lt;br&gt;&lt;/li&gt;&lt;li&gt;可以是对象字面量（Object Literal；或者叫对象初始化器，Object Initializer）。&lt;i&gt;题主以为在用的是这个&lt;/i&gt;。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// &amp;lt;- 这对花括号是函数声明的不可分割的一部分，不是对象字面量&lt;/span&gt;\n  &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 这个age:被看作标签语句，后面的0被看作表达式语句&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// 花括号在语句上下文中，这里是块语句&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 同上&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 花括号在表达式上下文中，这里是对象字面量&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;题主可以看看AST来感受一下您原本的代码里age: 20那块是怎么回事：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//esprima.org/demo/parse.html%3Fcode%3Dfunction%2520Person%28a%252C%2520b%29%2520%257B%250A%2520%2520age%253A%252020%250A%257D&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Esprima: Parser&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; &amp;lt;- 点此链接看交互版&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;FunctionDeclaration&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Person&quot;&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;params&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\n                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                    &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                    &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt;\n                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                    &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                    &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;\n                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;defaults&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BlockStatement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\n                    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                        &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;LabeledStatement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                        &lt;span class=&quot;nt&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                            &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                            &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt;\n                        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n                        &lt;span class=&quot;nt&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                            &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ExpressionStatement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                            &lt;span class=&quot;nt&quot;&gt;&quot;expression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                                &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Literal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                                &lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                                &lt;span class=&quot;nt&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;20&quot;&lt;/span&gt;\n                            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n                        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n                &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;generator&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;expression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;留意到age被当作一个LabelStatement的identifier了。&lt;br&gt;&lt;br&gt;而如果是一个对象字面量的话，它的AST会是类似这样的：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ObjectExpression&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Property&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Identifier&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;age&quot;&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;computed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Literal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n                &lt;span class=&quot;nt&quot;&gt;&quot;raw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;20&quot;&lt;/span&gt;\n            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;kind&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;init&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nt&quot;&gt;&quot;shorthand&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;而题主的第二种写法里，起作用的只是Person.age = 20而已；前面Person的函数体是怎样的完全没关系。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n因为题主误以为JavaScript的花括号只有一种用法了。 ——函数是对象没错，但是函数的字面量跟对象字面量的语法不一样。 在解答题主的问题前，必须要演示一下JavaScript可以直接内嵌URL的功能： function foo() {\n http://www.zhihu.com\n return 'bar';\n}……\n\n<a href=\"/question/31863910/answer/53626472\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-03\" target=\"_blank\" href=\"/question/31863910/answer/53626472\">编辑于 2015-07-03</a></p>\n\n",
    "link": "https://zhihu.com/question/31863910/answer/53626472"
  },
  {
    "question": "\nvue，angular，avalon这三种MVVM框架之间有什么优缺点？\n",
    "author": "Tw93",
    "content": "\n\n<textarea hidden class=\"content\">以下内容是参考官方文档说明总结而来：&lt;br&gt;&lt;b&gt;Vue.js&lt;/b&gt;&lt;br&gt;Vue.js   &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt;  老师写的一个用于创建 web 交互界面的库，是一个精简的 MVVM。从技术角度讲，Vue.js 专注于 MVVM 模型的 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23ViewModel&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ViewModel&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 层。它通过双向数据绑定把 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23View&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;View&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 层和 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23Model&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Model&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 层连接了起来。实际的 DOM 封装和输出格式都被抽象为了&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23Directives&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Directives&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23Filters&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Filters&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。Vue.js和其他库相比是一个小而美的库，作者的主要目的是通过一个尽量简单的 API 产生可反映的数据绑定和可组合的视图组件，感觉作者的思路非常清晰。&lt;br&gt;优点：&lt;br&gt;&lt;ol&gt;&lt;li&gt;简单：官方文档很清晰，比 Angular 简单易学。&lt;/li&gt;&lt;li&gt;快速：异步批处理方式更新 DOM。&lt;/li&gt;&lt;li&gt;组合：用解耦的、可复用的组件组合你的应用程序。&lt;/li&gt;&lt;li&gt;紧凑：~18kb min+gzip，且无依赖。&lt;/li&gt;&lt;li&gt;强大：表达式 &amp;amp; 无需声明依赖的可推导属性 (computed properties)。&lt;/li&gt;&lt;li&gt;对模块友好：可以通过 NPM、Bower 或 Duo 安装，不强迫你所有的代码都遵循 Angular 的各种规定，使用场景更加灵活。&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;缺点：&lt;br&gt;&lt;ol&gt;&lt;li&gt;新生儿：Vue.js是一个新的项目，2014年3月20日发布的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/yyx990803/vue/releases/tag/0.10.0-rc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0.10.0 Release Candidate&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;版本，目前github上面最新的是&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/yyx990803/vue/releases/tag/0.11.4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;0.11.4&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;版本，没有angular那么成熟。&lt;/li&gt;&lt;li&gt;影响度不是很大：google了一下，有关于Vue.js多样性或者说丰富性少于其他一些有名的库。&lt;/li&gt;&lt;li&gt;不支持IE8：哈哈不过AngularJS 1.3也抛弃了对IE8的支持，但是 &lt;a data-hash=&quot;5038031eb35739d4ae966370fb1b5456&quot; href=&quot;//www.zhihu.com/people/5038031eb35739d4ae966370fb1b5456&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@司徒正美&quot; data-hovercard=&quot;p$b$5038031eb35739d4ae966370fb1b5456&quot;&gt;@司徒正美&lt;/a&gt; 老师的avalon是支持IE6+的，应该下了很多努力去优化。这一点对于那些需要支持IE8的项目就不好了，不过这也是web前端开发的一个趋势，像IE低版本就应该退出历史舞台了，通过改变我们的前端思维，而不是顺应那些使用老版本而不去升级的人。 &lt;a data-hash=&quot;c11336b8607d86bc9090bed90757a34c&quot; href=&quot;//www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@玉伯&quot; data-hovercard=&quot;p$b$c11336b8607d86bc9090bed90757a34c&quot;&gt;@玉伯&lt;/a&gt;老师就说过一句话，我觉得说的非常好“这年头，支持 IE6、7 早就不再是特性，而是耻辱。努力推动支付宝全面不支持 IE6、7，期待更多兄弟加盟”。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;b&gt; AngularJS&lt;/b&gt;&lt;br&gt;AngularJS最近很火，追随者也很多。&lt;a href=&quot;//link.zhihu.com/?target=https%3A//angularjs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt; Superheroic JavaScript MVW Framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;官方说得很朴素：“完全使用JavaScript编写的客户端技术。同其他历史悠久的Web技术（HTML、CSS和JavaScript）配合使用，使Web应用开发比以往更简单、更快捷“。当你学习它的时候，我相信你会被它的很多新特效所吸引。&lt;br&gt;优点：&lt;br&gt;&lt;ol&gt;&lt;li&gt;动态视图：以前从来没有想过js可以如此扩展HTML的属性，但是AngularJs做到了，它替我们静态的HTML加了很多扩展性功能，有一种让HTML由死变活的感觉。&lt;/li&gt;&lt;li&gt;完善：是一个比较完善的前端MVW框架，包含模板，数据双向绑定，路由，模块化，服务，依赖注入等所有功能，模板功能强大丰富，并且是声明式的，自带了丰富的 Angular 指令。&lt;/li&gt;&lt;li&gt;Google维护：AngularJS有Google来维护，无疑有了一个强大的后台，对于推广和维护明显比Vue.js和avalon有优势，社区也非常活泼，能够很好促进它的发展。&lt;/li&gt;&lt;li&gt;AngularJS &amp;amp; Ionic：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ionicframework.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ionic: Advanced HTML5 Hybrid Mobile App Framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这俩就是一个好基友，Ionic通过用AngularJS为了创建一个框架，最适合开发的丰富和强大的应用程序。上次于知乎答了一个相关问题&lt;a href=&quot;http://www.zhihu.com/question/27210335/answer/35713635&quot; class=&quot;internal&quot;&gt;做webapp开发，性能和效率最好的框架和打包app平台分别是哪个？ - 汤威的回答&lt;/a&gt;，详细可以见这里。&lt;/li&gt;&lt;/ol&gt;缺点：&lt;br&gt;&lt;ol&gt;&lt;li&gt;大而全：学习起来有难度，对于我来讲学习曲线很曲折，比较难理解一些。&lt;/li&gt;&lt;li&gt;推翻重写：前段时候逛社区发现AngularJS2.0会把之前的推翻重写，两个框架的改变很大，基本是两个框架了，等于是说等到2.0出来后又需要从头开始，不过又说回来， &lt;a data-hash=&quot;c5198d4e9c0145aee04dd53cc6590edd&quot; href=&quot;//www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@徐飞&quot; data-hovercard=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot;&gt;@徐飞&lt;/a&gt;老师的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/xufei/blog/issues/8&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;［翻译］有关Angular 2.0的一切 · Issue #8 · xufei/blog · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这篇文章很好说明了AngularJS2.0的变化。&lt;/li&gt;&lt;li&gt;不支持IE8以下，貌似2.0变得只支持移动端了，等到出来后再看吧。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;strong&gt;Avalon.js&lt;/strong&gt;&lt;br&gt;Avalon.js是 &lt;a data-hash=&quot;5038031eb35739d4ae966370fb1b5456&quot; href=&quot;//www.zhihu.com/people/5038031eb35739d4ae966370fb1b5456&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@司徒正美&quot; data-hovercard=&quot;p$b$5038031eb35739d4ae966370fb1b5456&quot;&gt;@司徒正美&lt;/a&gt; 老师所写的个简单易用迷你的MVVM框架，它最早发布于2012.09.15，为解决同一业务逻辑存在各种视图呈现而开发出来的。常常可以看到老师推广他的Avalon.js，出了很多教程，无疑对国内学习Avalon.js的人提供了巨大方便。&lt;br&gt;&lt;br&gt;优点&lt;br&gt;&lt;ol&gt;&lt;li&gt;使用简单，在HTML中添加绑定，在JS中用avalon.define定义ViewModel，再调用avalon.scan方法，它就能动了！&lt;/li&gt;&lt;li&gt;兼容到 &lt;strong&gt;IE6&lt;/strong&gt; (其他MVVM框架，KnockoutJS(IE6), AngularJS(IE9), EmberJS(IE8), WinJS(IE9) )，另有avalon.mobile，它可以更高效地运行于IE10等新版本浏览器中&lt;/li&gt;&lt;li&gt;没有任何依赖，不到5000行，压缩后不到50KiB&lt;/li&gt;&lt;li&gt;支持管道符风格的过滤函数，方便格式化输出&lt;/li&gt;&lt;li&gt;局部刷新的颗粒度已细化到一个文本节点，特性节点&lt;/li&gt;&lt;li&gt;要操作的节点，在第一次扫描就与视图刷新函数相绑定，并缓存起来，因此没有选择器出场的余地。&lt;/li&gt;&lt;li&gt;让DOM操作的代码近乎绝迹&lt;/li&gt;&lt;li&gt;使用类似CSS的重叠覆盖机制，让各个ViewModel分区交替地渲染页面&lt;/li&gt;&lt;li&gt;节点移除时，智能卸载对应的视图刷新函数，节约内存&lt;/li&gt;&lt;li&gt;操作数据即操作DOM，对ViewModel的操作都会同步到View与Model去&lt;/li&gt;&lt;li&gt;自带AMD模块加载器，省得与其他加载器进行整合。&lt;/li&gt;&lt;/ol&gt;缺点&lt;br&gt;缺点可以看这里&lt;a href=&quot;http://www.zhihu.com/question/27464076/answer/36981066&quot; class=&quot;internal&quot;&gt;相比Angular，Avalon有什么缺点呢？ - 司徒正美的回答&lt;/a&gt;&lt;br&gt;终于答完了，还有一些我没有找到的还有错误的希望大家指出。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n以下内容是参考官方文档说明总结而来： <b>Vue.js</b> Vue.js <a data-hash=\"cfdec6226ece879d2571fbc274372e9f\" href=\"//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f\" class=\"member_mention\" data-editable=\"true\" data-title=\"@尤雨溪\" data-hovercard=\"p$b$cfdec6226ece879d2571fbc274372e9f\">@尤雨溪</a> 老师写的一个用于创建 web 交互界面的库，是一个精简的 MVVM。从技术角度讲，Vue.js 专注于 MVVM 模型的 <a href=\"//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23ViewModel\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ViewModel<i class=\"icon-external\"></i></a> 层。它通过双向数据绑定把 <a href=\"//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23View\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">View<i class=\"icon-external\"></i></a> 层和 <a href=\"//link.zhihu.com/?target=http%3A//jinjiang.github.io/vuejs.org/guide/%23Model\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Model<i class=\"icon-external\"></i></a> 层连接了起来。实际的 DOM 封装…\n\n<a href=\"/question/27791075/answer/38830138\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-02-03\" target=\"_blank\" href=\"/question/27791075/answer/38830138\">编辑于 2015-02-04</a></p>\n\n",
    "link": "https://zhihu.com/question/27791075/answer/38830138"
  },
  {
    "question": "\n前端工程师，如何更顺畅的和后端工程师合作？\n",
    "author": "Fenng",
    "content": "\n\n<textarea hidden class=\"content\">给你几个非技术的建议：挨着坐在一起；一起吃饭。&lt;br&gt;&lt;br&gt;其他的都不是问题了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n给你几个非技术的建议：挨着坐在一起；一起吃饭。 其他的都不是问题了。\n\n<a href=\"/question/20365599/answer/14907233\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/20365599/answer/14907233\">发布于 2012-07-19</a></p>\n\n",
    "link": "https://zhihu.com/question/20365599/answer/14907233"
  },
  {
    "question": "\n可以用WebRTC来做视频直播吗？\n",
    "author": "刘津玮",
    "content": "\n\n<textarea hidden class=\"content\">我所在的项目用这个技术两年多了，先说结论：&lt;b&gt;完全可以！&lt;/b&gt;&lt;br&gt;&lt;br&gt;但是，凡事总有但是，&lt;b&gt;也没那么简单&lt;/b&gt;。你以为调用几个Chrome的API就能直播了？too simple&lt;br&gt;&lt;br&gt;楼上 &lt;a href=&quot;http://www.zhihu.com/people/seeka&quot; class=&quot;internal&quot;&gt;米小嘉&lt;/a&gt; 回答中的猜想是不正确的，WebRTC用的不是插件，是Chrome自带的功能，是原生js的API，也没有什么浏览器自带的插件。&lt;br&gt;楼上 &lt;a href=&quot;http://www.zhihu.com/people/jian-bing-guo-zi-she-chang&quot; class=&quot;internal&quot;&gt;煎饼果子社长&lt;/a&gt; 的方法也不对，WebRTC的API不仅仅是给你获取本地信源的，所谓RTC是real time communication的缩写，自然这套API是带传输功能的。所以获取图像信源之后不应该用websocket发送图像数据，而是直接用WebRTC的通信相关API发送图像和声音（这套API是同时支持图像和声音的）数据。&lt;br&gt;&lt;br&gt;所以，正确的方法是什么呢？&lt;br&gt;1、你得有一个实现了WebRTC相关协议的客户端。比如Chrome浏览器。&lt;br&gt;2、架设一个类似MCU系统的服务器。（不知道MCU是什么？看这：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/subview/100928/10067878.htm%23viewPageContent&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MCU（视频会议系统中心控制设备）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;br&gt;第一步，用你的客户端，比如Chrome浏览器，通过WebRTC相关的媒体API获取图像及声音信源，再用WebRTC中的通信API将图像和声音数据发送到MCU服务器。&lt;br&gt;第二步，MCU服务器根据你的需求对图像和声音数据进行必要的处理，比如压缩、混音等。&lt;br&gt;第三步，需要看直播的用户，通过他们的Chrome浏览器，链接上你的MCU服务器，并收取服务器转发来的图像和声音流。&lt;br&gt;&lt;br&gt;先说步骤一，如果你只是做着玩玩，完全可以直接用Chrome浏览器做你的直播客户端。把摄像头麦克风连上电脑之后，Chrome可以用相关的js的API获取到摄像头和麦克风的数据。缺点就是如果长时间直播，Chrome的稳定性堪忧，我不是吓唬你。我们项目的经验是，chrome这样运行24小时以上内存占用很厉害，而且容易崩溃。&lt;br&gt;&lt;br&gt;第二步，你可能要问，WebRTC可以直接在浏览器之间P2P地传输流，为什么还要有中转的MCU服务器？因为Chrome的功能很弱，视频的分辨率控制、多路语音的混音都做不了，所以需要MCU参与。最重要的是，Chrome同时给6个客户端发视频流就很消耗资源了，所以你如果有超过10个用户收看的话，Chrome很容易崩溃。&lt;br&gt;&lt;br&gt;第三步就比较简单了，没什么好说的。&lt;br&gt;&lt;br&gt;最后最后，还是老话题，兼容性。你可以查一下现在支持的浏览器有款，IE据说支持，但是我们研究了一下好像他用的协议和Chrome不一样，不能互通。firefox和opera情况也不是很理想。&lt;br&gt;&lt;br&gt;-------------------------2015年11月17日 更新--------------------------&lt;br&gt;&lt;a href=&quot;http://www.zhihu.com/people/skywind3000&quot; class=&quot;internal&quot;&gt;韦易笑&lt;/a&gt; 的答案中说“10人以内使用，超过10人就挂了”。从我个人的经验来看，我认为WebRTC并没有那么不堪。我不知道他是用什么样的方案，但是我原来的那个项目，13年做的结果是 1人广播，39人收看，在一台i3 + 4G + Centos6.4 mini的机器上跑MCU，连续运行48小时没有出现问题。CPU的使用率大概在60%左右，内存使用率是多少我记不清了，但是印象中不高，而且比较稳定。能不能支持更多的客户端我们没有尝试，因为当时已经满足我们的需求了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我所在的项目用这个技术两年多了，先说结论：<b>完全可以！</b> 但是，凡事总有但是，<b>也没那么简单</b>。你以为调用几个Chrome的API就能直播了？too simple 楼上 <a href=\"http://www.zhihu.com/people/seeka\" class=\"internal\">米小嘉</a> 回答中的猜想是不正确的，WebRTC用的不是插件，是Chrome自带的功能，是原生js的API，也没有什么浏…\n\n<a href=\"/question/25497090/answer/43395462\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-03-30\" target=\"_blank\" href=\"/question/25497090/answer/43395462\">编辑于 2015-11-17</a></p>\n\n",
    "link": "https://zhihu.com/question/25497090/answer/43395462"
  },
  {
    "question": "\n用 Node.js 做了个工资系统，我感觉不错为什么老板却觉得水平低？\n",
    "author": "林建入",
    "content": "\n\n<textarea hidden class=\"content\">其实提问者的这种疑惑我很能理解，相信很多人都能理解（当然大部分人看看就关了页面也不会特意来回答，我是晚上睡不着来说两句）。&lt;br&gt;&lt;br&gt;一般来说但凡是特别热爱编程的人学了一段时间后必然特别希望实践所学去解决具体问题。这是好事，学以致用是对的。但程序员处在这个阶段有个特点就是，充满激情，无所畏惧，但眼高手低，偏偏还固执己见。我无意冒犯，其实很惭愧的说我以前也经历过这种阶段，好几年。但很不惭愧的说这也不能算错，好多我们觉得很棒的程序员以前也就这样。为什么呢？因为没经验啊，见识少啊，在加上一点自以为是啊。（读到这里别生气，你要想我强调过我也曾经这样，不是只针对你，也针对我自己）&lt;br&gt;&lt;br&gt;首先希望你继续加油学习，不要因为别人的批评就认为受到了伤害（但凡有点追求的人骨子里都有傲气，往往自尊心强，但也很敏感），你要知道这些尖锐的批评其实很宝贵，因为他们是在指出你的问题，促进你的进步。你要学会接受一点别人的建议，这是获得进步的关键。&lt;br&gt;&lt;br&gt;比如说界面丑，说实话他们说的很对，这是看脸的世界，界面别说简陋，已经直接是引起反感了，普通人看到的第一反应是在心里就把它否定了，这时你再作解释其实无法改变任何事情了。所以你要明白，一个好的软件，不仅内核要强大，界面也必须及格。而你的界面如果满分 10 分的话只能打 1.5 分。那 0.5 是幸苦分。抱歉客观来说真的只能给这么多。你如果不能把界面做到 6 分的及格线那么真的，你再加更多功能也没意义，因为没人有兴趣继续了解。&lt;br&gt;&lt;br&gt;另外有些人提和 Excel+Vba 的对比我觉得这样说的人往往比较有经验，他们特别能为客户着想。这种为客户着想不要简单的理解为不敢去突破，不敢跳出 Excel 创立自己的解决方案。其实他们宁愿选择 Vba，选择一种不凸显自己“技术高”的方案而是完全以用户使用习惯学习成本出发去考虑，这是所有成功的商业软件设计者必备的品质—方便用户，不是方便自己；以用户为中心，不是以自我为中心。这种品质是怎么来的呢？肯定不是与生俱来的，而是经历过像你这样的阶段后被现实啪啪啪打得体无完肤后痛彻学习到的。但这也不能说是教训，其实是一种社会良性运转所需的服务精神。是我们从“把技术当艺术”到“把技术当工具”的转变，把技术从神坛上请了下来，摆正了自己位置和心态后的新的认识。他们把这种认识告诉你，肯定不是要害你。虽然话有些耿直，但你要先尝试琢磨和体会，不要急于否定和争辩。&lt;br&gt;&lt;br&gt;至于你谈到的让用户学 SQL 语句。我觉得有这种想法道不奇怪。因为你觉得这是“正确的选择”。而且这是更加“强大”的方案，学了“有百利无一害”。但按这个逻辑，我觉得你应该让他们直接学习一下 Matlab。众所周知 Matlab 是非常强大而且“简单易学”的，难度估计也就比 SQL 高一点但学会了以后各种数据处理哪还需要其他软件？如果你们财务和老板学有余力的话还可以安装上人工神经网络的工具箱，直接可以对你们的工资进行机器学习，何须止步于工资的自动计算呀（微笑）？你觉得你只让他们去学 SQL 是不是在阻碍他们？是不是害怕他们抢了你的饭碗？你这样的心态不对。技术方案选择还是有私心，太保守不够有远见。&lt;br&gt;&lt;br&gt;当然玩笑归玩笑，意思你应该能体会。你把对用户的要求和期待拔得和对自己一样高。你心里觉得“这也是为他们好”实际上他们希望你能做的越傻瓜化越好，而不是越强大越好。&lt;br&gt;&lt;br&gt;他们真的不期待强大，他们期待简单。期待漂亮，用起来有面子。如果你能满足这些，他们并不会吝啬对你的尊敬。因为你值得被尊敬。&lt;br&gt;&lt;br&gt;但是当他们看到糟糕的界面，不知所云的概念和你固执的辩解时，他们没有感觉到你在尊敬他们。那么你又怎么能期待他们尊敬你呢？&lt;br&gt;&lt;br&gt;最后说一句，你的野路子问题。其实不用自卑野路子不野路子。只要虚心肯学，多看书多实践，没有什么是教室里才能学到而你学不到的。这不是励志，这是事实。&lt;br&gt;&lt;br&gt;请继续努力。看好你哟。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n其实提问者的这种疑惑我很能理解，相信很多人都能理解（当然大部分人看看就关了页面也不会特意来回答，我是晚上睡不着来说两句）。 一般来说但凡是特别热爱编程的人学了一段时间后必然特别希望实践所学去解决具体问题。这是好事，学以致用是对的。但程序员…\n\n<a href=\"/question/51139907/answer/124833509\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/51139907/answer/124833509\">发布于 2016-10-04</a></p>\n\n",
    "link": "https://zhihu.com/question/51139907/answer/124833509"
  },
  {
    "question": "\n自学前端之路应该往简历上添加什么项目增加竞争力？\n",
    "author": "the cat",
    "content": "\n\n<textarea hidden class=\"content\">题主问为简历上添加什么项目才能提高竞争力，进BAT。&lt;br&gt;那我告诉题主，现在开始好好做一套成熟的项目，有处理图片懒加载，有处理表单问题，有处理后台数据的，有应对cookie和localstorage兼容处理的，有应对图片支持问题(比如webp)，有模板引擎使用的，有组件化web component的，有MVVM分层思想的。还有大量等等之类的问题。&lt;br&gt;写了一个这样的项目，基本对web前端就能很熟悉了，然后自己封装个插件，写个小的东西上传github，然后多多求star，github在面试时是大的加分项。&lt;br&gt;然后简历要好好写，因为面试官面试就是针对你的简历问你问题，面试是叫你现场带简历。什么star情景式之类的都需要了解。&lt;br&gt;最基本的需要了解一个流行的框架，vuejs，react，angular，很深入的了解，并且用过。&lt;br&gt;了解一门后台语言，nodejs（阿里），php，java（阿里），python（知乎，搜狐等用做后台），C++（腾讯，百度等）。&lt;br&gt;对于算法，学习一下简单的排序（冒泡，快排，希尔等），寻路算法，洗牌算法，简单的dp，背包等。&lt;br&gt;然后就是去面试小公司作为磨刀石，增加经验和信心，每一次面试都坐下笔记。&lt;br&gt;在然后就是在github和网上找面经好好学习。&lt;br&gt;学习基本就是这样的套路了。设计模式也就在写项目的时候学习，不要没事就看什么设计模式，没项目经验你也理解不了。&lt;br&gt;&lt;br&gt;你要面试bat，实习还是好说，但是真的要留下来，其实很难，拿2016年来说，互联网校招的情况大家都是知道的，很难进BAT，笔试叫你写一个promise，写一个事件系统EventEmitter，然后还有算法题要你做，腾讯题目全是c++，阿里是前端题，但人收的极少，百度我就感觉算法不行还是别投了吧。&lt;br&gt;&lt;br&gt;因为现在本身互联网现在特别火，动不动就是有人在知乎上求问前端该怎么学，培训机构又是一堆。一般刚刚毕业的大学生跟那些培训出来的也没什么太大的区别（指学的还不错的，认真做培训的培训机构出来的，别笑是有这样的培训机构的），基层的前端多的没人要，然而真的能适应企业的优秀前端工程师和应届生又很少，而且大公司现在的人才也趋于饱和，基本上招应届生就是为了避税和政策。要不然人家肯定更趋于在社会上招有经验的人。&lt;br&gt;&lt;br&gt;实习是必要的，不然最后连好一点的企业都找不到。&lt;br&gt;&lt;br&gt;最后，有些面试就是一半运气一半看命，找工作就是如此了。&lt;br&gt;&lt;br&gt;面试学会适当在自己hold住的范围类装逼，不要过头。&lt;br&gt;&lt;br&gt;祝好！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n题主问为简历上添加什么项目才能提高竞争力，进BAT。 那我告诉题主，现在开始好好做一套成熟的项目，有处理图片懒加载，有处理表单问题，有处理后台数据的，有应对cookie和localstorage兼容处理的，有应对图片支持问题(比如webp)，有模板引擎使用的，有组件…\n\n<a href=\"/question/50477368/answer/123810287\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/50477368/answer/123810287\">发布于 2016-09-26</a></p>\n\n",
    "link": "https://zhihu.com/question/50477368/answer/123810287"
  },
  {
    "question": "\nCocos2dx+lua合适还是Cocos2dx+js合适?\n",
    "author": "廖宇雷",
    "content": "\n\n<textarea hidden class=\"content\">2014.02更新：请放心选择 Lua 吧。触控已经收购了 quick-cocos2d-x，2014年肯定会大力强化 cocos2d-x 的 Lua 支持。&lt;br&gt;&lt;br&gt;----&lt;br&gt;&lt;br&gt;我个人肯定是推荐 Lua 的，原因如下：&lt;br&gt;&lt;br&gt;1. 运行效率：Lua 的性能在各种测试里都比 JavaScript 快不少。而移动设备上存在不支持 JIT 的情况（未越狱的 iOS 设备），Lua 对比 JavaScript 的性能优势就更明显。&lt;br&gt;&lt;br&gt;2. 安全性：现在 cocos2d-x 使用 LuaJIT 来执行 Lua，所以可以把 Lua 代码编译为字节码再打包到游戏里。由于 LuaJIT 的字节码是高度优化过的，所以目前还没有反编译工具。而 JS 虽然也可以用字节码，但从目前的情况看还达不到 LuaJIT 的安全性。&lt;br&gt;&lt;br&gt;3. 与 C/C++ 的交互：Lua 原本就是作为嵌入式语言来设计的，所以天然和 C/C++ 很容易交互。JS 这方面是个劣势。&lt;br&gt;&lt;br&gt;4. 与 Java/Objective-C 的交互：不管是 quick-cocos2d-x 里提供的 luaoc/luaj 模块，还是 wax, luajava 这些开源项目，都让我们可以绕过 C/C++ 层实现 Lua 和 Java/Objc 的交互。这个优势在游戏发行阶段，集成各种第三方 SDK 时绝对会节约巨量时间！！！&lt;br&gt;&lt;br&gt;----------------------------------------&lt;br&gt;&lt;br&gt;当然，cocos2d-x 目前明显是在主推 JS 的解决方案，因为 JS 可以跨越移动设备、桌面的界限，实现一套程序跑任意平台。不过我个人认为以当前 HTML5 的发展情况，对于要强调体验的游戏来说，HTML5 还要一些时间。&lt;br&gt;&lt;br&gt;从目前的市场情况来说，Lua 明显是更理性的选择：成熟、安全性高、众多大作采用。&lt;br&gt;&lt;br&gt;----------------------------------------&lt;br&gt;&lt;br&gt;前面提到 JS 更容易面向对象，我想可能是因为大家对 Lua 还不够了解造成的错觉。实际上，Lua 和 JS 实现面向对象的机制几乎是一样的。JS 基于 prototype，Lua 基于 metatable，在我看来仅仅是名字不同而已。&lt;br&gt;&lt;br&gt;----------------------------------------&lt;br&gt;&lt;br&gt;最后，不得不向大家推荐 quick-cocos2d-x 这个基于 cocos2d-x + Lua 的扩展版。quick 在 cocos2d-x + Lua 的基础上提供了诸多简化开发的扩展功能，以及开发框架。&lt;br&gt;&lt;br&gt;quick-cocos2d-x 中文站： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//cn.quick-x.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cn.quick-x.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n2014.02更新：请放心选择 Lua 吧。触控已经收购了 quick-cocos2d-x，2014年肯定会大力强化 cocos2d-x 的 Lua 支持。 ---- 我个人肯定是推荐 Lua 的，原因如下： 1. 运行效率：Lua 的性能在各种测试里都比 JavaScript 快不少。而移动设备上存在不支持 JIT 的…\n\n<a href=\"/question/21130385/answer/18485625\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-08-22\" target=\"_blank\" href=\"/question/21130385/answer/18485625\">编辑于 2014-02-12</a></p>\n\n",
    "link": "https://zhihu.com/question/21130385/answer/18485625"
  }
]