[
  {
    "question": "\n怎样用通俗的语言解释什么叫 REST，以及什么是 RESTful？\n",
    "author": "覃超",
    "content": "\n\n<textarea hidden class=\"content\">我觉得问题很好：REST -- REpresentational State Transfer 直接翻译：表现层状态转移。这个中文直译经常出现在很多博客中。尼玛谁听得懂“表现层状态转移”？这是人话吗？我自己也困惑了很久，查询了很多资料，花了差不多一年有个还算清晰的理解。分享如下：&lt;br&gt;&lt;br&gt;&lt;a data-hash=&quot;6ef2e77274cb0719253a577665cf690e&quot; href=&quot;//www.zhihu.com/people/6ef2e77274cb0719253a577665cf690e&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Ivony&quot; data-hovercard=&quot;p$b$6ef2e77274cb0719253a577665cf690e&quot;&gt;@Ivony&lt;/a&gt; 老师的一句话概括很精辟：&lt;br&gt;&lt;b&gt;URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;--- 简洁版 ---&lt;/b&gt;&lt;br&gt;&lt;br&gt;0. REST不是&quot;rest&quot;这个单词，而是几个单词缩写。但即使那几个单词说出来，也无法理解在说什么 -_-!! （不是要贬低人，是我自己也理解困难）；&lt;br&gt;1. REST描述的是在网络中client和server的一种交互形式；REST本身不实用，实用的是如何设计 RESTful API（REST风格的网络接口）；&lt;br&gt;2. Server提供的RESTful API中，URL中只使用名词来指定资源，原则上不使用动词。“资源”是REST架构或者说整个网络处理的核心。比如：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/newsfeed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/newsfeed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 获取某人的新鲜; &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/friends&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 获取某人的好友列表;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/profile&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/profile&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 获取某人的详细信息;3. 用HTTP协议里的动词来实现资源的添加，修改，删除等操作。即通过HTTP动词来实现资源的状态扭转：&lt;br&gt;GET    用来获取资源，&lt;br&gt;POST  用来新建资源（也可以用于更新资源），&lt;br&gt;PUT    用来更新资源，&lt;br&gt;DELETE  用来删除资源。比如：&lt;br&gt;DELETE &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://api.qc.com/v1/&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;friends: 删除某人的好友 （在http parameter指定好友id）&lt;br&gt;POST &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://api.qc.com/v1/&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;friends: 添加好友&lt;br&gt;UPDATE &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/profile&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/profile&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 更新个人资料&lt;br&gt;&lt;br&gt;禁止使用： GET &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/deleteFriend&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/deleteFri&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 图例：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_b.jpg&quot; data-rawwidth=&quot;1328&quot; data-rawheight=&quot;702&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1328&quot; data-original=&quot;https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_r.jpg&quot;&gt;&lt;br&gt;4. Server和Client之间传递某资源的一个表现形式，比如用JSON，XML传输文本，或者用JPG，WebP传输图片等。当然还可以压缩HTTP传输时的数据（on-wire data compression）。&lt;br&gt;5. 用 HTTP Status Code传递Server的状态信息。比如最常用的 200 表示成功，500 表示Server内部错误等。&lt;br&gt;&lt;br&gt;主要信息就这么点。最后是要解放思想，Web端不再用之前典型的PHP或JSP架构，而是改为前段渲染和附带处理简单的商务逻辑（比如AngularJS或者BackBone的一些样例）。Web端和Server只使用上述定义的API来传递数据和改变数据状态。格式一般是JSON。iOS和Android同理可得。由此可见，Web，iOS，Android和第三方开发者变为平等的角色通过一套API来共同消费Server提供的服务。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;--- 详细版 ---&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;先说REST名称&lt;/b&gt;&lt;br&gt;REST -- REpresentational State Transfer&lt;br&gt;首先，之所以晦涩是因为前面主语被去掉了，全称是 Resource Representational State Transfer：通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：&lt;br&gt;Resource：资源，即数据（前面说过网络的核心）。比如 newsfeed，friends等；&lt;br&gt;Representational：某种表现形式，比如用JSON，XML，JPEG等；&lt;br&gt;State Transfer：状态变化。通过HTTP动词实现。&lt;br&gt;&lt;b&gt;REST的出处&lt;/b&gt;&lt;br&gt;Roy Fielding的毕业论文。这哥们参与设计HTTP协议，也是Apache Web Server项目（可惜现在已经是 nginx 的天下）的co-founder。PhD的毕业学校是 UC Irvine，Irvine在加州，有着充裕的阳光和美丽的海滩，是著名的富人区。Oculus VR 的总部就坐落于此（虚拟现实眼镜，被FB收购，CTO为Quake和Doom的作者 John Carmack）。&lt;br&gt;众说周知，论文都是晦涩难懂的。当年在CMU读书的时候，很多课程都会安排每周两篇的Paper review。现在回想起来每次写Paper review都是我最为痛苦的时候。REST这篇博士论文毫无疑问更甚。&lt;br&gt;论文地址：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;REST章节：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fielding Dissertation: CHAPTER 5: Representational State Transfer (REST)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;REST那章我初读了，整个论文没有读完 =_=&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_r.jpg&quot;&gt;&lt;br&gt;&lt;b&gt;RESTful API&lt;/b&gt;&lt;br&gt;实用的是如何正确地理解 RESTful架构和设计好RESTful API。&lt;br&gt;&lt;br&gt;&lt;b&gt;首先为什么要用RESTful结构呢？&lt;/b&gt;&lt;br&gt;大家都知道&quot;古代&quot;网页是前端后端融在一起的，比如之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。在RESTful架构下：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/06ee404783540f0af299042057738a99_b.jpg&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;550&quot; data-original=&quot;https://pic2.zhimg.com/06ee404783540f0af299042057738a99_r.jpg&quot;&gt;&lt;br&gt;&lt;b&gt;Server的API如何设计才满足RESTful要求?&lt;/b&gt;&lt;br&gt;首先是简洁版里面的那几点。外加一些附带的 best practices：&lt;br&gt;1. URL root:&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//example.org/api/v1/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;example.org/api/v1/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;*&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//api.example.com/v1/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.example.com/v1/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;*2. API versioning:&lt;br&gt;可以放在URL里面，也可以用HTTP的header：&lt;br&gt;/api/v1/&lt;br&gt;3. URI使用名词而不是动词，且推荐用复数。&lt;br&gt;BAD&lt;br&gt;&lt;ul&gt;&lt;li&gt;/getProducts&lt;/li&gt;&lt;li&gt;/listOrders&lt;/li&gt;&lt;li&gt;/retrieveClientByOrder?orderId=1&lt;/li&gt;&lt;/ul&gt;GOOD&lt;br&gt;&lt;ul&gt;&lt;li&gt;GET /products : will return the list of all products&lt;/li&gt;&lt;li&gt;POST /products : will add a product to the collection&lt;/li&gt;&lt;li&gt;GET /products/4 : will retrieve product #4&lt;/li&gt;&lt;li&gt;PATCH/PUT /products/4 : will update product #4&lt;/li&gt;&lt;/ul&gt;4. 保证  HEAD 和 GET 方法是安全的，不会对资源状态有所改变（污染）。比如严格杜绝如下情况：&lt;br&gt;GET /deleteProduct?id=1&lt;br&gt;5. 资源的地址推荐用嵌套结构。比如：&lt;br&gt;GET /friends/10375923/profile&lt;br&gt;UPDATE /profile/primaryAddress/city6. 警惕返回结果的大小。如果过大，及时进行分页（pagination）或者加入限制（limit）。HTTP协议支持分页（Pagination）操作，在Header中使用 Link 即可。&lt;br&gt;7. 使用正确的HTTP Status Code表示访问状态：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTTP/1.1: Status Code Definitions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;8. 在返回结果用明确易懂的文本（String。注意返回的错误是要给人看的，避免用 1001 这种错误信息），而且适当地加入注释。&lt;br&gt;9. 关于安全：自己的接口就用https，加上一个key做一次hash放在最后即可。考虑到国情，HTTPS在无线网络里不稳定，可以使用Application Level的加密手段把整个HTTP的payload加密。有兴趣的朋友可以用手机连上电脑的共享Wi-Fi，然后用Charles监听微信的网络请求（发照片或者刷朋友圈）。&lt;br&gt;如果是平台的API，可以用成熟但是复杂的OAuth2，新浪微博这篇：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//open.weibo.com/wiki/%25E6%258E%2588%25E6%259D%2583%25E6%259C%25BA%25E5%2588%25B6%25E8%25AF%25B4%25E6%2598%258E&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;授权机制说明&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;各端的具体实现&lt;/b&gt;&lt;br&gt;如上面的图所示，Server统一提供一套RESTful API，web+ios+android作为同等公民调用API。各端发展到现在，都有一套比较成熟的框架来帮开发者事半功倍。&lt;br&gt;&lt;br&gt;-- Server --&lt;br&gt;推荐： Spring MVC 或者 Jersey 或者 Play Framework&lt;br&gt;教程：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//spring.io/guides/gs/rest-service/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Getting Started · Building a RESTful Web Service&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- Android --&lt;br&gt;推荐： RetroFit ( &lt;a href=&quot;//link.zhihu.com/?target=http%3A//square.github.io/retrofit/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrofit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ) 或者 Volley ( &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/mcxiaoke/android-volley&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mcxiaoke/android-volley · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; Google官方的被block，就不贴了 ) &lt;br&gt;教程：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//futurestud.io/blog/retrofit-getting-started-and-android-client/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrofit โ Getting Started and Create an Android Client&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/angeldevil/p/3757335.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;快速Android开发系列网络篇之Retrofit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- iOS --&lt;br&gt;推荐：RestKit ( &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/RestKit/RestKit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RestKit/RestKit · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; )&lt;br&gt;教程：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//code.tutsplus.com/tutorials/restkit_ios-sdk--mobile-4524&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Developing RESTful iOS Apps with RestKit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- Web --&lt;br&gt;推荐随便搞！可以用重量级的AngularJS，也可以用轻量级 Backbone + jQuery 等。&lt;br&gt;教程：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.javachen.com/2015/01/06/build-app-with-spring-boot-and-gradle/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.javachen.com/2015/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;01/06/build-app-with-spring-boot-and-gradle/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;参考：&lt;br&gt;[1]: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//bourgeois.me/rest/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Some REST best practices&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[2]: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.github.com/v3/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub API v3&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[3]: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/tlhunter/consumer-centric-api-design&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tlhunter/consumer-centric-api-design · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;最后附带一个彩蛋：&lt;br&gt;Facebook台球表演: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//v.youku.com/v_show/id_XMzYyOTIxMTI4.html%3Ffrom%3Dy1.7-2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;台球1—在线播放&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_200x112.jpg\" data-rawwidth=\"1328\" data-rawheight=\"702\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_r.jpg\">\n我觉得问题很好：REST -- REpresentational State Transfer 直接翻译：表现层状态转移。这个中文直译经常出现在很多博客中。尼玛谁听得懂“表现层状态转移”？这是人话吗？我自己也困惑了很久，查询了很多资料，花了差不多一年有个还算清晰的理解。分享如下…\n\n<a href=\"/question/28557115/answer/48094438\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-17\" target=\"_blank\" href=\"/question/28557115/answer/48094438\">编辑于 2015-05-17</a></p>\n\n",
    "link": "https://zhihu.com/question/28557115/answer/48094438"
  },
  {
    "question": "\nWeb 前端怎样入门？\n",
    "author": "Hawintion",
    "content": "\n\n<textarea hidden class=\"content\">好多人提到百度前端学院，是的，作为一个从百度前端学院受益的人来说一说：&lt;br&gt;2016.3做了百度前端学院系列，确实学习了不少东西。因为其实很多时候做很多东西都是项目驱动型的，如果不给你布置一个什么任务，你根本没有决心学习下去。&lt;br&gt;然后另一个就是 慕课网。因为慕课网上面的教程好多都是免费的，而且技术也很新。&lt;br&gt;而且我觉得我看视频的效率比看书要高。&lt;br&gt;学了一年了，说一下我的心路历程&lt;br&gt;--------------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;b&gt;首先第一步必然是W3cschool&lt;/b&gt;&lt;br&gt;另外我觉得菜鸟教程也不错&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.runoob.com/html/html-tutorial.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML 教程 | 菜鸟教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.runoob.com/css/css-tutorial.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS 教程 | 菜鸟教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.runoob.com/js/js-tutorial.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript 教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.runoob.com/jquery/jquery-tutorial.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 教程 | 菜鸟教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.runoob.com/bootstrap/bootstrap-tutorial.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bootstrap 教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;-----------------------------------------------------------------------&lt;br&gt;&lt;b&gt;第二步 然后，说一下，我学习的慕课网课程：&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;最基础的课程：&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;HTML+CSS基础课程  &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/u/1974843/messages&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;imooc.com/u/1974843/mes&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;sages&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/36&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript入门篇-JavaScript入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;学习HTML、CSS、JS入门&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;学习IDE，和GIt&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/333&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;快乐的sublime编辑器_sublime编辑器使用&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/390&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;版本控制入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;CSS进阶  &lt;/li&gt;&lt;li&gt;学习一些CSS3的特效，有好多，这里只列了一部分&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/33&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;十天精通CSS3_css3入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/331&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3实现漂亮ToolTips效果&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/252&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;css3实现网页平滑过渡效果&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/12&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;形形色色的下拉菜单&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/227&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3绚丽照片墙&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/93&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Sprite雪碧图应用&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;按钮特效-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/311&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sass入门篇_Sass入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;HTML进阶&lt;br&gt;&lt;/li&gt;&lt;li&gt;主要是学了H5的Canvas&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/24&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5之元素与标签结构&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/299&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5音乐可视化&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/133&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;炫丽的倒计时效果Canvas绘图与动画基础&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/185&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Canvas绘图详解&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/46&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5离线应用实战演练&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;js进阶&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/222&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery源码解析（DOM与核心模块）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;尝试做一个完整的系统&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/453&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;H5+JS+CSS3实现七夕言情&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/445&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3扁平化风格博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/174&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;商城分类导航效果&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/148&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;手把手教你实现电商网站后台开发&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Node.js React.js以及前端工具webpack gruntfile&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/348&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;进击Node.js基础(一)-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/637&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;进击Node.js基础(二)-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/75&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;node+mongodb 建站攻略(一期)-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/197&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;node建站攻略(二期)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/504&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/507&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React实战--打造画廊应用(上)-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/652&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React实践图片画廊应用（下）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/30&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Grunt-beginner前端自动化工具&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;学习时长居然有1046小时，当然也有可能是因为我忘记关实验室电脑了。不过后来当你入门了之后，我建议看视频还是来得太慢了，还是看API文档好。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/c41891e98dd76f05518d6ec182d55b92_b.png&quot; data-rawwidth=&quot;626&quot; data-rawheight=&quot;179&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;626&quot; data-original=&quot;https://pic3.zhimg.com/c41891e98dd76f05518d6ec182d55b92_r.png&quot;&gt;&lt;br&gt;-------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;b&gt;第三步 就是百度前端学院了&lt;/b&gt;&lt;br&gt; --------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;b&gt;当然光学这些还是不够的，这期间自己还接了几个外包来练手。&lt;/b&gt;&lt;br&gt;一个是管理系统，另一个类似于借贷宝一样的web系统&lt;br&gt;&lt;b&gt;----------------------------------------------------------------------------------------------------------------------------------------&lt;/b&gt;&lt;br&gt;&lt;b&gt;还有看书：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/dd357df8e90120881ad591f50e86cd05_b.png&quot; data-rawwidth=&quot;592&quot; data-rawheight=&quot;490&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;592&quot; data-original=&quot;https://pic2.zhimg.com/dd357df8e90120881ad591f50e86cd05_r.png&quot;&gt;以上是我的书单，当然我还没看完。&lt;br&gt;目前就看了&lt;br&gt;&lt;ul&gt;&lt;li&gt;HTML与CSS3权威指南&lt;br&gt;&lt;/li&gt;&lt;li&gt;javascript权威指南&lt;br&gt;&lt;/li&gt;&lt;li&gt;HTTP权威指南&lt;br&gt;&lt;/li&gt;&lt;li&gt;javascript+dom编程艺术&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;---------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;b&gt;最后最后，善于写博客自己总结&lt;/b&gt;&lt;br&gt;非常害羞的给出的自己的blog，写得很粗糙，平时主要只是为了记录自己学习过程中的体会。&lt;br&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/sinat_25127047&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Daisy花园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/b&gt;&lt;br&gt;然后也试着用jekyll和gitio搭了博客，但是疏于管理 ，看看就好, &lt;a href=&quot;//link.zhihu.com/?target=http%3A//daisyhawen.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Daisy花园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;我平时还是比较喜欢在CSDN上写（估计这点会被吐槽，因为不符合程序员的极客思维），但是我觉得CSDN也是markdown语法，写起来也挺方便的啊。==&lt;br&gt;而且在上面我找到了成就感啊&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/2cbf3d90a8600a68e8af77a1daab7852_b.png&quot; data-rawwidth=&quot;821&quot; data-rawheight=&quot;293&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;821&quot; data-original=&quot;https://pic3.zhimg.com/2cbf3d90a8600a68e8af77a1daab7852_r.png&quot;&gt;-------------------------------------------------------------------------------------------------------------------------------------&lt;br&gt;&lt;b&gt;后记&lt;/b&gt;&lt;br&gt;想说研一这一年很辛苦：&lt;br&gt;&lt;b&gt;有导师这边的事&lt;/b&gt;：一边在研究云里面的访问控制（发了一篇国际会议），写了一篇国内核心（然而这居然不能挂自己的名，这也是我放弃了科研的原因），还参与了中国云桌面标准的拟定。&lt;br&gt;&lt;b&gt;还要上课&lt;/b&gt;：昨天看学分，发现要求只用修25个学分，自己修了30个。&lt;br&gt;另外还接了&lt;b&gt;外包项目&lt;/b&gt;，所以经常翘课熬夜加班啊。&lt;br&gt;因此很多时候学习前端都是偷偷摸摸，导师一出现立马调到word或者matlab界面，然后还翘了很多选修课，不过回头看看自己的收获还是蛮多的。&lt;br&gt;然而前端技术正在日益更新，而且里面还有很多知识点技术点掌握不牢实，所以，这一年继续加油。&lt;br&gt;争取明年这个时候可以找一个理想的前端工作。&lt;br&gt;&lt;br&gt;最后再说一点，遇到bug一定要用google，stackoverflow上面有很多好的问题解答。&lt;br&gt;&lt;br&gt;&lt;u&gt;难得写得这么用心，您就点个赞再走呗~&lt;/u&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/c41891e98dd76f05518d6ec182d55b92_200x112.png\" data-rawwidth=\"626\" data-rawheight=\"179\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/c41891e98dd76f05518d6ec182d55b92_r.png\">\n好多人提到百度前端学院，是的，作为一个从百度前端学院受益的人来说一说： 2016.3做了百度前端学院系列，确实学习了不少东西。因为其实很多时候做很多东西都是项目驱动型的，如果不给你布置一个什么任务，你根本没有决心学习下去。 然后另一个就是 慕课网…\n\n<a href=\"/question/32314049/answer/120717594\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-09-06\" target=\"_blank\" href=\"/question/32314049/answer/120717594\">编辑于 2016-09-07</a></p>\n\n",
    "link": "https://zhihu.com/question/32314049/answer/120717594"
  },
  {
    "question": "\n如何不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标？\n",
    "author": "林面包",
    "content": "\n\n<textarea hidden class=\"content\">我告诉你标准答案。手机码字…将就着看吧…&lt;br&gt;int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99};&lt;br&gt;&lt;br&gt;如果打表的成本低，那就打表。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我告诉你标准答案。手机码字…将就着看吧… int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48…\n\n<a href=\"/question/41493194/answer/91226036\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-03-18\" target=\"_blank\" href=\"/question/41493194/answer/91226036\">编辑于 2016-03-18</a></p>\n\n",
    "link": "https://zhihu.com/question/41493194/answer/91226036"
  },
  {
    "question": "\n怎样防止重复发送 Ajax 请求？\n",
    "author": "长天之云",
    "content": "\n\n<textarea hidden class=\"content\">不推荐用外部变量锁定或修改按钮状态的方式，因为那样比较难：&lt;br&gt;&lt;ul&gt;&lt;li&gt;要考虑并理解 success, complete, error, timeout 这些事件的区别，并注册正确的事件，一旦失误，功能将不再可用；&lt;br&gt;&lt;/li&gt;&lt;li&gt;不可避免地比普通流程要要多注册一个 complete 事件；&lt;br&gt;&lt;/li&gt;&lt;li&gt;恢复状态的代码很容易和不相干的代码混合在一起；&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;我推荐用主动查询状态的方式（A、B，jQuery 为例）或工具函数的方式（C、D）来去除重复操作，并提供一些例子作为参考：&lt;br&gt;&lt;br&gt;&lt;b&gt;A. 独占&lt;/b&gt;&lt;b&gt;型&lt;/b&gt;&lt;b&gt;提交&lt;/b&gt;&lt;br&gt;只允许同时存在一次提交操作，并且直到本次提交完成才能进行下一次提交。&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pending'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/api/save'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;B. 贪婪&lt;/b&gt;&lt;b&gt;型&lt;/b&gt;&lt;b&gt;提交&lt;/b&gt;&lt;br&gt;无限制的提交，但是以最后一次操作为准；亦即需要尽快给出最后一次操作的反馈，而前面的操作结果并不重要。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pending'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n  &lt;span class=&quot;c1&quot;&gt;// todo&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;比如某些应用的条目中，有一些进行类似「喜欢」或「不喜欢」操作的二态按钮。如果按下后不立即给出反馈，用户的目光焦点就可能在那个按钮上停顿许久；如果按下时即时切换按钮的状态，再在程序上用 abort 来实现积极的提交，这样既能提高用户体验，还能降低服务器压力，皆大欢喜。&lt;br&gt;&lt;br&gt;&lt;b&gt;C. 节制型提交&lt;/b&gt;&lt;br&gt;无论提交如何频繁，任意两次有效提交的间隔时间必定会大于或等于某一时间间隔；即以一定频率提交。&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;throttle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;c1&quot;&gt;// todo&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;如果客户发送每隔100毫秒发送过来10次请求，此模块将只接收其中6个（每个在时间线上距离为150毫秒）进行处理。&lt;br&gt;这也是解决查询冲突的一种可选手段，比如以知乎草稿举例，仔细观察可以发现：&lt;br&gt;编辑器的 blur 事件会立即触发保存；&lt;br&gt;保存按钮的 click 事件也会立即触发保存；&lt;br&gt;但是存在一种情况会使这两个事件在数毫秒内连续发生——当焦点在编辑器内部，并且直接去点击保存按钮——这时用 throttle 来处理是可行的。&lt;br&gt;另外还有一些事件处理会很频繁地使用 throttle，如： resize、scroll、mousemove。&lt;br&gt;&lt;br&gt;&lt;b&gt;D. 懒惰&lt;/b&gt;&lt;b&gt;型&lt;/b&gt;&lt;b&gt;提交&lt;/b&gt;&lt;br&gt;任意两次提交的间隔时间，必须大于一个指定时间，才会促成有效提交；即不给休息不干活。&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;submit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;c1&quot;&gt;// todo&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;还是以知乎草稿举例，当在编辑器内按下 ctrl + s 时，可以手动保存草稿；如果你连按，程序会表示不理解为什么你要连按，只有等你放弃连按，它才会继续。&lt;br&gt;&lt;br&gt;============&lt;br&gt;更多记忆中的例子&lt;br&gt;&lt;br&gt;方式 C 和 方式 D 有时更加通用，比如这些情况：&lt;br&gt;&lt;ul&gt;&lt;li&gt;游戏中你捡到一把威力强大的高速武器，为了防止你的子弹在屏幕上打成一条直线，可以 throttle 来控制频率；&lt;br&gt;&lt;/li&gt;&lt;li&gt;在弹幕型游戏里，为了防止你把射击键夹住来进行无脑游戏，可以用 debounce 来控制频率；&lt;br&gt;&lt;/li&gt;&lt;li&gt;在编译任务里，守护进程监视了某一文件夹里所有的文件（如任一文件的改变都可以触发重新编译，一次执行就需要2秒），但某种操作能够瞬间造成大量文件改变（如 git checkout），这时一个简单的 debounce 可以使编译任务只执行一次。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;而方式 C 甚至可以和方式 B 组合使用，比如自动完成组件（Google 首页的搜索就是）：&lt;br&gt;&lt;ul&gt;&lt;li&gt;当用户快速输入文本时（特别是打字能手），可以 throttle  keypress 事件处理函数，以指定时间间隔来提取文本域的值，然后立即进行新的查询；&lt;br&gt;&lt;/li&gt;&lt;li&gt;当新的查询需要发送，但上一个查询还没返回结果时，可以 abort 未完成的查询，并立即发送新查询；&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;----- update 2013-01-08 -----&lt;br&gt;&lt;b&gt;E. 记忆型&lt;/b&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scrape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;memoize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/scraper'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'url'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;对于同样的参数，其返回始终结果是恒等的——每次都将返回同一对象。&lt;br&gt;应用例子有编辑器，如粘贴内容时抓取其中的链接信息，memoize 用以保证同样的链接不会抓取两次。&lt;br&gt;&lt;br&gt;----- update 2013-03-27 -----&lt;br&gt;&lt;b&gt;F. 累积型&lt;/b&gt;&lt;br&gt;前几天处理自动完成事件时得到这个函数，发现也可以用在处理连续事件上，它能够把连续的多次提交合并为一个提交，比如：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makePile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// 连续发送五次 &lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;/* post =&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;list:[{&quot;a&quot;:1},{&quot;a&quot;:2},{&quot;a&quot;:3},{&quot;a&quot;:4},{&quot;a&quot;:5}]&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;样例实现：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makePile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onfilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onvalue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onvalue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n      &lt;span class=&quot;nx&quot;&gt;onfilter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n      &lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;----- update 2013-04-16 -----&lt;br&gt;另一种累积是按时间而不是次数，比如应用在行为统计上，可能在瞬间收集到数十上百类似的行为，这时可以用上面 pile 的结构加上 debounce 来防止大批重复请求（但又不丢失任何统计）：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;touch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;debounce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n      &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n      &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;track&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;trackFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;550&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;c1&quot;&gt;// send tracking request&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;G. 采样型&lt;/b&gt;&lt;br&gt;这是最近重构时联想到的，一种和上面都不同的去重操作，可以应用在自动加载（timeline）行为控制上：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;autoload.listen(feeds, 'next', sample(3, function() {\n  this.enable()\n}))\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;如果 sample 是固化的选择函数（n 选 1），它这实际上会这样工作：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;O-O-X-O-O-X\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;但「自动加载」的应用可能想要的是（两次自动，一次手动）：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;X-X-O-X-X-O\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;对于这种情况，可以定义作为配置的选择函数来实现控制：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;options { sample: (n) =&amp;gt; n % 3 !== 0 }\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;即每个下一次加载完成之后， 每三次有两次对下一次加载实行自动加载。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n不推荐用外部变量锁定或修改按钮状态的方式，因为那样比较难： 要考虑并理解 success, complete, error, timeout 这些事件的区别，并注册正确的事件，一旦失误，功能将不再可用； 不可避免地比普通流程要要多注册一个 complete 事件； 恢复状态的代码很容易…\n\n<a href=\"/question/19805411/answer/15465427\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2012-10-25\" target=\"_blank\" href=\"/question/19805411/answer/15465427\">编辑于 2013-04-16</a></p>\n\n",
    "link": "https://zhihu.com/question/19805411/answer/15465427"
  },
  {
    "question": "\nChrome 的审查元素功能有哪些奇技淫巧？\n",
    "author": "Black Ray",
    "content": "\n\n<textarea hidden class=\"content\">对于开发者来说 Chrome 调试工具的奇技淫巧多了去了。&lt;br&gt;我就讲一些普通老百姓都能用上的。&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 下载网页上的视频&lt;/b&gt;&lt;br&gt;网页上的在线视频通常都是不提供直接下载的，所以可以试下这样：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d13ff3e2c530709542dec0cb8bf28c6f_b.png&quot; data-rawwidth=&quot;999&quot; data-rawheight=&quot;1103&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;999&quot; data-original=&quot;https://pic4.zhimg.com/d13ff3e2c530709542dec0cb8bf28c6f_r.png&quot;&gt;先选择 Network 这一页。&lt;br&gt;让视频稍微缓冲一会，然后观察下方列表哪个文件最大&lt;br&gt;（可以点红框里的 Size 来排序）而这个文件就是视频了。&lt;br&gt;最左边的一栏就是该视频的地址。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/845652d03619070e3c12bc744ab87336_b.png&quot; data-rawwidth=&quot;535&quot; data-rawheight=&quot;134&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;535&quot; data-original=&quot;https://pic3.zhimg.com/845652d03619070e3c12bc744ab87336_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 浏览网页里的所有图片&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/3b06285a4d78a6e1efcb33999dbdad6e_b.png&quot; data-rawwidth=&quot;1004&quot; data-rawheight=&quot;436&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1004&quot; data-original=&quot;https://pic3.zhimg.com/3b06285a4d78a6e1efcb33999dbdad6e_r.png&quot;&gt;&lt;br&gt;这次点 Resources 这页，然后左侧目录树点开 Images，里面就是当前网页中所有大小图片了，可以用键盘上下翻看，如果想保存可以直接把图片拽出来桌面。&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 去掉网页上的小广告&lt;/b&gt;&lt;br&gt;偶尔总会遇到几个网页喜欢放一些浮动广告，各种奇怪的游戏广告，经常就会挡住了你想按的按钮或者想看的内容，有时候点 x 也关不掉，那么你就可以临时把它删掉。&lt;br&gt;先点击最左边的这个放大镜，&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/d5ad3e12ed0d3e65d18a4b304896c3f2_b.png&quot; data-rawwidth=&quot;158&quot; data-rawheight=&quot;130&quot; class=&quot;content_image&quot; width=&quot;158&quot;&gt;然后点选目标内容&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/50956166daa45931d39a0c8f7f01a2d0_b.png&quot; data-rawwidth=&quot;361&quot; data-rawheight=&quot;361&quot; class=&quot;content_image&quot; width=&quot;361&quot;&gt;&lt;br&gt;然后按下键盘上的 Delete 键。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/77e9c7946f5679c7400d9e895c2f90fd_b.png&quot; data-rawwidth=&quot;349&quot; data-rawheight=&quot;381&quot; class=&quot;content_image&quot; width=&quot;349&quot;&gt;&lt;br&gt;就删掉这个东西了。&lt;br&gt;&lt;br&gt;&lt;b&gt;4. 网页上这个字体很好看，是什么字体？&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/a77e3f80c1c52f59ef92cb0489b21d23_b.png&quot; data-rawwidth=&quot;1004&quot; data-rawheight=&quot;783&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1004&quot; data-original=&quot;https://pic4.zhimg.com/a77e3f80c1c52f59ef92cb0489b21d23_r.png&quot;&gt;同样是先点击放大镜，然后选择目标。&lt;br&gt;右侧一栏找到 “font-family” &lt;br&gt;&lt;br&gt;补充：经评论指正，右边一栏选择 &quot;Computed&quot; 这一页更加准确。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/41807badecde07d975b82f320cfdc170_b.jpg&quot; data-rawwidth=&quot;365&quot; data-rawheight=&quot;194&quot; class=&quot;content_image&quot; width=&quot;365&quot;&gt;&lt;br&gt;&lt;br&gt;-------------------------&lt;br&gt;想到什么我再继续补充吧。&lt;br&gt;这些事情都是有专门的 Extension 去做的，&lt;br&gt;不过要说的话就跑题了。&lt;br&gt;-------------------------&lt;br&gt;&lt;br&gt;今天来补充一个&lt;br&gt;&lt;b&gt;5. 模拟手机模拟器查看手机版网页&lt;/b&gt;&lt;br&gt;这次我们点手机这个图标：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/013af31db265a51d3322771038a4b867_b.png&quot; data-rawwidth=&quot;190&quot; data-rawheight=&quot;161&quot; class=&quot;content_image&quot; width=&quot;190&quot;&gt;&lt;br&gt;然后点 Device 这里可以选择要模拟的设备屏幕&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/7b4b5284cb89af5e1a8757f082561d2d_b.png&quot; data-rawwidth=&quot;312&quot; data-rawheight=&quot;122&quot; class=&quot;content_image&quot; width=&quot;312&quot;&gt;&lt;br&gt;例如我选 iPhone 4&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/92679bc3afe9b8ef5af3e92e31c65766_b.png&quot; data-rawwidth=&quot;211&quot; data-rawheight=&quot;460&quot; class=&quot;content_image&quot; width=&quot;211&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/624b9673ad9cdeed725ecfddb78aa23f_b.png&quot; data-rawwidth=&quot;333&quot; data-rawheight=&quot;518&quot; class=&quot;content_image&quot; width=&quot;333&quot;&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/d13ff3e2c530709542dec0cb8bf28c6f_200x112.png\" data-rawwidth=\"999\" data-rawheight=\"1103\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/d13ff3e2c530709542dec0cb8bf28c6f_r.png\">\n对于开发者来说 Chrome 调试工具的奇技淫巧多了去了。 我就讲一些普通老百姓都能用上的。 <b>1. 下载网页上的视频</b> 网页上的在线视频通常都是不提供直接下载的，所以可以试下这样： 先选择 Network 这一页。 让视频稍微缓冲一会，然后观察下方列表哪个文件最大 …\n\n<a href=\"/question/34682699/answer/60285306\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-22\" target=\"_blank\" href=\"/question/34682699/answer/60285306\">编辑于 2015-08-24</a></p>\n\n",
    "link": "https://zhihu.com/question/34682699/answer/60285306"
  },
  {
    "question": "\n电脑上有哪些设计影响了几代用户的操作习惯？\n",
    "author": "一线希望",
    "content": "\n\n<textarea hidden class=\"content\">&lt;img src=&quot;https://pic2.zhimg.com/aad6aece6d3c5290b53f4b4ede5d08ad_b.jpg&quot; data-rawwidth=&quot;213&quot; data-rawheight=&quot;151&quot; class=&quot;content_image&quot; width=&quot;213&quot;&gt;&lt;br&gt;这个有疑问？</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/aad6aece6d3c5290b53f4b4ede5d08ad_200x112.jpg\" data-rawwidth=\"213\" data-rawheight=\"151\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/aad6aece6d3c5290b53f4b4ede5d08ad_r.jpg\">\n这个有疑问？\n\n<a href=\"/question/24346819/answer/27488300\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/24346819/answer/27488300\">发布于 2014-07-02</a></p>\n\n",
    "link": "https://zhihu.com/question/24346819/answer/27488300"
  },
  {
    "question": "\n作为开发者，有必要担心 Vue.js「是个人项目」、「只有一个开发者」的背景吗？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">我就说一点... Patreon 并不是我唯一的收入来源。我现在赚得比在 Meteor 和 Google 都多。&lt;br&gt;&lt;br&gt;当然了，贵司如果想要买安心，赞助一个也是极好的。&lt;br&gt;&lt;br&gt;---&lt;br&gt;&lt;br&gt;稍微补充点关于切题的。&lt;br&gt;&lt;br&gt;首先，同样是个人项目，稳定度可以天差地别。有些人是玩票，有些人是靠项目吃饭，用『个人项目』一刀切地去评判，显然不合理。这里复制黏贴我很久以前的一个评论：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;大公司 vs. 个人项目，这个是个常见的担忧。我其实有时候觉得一个项目人多未必就好，你如果去 Vue/React/Angular/Ember 的 GitHub issues 转转，你会发现 Vue 的未关闭 issues/bugs 是最少的，而且开过 issue 的人都知道 Vue 的 bug 通常都会在一两天之内就 fix （对数据感兴趣的可以看看 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//issuestats.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Issue Stats&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。我也参与 Meteor 的维护，深知一个庞大的项目在多人参与之后反而对于 issue 的定位、分配、修正速度有多大的影响，正因为 Vue 是我一个人的项目，我对任意一段代码都了如指掌，所以我修 bug 的效率是多人协作项目根本无法比较的。&lt;br&gt;&lt;br&gt;另一方面，敢不敢依赖个人项目其实完全取决于团队对风险的容忍度，以及觉得项目的开发者靠不靠谱。你看 Laravel / Express / Backbone / Babel / CoffeeScript / Browserify / Webpack / Less / PostCSS / jspm 其实都是一人主导的项目，大家不照样用得风生水起？所以非要拿这个说事儿其实也不全面的。Vue 还很年轻，严格来说我认真开始推 Vue 也就是今年下半年的事情，而且 1.0 发布后的 commit 里面 PR 越来越多，我相信外部贡献者的参与度只会越来越高。&lt;/blockquote&gt;&lt;br&gt;其次，个人 vs. 公司项目，也要看公司的项目在公司的布局中是什么地位。对于大公司来说，开源项目主要是两个意义：&lt;br&gt;&lt;ol&gt;&lt;li&gt;支持自家产品开发；&lt;/li&gt;&lt;li&gt;作为公司的技术公关，提高业界口碑，有利于招人。&lt;/li&gt;&lt;/ol&gt;这其中 (1) 是项目存在的前提，(2) 是开源的目的。很多公司的开源项目是从内部项目开一个分支出来，两边同时维护。如果项目成员忙于应对内部需求，项目开源的部分会立刻变成次要的任务。这一点最近 Dan Abramov 也提到过，React 核心团队其实也就 5~6 个人，很多时候 issue/PR 很久都没人看正是因为他们的优先级是先解决 FB 内部的产品需求而不是解决开源用户遇到的问题。更进一步，当一个项目连 (1) 都不能满足的时候，它会被毫不留情地咔嚓，YUI 就是一个例子，Angular 2 的改动其实是变相地咔嚓了 Angular 1，只不过反响太剧烈导致了负面口碑，所以不得不继续投入资源去维护。&lt;br&gt;&lt;br&gt;相比之下，Vue 的唯一目标就是让开源用户用得爽。这其中的区别，大家可以自己考量。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我就说一点... Patreon 并不是我唯一的收入来源。我现在赚得比在 Meteor 和 Google 都多。 当然了，贵司如果想要买安心，赞助一个也是极好的。 --- 稍微补充点关于切题的。 首先，同样是个人项目，稳定度可以天差地别。有些人是玩票，有些人是靠项目吃饭，…\n\n<a href=\"/question/48238046/answer/109901883\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-07-07\" target=\"_blank\" href=\"/question/48238046/answer/109901883\">编辑于 2016-07-08</a></p>\n\n",
    "link": "https://zhihu.com/question/48238046/answer/109901883"
  },
  {
    "question": "\n怎么样才算是精通 JavaScript？\n",
    "author": "张经纬",
    "content": "\n\n<textarea hidden class=\"content\"> 任何一门编程语言都是人去创造的，不管是javascript还是php或者是c&lt;br&gt;&lt;br&gt;那么，到底什么是精通javascript，什么又是精通php呢？&lt;br&gt;&lt;br&gt;试问，我理解了js里面对象的概念，理解了各种逻辑运算符，我精通么？&lt;br&gt;&lt;br&gt;显然，另外的同学会说，不，你还要学习面向对象或者函数式编程，你要试图用js去模拟一个类，然后让它具备重载以及多态等等特性。好了，我都学会了，精通了么？&lt;br&gt;&lt;br&gt;其它同学说，不不不，你需要让你的js写的更高效，还要考虑各种浏览器下对某些方法的支持与否，我们要保证这个js具备较好的兼容性。好了，你又学会了，精通了么？&lt;br&gt;&lt;br&gt;好吧，同学们又说了，我们每次写代码都重复使用，很是麻烦，不如你开发一个框架吧，好吧，你开发框架的过程中，了解了各种设计模式，好吧，你充分利用例如单体、工厂、观察者等等等等。&lt;br&gt;&lt;br&gt;好吧，尼妈这下总算精通了吧？同学又要学了，不行，咱们写了这么多，是否考虑到性能，需要不需要解耦，需要不需要再完善出来更多的widgets？&lt;br&gt;&lt;br&gt;什么时候是头？&lt;br&gt;&lt;br&gt;显然，学无止境，精通这个词即便是放在创始人身上都无能为力。&lt;br&gt;&lt;br&gt;但是，我们忽略了一点，上述所说的所有装B词汇都是诞生在数据结构、算法这两个方面上，我们的站于在堆栈，我们的立于算法。&lt;br&gt;&lt;br&gt;那么是否我们应该去学习数据结构，学习高深的算法呢？&lt;br&gt;&lt;br&gt;呵呵，学了也没用，因为无用武之地啊。&lt;br&gt;&lt;br&gt;所以，不用纠结自己精通或者不精通，学以致用，知行合一，才是最根本的。 </textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n任何一门编程语言都是人去创造的，不管是javascript还是php或者是c 那么，到底什么是精通javascript，什么又是精通php呢？ 试问，我理解了js里面对象的概念，理解了各种逻辑运算符，我精通么？ 显然，另外的同学会说，不，你还要学习面向对象或者函数式编程…\n\n<a href=\"/question/19657253/answer/12548454\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19657253/answer/12548454\">发布于 2011-05-20</a></p>\n\n",
    "link": "https://zhihu.com/question/19657253/answer/12548454"
  },
  {
    "question": "\nvue、react和angular 2.x谁是2016年的主流？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">先声明，作为 Vue 的作者我有利益相关，但我尽量从客观角度说说我的看法。&lt;br&gt;&lt;br&gt;&lt;b&gt;主流并不一定只有一个赢家&lt;/b&gt;&lt;br&gt;&lt;br&gt;首先，我觉得框架间的竞争并不是零和游戏。虽然解决的核心痛点有重合，但适用场景还是有区别。比如 React/Vue 这样以 view layer 为核心，可以灵活选择整体架构和工具链的框架，和 Angular 2 这样大而全一站到底的框架，各有各适合的场景。Vue 因为不需要构建也能直接用，也能用在一些比 React 更轻量的场景中。撇开场景，也有开发风格的偏好问题。有些人用 React 更有效率，有些人用 Vue 更有效率，而 C#/Java 生态圈一大群人会觉得 TypeScript 和 Angular 2 让他们更有效率。最理想的情况是大家都找到最符合自己场景需求和开发偏好的框架，所以我觉得多框架的并存是合理且有意义的，不太可能出现 Angular 2 火了就没人再用 React/Vue 的情况。&lt;br&gt;&lt;br&gt;&lt;b&gt;技术角度&lt;/b&gt;&lt;br&gt;&lt;br&gt;React 和 Angular 2 都有服务端渲染和原生渲染的功能（Angular 2 只是号称会有，具体啥时候会有，好不好用还不知道）。这两个东西在对此有需求的场景下，是很有吸引力的，但实际上对此有硬需求的场景占多少百分比则是个问题。比如服务端渲染的前提是前端渲染层得用 Node.js 交给『全栈』去做，原生渲染的多端代码复用率会因应用实际需求而变化，制约它们发挥的条件还是不少的，因此我个人乐观地认为这并不会影响 Vue 在整个市场中占有一席之地。另一方面，手淘已经押宝 Weex，也不排除哪天我会搞个 Vue 服务端渲染。&lt;br&gt;&lt;br&gt;性能方面，这里不深入谈了，这几个主流框架都应该可以轻松应付大部分常见场景的性能需求，区别在于可优化性和优化对于开发体验的影响。这一点上我觉得 Vue 可能是最简单的，加好 track-by 就 ok 了。React 需要 shouldComponentUpdate 或者全面 Immutable，Angular 2 需要手动指定 change detection strategy，都有一定程度的侵入性。但是从整体趋势上来说，浏览器和手机还会越变越快，框架本身的渲染性能在整个前端性能优化体系中，会渐渐淡化，更多的优化点还是在构建方式、缓存、图片加载、网络链路、HTTP/2 等方面。顺道说一句，Angular 2 压缩后的大小是 500 多 kb，在移动场景反正我是不敢用。&lt;br&gt;&lt;br&gt;&lt;b&gt;开发体验&lt;/b&gt;&lt;br&gt;&lt;br&gt;这方面，我个人认为 Vue 是最容易上手，最具亲和度的。工具链方面最近刚发布了 vue-cli，1 分钟搞定 webpack 配置。Vue 组件格式只要你会 HTML/CSS/JS 就能写，你要用 coffeescript 或者 less/sass 也没问题。React 的 JSX 是道坎，但跨过去之后会有一定的生产力提升。社区工具丰富，但实在太多，配置工具麻烦。CSS in JS 也不是每个人的菜。Angular 2 目前上手配置也非常麻烦，官方正在写一个 cli，但体验如何要出来了才知道。它推荐的默认语言是 TypeScript，这个对于静态类型爱好者来说是个大优点，配合 WebStorm/VSCode 体验会很不错，但也不是所有人的菜。&lt;br&gt;&lt;br&gt;&lt;b&gt;社区生态&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;React 是目前最成熟也最活跃的，但有一个问题就是过于频繁的方案迭代，几个月前的最佳实践可能明天就变过去式了，而 FB 官方对于最佳实践基本是采取让社区自行发展的态度，因此社区长期处于一个百家争鸣的状态，直到今年下半年才慢慢地开始合流到了 React + react-router + redux 的主流方案，并且这两天也开始讨论工具链的最佳实践。这些东西一旦稳定下来，会进一步巩固 React 的地位。&lt;/li&gt;&lt;li&gt;Vue 的社区固然比不上 React，但也不算太小。Gitter 聊天室里有 1300 来号人，国内听说也有几百人的 QQ 群，论坛上也还算有些活跃度。社区组件也在稳步发展：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/vuejs/awesome-vue%23libraries--plugins&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vuejs/awesome-vue · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 当然比起 React 来说还是小巫见大巫，希望 2016 能更进一步。比起 React 来说，Vue 的一个好处就是提供了官方推荐的 Vue + vue-router + vuex + webpack + vue-loader 的全套方案，如果你不想三个月换一套，就跟着官方推荐走；如果自己有想法，那就自己整也没问题。&lt;/li&gt;&lt;li&gt;Angular 2 的社区，目前来说基本没有，到现在连文档都没写完呢，也没法有什么生态。更伤的是 ng2 和 ng1 的生态是完全割裂的。2016 年能怎么发展，要看 Google 的社区运营做得如何，但不管怎么说 Google 的影响力在那边，群众基数还是很大的...&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;用户来源&lt;/b&gt;&lt;br&gt;&lt;br&gt;这一块  &lt;a data-hash=&quot;c5198d4e9c0145aee04dd53cc6590edd&quot; href=&quot;//www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@徐飞&quot; data-tip=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot; data-hovercard=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot;&gt;@徐飞&lt;/a&gt; 老师分析得很具体了。当然了，在中国还有另一个制约条件，那就是 IE8，这三个框架里面只有 React 支持 IE8，所以这应该会对 React 在中国的份额有所帮助... 另外徐飞叔预测 2016 年底 Vue 能和另外两个在同一数量级，我觉得还是太乐观了，我个人觉得不太可能 =_=&lt;br&gt;&lt;br&gt;&lt;b&gt;说在最后&lt;/b&gt;&lt;br&gt;&lt;br&gt;看到有人说这个题是在拍马屁。React/Angular 的作者们都不上知乎，那只能认为是在针对我了，但我是理解不了问问题的人拍我马屁有什么好处... 我知道 Vue 最近在国内被提起的比较多，难免会有人觉得是不是吹太过了，对于有这样的想法的同学我有如下建议：&lt;br&gt;&lt;br&gt;1. 如果你没用过 Vue，去用一用，自然会有你自己的判断；&lt;br&gt;2. 如果你用过 Vue，觉得确实吹过头了，欢迎写文章有理有节地来批评。有批评我才能改进 Vue，我会非常感谢你。&lt;br&gt;3. 如果你用过之后觉得确实不错，欢迎你加入社区贡献一份力量，一起推动项目的发展。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n先声明，作为 Vue 的作者我有利益相关，但我尽量从客观角度说说我的看法。 <b>主流并不一定只有一个赢家</b> 首先，我觉得框架间的竞争并不是零和游戏。虽然解决的核心痛点有重合，但适用场景还是有区别。比如 React/Vue 这样以 view layer 为核心，可以灵活选择整…\n\n<a href=\"/question/38989845/answer/79216477\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-30\" target=\"_blank\" href=\"/question/38989845/answer/79216477\">编辑于 2015-12-30</a></p>\n\n",
    "link": "https://zhihu.com/question/38989845/answer/79216477"
  },
  {
    "question": "\n前端开发中有什么经典的轮子值得自己去实现一遍？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">以下是我实现过的轮子（所有这些我都实现过不止一次，这里仅列出最近一次）：&lt;br&gt;&lt;br&gt;JS类工厂 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/mmclass&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/mmclass · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;特点是符合ES6语义，不过现在建议直接用ES6。&lt;br&gt;&lt;br&gt;基于generator和promise的异步 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/async.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/async.js · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;主要为教学目的，production建议使用babel。&lt;br&gt;&lt;br&gt;Promise实现 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/my-promise&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/my-promise · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;特点是目前唯一可以通过所有ES6 Promise和Promise A+测试的Promise实现。未来会继续维护，并打算投入生产环境替换掉现在使用的其他实现。&lt;br&gt;&lt;br&gt;触摸和指点设备手势库 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/zhi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/zhi · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;在生产环境使用的，不过因为没有新需求，所以有一段时间没维护了。后续如果有时间会用ES6+重写。&lt;br&gt;&lt;br&gt;加密算法 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/speck.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/speck.js · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;挑了一种新加密算法SPECK用sweetjs玩玩宏。其实不好算特定的轮子。&lt;br&gt;&lt;br&gt;ES5 shim &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/better-es5-shim&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/better-es5-shim · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;现有各种ES5 shim实现中反射和元编程有关的sham（sham指无法完全实现的shim）都实现得很糟糕。所以自己动手。不过太忙了没写完。预期明年会好好写一下。&lt;br&gt;&lt;br&gt;前端性能数据收集 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/WebPerf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/WebPerf · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;已在生产环境中使用。后续会抽时间升级支持浏览器的一些新特性。&lt;br&gt;&lt;br&gt;Loader &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/my.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/my.js · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;嗯，我们熟悉的loader。这最近一个是在ES6草案刚出来时候写的。等whatwg loader规范比较稳定之后（预计明年）会全部重写，敬请期待。&lt;br&gt;&lt;br&gt;基于HTML5的slide &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/hax/Slides&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hax/Slides · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;我去年以前的slide都是用这个做的。后来不高兴自己实现markdown支持，用了几次remark框架。最近又写了一个从markdown生成高桥流的slide框架，尚未单独发成repo，敬请期待。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;最后是我这几年花时间精力最多的轮子项目： &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/baixing/jedi&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;baixing/jedi · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;模板引擎。但又不止是模板引擎。&lt;br&gt;&lt;br&gt;为什么要搞这个东西，我以后会有专门的speech，这里先不展开了。&lt;br&gt;&lt;br&gt;&lt;br&gt;其他答案里提到的各种轮子除了富文本编辑器（天坑，没事儿千万别跳）、完整的js解释器（但我写模板引擎有部分涉及编译器）以及轮子说的浏览器（什么鬼！）之外，我多少都做过，只是没有形成repo发出来。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;以上只是表示我回答本题的资格（顺便耍帅）。&lt;br&gt;最后正经回答问题——哪个轮子适合初学者练手？&lt;br&gt;&lt;br&gt;我认为 触摸和指点设备手势库、ES5 shim、前端性能数据收集、基于HTML5的slide 这几个是适合的。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n以下是我实现过的轮子（所有这些我都实现过不止一次，这里仅列出最近一次）： JS类工厂 <a href=\"//link.zhihu.com/?target=https%3A//github.com/hax/mmclass\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">hax/mmclass · GitHub<i class=\"icon-external\"></i></a> 特点是符合ES6语义，不过现在建议直接用ES6。 基于generator和promise的异步 <a href=\"//link.zhihu.com/?target=https%3A//github.com/hax/async.js\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">hax/async.js · GitHub<i class=\"icon-external\"></i></a> 主要为教学目的，production建议使用babel…\n\n<a href=\"/question/29380608/answer/65298472\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/29380608/answer/65298472\">发布于 2015-09-26</a></p>\n\n",
    "link": "https://zhihu.com/question/29380608/answer/65298472"
  },
  {
    "question": "\n有哪些关于前端开发技术（HTML、CSS 和 JavaScript 等）的值得推荐的书籍？\n",
    "author": "郑航",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;第一本，入门&lt;/p&gt;&lt;p&gt;《Head first HTML&amp;amp;CSS》&lt;/p&gt;&lt;p&gt;最好的入门书。看两遍就对HTML &amp;amp; CSS 有个大概印象了。&lt;/p&gt;&lt;p&gt;此时把w3cschool作为备查手册收藏起来&lt;/p&gt;&lt;br&gt;&lt;p&gt;第二本《CSS权威指南（第三版）》&lt;/p&gt;&lt;p&gt;最权威的CSS书籍，除了阅读W3C的文档外的不二选择（就是翻译有点操蛋，遇到感到难理解的地方可能还是要求助于网络资源）。有时间（无论是现在还是将来）可以反复看，并当做字典随时查。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第三本《精通CSS》&lt;/p&gt;&lt;p&gt;广受前辈推荐的一本书。上一本书是字典的话，这本书相当于《中学生作文大全》，汇集了一些CSS的最佳实践。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第四本《图解CSS3：核心技术与案例实践》&lt;/p&gt;&lt;p&gt;这本书比较新，讲解的是最新的CSS3（前三本书停留在CSS2.1时代），CSS3也是必学的，不是什么可学可不学的最新技术。&lt;/p&gt;&lt;br&gt;&lt;p&gt;HTML CSS值得看的书就这些（之后会有一本《CSS秘密花园》，尚在翻译中，也很值得期待），剩下的就是自己写还有看技术博客了。接下来是JavaScript，HTML和CSS都是没有逻辑的标记型语言，JS才是真正的编程语言，评价前端工程师的水平就看这个了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第五本《JavaScript DOM编程艺术》&lt;/p&gt;&lt;p&gt;最好的JS入门书籍，一目了然地告诉你如何用JS操作DOM（这是浏览器端编程的基本功），还灌输了最符合标准的编程理念。可惜有点老，最新一版是2010年的，以至于部分内容有点过期，例如本书内经常提到“某某方法浏览器不一定支持，需要小心使用”，而这些历史遗留问题当今已经不存在了，阅读过程中无视就好。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第六本《JavaScript高级程序设计》&lt;/p&gt;&lt;p&gt;每个前端必看的书，此书是前端工程师科技树的关键一环。看完此书后再看看之后各类进阶书籍会比较好。&lt;br&gt;&lt;/p&gt;&lt;p&gt;俗称红宝书，也算入门书籍，虽然是大部头（七百多页），但至少通读一遍。&lt;/p&gt;&lt;p&gt;全部掌握了，你可以在网络社区里谈笑风生了，经过实践的锻炼后，面试个前端工程师的岗位应该都没问题了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第七本《JavaScript语言精粹》&lt;/p&gt;&lt;p&gt;也是前端必看。薄薄一百来页，对JS的去粗取精。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第八本《你不知道的JavaScript》&lt;/p&gt;&lt;p&gt;这是一套丛书， 目前为止仅翻译了第一卷。每本都挺薄，深入介绍了JS中的重要概念。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;第九本《JavaScript设计模式》&lt;/p&gt;&lt;p&gt;“设计模式”是软件工程的重要课题，相当于高考时候的答题套路。前人总结出来的应对各种问题的模板。也算是必看书籍。关于JavaScript设计模式的书籍目前也有好几本，也有国人写的，挑一两本看看就好。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第十本《高性能网站建设指南》（及其续篇《高性能网站进阶》）&lt;/p&gt;&lt;p&gt;告诉你真正的商业公司的前端是怎么优化一个网站的。当然优化的问题不是看看书就能解决的，最好时刻了解你的同行们的经验。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;看\n完以上十本算是前端入门了。到现在为止，配合搜索引擎，已经可以无障碍地做出静态网页、各种特效、用AJAX配合后台构建Web应用了。然后是各种框架、\n库、预处理语言的学习，而且现在JavaScript也可以用来写服务器了（Node.js），这样一来JS通吃前后端，前端工程师都欢欣鼓舞，这也是个\n学习热点。下面是一些补充书籍，可以穿插着看。（&lt;b&gt;至少看了两遍《JavaScript高级程序设计》再看下面的书&lt;/b&gt;）&lt;/p&gt;&lt;p&gt;《图解HTTP》和《HTTP权威指南》&lt;/p&gt;&lt;p&gt;每个Web程序员都应该熟悉HTTP协议里的内容。《图解HTTP》算是科普级别的书，《HTTP权威指南》则是大部头，需要点耐心才能看完。建议在了解AJAX后立刻开始学习HTTP协议。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;《锋利的jQuery》&lt;/p&gt;&lt;p&gt;讲JS最著名的库——jQuery的，快速入门的书。光会原生JS不够，还要会用库。&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;《数据结构和算法的JavaScript描述》&lt;/p&gt;&lt;p&gt;作为程序员如果连基本的数据结构和排序、查找算法都不会实在丢脸。&lt;/p&gt;&lt;br&gt;&lt;p&gt;《JavaScript编程精解》&lt;/p&gt;&lt;p&gt;巩固对JS的理解，很薄&lt;/p&gt;&lt;br&gt;&lt;p&gt;《JavaScript启示录》&lt;/p&gt;&lt;p&gt;同上，也很薄。&lt;/p&gt;&lt;br&gt;&lt;p&gt;《JavaScript权威指南》&lt;/p&gt;&lt;p&gt;号称“圣经”，最权威的JS书本，买来当作字典备查吧，没事也可以翻翻。​&lt;/p&gt;&lt;p&gt;然后就是向高级前端工程师发展了，由于我是个菜鸟，也没办法做什么推荐。这时候全靠上社区、看博客来开阔眼界追赶潮流了。&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;=========&lt;/p&gt;&lt;p&gt;最后不得不说的是，所有的书里面的一些理念、方法等，只是作者自己认为的最佳方案，不代表就是绝对的真理，有的甚至因为时代的发展反而成为了错误内容，“尽信书不如无书”，大家还是应该结合工作实际和当前的潮流来学习新知识。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n第一本，入门《Head first HTML&amp;CSS》最好的入门书。看两遍就对HTML &amp; CSS 有个大概印象了。此时把w3cschool作为备查手册收藏起来 第二本《CSS权威指南（第三版）》最权威的CSS书籍，除了阅读W3C的文档外的不二选择（就是翻译有点操蛋，遇到感到难理解的地…\n\n<a href=\"/question/19809484/answer/35544452\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-12-21\" target=\"_blank\" href=\"/question/19809484/answer/35544452\">编辑于 2015-10-07</a></p>\n\n",
    "link": "https://zhihu.com/question/19809484/answer/35544452"
  },
  {
    "question": "\n零基础如何迅速学习HTML（或HTML5）？\n",
    "author": "闹不住菇在搬砖",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;从题主的问题来看，&lt;/p&gt;&lt;blockquote&gt;“由于从事新媒体推广工作，现在在移动端流行“高大上”的HTML5。作为代码零基础的我，该如何迅速学习HTML（或HTML5）？”&lt;/blockquote&gt;&lt;p&gt;所以下面分两种情况来分析：&lt;/p&gt;&lt;br&gt;&lt;p&gt;1.如果题主零基础的情况下想去学代码的话，就得把HTML5、CSS3、JavaScript三个一口气都学了，这样就不需要各种求供应商和技术了。&lt;/p&gt;&lt;p&gt;这种情况下建议题主&lt;b&gt;在网上学习&lt;/b&gt;&lt;b&gt;+&lt;/b&gt;&lt;b&gt;课本学习同步进行&lt;/b&gt;：&lt;/p&gt;&lt;p&gt;网上学习强推网易云课堂上浙大的翁恺老师的计算机课程。&lt;/p&gt;&lt;p&gt;其一，翁恺老师本身就是高校里面的人气教师，讲课简明生动，很适合初学者入门【之前学过一些计算机课程，因为太过晦涩，对程序语言甚至有点心理阴影，所以初学者学的课程还是要谨慎选择】。&lt;/p&gt;&lt;p&gt;其二，翁恺老师在网上授课已经有蛮多经验了，也不会出现什么讲课中途遮住了PPT，代码看不清等等诡异的问题。。。&lt;/p&gt;&lt;p&gt;其三，网易云课堂上的三门课程都已经整理完毕，方便学习，平台也比较稳定。而且这些课程完全免费，每门课都有几万人在学【卖不了吃亏也买不了上当=、=&lt;/p&gt;&lt;p&gt;HTML5入门：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//study.163.com/course/introduction/171001.htm%23/courseDetail&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5入门 - 网易云课堂&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;CSS3：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//study.163.com/course/introduction/190001.htm%23/courseDetail&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3 - 网易云课堂&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;JavaScript：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//study.163.com/course/introduction/195001.htm%23/courseDetail&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript - 网易云课堂&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;书的话，还是推荐一些经典的吧：&lt;/p&gt;&lt;p&gt;《Head first HTML&amp;amp;CSS》：入门级必备，难度合适&lt;/p&gt;&lt;p&gt;《JavaScript DOM编程艺术》：同样入门级教材&lt;/p&gt;&lt;p&gt;《HTML5权威指南》：内容全面，进阶阶段可看&lt;/p&gt;&lt;p&gt;《JavaScript高级程序设计》：JS圣经，殿堂级教材&lt;/p&gt;&lt;p&gt;建议交错搭配学习，加深理解，不过这样学习来比较费时间就对了&lt;/p&gt;&lt;p&gt;2、如果只需要能制作出简单的H5页面，就可以绕过代码这关，&lt;b&gt;善用各类&lt;/b&gt;&lt;b&gt;H5&lt;/b&gt;&lt;b&gt;制作平台&lt;/b&gt;，应该都能轻松上手。&lt;/p&gt;&lt;p&gt;Maka：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.maka.im/home/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MAKA.im | 简单、强大的HTML5创作工具&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;印象中是最早开始做H5页面的平台之一，目前只有web端没有移动端，但网页上各类模板齐全，动态效果和交互也做得不错，只要自己填充内容就好，简单易上手。&lt;/p&gt;&lt;p&gt;初页：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//chuye.cloud7.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;初页 - 优质H5手机页、微信海报&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;和maka不同，专门做移动端的，也有一些预设的模板，支持添加文字、图片、音乐等，方便在手机上直接制作，胜在速度。&lt;/p&gt;&lt;p&gt;秀制作：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//xiumi.us/studio/booklet%23/for/new&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;秀米 XIUMI&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;来自微信公众号排版常用的工具秀米出品，可以和秀米配合使用，目前也只有web端。&lt;/p&gt;&lt;p&gt;Epub360意派：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.epub360.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Epub360意派-专业级H5微场景设计平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;模板不多，但自由度较高，适合有设计感的设计师来操刀制作，发挥交互功能，不过只能免费制作10个，而且作品还自带logo，有ipad版和web版。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n从题主的问题来看，“由于从事新媒体推广工作，现在在移动端流行“高大上”的HTML5。作为代码零基础的我，该如何迅速学习HTML（或HTML5）？”所以下面分两种情况来分析： 1.如果题主零基础的情况下想去学代码的话，就得把HTML5、CSS3、JavaScript三个一口气…\n\n<a href=\"/question/27018083/answer/56951675\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/27018083/answer/56951675\">发布于 2015-07-29</a></p>\n\n",
    "link": "https://zhihu.com/question/27018083/answer/56951675"
  },
  {
    "question": "\n零基础转前端是怎样一种体验？\n",
    "author": "尹光耀",
    "content": "\n\n<textarea hidden class=\"content\">不要只收藏不点赞啊啊啊QwQ&lt;br&gt;&lt;br&gt;我觉得这个问题我可以回答一下。。&lt;br&gt;&lt;br&gt;从开始到自学前端半年，现在收获很多。&lt;br&gt;&lt;br&gt;起源是大学前两年半都在混日子，C++挂过两次，java也是61分的水平飘过，c#大项目完全靠抱大腿，我的代码水平可想而知了，后来大三下学期的时候（大概是2月中下）想到该找工作了，当时纠结于php和前端，因为我php有点儿基础，但是感觉前端写各种炫酷页面很有成就感QwQ&lt;br&gt;&lt;br&gt;后来被一个百度的学长拉进了前端坑（老是被他喷基础差，理解力差，太笨，回家养猪吧，你毕业了最多拿4k工资，啊哈哈我现在实习工资就已经超过4k了），他告诉我能写出淘宝首页那种效果就可以进bat了，后来等我写出来时我才发现他是在骗我QwQ，不过我是科班出身，计算机方面还是有一些基础的，虽然混日子，但是耳闻目染多多少少会见识到一些东西，数据结构数据库计算机网络这些当时还是都有学过，只是前端基础没多少，我看过w3school上面的css和js，jquery教程，只知道用用$，getElementById这些东西，还是基本看过就忘的那种水平，不过还好的一点就是我自制力不错，计划性也比较强，比如规定三天之内高效的看完这本书，一周之内学完这个东西等等，嗯，我确实也做到了。当然还要感谢慕课网！！！慕课网视频真的很好，虽然很零碎，但是自己根据需求来看会比较有效，以后如果自己有成就了，一定要回头好好报答慕课网。&lt;br&gt;&lt;br&gt;我先做的就是刷完w3school的所有前端方面的教程，对于菜鸟来说还是挺有帮助的（现在回头看还是不推荐w3school，因为在那里养成了不注意代码格式的坏习惯，强烈推荐MDN入门），看第一遍的时候对整体有个印象，可以将内容分成多少块，第二遍第三遍就要开始细看，一定要边看边跟着敲，等全部理解后差不多就可以试着模仿一下w3school的首页页面了。&lt;br&gt;&lt;br&gt;然后js方面我看的最多的就是&lt;a href=&quot;//link.zhihu.com/?target=https%3A//book.douban.com/subject/10546125/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript高级程序设计（第3版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这本书我当时很认真很认真的用了三周差不多看完了，当时那三周真的很辛苦，每天去跑很远去本部图书馆（因为信息学部图书馆一直没有修好），早八晚十，中午能不睡觉就不睡觉，谦虚的说就是每天至少八个小时coding，用adobe reader和onenote记了很多很多笔记，也经常百度，不过看完之后真的收获很大，对面向对象和DOM,BOM等等都有了初步的掌握，而且我现在还经常会回头看这本书，每次看完都有不同的收获，基本前14章全部都是重点，必看的（真心不建议直接看js权威指南）&lt;br&gt;&lt;br&gt;之后我还看完了css权威指南，但是感觉对我提升不大，挺多东西在w3school已经看过了，真正对我帮助最大的还是慕课网上面张鑫旭老师的几个视频，后来我直接去他博客学习&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.zhangxinxu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 » 张鑫旭&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，张鑫旭老师 &lt;a data-hash=&quot;f5b8f8875e89c25d1b05c5bc12ea50b7&quot; href=&quot;//www.zhihu.com/people/f5b8f8875e89c25d1b05c5bc12ea50b7&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@张鑫旭&quot; data-hovercard=&quot;p$b$f5b8f8875e89c25d1b05c5bc12ea50b7&quot;&gt;@张鑫旭&lt;/a&gt; 的css水平是真的很高，这些让我对css的理解上升了一个层次（其实很多东西我现在还是不理解）。这里是自己总结的一些东西：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//segmentfault.com/a/1190000005986314&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;css中的那些布局&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;接下来就是css的实践了，对我帮助最大的就是百度ife的任务了&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ife.baidu.com/task/all&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;百度前端技术学院&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，提供了很多实战的机会，虽然我只写完了第一期和第二期的部分任务，但是着实让我的css得到了实践，好记性不如烂笔头，多敲多记才是最好的方法，总之，ife真的很良心。&lt;br&gt;&lt;br&gt;接着我就觉得自己css还算可以了，就想综合的写个复杂页面嘛，于是我就模仿了联想官网首页，当时写了整整两天，写的挺累的，现在再回头看发现写的很烂，里面一堆乱七八糟的东西，组件化程度不够，但是模仿的几乎一模一样，这算是第一次进行综合练习，这里我要推荐一个chrome的插件CSSViewer，真的挺好用。&lt;br&gt;&lt;br&gt;&lt;br&gt;之后，我还在图书馆借了《响应式web设计》这本书，由于内容比较少，所以两天就看完了，结合写ife里面自适应布局的经验，于是我开始尝试着写一些响应式的网页。&lt;br&gt;&lt;br&gt;不过因为是自学，没什么人指导（因为大家都很忙，才没人会管你呢），学到这个时候就很迷茫，不知道接下来该看什么了，感觉js水平完全不够，写的少，面向对象更是没怎么用过，但是后来无意中看到jquery插件开发教程&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.poluoluo.com/jzxy/201204/163035.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;跟我一起学JQuery插件开发教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，感觉很有意思，就去试着写了写，后来我把在慕课网上学到的轮播图（这个代码写的我现在都不想看了）和全屏滚动分别写成了插件，这大概也算是接触组件化了吧。&lt;br&gt;&lt;br&gt;这期间还有其他帮助很大的就是汤姆大叔的博客&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/TomXu/tag/JavaScript/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript - 标签&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这些博客很详细的写了js里面的各种坑，以及一些设计模式，其中js的模块模式让我印象最深刻，让我见识到了闭包的各种巧妙用法，之间也看过阮一峰老师介绍mvvm，模块化，异步等等的博客。&lt;br&gt;&lt;br&gt;之后就到了五月份，然后我想着这时候要开始找实习了（其实之前大家都开始各种找实习了，我知道自己的水平肯定不够，就一直淡定的自学着），我想简历上就一个这页面好像不大好，然后我就模仿慕课网上面的nodejs教程&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/75&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;node+mongodb 建站攻略(一期)-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，写了一个响应式的个人博客系统，这也是我第一次接触node，第一次真正写ajax，第一次用NoSql数据库（mondoDB），第一次接触grunt，总之这个让我获益颇多，这个博客系统从设计ui（其实是直接抄袭了国外某位设计师官网的ui）到完成一共用了三周，现在感觉写的极其......丑陋，当然，后来也是凭借这两个艰难的找到了人生第一份实习QwQ&lt;br&gt;&lt;br&gt;六月份是因为有期末考试，所以基本没有学习到什么，不过这期间我还是在慕课网上学习了一下sass和compass，也看了requireJS，但是我写的少（所以基本就等于没学），这个时候我还重新看了慕课网上面c++的视频，因为有js的基础了，所以学起来很快，而且结合c++里面的面向对象，指针之类的，也让自己学到很多（c++大法好！！），不过我c++还是挂了QwQ因为没去考试，直接得了0分，反正就是感觉这个月没怎么学东西。&lt;br&gt;&lt;br&gt;到了七月份，我就愉快的去实习了，然后因为各种原因，我实习了一个月就跑路了=。=不过这次实习让我对完整的网站开发流程有了很多的认识，虽然那里比不上大公司，但是比自学好多了，我们是一家只有十几个人的创业公司，但是老大真的很厉害，虽然他是写php的，以前只会在node里面用jade模板来渲染，现在知道还可以用mv*框架，当时我们用的是backbone.js，我也是第一次见到路由放到前端来写QwQ毕竟自己太渣了，之前用的是express的路由，见识太少了，莫见怪。&lt;br&gt;&lt;br&gt;之后就又开始疯狂投简历了，虽然面了很多，也很多没有过，但是得到了很多面试经验，而且自从面了ruff后就感觉自己面试水平有了质的飞跃QwQ（面试官叔叔问的太详细了）&lt;br&gt;&lt;br&gt;目前又拿到了杭州某家和武汉某家的实习offer，现在在朋友的鼓动下，决定只身一人去杭州（因为杭州实在没有认识的人，感觉会很孤单，参加校招也不方便，所以求个杭州的小伙伴带我飞QwQ），同时我也在准备九月份的校招，前两天刚看完了vue的官网文档&lt;a href=&quot;//link.zhihu.com/?target=http%3A//cn.vuejs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vue.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和博客园一位大神的教程 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/keepfool/category/845804.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/keepfool/ca&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;tegory/845804.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;然后也尝试着去写了一个很渣的小demo：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/Krystal/pen/pbkgoQ&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A Pen by  ĺ°šĺč&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，也看了一下jQuery的源码&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/aaronjs/p/3279314.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/aaronjs/p/3&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;279314.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，可惜马上去杭州后就要从头开始学react了。&lt;br&gt;&lt;br&gt;2333之前那个学长天天喷我菜，让我回家养猪，现在表示我的进步太快了，让我继续好好努力，然后我说是因为我知道自己很笨，但是我真的比别人都努力啊（后悔前两年半荒废了学业，真的应该好好学习）&lt;br&gt;&lt;br&gt;看到楼上的回答，我想起来这个学长也是图书馆专业的！！他把上课的时间全部用来自学了，后来拿到了百度的offer，他们当年创过业，和他一起的还有个同院的艾老师（不知道是不是图书馆专业）是零基础自学php的 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//idoubi.cc/%3Fp%3D204&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;你是否懂得我的坚持&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 所以我很佩服他，可惜他不在知乎，没法邀请&lt;br&gt;&lt;br&gt;接下来准备去实习（现在已经在实习了），然后好好学react，继续学习node，复习数据结构和计网（这个真的很重要，多少次面试都是跪在这俩上面），本来还想有机会就看看bootstrap源码，看看jquery源码，甚至去学学设计，现在来看都要校招后才能做到了，总之，这几个月的自学下来，感觉真的很累，把一天当两天过是多么辛苦，我想当时只有自己能理解，好几次感觉身体被掏空，而且随着学习的深入，发现自己很渣，需要学的东西还太多，找实习的时候好多次面试都是一面挂了，心疼自己QwQ不过面试的次数挺多了，总结就是，大公司对基础很重视，小公司更重视各种库和框架等技能。不能为了追求新技术而去学习各种框架，还是应该先把基础搞好，如果可以，jquery源码看一遍应该会提升很多。&lt;br&gt;&lt;br&gt;最后，祝我好运！！！也祝题主好运！！！&lt;br&gt;&lt;br&gt;对了，对于我这种英语渣来说，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//segmentfault.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SegmentFault&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;真的很好用！！！里面的人都很热心（对比知乎）！！！有兴趣的同学可以加群：468273103 ，大家一起交流&lt;br&gt;&lt;br&gt;这里挑选一些自己看过并且觉得很良心的慕课网课程：&lt;br&gt;1、深入理解css系列：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/680&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之margin&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/403&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之line-height_技术学习教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/643&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之z-index-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/565&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之relative_技术学习教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/192&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之absolute_技术学习教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/121&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之float浮动&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/256&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS深入理解之overflow_技术学习教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;2、css雪碧应用：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/93&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Sprite雪碧图应用&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/243&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;用字体在网页中画ICON图标&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;3、sass:&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/311&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sass入门篇_Sass入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/436&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;sass进阶篇视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/364&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sass和Compass必备技能之Sass篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/371&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sass和Compass必备技能之Compass-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/425&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;侧栏工具条开发&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;3、原生js系列：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/659&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;原生 JS 实现帧动画库&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/18&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;焦点图轮播特效&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/32&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;用JS实现放大镜特效&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/74&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript侧边栏信息展示效果&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;4、jquery&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/418&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery基础 (一)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/530&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery基础(二)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/429&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery基础修炼圣典&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/430&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery基础修炼圣典&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;5、组件&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/374&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;全屏切换效果_技术学习教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/99&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿当大话西游之WEB组件&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//coding.imooc.com/class/15.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;组件方式开发Web App全站-web app开发实战教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;6、ajax&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/250&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ajax全接触_技术学习教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;7、响应式&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//coding.imooc.com/class/50.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;响应式开发教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/41&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bootstrap响应式布局&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;8、移动web&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/494&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hello，移动WEB_移动web建站&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/43&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;移动优先的跨终端 Web-慕课网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/140&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;移动端的WEB相册&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;9、node&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/348&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;进击Node.js基础（一）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/637&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;进击Node.js基础（二）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/295&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mongoDB入门篇_mongoDB入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/259&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;带你学习Jade模板引擎&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/75&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;node+mongodb 建站攻略（一期）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/197&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;node建站攻略(二期)——网站升级&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;10、vue&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/learn/694&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vuejs入门基础&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;11、react&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/view/504&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React入门视频教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n不要只收藏不点赞啊啊啊QwQ 我觉得这个问题我可以回答一下。。 从开始到自学前端半年，现在收获很多。 起源是大学前两年半都在混日子，C++挂过两次，java也是61分的水平飘过，c#大项目完全靠抱大腿，我的代码水平可想而知了，后来大三下学期的时候（大概是2…\n\n<a href=\"/question/48989656/answer/114454389\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-01\" target=\"_blank\" href=\"/question/48989656/answer/114454389\">编辑于 2016-12-30</a></p>\n\n",
    "link": "https://zhihu.com/question/48989656/answer/114454389"
  },
  {
    "question": "\n将html5缩写成h5究竟合不合理？\n",
    "author": "叛逆者",
    "content": "\n\n<textarea hidden class=\"content\">问问那些把HTML5缩写成H5的人，Java8怎么缩写。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n问问那些把HTML5缩写成H5的人，Java8怎么缩写。\n\n<a href=\"/question/48031998/answer/108746623\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/48031998/answer/108746623\">发布于 2016-07-01</a></p>\n\n",
    "link": "https://zhihu.com/question/48031998/answer/108746623"
  },
  {
    "question": "\n为什么前端工程师很难找？\n",
    "author": "朴灵",
    "content": "\n\n<textarea hidden class=\"content\">还是在于环境的认知和认同问题。     &lt;br&gt;&lt;br&gt; 他们也许不懂交互设计，但是没人比他们懂交互设计的实现，和每一个细节。   &lt;br&gt; 他们也许不懂视觉设计，但是没人比他们懂视觉设计如何变为现实。    &lt;br&gt; 他们也许不懂后台数据库，但是他们其实才是数据的第一消费者。    &lt;br&gt; 他们也许不是产品经理，但是产品的质量几乎都是由他们来决定。     &lt;br&gt;&lt;br&gt; 他们除了对HTML+CSS+JS精通一点外，什么都不很精通。很多做桌面软件出身的高管会以为他们什么都不懂，所以从来没有重视过。因为他们认为HTML+CSS+JS都是很简单的事情，大街上找个程序员都会写，自己手里的程序员，也能顺手写一点。     &lt;br&gt;&lt;br&gt; 可以说web上的跨界经验，没人比他们多。那些以为学什么语言都一样的人，     &lt;br&gt;&lt;br&gt; 那批以为前端工程师什么都不懂，什么都不精通的人深深地影响了其余的人。所以，很少有初学者报有信心来深入的学习。因为有人告诉他们做前端买不起房，买不起车，娶不了妹纸。     &lt;br&gt;&lt;br&gt; 所以根本就没什么培训渠道。那些还在学习这些的，全都是为兴趣而来的。有所成绩的同学，必定都有一个深爱他的老板。     &lt;br&gt;&lt;br&gt; 那些懂一点交互，懂一点视觉，后端熟知，前端精通的人，如果还有一点野心。他们应该现在奋斗在创业的前线。剩下来的孩子，才是真正的前端工程师，是伤不起的天使，如果你遇到了，请珍惜吧。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n还是在于环境的认知和认同问题。 他们也许不懂交互设计，但是没人比他们懂交互设计的实现，和每一个细节。 他们也许不懂视觉设计，但是没人比他们懂视觉设计如何变为现实。 他们也许不懂后台数据库，但是他们其实才是数据的第一消费者。 他们也许不是产品经…\n\n<a href=\"/question/19923687/answer/13503994\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-12-13\" target=\"_blank\" href=\"/question/19923687/answer/13503994\">编辑于 2011-12-13</a></p>\n\n",
    "link": "https://zhihu.com/question/19923687/answer/13503994"
  },
  {
    "question": "\n如何看待异乡好居老板娘控（wu）告程序员删代码？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">我是异乡好居一名在职员工，事情发生到现在一周多时间，一直在观望事态发展，本来不想参与此事(毕竟出于自我保护，不敢和老板作对…) ，但出于良心对自己的拷问，还是要站出来揭露一些真相！！！目前在职，所以先可耻的匿着，等离职后再公开身份。望大家谅解 &lt;br&gt;&lt;br&gt;=-----------------------------------------------------&lt;br&gt;&lt;b&gt;真相一: 冲突起因&lt;/b&gt;&lt;br&gt;=-----------------------------------------------------&lt;br&gt;&lt;br&gt;事件发生后，迫于知乎等媒体平台的舆论压力，印老板在自己微博里po出自圆其说的解释，试图洗白，并避重就轻的截取小部分聊天截图，扭曲事实，将问题的过错强加到彬哥头上。下为他微博截图: (微博直达：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/1211121671/DvzgK8XTJ%3Ffrom%3Dpage_1005051211121671_profile%26wvr%3D6%26mod%3Dweibotime%26type%3Dcomment%23_rnd1464015426714&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这是李彬在公司的总监群的最后一次发言。从... 来自印建坤是80后&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;585&quot; data-rawheight=&quot;681&quot; src=&quot;https://pic4.zhimg.com/98a823b54157cd36d6a42a03ac19dfef_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;585&quot; data-original=&quot;https://pic4.zhimg.com/98a823b54157cd36d6a42a03ac19dfef_r.png&quot;&gt;&lt;br&gt;大家可以看到，印老板的第二句话(红线标注)强调没有人说过一句话，也没有人要辞退他。&lt;br&gt;&lt;br&gt;好吧，下面是真相帝揭出真相的时刻 ，也是印老板啪啪啪打脸的时刻 ，以下为完整对话记录截图:&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;599&quot; data-rawheight=&quot;1920&quot; src=&quot;https://pic4.zhimg.com/0fa1559d8d1ab5f508ec678a47a9f0a3_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;599&quot; data-original=&quot;https://pic4.zhimg.com/0fa1559d8d1ab5f508ec678a47a9f0a3_r.jpg&quot;&gt;&lt;br&gt;好吧，没有人说一句话，没有人说要辞退他，我什么都没有看见。(哦，貌似的确没说要辞退彬哥，而是要辞退彬哥所在的两个部门！) 这个时候彬哥才站出来说了那段话，之后老板娘跳出来痛骂了彬哥，再之后彬哥就不在群里了，估计被踢出去了…&lt;br&gt;&lt;br&gt;记得印老板还在微博说要调彬哥去北京工作或培训之类的言辞，但事发转天如其他答友所说，彬哥的指纹被删，公司邮箱等帐号全被关停，甚至他和另一位妹子工作用的电脑设备都被没收了。试问调员工去北京工作或培训为什么要采取上述看上去要逼走员工的举措？&lt;br&gt;&lt;br&gt;这就是事件的真相！我尽量还原真相时语气中立一些。&lt;br&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;b&gt;真相二: 老板如何看待负面消息？&lt;/b&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;br&gt;其实异乡好居从公司创立到现在也才刚刚一年多的时间，这期间离职的员工很多很多，光财务就换了四个，具体为什么财务离职率这么高，大家自己猜吧。目前为止离职的员工大多都对公司怨声载道，最早出现负面消息应该是脉脉上的一些评价，其他知乎答友已经有发过相关的截图了，我就不重复发了，下面是老板当初对那些负面消息的看法:&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;1038&quot; data-rawheight=&quot;1356&quot; src=&quot;https://pic2.zhimg.com/fad641e0b2a5b440c5cb1140d47ffddd_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1038&quot; data-original=&quot;https://pic2.zhimg.com/fad641e0b2a5b440c5cb1140d47ffddd_r.jpg&quot;&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;b&gt;真相三: 强制要求研发人员去房产部轮岗工作三天&lt;/b&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;br&gt;今年年初某天，不知是不是老板突然拍脑门来了灵感，要求全公司员工都要去房产部轮岗三天，还特意强调了研发部的程序员们必须参加。很多人可能有疑问轮岗是去做什么，就是去做房产数据录入，联系客户签单，兼任客服等工作....难道只是轮岗么？No,No,No, 轮岗完你还必须要写一份3000字以上的心得体会让领导们(夫妻俩)审批打分，分数要是低了，要罚款扣钱甚至降薪的哦！&lt;br&gt;&lt;br&gt;注意：必须轮岗！必须轮岗！必须轮岗！必须写3000字的“作文”！不写“作文”要罚钱！&lt;br&gt;&lt;br&gt;无图无真相：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/ed8b28236482ee44193b06cff39ff3a7_b.jpg&quot; data-rawwidth=&quot;1242&quot; data-rawheight=&quot;2139&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1242&quot; data-original=&quot;https://pic4.zhimg.com/ed8b28236482ee44193b06cff39ff3a7_r.jpg&quot;&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;b&gt;真相四: 新入职员工泪流满面的入职环节：写&quot;作文&quot;&lt;/b&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;br&gt;从2016年三月某天开始，我们老板突然下令：公司所有新入职员工，在入职当天，必须阅读所有公司宣传手册、资料及产品、业务介绍等等，阅读之后要马上写5000字以上的“读后感”，之后人事汇总入职人员的“作文”之后，递交给领导（夫妻俩）审阅，不符合要求的入职人员直接走人，不愿意写“作文”的也可以直接走人了。&lt;br&gt;&lt;br&gt;此“政策”推行后，公司内就会时常出现一大景观：大批入职人员集体入职，人事将大家带到会议室，大家用半天时间看资料，然后写“作文”。当然也有一些看不惯这种入职规矩的朋友，直接拒绝写“读后感”，直接回家了的。&lt;br&gt;&lt;br&gt;说实话，很多人来面试的时候都不知道入职第一天要做这样的&quot;洗礼&quot;，所以通知被录用之后，大多毫无顾虑的辞掉了之前的工作，满心欢喜的来异乡好居入职，没想到第一天就要被摧残，看到一大摞介绍资料，和要写的几千字&quot;作文&quot;要求之后，估计肠子都悔青了.&lt;br&gt;&lt;br&gt;这个真相实在没有截图了，不过近几个月入职的员工应该都有这个悲惨的经历。&lt;br&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;b&gt;真相五: 夫妻俩罚款成瘾&lt;/b&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;br&gt;众所周知，我们老板是新东方系统出来的，之前貌似当过兵之类的，对军事化管理推崇至极！对自己的权利也是极其重视，对他来说，恐怕任何公司制度都是在他的话语权之下的。所以在公司内，任何事情，只要他看不顺眼，就要罚款。自公司创立至今，员工们因为大大小小各种奇葩的理由都被罚款过，这里只罗列一个最经典的罚款“案例”，不做过多文字描述，直接上图：&lt;br&gt;&lt;br&gt;1.&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/f473804bcb17e9925a08a361499c5bd7_b.jpg&quot; data-rawwidth=&quot;860&quot; data-rawheight=&quot;622&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;860&quot; data-original=&quot;https://pic4.zhimg.com/f473804bcb17e9925a08a361499c5bd7_r.jpg&quot;&gt;2.&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b1b5ea9d02a08707cf3dcf62398efeee_b.jpg&quot; data-rawwidth=&quot;1242&quot; data-rawheight=&quot;831&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1242&quot; data-original=&quot;https://pic3.zhimg.com/b1b5ea9d02a08707cf3dcf62398efeee_r.jpg&quot;&gt;3.&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/07ec1d328fc7c1a13627d24c3ef1f6c0_b.png&quot; data-rawwidth=&quot;1208&quot; data-rawheight=&quot;468&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1208&quot; data-original=&quot;https://pic1.zhimg.com/07ec1d328fc7c1a13627d24c3ef1f6c0_r.png&quot;&gt;4.&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/5e4b1e53496866bcacdd06f236cb3d83_b.jpg&quot; data-rawwidth=&quot;782&quot; data-rawheight=&quot;1280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;782&quot; data-original=&quot;https://pic4.zhimg.com/5e4b1e53496866bcacdd06f236cb3d83_r.jpg&quot;&gt;5.&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/e92806f1da628b7bee752dc19a5486c7_b.jpg&quot; data-rawwidth=&quot;1260&quot; data-rawheight=&quot;851&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1260&quot; data-original=&quot;https://pic4.zhimg.com/e92806f1da628b7bee752dc19a5486c7_r.jpg&quot;&gt;6.&lt;img src=&quot;https://pic2.zhimg.com/53768b80bce1fddba34fc583440f8351_b.jpg&quot; data-rawwidth=&quot;740&quot; data-rawheight=&quot;1280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;740&quot; data-original=&quot;https://pic2.zhimg.com/53768b80bce1fddba34fc583440f8351_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;上面这六个截图，只是异乡好居所有“罚款流水线”的凤毛麟角而已，还有很多很多，这些是写感想或转发广告，不然罚款。以前还有要求所有人去苹果的app store刷好评，并截图发群里，不发评论的罚200. 还有去网站刷好评。当然，还有更“可恶”的，就是要求所有员工去百度点击竞争对手网站的百度推广链接，好吧，我只能说到这了，啦啦啦。&lt;br&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;b&gt;真相六:  老板&amp;amp;老板娘无视法律&lt;/b&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;br&gt;当彬哥和张张这件事发生之后, 先是老板娘跳出来诬陷他们删了公司价值几百万的网站代码, 虽然已在公安局登记备案, 但目前看上去已经是不了了之, 老板娘最早的目的恐怕也就是想以几百万吓唬二人, 逼二人主动离职. 但此法并没有奏效, 遂偃旗息鼓, 不敢再把事情闹大. &lt;br&gt;&lt;br&gt;之后老板又在朋友圈发了一句指责百度和劳动法的内容, 很明显是针对劳动法的一些条文. 能在公开场合这样评价劳动法, 也是蛮奇葩的. 具体含义大家自己解读吧. (估计是在找劳动法的漏洞, 找理由开除掉彬哥和张张, 因为那几天总能看到老板和老板娘在和一位看似律师的人促膝长谈)&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0cb309c488928695e0dedd687b577c51_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;217&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic2.zhimg.com/0cb309c488928695e0dedd687b577c51_r.jpg&quot;&gt;&lt;br&gt;另外, 补充一下, 印老板曾无数次开全体大会的时候跟我们说, 人事MM又跟他说了什么什么是不可以的, 因为法律规定巴拉巴拉巴拉巴拉. 印说: &quot; 法律规定什么用得着你跟我说? 我TM是学法律的, 我不比你清楚?! 招你来这里不是让你给我讲法条的, 全按法律的来还要你做什么?  &quot; &lt;br&gt;&lt;br&gt;正因如此, 我们公司才会一年内换了4个财务, 好频繁的说. 据之前离职财务透露, 老板曾用融资来的钱去买基金&amp;amp;炒股, 而且还要那个财务解决账目问题. OMG, 好可怕! 为什么老板名下有这么多的注册公司, 什么万象好居, 兄弟好居啊之类的, 为什么? 大家猜猜看.&lt;br&gt;&lt;br&gt;2016-09-23 更新:&lt;br&gt;=================================================================================&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;b&gt;真相七: [重磅]恶意辞退员工录音曝光&lt;/b&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;抱歉各位, 答主久未更新, 主要是因为在公司内此事件慢慢趋于平静, 老板在公司各种机会宣扬彬哥官司败诉的谣言, 大家也不知道具体怎么样了, 最近有打听到彬哥已经还在和公司打官司, 且仲裁已胜诉. 由于公司不服判决再次上诉法院, 所以还没有结果.&lt;br&gt;&lt;br&gt;今天要更新的是在我们公司大家都有流传的一个音频录音, 录音的主要内容就是印老板当时辞退一个程序员的对话全过程.由于对话时就是在开放的办公区, 所以我们很多在场的同事其实都有听到, 没想到现在拿到了录音, 独家揭晓我们霸道的总裁是如何霸道的裁人的.&lt;br&gt;&lt;br&gt;录音文件请戳这里: &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//share.weiyun.com/6c361a079928a9beafb54c623c0fb1a8&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;share.weiyun.com/6c361a&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;079928a9beafb54c623c0fb1a8&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;下面是录音的文字版:&lt;br&gt;&lt;p&gt;&lt;b&gt;员工Z&lt;/b&gt;&lt;b&gt;: &lt;/b&gt; 你们辞退的理由是什么?&lt;/p&gt;&lt;p&gt;&lt;b&gt;某马屁总监H(向老板打小报告&lt;/b&gt;&lt;b&gt;):&lt;/b&gt; 你就别说那么多了…不是说了, 你想怎么处理就怎么处理.&lt;/p&gt;&lt;p&gt;&lt;b&gt;员工Z&lt;/b&gt;&lt;b&gt;:&lt;/b&gt;  那我可以选择不走, 因为劳动合同规定我必须同意才能…&lt;/p&gt;&lt;p&gt;&lt;b&gt;总监H&lt;/b&gt;&lt;b&gt;: &lt;/b&gt; 你要和李彬他们一样啊? &lt;/p&gt;&lt;p&gt;&lt;b&gt;员工Z&lt;/b&gt;&lt;b&gt;:&lt;/b&gt;  可以啊.&lt;/p&gt;&lt;p&gt;&lt;b&gt;总监H: &lt;/b&gt;别整这事啊.&lt;/p&gt;&lt;p&gt;&lt;b&gt;员工Z: &lt;/b&gt;既然公司这么做, 我们就可以一起告他, 对吧.&lt;/p&gt;&lt;p&gt;&lt;b&gt;总监H&lt;/b&gt;&lt;b&gt;:&lt;/b&gt;  那你那你那你那你跟李彬一块弄去吧…&lt;/p&gt;&lt;p&gt;&lt;b&gt;员工Z&lt;/b&gt;&lt;b&gt;: &lt;/b&gt; 对啊, 那你告诉我辞退的理由是什么?&lt;/p&gt;&lt;p&gt;&lt;b&gt;总监H: &lt;/b&gt; 你说呢?&lt;/p&gt;&lt;p&gt;&lt;b&gt;员工Z: &lt;/b&gt; 我怎么知道啊, 老板来了直接告诉我, 我在门口拍了个视频, 就告诉我被辞退了.&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;b&gt;老板Y:&lt;/b&gt;  哥们, 辞退你不需要理由! 你是录音呢吗?&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;b&gt;员工Z: &lt;/b&gt; 对啊. 我现在录音呢.&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;b&gt;老板Y: &lt;/b&gt; 我就告诉你, 不需要理由, 你觉得公司需要赔偿你多少钱, 法院判, 法院判我赔你一千万我就赔你一千万, 你看你值不值这个钱, 明白吗?&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;b&gt;员工Z: &lt;/b&gt; 你接着说...没有理由是吗? 那你为什么辞退我?&lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;&lt;b&gt;老板Y: &lt;/b&gt; 不需要理由! &lt;/u&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;员工Z:&lt;/b&gt;  你一点法律常识都没有是吗?&lt;/p&gt;&lt;p&gt;&lt;b&gt;总监H:&lt;/b&gt;  哎呀, 行啦行啦行啦....你该怎么处理怎么处理, 然后你该怎么办怎么办就完了啊.&lt;/p&gt;&lt;br&gt;&lt;br&gt;补充一些背景知识:&lt;br&gt;&lt;b&gt;为什么老板气急败坏的辞退这个员工Z呢?&lt;/b&gt;&lt;br&gt;因为当时老板派员工L早晨堵在公司门口不让彬哥进公司上班, 彬哥让员工Z帮忙录视频取证, 结果总监H看到了, 向老板Y打小报告, 之后老板就发飙了, 当众对员工Z说: 你被辞退了!&lt;br&gt;&lt;br&gt;=--------------------------------------------------&lt;br&gt;真相八: 正在整理&lt;br&gt;=--------------------------------------------------&lt;br&gt;&lt;br&gt;好了，先写这么多，更多真相会慢慢更新，世界是公平的，也请大家以公正的眼光看待这些真相。本人还原事件真相会尽量图文并茂，用聊天截图或照片来论证真相！&lt;br&gt;&lt;br&gt;有很多朋友问我们老板的微博，想去问候一下，在此提供：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/yinjiankun&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;印建坤是80后的微博&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;不过之前有访问过的朋友肯定会发现，之前大家的评论已经被我们老板删的差不多了，目前仅剩转发的一些微博记录，看来他也是一直在关注此事的发展，并时刻准备着删掉“无聊”的评论。&lt;br&gt;&lt;br&gt;好了，不说了，我藏起来先。&lt;br&gt;之前爆米花 吃完的赶紧再买几包，板凳坐穿的赶紧修修，一大波真相正在赶赴现场…</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawwidth=\"585\" data-rawheight=\"681\" src=\"https://pic4.zhimg.com/98a823b54157cd36d6a42a03ac19dfef_200x112.png\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/98a823b54157cd36d6a42a03ac19dfef_r.png\">\n我是异乡好居一名在职员工，事情发生到现在一周多时间，一直在观望事态发展，本来不想参与此事(毕竟出于自我保护，不敢和老板作对…) ，但出于良心对自己的拷问，还是要站出来揭露一些真相！！！目前在职，所以先可耻的匿着，等离职后再公开身份。望大家谅…\n\n<a href=\"/question/46294596/answer/102169021\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-05-23\" target=\"_blank\" href=\"/question/46294596/answer/102169021\">编辑于 2016-09-23</a></p>\n\n",
    "link": "https://zhihu.com/question/46294596/answer/102169021"
  },
  {
    "question": "\nCSS 那么多属性，而且每个属性都有多个值怎么记？\n",
    "author": "韩双力",
    "content": "\n\n<textarea hidden class=\"content\">/**2016.2.19更新，CSS书写顺序推荐（全部）**/&lt;br&gt;&lt;br&gt;Nicholas C.Zakas (《JavaScript高级程序设计》的作者，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.nczonline.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;NCZOnline - The official website of Nicholas C. Zakas&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;)说过，要想全面理解和掌握JavaScript，关键在于弄清楚它的历史、本质和局限性。对CSS同样适用。&lt;br&gt;&lt;br&gt;&lt;b&gt;历史&lt;/b&gt;&lt;br&gt;\n混沌未分天地乱，CSS的诞生就是为了终结当时由推动Web世界繁荣的首功之臣HTML引发的混乱局面。在1990~1993年Web世界还处于一片荒芜的时候，HTML这个勤劳而艰难生存的族群带着描述段落、标题、超链接等结构性内容（后来这些成员荣升HTML国的贵族，经过几次战乱并一直生活到现在）的技能给Web世界带来了生机。而后 Mosaic（早期的一款浏览器）的出现让文字和图片可以一起显示出来，也一夜之间让Web威名远扬，这里充满魔力与神奇。无数的站点冒了出来，无数的站点吸引无数的人，无数的人带来无数的新功能，我要字体能变色，我要字体能加粗，各种样式要求不断增加。HTML为了满足人们不断膨胀的欲望和要求努力扩充技能树，最后弄得自己苦不堪言，一大堆描述样式的标签（现在还有的&amp;lt;i&amp;gt;&amp;lt;em&amp;gt;等）搞得开发乱七八糟。&lt;br&gt;&lt;br&gt;结构化标记语言就这样变成了一坨一坨的字符串。&lt;br&gt;&lt;br&gt; 刚成立的Web世界联合国W3C并没有坐视不管，而是在积极的寻找与焦急的等待。终于他们找到了CSS。CSS在现在Web开发中可谓平淡无奇，写CSS是很自然的事情因为它就属于开发的一部分，但在当时却是绝无仅有的。它最初由&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/H%25C3%25A5kon_Wium_Lie&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HÃ¥kon Wium Lie&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/01647612218449a7c8c7b744bed92138_b.jpg&quot; data-rawwidth=&quot;940&quot; data-rawheight=&quot;529&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;940&quot; data-original=&quot;https://pic1.zhimg.com/01647612218449a7c8c7b744bed92138_r.jpg&quot;&gt;于1994.10.10（他当时是&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Tim_Berners-Lee&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tim Berners-Lee&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;在CERN的同事，Lee发明了万维网）提出来，由&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Bert_Bos&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bert Bos&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;建议，经过W3C的公开和内部讨论最终在1996年底推出CSS1，并使之成为标准被推荐，很快浏览器厂商也争相在自家产品中实现以占领市场。这中间也并非一帆风顺，比如网景公司就提交了一种新语言JSSS来实现样式，但最终并没有被接受（这种开发标准之争一直存在，包括后来的JavaScript，以及现在开发中的很多新技术都是这样）。&lt;br&gt;&lt;br&gt;CSS接过了HTML手中的样式表现接力棒，也开始了自己的传奇之旅。&lt;br&gt;&lt;br&gt;&lt;b&gt;本质&lt;/b&gt;&lt;br&gt;CSS的本质可以分为宏观与微观两方面。\n宏观上它的存在就是为了控制页面的显示样式。包括布局，颜色，字体等。微观上则是实现这种控制功能的各种属性的定义和工作原理。&lt;br&gt;&lt;br&gt;了解定义就能干活，知道原理才能把活干好。&lt;br&gt;&lt;br&gt;题主说属性太多，其实CSS就是去控制样式而已，网页样式是借鉴于传统的报纸等印刷品的排版。你随便在身边找一份报纸或者杂志的一页，用CSS尽可能的还原出来。整体布局还原出来问题应该不大，但是具体到细节的时候可能会有很多问题，比如出来的效果总是跟想的不一样。这个时候就该去看看单个属性的工作原理，比如margin是用来控制外边距的但是用%的时候它是怎么计算的最终值呢？当发现出乎意料的时候就去&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.w3.org/TR/2011/REC-CSS2-20110607/indexlist.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Index&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;\n查一下属性的定义和值的计算方法。&lt;br&gt;常用基础样式：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b96085de31e527f7b7154b42740bc3ba_b.png&quot; data-rawwidth=&quot;665&quot; data-rawheight=&quot;2092&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;665&quot; data-original=&quot;https://pic3.zhimg.com/b96085de31e527f7b7154b42740bc3ba_r.png&quot;&gt;&lt;br&gt;Tips：&lt;ul&gt;&lt;li&gt;常用CSS属性margin和padding的%取值是基于包含块（离元素最近的块级祖先元素）的宽,注意是宽。&lt;/li&gt;&lt;li&gt;行内元素相关的内容区、行内框、基线这几个概念很重要。&lt;/li&gt;&lt;li&gt; inline-block是，内部被解析为块级元素，自身被解析为行内元素。&lt;/li&gt;&lt;li&gt; background-image可以同时为一个元素设置多个背景图配合background-position可以组合出神奇的效果。&lt;/li&gt;&lt;li&gt;浮动的元素会消除外边距重合，浮动的元素会被解析为块级元素。&lt;/li&gt;&lt;li&gt;top,right,bottom,left,z-index这些属性只有用在定位元素(除了position为static值)上才有效。&lt;/li&gt;&lt;li&gt;overflow的值设置为scroll，在移动端可以做横向滑动效果。&lt;/li&gt;&lt;li&gt;除了做表格不要用table布局。&lt;/li&gt;&lt;li&gt; 选择器都很简单，只说一类。结构伪类选择器，原理可以理解为先找到符合条件的元素后，向上找到其父元素然后验证规则。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;局限性&lt;/b&gt;&lt;br&gt; 更新中...&lt;br&gt;&lt;b&gt;番外篇&lt;/b&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;CSS推荐书写顺序（完整版）&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//fe4han.github.io/demo/css/order_your_css.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS属性推荐书写顺序&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/01647612218449a7c8c7b744bed92138_200x112.jpg\" data-rawwidth=\"940\" data-rawheight=\"529\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/01647612218449a7c8c7b744bed92138_r.jpg\">\n/**2016.2.19更新，CSS书写顺序推荐（全部）**/ Nicholas C.Zakas (《JavaScript高级程序设计》的作者，<a href=\"//link.zhihu.com/?target=https%3A//www.nczonline.net/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">NCZOnline - The official website of Nicholas C. Zakas<i class=\"icon-external\"></i></a>)说过，要想全面理解和掌握JavaScript，关键在于弄清楚它的历史、本质和局限性。对CSS同样适用…\n\n<a href=\"/question/31317160/answer/85833065\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-02-11\" target=\"_blank\" href=\"/question/31317160/answer/85833065\">编辑于 2016-02-19</a></p>\n\n",
    "link": "https://zhihu.com/question/31317160/answer/85833065"
  },
  {
    "question": "\n一份优秀的前端开发工程师简历是怎么样的？\n",
    "author": "羡辙",
    "content": "\n\n<textarea hidden class=\"content\">刚做完简历的我就来知乎上搜这么个问题，我是不是有打小广告的嫌疑……╰(￣▽￣)╮&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//zhangwenli.com/cv&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Wenli Zhang's CV&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;源码戳这里：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Ovilia/cv&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/Ovilia/cv&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;其他项目也基本都在 GitHub 上 host，喜欢的话可以关注我~&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/afa51fca8fff16d7708073eea70e4fce_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic3.zhimg.com/afa51fca8fff16d7708073eea70e4fce_r.jpg&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/963d3c1da35099a614fbd70ed73deb11_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic2.zhimg.com/963d3c1da35099a614fbd70ed73deb11_r.jpg&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/04e372c5b33fc8024cc49abc53d76836_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic3.zhimg.com/04e372c5b33fc8024cc49abc53d76836_r.jpg&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/55cfce08e66d28587eaac4ea9637bb58_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic1.zhimg.com/55cfce08e66d28587eaac4ea9637bb58_r.jpg&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/8768aa92fc8783d1b41a2f21bd7069f0_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic1.zhimg.com/8768aa92fc8783d1b41a2f21bd7069f0_r.jpg&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/6456b96b06cc530e431268565472c656_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic3.zhimg.com/6456b96b06cc530e431268565472c656_r.jpg&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/13fcd9c8f1a2fafc900b9db2af853c3a_b.jpg&quot; data-rawwidth=&quot;1347&quot; data-rawheight=&quot;626&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1347&quot; data-original=&quot;https://pic3.zhimg.com/13fcd9c8f1a2fafc900b9db2af853c3a_r.jpg&quot;&gt;&lt;br&gt;虽然现在还没做成想象中很酷炫的效果，不过暂且把这个作为前端工程师简历的底线应该还是可以的……吧？&lt;br&gt;&lt;br&gt;附单页打印版：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/3c479a81babbabda95921c6e7ce75143_b.jpg&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;600&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;800&quot; data-original=&quot;https://pic4.zhimg.com/3c479a81babbabda95921c6e7ce75143_r.jpg&quot;&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/afa51fca8fff16d7708073eea70e4fce_200x112.jpg\" data-rawwidth=\"1347\" data-rawheight=\"626\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/afa51fca8fff16d7708073eea70e4fce_r.jpg\">\n刚做完简历的我就来知乎上搜这么个问题，我是不是有打小广告的嫌疑……╰(￣▽￣)╮ <a href=\"//link.zhihu.com/?target=http%3A//zhangwenli.com/cv\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Wenli Zhang's CV<i class=\"icon-external\"></i></a> 源码戳这里：<a href=\"//link.zhihu.com/?target=https%3A//github.com/Ovilia/cv\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/Ovilia/cv</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> 其他项目也基本都在 GitHub 上 host，喜欢的话可以关注我~ 虽然现在还没做成想象中很酷炫的效果，不过暂且把这个作为…\n\n<a href=\"/question/23150301/answer/32496711\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-10-26\" target=\"_blank\" href=\"/question/23150301/answer/32496711\">编辑于 2015-03-30</a></p>\n\n",
    "link": "https://zhihu.com/question/23150301/answer/32496711"
  },
  {
    "question": "\n如何评价真阿当的文章：《2016年前端技术观察》？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">不谢邀。&lt;br&gt;&lt;br&gt;评价就免了，槽点太多反而不好下手。但至少比较好的总结了阿当自己的观点，至少以后要论战不能以微博140字讲不清楚作为理由了。&lt;br&gt;&lt;br&gt;&lt;br&gt;本来前端圈子里对阿当（曹刘阳）的观点已经讨论过几波了，再来一次也无伤大雅。但是这次不太好的一点呢，是从CSDN/程序员这个老牌程序员媒体上发表的，就让前端圈之外的人误以为阿当的观点是前端行业的主流看法或者至少是有很大影响力的意见。这会误导其他技术人员（包括技术管理层）和非技术人员（如产品、设计）。我为什么敢说阿当的观点绝对不是主流，不是凭借我个人在前端行业的权威地位（自吹一下，反正不上税），而是这确实是业界共识（具体后面会说）。&lt;br&gt;&lt;br&gt;坦率说，这个事情呢，我也有微小的责任。因为程序员编辑部其实之前找过我，希望我来写2016前端技术盘点，我呢太忙了（年底事多，还要参加好多活动），就推说这题目太难。本来我也应该推荐一些其他人来写，比如 &lt;a data-hash=&quot;0321af07fd2112b74fdb32dc5e8a03d1&quot; href=&quot;//www.zhihu.com/people/0321af07fd2112b74fdb32dc5e8a03d1&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@黄玄&quot; data-hovercard=&quot;p$b$0321af07fd2112b74fdb32dc5e8a03d1&quot;&gt;@黄玄&lt;/a&gt; 啊。写技术盘点这种题目非常重要的是技术视野和技术品味，黄玄这方面很好，而且对于2016年的热点如微信小程序、（被很多人忽视的）PWA等都有很深入的观察，而且他最近应该也比较空。但是不幸的，因为程序员编辑部的工作人员在微博私信上联系的，我现在刷微博比较少，后来就把这个事情忘记了。但我确实也没想到最后他们会找阿当来写。毕竟我印象里历史上程序员杂志的编辑还是有眼力劲的，比如在2013年年初请 &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt; 撰写的《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//history.programmer.com.cn/15552/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;开源前端框架纵横谈&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》，那时小右甚至还没开始vue的开发（不知道是不是写了这盘点之后才下决心自己写一个的）。当时我也还不认识小右，但那文章给我留下了印象，所以现在还记得。&lt;br&gt;&lt;br&gt;其实那期是前端专刊（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.csdn.net/article/2013-03-02/2815113&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《程序员》2013年3月刊：前端-CSDN.NET&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），我们看下目录：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.csdn.net/article/2013-04-15/2814893&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;开源前端框架纵横谈&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; by &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt;&lt;br&gt;&lt;br&gt;Web App和HTML5给Web前端带来的变化 by 曹刘阳&lt;br&gt;（我整理时才发现那个时候阿当也写了一篇，说明当时这篇文章没给我留下啥印象。）&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/seajs/seajs/issues/547&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端模块化开发的价值 &lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; by &lt;a data-hash=&quot;c11336b8607d86bc9090bed90757a34c&quot; href=&quot;//www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@玉伯&quot; data-hovercard=&quot;p$b$c11336b8607d86bc9090bed90757a34c&quot;&gt;@玉伯&lt;/a&gt;&lt;br&gt;&lt;br&gt;前端工程师如何应对移动Web时代的应用开发 by &lt;a data-hash=&quot;ec03b8e839a6fb763e1b8113455362db&quot; href=&quot;//www.zhihu.com/people/ec03b8e839a6fb763e1b8113455362db&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@winter&quot; data-hovercard=&quot;p$b$ec03b8e839a6fb763e1b8113455362db&quot;&gt;@winter&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.csdn.net/article/2014-04-03/2819144&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TypeScript：更好的JavaScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; by &lt;a data-hash=&quot;d92c025cc5099deb6ad6023758573868&quot; href=&quot;//www.zhihu.com/people/d92c025cc5099deb6ad6023758573868&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@高博&quot; data-hovercard=&quot;p$b$d92c025cc5099deb6ad6023758573868&quot;&gt;@高博&lt;/a&gt;&lt;br&gt;&lt;br&gt;CoffeeScript：阴霾天空的一抹蓝 by 周亮&lt;br&gt;&lt;br&gt;ClojureScript：前端世界的Lisp by 胥帝&lt;br&gt;&lt;br&gt;针对应用程序设计的Web编程语言Dart——《Dart语言程序设计》作者Chris Strom专访 by 韩国恺&lt;br&gt;&lt;br&gt;Node.js高实时应用开发 by 谢骋超&lt;br&gt;&lt;br&gt;&lt;p&gt;Backbone.js在大型单页面应用中的应用实践 by &lt;a data-hash=&quot;4df5cfafc891e87489a6c89d3018fd5e&quot; href=&quot;//www.zhihu.com/people/4df5cfafc891e87489a6c89d3018fd5e&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@赵望野&quot; data-hovercard=&quot;p$b$4df5cfafc891e87489a6c89d3018fd5e&quot;&gt;@赵望野&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;为什么Discourse使用Ember.js by Robin Ward&lt;/p&gt;&lt;br&gt;&lt;p&gt;模块化高扩展性的前端框架KISSY by &lt;a data-hash=&quot;ff8c116d1a7a57af9de3b25e602b27c9&quot; href=&quot;//www.zhihu.com/people/ff8c116d1a7a57af9de3b25e602b27c9&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@何一鸣&quot; data-hovercard=&quot;p$b$ff8c116d1a7a57af9de3b25e602b27c9&quot;&gt;@何一鸣&lt;/a&gt;（承玉）&lt;/p&gt;&lt;br&gt;&lt;p&gt;行进中开火：YUI3在美团的实践 by &lt;a data-hash=&quot;26d40a71a3bfa462c1e68317c8cd1ab9&quot; href=&quot;//www.zhihu.com/people/26d40a71a3bfa462c1e68317c8cd1ab9&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尚春&quot; data-hovercard=&quot;p$b$26d40a71a3bfa462c1e68317c8cd1ab9&quot;&gt;@尚春&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;CSS预处理器：Sass、LESS和Stylus实践 by &lt;a data-hash=&quot;5fb0012aa84178c10cabdc95d7f30d08&quot; href=&quot;//www.zhihu.com/people/5fb0012aa84178c10cabdc95d7f30d08&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@大漠&quot; data-hovercard=&quot;p$b$5fb0012aa84178c10cabdc95d7f30d08&quot;&gt;@大漠&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;一共14篇。【值得收藏的一期嘿】&lt;br&gt;&lt;br&gt;&lt;br&gt;除去我不认识的周亮、胥帝、老外Robin Ward（Discourse作者），高博老师（著名技术译者）、谢骋超（pomelo的作者）不算前端圈里的人，其他9人确定是前端圈内的。韩国恺（应该是google的）、尚春（美团的）我不熟，其他7人我都多少有过交流。其中只有阿当转行做了产品，其他人就算做了管理不太写代码了，但至少还是前端或大前端团队的技术leader。以我的了解，我认为他们任何一人都不会同意阿当的大部分观点。&lt;br&gt;&lt;br&gt;其中有几位自己就回答过相关问题：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/38924821/answer/78861138&quot; class=&quot;internal&quot;&gt;关于「真阿当」对目前流行前端技术的批判，大家有什么看法？ - 尤雨溪的回答 - 知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/38924821/answer/78832576&quot; class=&quot;internal&quot;&gt;关于「真阿当」对目前流行前端技术的批判，大家有什么看法？ - 玉伯的回答 - 知乎&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/41970658/answer/93122733&quot; class=&quot;internal&quot;&gt;如何看待真阿当每天在微博吵架？ - winter 的回答 - 知乎&lt;/a&gt;&lt;br&gt;&lt;br&gt;毕竟，按照阿当现在的观点，TS、CoffeeScript、ES6、Angular、React、CSS预处理器、Node.js……都贬低了一遍，你们对照一下其他人当年写的稿子和现在做的事情，哪能赞同阿当呢？&lt;br&gt;&lt;br&gt;&lt;br&gt;不幸的是，这次CSDN/程序员在14位过往撰稿人当中偏选了阿当。&lt;br&gt;&lt;br&gt;而且如果你翻一下阿当当初写的那篇，尽管我们知道当年他就已经很固执了，但其实还没有现在这么……走火入魔。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4555dddf9e209908e299086b8d3155eb_b.png&quot; data-rawwidth=&quot;1410&quot; data-rawheight=&quot;1856&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1410&quot; data-original=&quot;https://pic4.zhimg.com/v2-4555dddf9e209908e299086b8d3155eb_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;技术更新换代近在眼前，每个前端人都应该对此有危机意识……才不至于在这场新的革命中掉队。&lt;br&gt;&lt;/blockquote&gt;呵呵。&lt;br&gt;&lt;br&gt;&lt;br&gt;有些人可能会觉得（包括他自己表达的也是）他是实践之后才觉得这些东西不好的。但是他到底实践了多少呢？大部分人可能并不知道阿当是个多么固执的人。实际上我、winter、 &lt;a data-hash=&quot;0c6abb554ca000d11fc974428c6b49c6&quot; href=&quot;//www.zhihu.com/people/0c6abb554ca000d11fc974428c6b49c6&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@米粽&quot; data-hovercard=&quot;p$b$0c6abb554ca000d11fc974428c6b49c6&quot;&gt;@米粽&lt;/a&gt; 、大城小胖 &lt;a data-hash=&quot;b3e22f5612efe98698cd025921f88500&quot; href=&quot;//www.zhihu.com/people/b3e22f5612efe98698cd025921f88500&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@魏子钧&quot; data-hovercard=&quot;p$b$b3e22f5612efe98698cd025921f88500&quot;&gt;@魏子钧&lt;/a&gt;、&lt;a data-hash=&quot;10c136ec130053380abee86298515f7a&quot; href=&quot;//www.zhihu.com/people/10c136ec130053380abee86298515f7a&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@月影&quot; data-hovercard=&quot;p$b$10c136ec130053380abee86298515f7a&quot;&gt;@月影&lt;/a&gt; 等当初在盛大创新院和阿当做过一段同事。特别是大城小胖、米粽跟他一起做过项目。当时（2010年）要做游戏大厅基于websocket的服务器端，所有人都建议他用node.js，一方面node.js已经有很好的websocket库和socket.io这样的封装库，另一方面我们许多人都非常看好node.js，并且统一到js能方便团队协作。但是他偏要自己用python撸一个。&lt;br&gt;&lt;br&gt;所以他一开始就对node.js充满偏见直至今天。&lt;br&gt;&lt;br&gt;BTW，所有盛大创新院共事过的前端（包括非前端的，如老赵 &lt;a data-hash=&quot;78e3b98074a915b222ae1be4ab038a6e&quot; href=&quot;//www.zhihu.com/people/78e3b98074a915b222ae1be4ab038a6e&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@赵劼&quot; data-hovercard=&quot;p$b$78e3b98074a915b222ae1be4ab038a6e&quot;&gt;@赵劼&lt;/a&gt; ），没有一个赞同他的。真的是众人皆醉他独醒？&lt;br&gt;&lt;br&gt;再说CSS预处理器。公平的说，许多非常杰出的前端工程师，包括一些今天已经成长为行业领袖的同志，确实当初（2007年到2012年间）也不能接受CSS预处理器。但是到今天还反对的，除了阿当之外，我是真没遇到过了。当然，我自己很多时候也不用CSS预处理器，比如side project，或样式部分非常简单的项目。但是凡是复杂的需要团队协作的项目，必上CSS预处理器。因为和阿当理解的相反，CSS预处理器的优势越是复杂项目越是需要团队协作，越能体现出来。真正的技术团队leader早晚会通过实践明白这个道理。只能说阿当从来没有真正放下成见。&lt;br&gt;&lt;br&gt;另一方面，也不是说你没用过就不能评价了。比如我经常没怎么用过就评价嘛。但这得建立在非常强大的技术能力、技术视野和技术品味之上的。（忍不住又自吹了。）&lt;br&gt;&lt;br&gt;阿当在2010年&lt;br&gt;拒绝：node.js、CSS预处理器&lt;br&gt;推崇：YUI&lt;br&gt;&lt;br&gt;我在2010年&lt;br&gt;推崇：node.js、CSS预处理器&lt;br&gt;唱衰：YUI&lt;br&gt;&lt;br&gt;面对完全相反的判断，马后炮来说，当年一个工程师应该听我的建议，还是应该听阿当的建议？&lt;br&gt;&lt;br&gt;其实就当年来说，node.js/CSS预处理器，我和阿当都没怎么在production里实践过；YUI，阿当擅长，我从来不用。说起来他还比我多用过一项。但是这三个东西的趋势，我都预判准确。&lt;br&gt;&lt;br&gt;&lt;br&gt;当然，我也有判断失误的时候，比如2003年我就推崇XForms……现在没有几个人知道这东西，不过你们如果去看一下，就会发现，这不是MVVM嘛！咳咳，只能说太超前也不好。&lt;br&gt;&lt;br&gt;&lt;br&gt;先写这些吧。（反正自吹的部分已经ok了）&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;【补充1】&lt;br&gt;&lt;br&gt;有人问到CoffeeScript。我从来就没特别看好过CoffeeScript，也没有鼓动过任何人在production里使用coffee，尽管我还是挺欣赏CoffeeScript的许多设计的。但是请别说我跟阿当在CoffeeScript的看法上一致。毕竟唱衰那么多东西，怎么着总能蒙对一两个吧。&lt;br&gt;&lt;br&gt;&lt;br&gt;【补充2】&lt;br&gt;&lt;br&gt;当然，也许阿当只是来吐槽的。但是吐槽的关键是要有娱乐效果。比如本问题下 &lt;a data-hash=&quot;b90c7eb6d3d5a4e2ce453dd8ad377672&quot; href=&quot;//www.zhihu.com/people/b90c7eb6d3d5a4e2ce453dd8ad377672&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@方应杭&quot; data-hovercard=&quot;p$b$b90c7eb6d3d5a4e2ce453dd8ad377672&quot;&gt;@方应杭&lt;/a&gt; 的吐槽姿势就很好嘛。看来下次阿当再发文章可以找方应杭先翻译一遍。&lt;br&gt;&lt;br&gt;&lt;br&gt;【补充3】&lt;br&gt;&lt;br&gt;有人问我RN的事。我其实对RN无感，但是可以讲点事实，就是国内有许多公司早就已经在用了，携程、58的移动app已经全线上RN了，类似RN的Weex则已经是阿里的技术战略。我写这篇文字的时候随时刷了一下知乎就又看到一篇去哪儿网同志关于RN/Weex在ListView底层技术上的分析（&lt;a href=&quot;https://zhuanlan.zhihu.com/p/24359932&quot; class=&quot;internal&quot;&gt;知乎专栏&lt;/a&gt;），注意这文章的作者是iOS程序员。实际上许多公司引入RN、Weex的都是本来完全做native开发的移动端团队，而不是前端团队。我在多次技术大会上看到RN/Weex的分享的听众native和web开发者各占一半。所以阿当写的“学了React Native就可以在公司做App开发了？你先问问iOS和Android团队答不答应……公司定岗的原因，iOS和Android团队也绝对不会对你友好……”我相信很多人看到都哑然失笑。&lt;br&gt;&lt;br&gt;当然RN是不是就是移动开发的银弹？肯定不是嘛，否则阿里就不要自己再搞Weex了嘛。有没有其他可能？肯定有嘛，比如PWA，我个人其实也是比较偏爱PWA代表的“纯”Web技术方向的。所以阿当也不是所有话都完全不对（毕竟连李红米 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/1960954893/EjEAqfFI9&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;weibo.com/1960954893/Ej&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;EAqfFI9&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 也只能做到每页都有错误，无法达到每句都有错误）。比如他说“阉割版的CSS导致前端技能的受限”、“learn once write anywhere的性价比不（够）高”、“如果webview的性能问题在未来得到解决”……好像挺一针见血的嘛。&lt;br&gt;&lt;br&gt;当然，每个人看到的那个部分也不一定一样，比如本问题有些答案里觉得&lt;br&gt;“某当老师反对coffeescript和typescript的理由是比较赞成的”&lt;br&gt;“关于SPA和Web Site基本赞同”&lt;br&gt;“但是，强调基础是对的”&lt;br&gt;“有个观点是极其赞同的，很多人只会用框架用工具而不注重基本功的修炼”&lt;br&gt;“但是我觉得他对node的看法比较中肯”&lt;br&gt;“除了对Angular 1和微信小程序的评价相对中肯”&lt;br&gt;“不过全文反复强调前端要好好撸基础知识这点我是赞同的”&lt;br&gt;“关于全栈的批评。我觉得他说的没错。”&lt;br&gt;“最后说自己可能不对，可能有人觉得这句做作，但是我觉得能说出这句话还是很有勇气的”&lt;br&gt;……&lt;br&gt;&lt;br&gt;我先不说这些认知本身是不是对，其实有不同观点很正常。有些人就不理解为什么所谓“前端大佬”们就专针对阿当，以至于被一些同学认为“有失风度”、“狗咬狗，一嘴毛”？&lt;br&gt;&lt;br&gt;我引用在本文里 @ 过的某两位“前端大佬”对这文章的评价：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;唉，这种文章的误导性就在于把偏见揉杂在正常的观点中，让经验不深的读者很难分辨。让假话容易被相信的最佳方法就是把一句假话混在九句真话中说。&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;这文章烦就烦在又臭又长，没有中心脉络，观点有些没问题有些有问题，混杂着一堆偏见。&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;因为是私下对话，未经授权，所以就不贴人名了。得罪人和“一嘴毛”的事情我来就可以了（手动doge），反正我也是这么认为的。（咦，说好不评价的呢？）&lt;br&gt;&lt;br&gt;&lt;br&gt;【补充4】&lt;br&gt;&lt;br&gt;关于YUI。阿当最擅长的事情是缅怀YUI。&lt;br&gt;&lt;br&gt;我理解YUI给当年雅虎中国系的同学们带来的从切页面到真正工程化的前端编程的启蒙作用，且因为并入淘宝，所以整个阿里系的前端早期都受到YUI的影响。&lt;br&gt;&lt;br&gt;雅虎当年确实是一面旗帜，出了不少好东西。关键还有DC、NZC这样的名人。但是请不要高估YUI，也不要老是过分吹捧DC、NCZ了。&lt;br&gt;&lt;br&gt;YUI是比较老牌的库，但也只是当年众多JS库之一，dojo其实比YUI还早一年，而且背后的公司支持比YUI还强大。dojo的问题主要是1.0之前api版本变化太剧烈，当年开发者还没有经过semver的教育，远没有今天对待版本变迁理性，因此dojo流失了大量用户。但实际上dojo无论代码实现质量还是api设计都比YUI强多了。YUI对国内开发者有更大影响是因为前述阿里系前端辐射的影响。&lt;br&gt;&lt;br&gt;其实不光是我唱衰YUI，玉伯、 &lt;a data-hash=&quot;450f7dd0dde0b1192b7f4ddc28f54e9b&quot; href=&quot;//www.zhihu.com/people/450f7dd0dde0b1192b7f4ddc28f54e9b&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@田乐&quot; data-hovercard=&quot;p$b$450f7dd0dde0b1192b7f4ddc28f54e9b&quot;&gt;@田乐&lt;/a&gt; 等在2008年底关于js库未来的一次讨论中虽然观点不一，很多预测也不准，但对YUI都是不看好的。&lt;br&gt;&lt;blockquote&gt;&lt;strong&gt;YUI则带着浓厚的“官方、团队”js库的气息……&lt;/strong&gt;让YUI成为不少开发团队的选择。但YUI 2.x缓慢的更新速度，以及对新思想的接纳程度，很多时候让人恨得牙痒痒，太慢了，和其它新生代框架相比，YUI 2.x像是一个步履蹒跚的老年人，让人很无奈。YUI 3.x目前还处于preview阶段，可以将其看成一个全新的JS库……（但）仔细比较后，YUI 3.x并没有带来什么新东西，更多的只是吸收接纳了新生代框架的许多理念。&lt;strong&gt;对YUI的前景，就如对Yahoo!的期待的一样，我相信它会存活着，但也许仅仅就是这样活着下去&lt;/strong&gt;。&lt;/blockquote&gt;——玉伯&lt;br&gt;&lt;blockquote&gt;YUI的api设计不好。作为oo的库它不好，作为fp的库它更不好，所以它不会有多好。不过在widget类库里面它肯定继续占重要地位，因为YUI的widget的确兼容性很好。&lt;br&gt;&lt;/blockquote&gt;——田乐&lt;br&gt;&lt;br&gt;如玉伯所说，YUI3 其实基本上是重写了，可见YUI2跟其他同时代的库比有多落后。但是作为一个追赶者仅仅靠吸收别人的理念是没超过其他竞争者的可能的。因为YUI团队的技术品味其实不够。对，我说的就是老是被搬上神坛的NCZ。（DC其实也不怎么样，但是YUI3跟他已经没啥关系了。）&lt;br&gt;&lt;br&gt;NCZ是个优秀的工程师，但技术品味跟John Resig、Alex Russell之类的比还是差一档，关键是干这行早，乐于布道，而且是在Yahoo!，有大厂光环。你看他写的书其实也就那样（我就从来不推荐），包括最近的Understand ES6。我前一阵帮忙粗审了中译版两章还发现了几个原书的bug（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/nzakas/understandinges6/issues/created_by/hax&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nzakas/understandinges6&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），技术可靠度与NCZ的名气不相匹配。说真的，作为新技术介绍类书，NCZ这书未必比阮一峰写的那本好。阮老师的书还一直在修订，新版已经都包括SIMD、SharedArrayBuffer这么新的东西了（我不是说新东西多就好，但既然是介绍新技术，至少都覆盖到是对的）。&lt;br&gt;&lt;br&gt;NCZ对于前端/js生态最大的贡献其实是他离开Yahoo!之后做的。你别看我看似贬低NCZ，那只是针对你们这些把他供上神坛的人讲的。一码归一码，eslint足以让NCZ进入前端名人堂（如果有这样的名人堂的话）。话说，eslint这东西要求的就是公平对待需求、技术观点中立，像我这种有鲜明观点的人就不适合去搞，像NCZ这种比较中庸的正适合。除了eslint在js生态里的重要作用，我特别要说，eslint的开源社区非常好，我提交过的PR因为缺少文档放了好久，后来有人就给补上文档合进去了。能建立这样的和谐社区很大程度上是创始人决定的。所以我相信NCZ最后是真懂了JohnResig当初给YUI的意见的。阿当说什么“当年John Resig公然嘲笑YUI，zks出面力挺YUI3”，其实根本没看懂JResig的意思，还认为是嘲笑，嘿。&lt;br&gt;&lt;br&gt;扯远了。&lt;br&gt;&lt;br&gt;当时玉伯他们等一批人其实看好的是 mootools。当然 mootools 小火了一阵之后也没怎么样，不过反正比 YUI 强一头。&lt;br&gt;&lt;br&gt;即使说UI组件呢，YUI不仅比不上dojo，也比不上最早从YUI里fork出来的Ext。要深入分析？我反正就抛个结论，你们怀旧的有空可以捡出来看一下，我有点时间还是向前看比较好。&lt;br&gt;&lt;br&gt;&lt;br&gt;【补充5】&lt;br&gt;&lt;blockquote&gt;未来几年内，前端一定将三分天下：其一，是以Ext为代表js库将传统页面的表现形式发挥到极至;其二，Adobe的flash/flex凭着成熟的技术和丰富的经验，以及不断创新的热情，引领着前端的技术走向；其三，微软的sliverlight凭借着公司强大的技术团队和.net体系协同做战的优势，奋起直追，很有可能追赶上flash/flex．&lt;br&gt;&lt;/blockquote&gt;感谢阿当自己又提供了一个全部失败的预言例子。也真难为了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/v2-4555dddf9e209908e299086b8d3155eb_200x112.png\" data-rawwidth=\"1410\" data-rawheight=\"1856\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/v2-4555dddf9e209908e299086b8d3155eb_r.png\">\n不谢邀。 评价就免了，槽点太多反而不好下手。但至少比较好的总结了阿当自己的观点，至少以后要论战不能以微博140字讲不清楚作为理由了。 本来前端圈子里对阿当（曹刘阳）的观点已经讨论过几波了，再来一次也无伤大雅。但是这次不太好的一点呢，是从CSDN/程…\n\n<a href=\"/question/53625757/answer/135867453\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-12-14\" target=\"_blank\" href=\"/question/53625757/answer/135867453\">编辑于 2016-12-15</a></p>\n\n",
    "link": "https://zhihu.com/question/53625757/answer/135867453"
  }
]