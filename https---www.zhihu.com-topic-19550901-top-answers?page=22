<!DOCTYPE html>
<html lang="zh-CN" dropEffect="none" class="no-js topic-pages">
<head>
<meta charset="utf-8" />

<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="renderer" content="webkit" />
<meta http-equiv="X-ZA-Response-Id" content="00121908b7230456">
<meta http-equiv="X-ZA-Experiment" content="default:None">

<title>前端开发 - 话题精华 - 知乎</title>

<meta name="apple-itunes-app" content="app-id=432274380" />


<meta name="description" content="Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？120839个最新问答，点击查看更多>>" />

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta http-equiv="mobile-agent" content="format=html5;url=https://www.zhihu.com/topic/19550901/top-answers">
<meta id="znonce" name="znonce" content="c4ff6aba6bc342ea95abf24d1a0d0178">



<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-152.87c020b9.png" sizes="152x152">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-120.496c913b.png" sizes="120x120">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-76.dcf79352.png" sizes="76x76">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-60.9911cffb.png" sizes="60x60">


<link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">

<link rel="search" type="application/opensearchdescription+xml" href="https://static.zhihu.com/static/search.xml" title="知乎" />
<link rel="stylesheet" href="https://static.zhihu.com/static/revved/-/css/z.96020364.css">





<!--[if lt IE 9]>
<script src="https://static.zhihu.com/static/components/respond/dest/respond.min.js"></script>
<link href="https://static.zhihu.com/static/components/respond/cross-domain/respond-proxy.html" id="respond-proxy" rel="respond-proxy" />
<link href="/static/components/respond/cross-domain/respond.proxy.gif" id="respond-redirect" rel="respond-redirect" />
<script src="/static/components/respond/cross-domain/respond.proxy.js"></script>
<![endif]-->
<script src="https://static.zhihu.com/static/revved/-/js/instant.14757a4a.js"></script>

<link rel="canonical" href="https://www.zhihu.com/topic/19550901" />

</head>

<body class="zhi ">




<div role="navigation" class="zu-top" data-za-module="TopNavBar">
<div class="zg-wrap modal-shifting clearfix" id="zh-top-inner">
<a href="/" class="zu-top-link-logo" id="zh-top-link-logo" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_zhihu_logo">知乎</a>

<div class="top-nav-profile">
<a href="/people/liu-yuan-39-9" class="zu-top-nav-userinfo ">
<span class="name">文刀水原</span>
<img class="Avatar" src="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_s.png" srcset="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_xs.png 2x" alt="文刀水原" />
<span id="zh-top-nav-new-pm" class="zg-noti-number zu-top-nav-pm-count"
style="visibility:hidden" data-count="0">

</span>
</a>
<ul class="top-nav-dropdown" id="top-nav-profile-dropdown">
<li>
<a href="/people/liu-yuan-39-9">
<i class="zg-icon zg-icon-dd-home"></i>我的主页
</a>
</li>

<li>
<a href="/inbox">
<i class="zg-icon zg-icon-dd-pm"></i>私信
<span id="zh-top-nav-pm-count" class="zu-top-nav-pm-count zg-noti-number"
style="visibility:hidden" data-count="0">

</span>
</a>
</li>
<li>
<a href="/settings">
<i class="zg-icon zg-icon-dd-settings"></i>设置
</a>
</li>
<li>
<a href="/logout">
<i class="zg-icon zg-icon-dd-logout"></i>退出
</a>
</li>
</ul>

</div>



<button class="zu-top-add-question" id="zu-top-add-question">提问</button>


<div role="search" id="zh-top-search" class="zu-top-search">
<form method="GET" action="/search" id="zh-top-search-form" class="zu-top-search-form">



<input type="hidden" name="type" value="content">
<label for="q" class="hide-text">知乎搜索</label><input type="text" class="zu-top-search-input" id="q" name="q" autocomplete="off" value="" maxlength="100" placeholder="搜索你感兴趣的内容...">
<button type="submit" class="zu-top-search-button"><span class="hide-text">搜索</span><span class="sprite-global-icon-magnifier-dark"></span></button>
</form>
</div>



<div id="zg-top-nav" class="zu-top-nav">
<ul class="zu-top-nav-ul zg-clear">

<li class="zu-top-nav-li " id="zh-top-nav-home">
<a class="zu-top-nav-link" href="/" id="zh-top-link-home" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_home">首页</a>
</li>



<li class="top-nav-topic-selector zu-top-nav-li current" id="zh-top-nav-topic">
<a class="zu-top-nav-link" href="/topic" id="top-nav-dd-topic">话题</a>
</li>

<li class="zu-top-nav-li " id="zh-top-nav-explore">
<a class="zu-top-nav-link" href="/explore">发现</a>
</li>

<li class="top-nav-noti zu-top-nav-li ">
<a class="zu-top-nav-link" href="javascript:;" id="zh-top-nav-count-wrap" role="button"><span class="mobi-arrow"></span>消息</a>
</li>



</ul>
<div class="zu-top-nav-live zu-noti7-popup zg-r5px no-hovercard" id="zh-top-nav-live-new" role="popup" tabindex="0">
<div class="zu-top-nav-live-inner zg-r5px">
<div class="zu-top-live-icon">&nbsp;</div>
<div class="zu-home-noti-inner" id="zh-top-nav-live-new-inner">
<div class="zm-noti7-popup-tab-container clearfix" tabindex="0">
<button class="zm-noti7-popup-tab-item message">
<span class="icon">消息</span>
</button>
<button class="zm-noti7-popup-tab-item user">
<span class="icon">用户</span>
</button>
<button class="zm-noti7-popup-tab-item thanks">
<span class="icon">赞同和感谢</span>
</button>
</div>
</div>
<div class="zm-noti7-frame-border top"></div>
<div class="zm-noti7-frame">
<div class="zm-noti7-content message">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content user" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content thanks" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
</div>
<div class="zm-noti7-frame-border bottom"></div>
<div class="zm-noti7-popup-footer">
<a href="/notifications" class="zm-noti7-popup-footer-all zg-right">查看全部 &raquo;</a>
<a href="/settings/notification" class="zm-noti7-popup-footer-set" title="通知设置" ><i class="zg-icon zg-icon-settings"></i></a>
</div>
</div>
</div>

</div>

</div>
</div>


<div class="zu-global-notify" id="zh-global-message" style="display:none">
<div class="zg-wrap">
<div class="zu-global-nitify-inner">
<a class="zu-global-notify-close" href="javascript:;" title="关闭" name="close">x</a>
<span class="zu-global-notify-icon"></span>
<span class="zu-global-notify-msg"></span>
</div>
</div>
</div>




<div class="zg-wrap zu-main clearfix "  role="main">
<div class="zu-main-content">
<div class="zu-main-content-inner">


<div itemscope itemtype="https://schema.org/CreativeWork/Topic">
<div class="topic-avatar" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
<div>
<a class="zm-entry-head-avatar-link" href="/topic/19550901" id="zh-avartar-edit-form">
<img alt="前端开发" src="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_m.jpg" class="zm-avatar-editor-preview"></a>
<meta itemprop="image" content="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_l.jpg" />
</div>

<span class="zm-entry-head-avatar-edit-button">修改</span>

</div>
<div class="topic-info">
<div class="topic-name" id="zh-topic-title">
<h1 class="zm-editable-content" data-disabled="1">前端开发</h1>
<div class="zm-editable-editor-wrap" style="display:none">
<input type="text" class="zm-editable-editor-input zg-form-text-input" style="width:150px" />
<span class="zm-command">
<a href="javascript:;" name="save" class="zg-btn-blue" style="margin:0 15px;">完成</a>
<a href="javascript:;" name="cancel" class="zm-command-cancel">取消</a>
</span>
</div>
</div>
<a href="#" class="meta-item share-button zg-right" name="share"><i class="z-icon-share"></i>分享</a>


<div class="zm-topic-topbar">
<div class="zm-topic-topbar-nav clearfix">


<ul class="zm-topic-topbar-nav-list zg-left clearfix">






<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/hot">动态</a>
</li>





<li class="zm-topic-topbar-nav-list-item current">
<span>精华</span>
</li>





<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/unanswered">等待回答</a>
</li>



</ul>

</div>

</div>
</div>
<div class="zm-topic-list-container" itemprop="hasPart" itemscope itemtype="http://schema.org/ItemList/QuestionList">
<div class="zu-top-feed-list" id="zh-topic-top-page-list">
<meta itemprop="questionCount" content="36909" />
<meta itemprop="topAnswerCount" content="999" />
<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="421" data-type="Answer">
<link itemprop="url" href="/question/27226086/answer/35811288">
<meta itemprop="answer-id" content="9713347" />
<meta itemprop="answer-url-token" content="35811288" />
<meta itemprop="answerCount" content="22" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/27226086" target="_blank" data-id="3073333" data-za-element-name="Title">
前端开发与后台开发如何协作？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/27226086/answer/35811288">
<!-- <meta itemprop="answer-id" content="9713347">
<meta itemprop="answer-url-token" content="35811288"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>214</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">214</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$xzer"
target="_blank" href="/people/xzer"
>小猪</a></span><span title="写程序很好玩" class="bio">
写程序很好玩
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="214" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">214</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3073333" data-action="/answer/content" data-author-name="小猪" data-entry-url="/question/27226086/answer/35811288">

<textarea hidden class="content">首先， &lt;a data-hash=&quot;9e938c03d5281d364c45555749cdb875&quot; href=&quot;//www.zhihu.com/people/9e938c03d5281d364c45555749cdb875&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@learnshare&quot; data-hovercard=&quot;p$b$9e938c03d5281d364c45555749cdb875&quot;&gt;@learnshare&lt;/a&gt;给出的两种开发模式基本上就是我们所有的选择了，后端提供api，完全前端渲染的开发模式如果可行的话，angular或者react都是不错的选择。但如果网站业务决定了必须seo友好而必须进行服务端渲染的话，如同&lt;a data-hash=&quot;9e938c03d5281d364c45555749cdb875&quot; href=&quot;//www.zhihu.com/people/9e938c03d5281d364c45555749cdb875&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@learnshare&quot; data-hovercard=&quot;p$b$9e938c03d5281d364c45555749cdb875&quot;&gt;@learnshare&lt;/a&gt;所述，现有的开发模式下，前端和后端人员的协作是很困难的。下面我来谈谈我对这个困境的看法以及我们正在实践的一个非常棒的模型（最近我在好几个问题下面都回答了类似的内容，会不会被当成spam。。。）。&lt;br&gt;&lt;br&gt;首先，服务端渲染的前后端分离之所以困难，根本的原因不在于模板技术的复杂性上，而在于MVC模式本身是有问题的。本质上讲，MVC是面向业务过程的，对于企业应用开发，MVC模式的确是无上利器，可以清晰的分离业务逻辑层次，让程序员将精力集中在业务逻辑的整合上（其实，我觉得即使对于这一点，传统的MVC模式也没有做得足够好，这里重点不讨论MVC，就不展开了，有兴趣的可以看看这个：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//astamuse.github.io/asta4d/userguide/index.html%23advanced-mvc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Asta4D Framework User Guide&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，算是我对传统MVC模式的一些思考），但是，MVC模式本身的重点在于M和C，而V只是一个附属品，一个用来展现业务流程的可视化界面而已，因此，通常对前端工作的要求是很低的，能够展示数据，能够将业务流程向前推进，这就足够了。&lt;br&gt;&lt;br&gt;回过头来，对于重点是展示内容并帮助用户获得有效信息为主的互联网网站来说，MVC本身就是不合时宜的，常见的例子就是，比如淘宝的首页，model是什么？再进一步的，淘宝的宝贝页面，也许可以把当前宝贝作为model，问题是，边栏之类的周边信息怎么整合到这个model中去？当然，不是做不到，但就此带来的复杂性，实际上已经宣告了MVC的软弱。&lt;br&gt;&lt;br&gt;我上知乎的时间不太长，很奇怪在知乎没有看到过任何讨论view first模式的帖子，这个模式是由lift(&lt;a href=&quot;//link.zhihu.com/?target=http%3A//liftweb.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lift :: Home&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;)最先提出并实践的，可以说，view first模式从根本上解决了内容展示型的网站的MVC困境，可以极大的提高开发效率。&lt;br&gt;&lt;br&gt;（说到这里，还没有说到前后端如何分离。。。我都有点着急了。。。）&lt;br&gt;&lt;br&gt;view first的基本理念来说，就是视图，view，才是整个系统的第一优先对象，所有的代码结构，所有的逻辑，都要围绕view来展开，传统的MVC模型，一个url，要先映射到一个controller，然后controller构建model，最后导向一个view，但在view first下，一个url，就对应一个view，服务端接受到request，view就开始渲染了，在渲染过程中，不断的取得需要的数据，并完成整个页面，这个过程中不需要controller来控制，也就更不需要model来沟通controller和view，一切都是以视图为基础进行的。说到这里，其实很多人应该已经明白过来了，这不就是传统的PHP开发模式嘛，先写html，然后把php的动态代码嵌进去，OK，搞定啦，是快呀，可这代码没法维护呀，前后端也没法分离呀。。。别急，快了。。。&lt;br&gt;&lt;br&gt;可以说，view first这个模型，其实就是传统的php开发模式，lift的贡献在于，首先明确并命名了这样一个开发模式，从理论上解决了开发效率的问题并且将开发人员从MVC的迷思中解放出来，然后，lift更重要的贡献是，从实践上解决了view first模式下代码不可维护与前后端分离的问题，提供了一个前后端完全分离的模板模型。这里多说两句，lift本身是基于scala的，我们公司在用了两年lift之后鉴于对scala的种种不爽，决定还是退回到java上，虽然lift本身也支持用java进行开发，但我们觉得一个pure java的方案会更舒服，而且lift本身也有一些细节我们觉得是有改进必要的，因此我们开发了自己的框架Asta4D（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/astamuse/asta4d&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;astamuse/asta4d · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），虽然我们提供了很多不同于lift的功能，但单就view first和前后端分离的模板来说，基本上是一个95%拷贝加5%改良的lift，下面我就用我们自己的框架来举例，相信java代码大家看起来也会更舒服一点。&lt;br&gt;&lt;br&gt;首先，无论是lift，还是我们的山寨Asta4D，前端工程师面对的都是pure html的模板，如下：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;name:&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;dummy name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;age:&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;前端工程师可以自由的填入stub数据来调试他们想要的效果或者交互逻辑，在他们完成工作后，这个模板交给后端工程师的时候，后端工程师会在模板中嵌入一点代码：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;afd:render=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SomeSnippet:showProfile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;name:&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;dummy name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;age:&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;好吧，这个时候想像一下，前端工程师发现了一点bug需要进一步修正，我们可以相信的一点是，在99%的情况下，后端工程师加入的那一行“afd:render”的代码应该不会给前端工程师造成干扰，因此，这个时候，我们的前端和后端就已经可以开始同时工作了，先把前端的工作放在一边，看看后端怎么填入真实数据：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p#name span&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;asta4d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;p#age span&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;后端用css selector来标定数据锚点并将真实数据填入，因此，在最简单的情况下，只要数据锚点不变，无论前端工程师如何重构模板代码，都不再需要后端工程师的介入了。当然，这里有一个显而易见的问题，前端工程的重构并不能保证数据锚点不变，因此，我们在实践中，引入了一个所谓的“X约定”，简单的讲，我们的后端工程师会在模板中再多加一点东西：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;afd:render=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SomeSnippet:showProfile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;name:&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x-name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;dummy name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;age&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;age:&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x-age&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;大家可以注意到，后端工程师在数据锚点上加入了以x开头的伪类，这样，后端的渲染代码就变成下面这个样子：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showProfile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.x-name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;asta4d&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.x-age&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;仍然是用css selector，只不过不再用tag而是用class来锚定数据，我们可以看到，class中加入的“x-”一方面不会对前端工程师的工作造成任何干扰，另一方面也起到hint的作用，前端工程师只要能够将“x-”标记的数据锚点保持不变就可以放心大胆的重构代码而不需要后端工程师的介入。&lt;br&gt;&lt;br&gt;在我们的实践中，一般的开发流程是前端先完成页面，然后后端接手填入数据，这个中间通常不会进行交流，因为我们的前端和后端甚至是分开在两个部门的，大家的交互就是redmine的ticket的转交而已。当然，在某些时候，后端工程师无法理解前端的模板不知道应该将数据填在哪儿的时候，还是会有必要的交流，但这种交流真的很少发生，至少不需要他们非得坐在一起工作：）&lt;br&gt;&lt;br&gt;更进一步的，某些时间很紧的开发任务，前后端甚至是同时开始工作的，后端会开一个debug页面，在里面只用div和x-来标记数据锚点并完成后端的渲染逻辑，而同时前端会完成正式的html页面代码，最后，由后端将渲染逻辑合并到正式页面即可。当然，这种情况下，前后端的交流会多一些，我们的前端mm摆脱后端猥琐大叔们纠缠的办法就是尽可能快的先完成基本的html骨架push上去，然后告诉他们，你们自己玩去吧，别来烦我了^_^&lt;br&gt;&lt;br&gt;更为具体的一个我们的实践的例子是，一个耗费前端两个人月的页面大规模重新设计和重构，在前端完成工作后30分钟，我们的后端就完成了所有必要的修改并将代码合并到主干准备进入release流程了。嗯，因为我们能做到这个，所以我们的前端和后端就一直是两个部门没人提合并的事情。&lt;br&gt;&lt;br&gt;最后，题外话，最近react.js突然吸引了很多人的目光，对于客户端渲染真的是非常不错的东西，而我们的框架Asta4D，同样的提供了服务端渲染下的虚拟DOM组件模型。哦，这里就不赘述了，有兴趣的可以自己去看我们的user guide。&lt;br&gt;&lt;br&gt;大家看几个我们的页面吧&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//en.astamuse.com/corporation/14832&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Detailed information of toushiba corp.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//en.astamuse.com/published/JP/No/2014225663&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Publication number 225663） a nonvolatile memory device&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//en.astamuse.com/field/themecode/5B089&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Technology and business trends of Glass melting and manufacturing&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;我们的网站其实是日文的，这个英文网站是做给华尔街的大爷们看的一个简装版，相对内容要简单些，但大家仍然可以看到，我们在前后端完全分离的模式下可以做得很漂亮。&lt;br&gt;&lt;br&gt;&lt;br&gt;============感谢 &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;的评论，评论回复里面没法回答太多，我把回复贴到这里=====&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;a href=&quot;http://www.zhihu.com/people/he-shi-jun&quot; class=&quot;internal&quot;&gt;贺师俊&lt;/a&gt;&lt;br&gt;你的 showProfile 其实就是变相的 model，x-name 和 x-age 就是 model 的属性。&lt;/blockquote&gt;&lt;br&gt;这取决于你如何定义model。&lt;br&gt;&lt;br&gt;从简单的ORMAP的角度来说，我们必然有一个entity，对我们的这个架构来说，这个entity是一定存在的，从这个角度上说，这里的确有一个model，就是ormap中的entity。&lt;br&gt;&lt;br&gt;但是从MVC模式的model来说，MVC的model并不是简单的entity，而是一个包含了所有前端必须数据的container，从这个意义上讲，我们没有model。&lt;br&gt;&lt;br&gt;最后，我上面的回答跟你指出的事实，其实有点不搭界，你的意思是，render的方法本身就是一个逻辑上的model，而x-就是model的属性，老实说，这个观点真的很有趣。&lt;br&gt;&lt;br&gt;你指出的事实让我陷入了长考，这里究竟有没有model，从逻辑上讲，你是对的，我思考了很长时间，这种逻辑上的model跟MVC的model的区别是什么？&lt;br&gt;&lt;br&gt;我的理解是，首先，我们不需要在代码中构建一个大杂烩的数据容器，而是在一个极小的范围类定义了一个局部适用的小数据结构，从这一点说，跟传统MVC比起来，我们做到了更细粒度的解耦。其次，从实现的角度讲，我们鼓励开发人员尽可能简单的取得数据，我们近乎变态的尽可能的执行以一行为单位的无join查询（性能依靠缓存保证， &lt;a href=&quot;//link.zhihu.com/?target=http%3A//astamuse.github.io/asta4d/userguide/index.html%23perform-queries-simple&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;astamuse.github.io/asta&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;4d/userguide/index.html#perform-queries-simple&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），这绝对比传统的MVC模式的开发效率和可维护性都高得多。进一步的，我在原文中已经强调过了，这里的“x-”约定，只是一个hint，对前端没有任何强制的约束能力，前端不会因为破坏了这个约定而导致页面崩溃出错，反过来，前端在有必要的时候可以完全无视这个约定，数据的整合是由后端完成的，但页面的逻辑，是前端主导的，开玩笑的说，“x-”约定是我们后端人员对前端大爷的哀求：“大爷啊，不要乱搞我好吗。。。”。&lt;br&gt;&lt;br&gt;所以，我们对前后端分离的开发模式的理解是，最重要的一点是，前端具有主导权，由前端决定开发的走向而不是后端，后端的职责是满足并提供前端需要的数据，反过来，前端没有义务和必要为了后端的各种技术上的理由而去学习或者说导入各种跟前端无关的技术（有任何前端开发人员会喜欢velocity之流的模板的吗？），前端需要最大限度的自由度去完成创造性的工作，后端的职责是配合他们。进一步的，后端的技术意义在于，以更合理的后台架构，更方便，快捷的提供前端需要的数据，在这个层次上，我们需要缓存的设计，需要合理的api设计，需要后台存储架构的各种变化，但是，在最终向前端提供数据这一个逻辑层次上，后端可以比前端开发人员写出更有效率的利用现有API取得必要数据的逻辑，但后端不可能比前端知道如何更有效率的将数据展现给用户，因此，我们对view这一层的分工的理解就是，前端负责数据如何展现，后端负责取得数据并提供给前端。&lt;br&gt;&lt;br&gt;最后，无论那种模式，最终总有一个标记数据位置的参数，或者是MVC中model的属性，或者是我们这里的css selector hint，或者是一个嵌入的变量名，从这个意义上讲， 任何模式都有个model，都有个属性，所以，即便我很同意你说的逻辑上showProfile就是个model，但我仍然认为，我们从本质上是anti-MVC的。</textarea>


<div class="zh-summary summary clearfix">

首先， <a data-hash="9e938c03d5281d364c45555749cdb875" href="//www.zhihu.com/people/9e938c03d5281d364c45555749cdb875" class="member_mention" data-editable="true" data-title="@learnshare" data-hovercard="p$b$9e938c03d5281d364c45555749cdb875">@learnshare</a>给出的两种开发模式基本上就是我们所有的选择了，后端提供api，完全前端渲染的开发模式如果可行的话，angular或者react都是不错的选择。但如果网站业务决定了必须seo友好而必须进行服务端渲染的话，如同<a data-hash="9e938c03d5281d364c45555749cdb875" href="//www.zhihu.com/people/9e938c03d5281d364c45555749cdb875" class="member_mention" data-editable="true" data-title="@learnshare" data-hovercard="p$b$9e938c03d5281d364c45555749cdb875">@learnshare</a>所述，现有的开发模式…

<a href="/question/27226086/answer/35811288" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-12-25" target="_blank" href="/question/27226086/answer/35811288">编辑于 2015-01-19</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3073333"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>52 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="422" data-type="Answer">
<link itemprop="url" href="/question/53398285/answer/134933023">
<meta itemprop="answer-id" content="49495947" />
<meta itemprop="answer-url-token" content="134933023" />
<meta itemprop="answerCount" content="39" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/53398285" target="_blank" data-id="13579191" data-za-element-name="Title">
如果网页没有 CSS 会怎么样？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/53398285/answer/134933023">
<!-- <meta itemprop="answer-id" content="49495947">
<meta itemprop="answer-url-token" content="134933023"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>214</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">214</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$justineo"
target="_blank" href="/people/justineo"
>顾轶灵</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/justineo#hilightbadge" target="_blank">CSS、前端开发话题优秀回答者</a></span>



<span title="百度前端工程师" class="bio">
百度前端工程师
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="214" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">214</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="13579191" data-action="/answer/content" data-author-name="顾轶灵" data-entry-url="/question/53398285/answer/134933023">

<textarea hidden class="content">不知道你有没有听说过「CSS Naked Day」这个活动。参与者主要是国外的前端开发者，他们在每年 4 月 9 号，会把自己网站的 CSS 全部撤掉，以「裸体」的形式展现 HTML 内容。&lt;br&gt;&lt;br&gt;这个活动的主要目的是推广 web 标准化，通过此方式检验自己是正确合理地使用了 HTML 元素、信息组织的方式是否合理（因为 web 规范设计理念就考虑了可访问性，希望让尽可能多的终端来获取内容，包括那些不支持 CSS 的终端）。&lt;br&gt;&lt;br&gt;没有 CSS，你可以看到的内容很接近 web 最开始的样子。对比一下你就会感叹，正因为浏览器开发者、web 规范制定者多年来的辛勤劳动，才使我们看到的 web 如此丰富。&lt;br&gt;&lt;br&gt;参见：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//css-naked-day.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS naked day&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。</textarea>


<div class="zh-summary summary clearfix">

不知道你有没有听说过「CSS Naked Day」这个活动。参与者主要是国外的前端开发者，他们在每年 4 月 9 号，会把自己网站的 CSS 全部撤掉，以「裸体」的形式展现 HTML 内容。 这个活动的主要目的是推广 web 标准化，通过此方式检验自己是正确合理地使用了 HTM…

<a href="/question/53398285/answer/134933023" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-12-08" target="_blank" href="/question/53398285/answer/134933023">编辑于 2016-12-08</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-13579191"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>19 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="423" data-type="Answer">
<link itemprop="url" href="/question/21006670/answer/16880965">
<meta itemprop="answer-id" content="1885254" />
<meta itemprop="answer-url-token" content="16880965" />
<meta itemprop="answerCount" content="57" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/21006670" target="_blank" data-id="583133" data-za-element-name="Title">
互联网从业人员回二线城市，怎么找工作？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/21006670/answer/16880965">
<!-- <meta itemprop="answer-id" content="1885254">
<meta itemprop="answer-url-token" content="16880965"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>213</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">213</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$kingszar"
target="_blank" href="/people/kingszar"
>ArayS</a></span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="213" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">213</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="583133" data-action="/answer/content" data-author-name="ArayS" data-entry-url="/question/21006670/answer/16880965">

<textarea hidden class="content">先归零，然后再想想自己还能干什么，在互联网之外还有什么符合当地需要的专业技能。&lt;br&gt;&lt;br&gt;------用来反驳&lt;a href=&quot;http://www.zhihu.com/people/a-guo-68&quot; class=&quot;internal&quot;&gt;阿果&lt;/a&gt; 的分割线-------&lt;br&gt;&lt;blockquote&gt;优秀的逻辑思维能力、强大的信息处理能力、高效能的流程管理&lt;br&gt;&lt;/blockquote&gt;听着好像希特勒夸雅利安人似的。&lt;br&gt;好吧，先假设 IT 人真的有这些，那这也只是素质和方法。跟真的要做的事情所需要的专业知识是两码事。&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;其实在常规领域，大量工作存在效率低、流程规划不合理、信息交流不通畅的问题。这就给了善于思考的IT人以发挥特长的空间。&lt;br&gt;&lt;/blockquote&gt;这些问题在IT行业中同样存在，就国内现在的这些公司来说，都没有资格说自己解决的很好。早俩月业界推崇《打造Facebook》里的流程方法什么，那情景就像是「小太监问大太监：听说宫里最近出了一本《房事秘籍》」。&lt;br&gt;那么，目前身为IT从业人员中的一枚，都没法解决好现在公司的问题，又怎么能保证自己能解决好将来的问题呢？&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;三个案例&lt;/blockquote&gt;丁磊的猪：肯定不是程序员养出来的，他也得请专门的饲养员。题主的角色现在貌似不是当老板（丁磊），而是找工作（程序员应聘饲养员？）。&lt;br&gt;徐佳的水果：从这个案例里，我首先看到的是他花了几个月做准备，而且对水果行业很熟悉，有不错的货源。他并没有用PHP写出几吨水果出来。&lt;br&gt;降级论：这文章刚出来我就吐槽过，卖烤串的水难道就不深吗？要真的今天给你扔个围裙让你去，先自己想想，你分得清胡椒和孜然吗？知道怎么躲城管吗？&lt;br&gt;&lt;br&gt;本来不想写得这么悲观的，只是看到各位把「互联网从业人员」这个身份看得太高了，没忍住喷了一堆。&lt;br&gt;脑子好使不好使，眼界开阔不开阔，跟个人强相关，跟人身上的工作tag弱相关。用今天kentzhu一条微博里的话说：姿势不对，在哪儿都会掉坑里。</textarea>


<div class="zh-summary summary clearfix">

先归零，然后再想想自己还能干什么，在互联网之外还有什么符合当地需要的专业技能。 ------用来反驳<a href="http://www.zhihu.com/people/a-guo-68" class="internal">阿果</a> 的分割线------- 优秀的逻辑思维能力、强大的信息处理能力、高效能的流程管理 听着好像希特勒夸雅利安人似的。 好吧，先假设 IT 人真的有这些，那这也…

<a href="/question/21006670/answer/16880965" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2013-05-02" target="_blank" href="/question/21006670/answer/16880965">编辑于 2013-05-03</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-583133"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>21 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="424" data-type="Answer">
<link itemprop="url" href="/question/29504639/answer/44680878">
<meta itemprop="answer-id" content="13267401" />
<meta itemprop="answer-url-token" content="44680878" />
<meta itemprop="answerCount" content="9" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/29504639" target="_blank" data-id="3984831" data-za-element-name="Title">
怎么更好的理解虚拟DOM?
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/29504639/answer/44680878">
<!-- <meta itemprop="answer-id" content="13267401">
<meta itemprop="answer-url-token" content="44680878"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>213</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">213</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$emayej-bee"
target="_blank" href="/people/emayej-bee"
>EMayej Bee</a></span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="213" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">213</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3984831" data-action="/answer/content" data-author-name="EMayej Bee" data-entry-url="/question/29504639/answer/44680878">

<textarea hidden class="content">虽然Virtual DOM确实是性能杠杠的，但是其实可以说它是无心插柳的一个结果。&lt;br&gt;&lt;br&gt;React的核心思想：&lt;br&gt;一个Component拯救世界，忘掉烦恼，从此不再操心界面。&lt;br&gt;&lt;br&gt;1. Virtual Dom快，有两个前提&lt;br&gt;1.1 Javascript很快&lt;br&gt;Chrome刚出来的时候，在Chrome里跑Javascript非常快，给了其它浏览器很大压力。而现在经过几轮你追我赶，各主流浏览器的Javascript执行速度都很快了。&lt;br&gt;Julia有一个Benchmark，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//julialang.org/benchmarks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Julia Benchmarks&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;， 可以看到Javascript跟C语言很接近了，也就几倍的差距，跟Java基本也是一个量级。&lt;br&gt;所以说，单纯的Javascript其实速度是很快的。&lt;br&gt;多说一句，这种benchmark并不是绝对的依据，因为用这个语言写这个跑得快，并不代表一定是用这个语言写那个也跑得快。&lt;br&gt;&lt;br&gt;1.2 DOM很慢&lt;br&gt;关于什么CSS，什么layout那些我不懂，就不瞎说了，咱就说说DOM的结构。&lt;br&gt;当你用document.createElement()创建一个空的Element的时候（比如创建一个空的div），有以下这几页的东西需要实现（当然，这不是标准，只是个大概的意思）：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/HTMLElement&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTMLElement - Web API Interfaces&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Element&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Element - Web API Interfaces&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GlobalEventHandlers&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;非常非常多，并且还有不少嵌套引用。&lt;br&gt;你可以在Chrome console里手动调用document.createElement 然后插入DOM里看看效果。&lt;br&gt;这还是一个空的Elemnt，啥内容也没有，就这么复杂。所以说DOM的操作非常慢是可以理解的。不是浏览器不想好好实现DOM，而是DOM设计得太复杂，没办法。&lt;br&gt;&lt;br&gt;而更糟糕的是，我们（以及很多框架）在调用DOM的API的时候做得不好，导致整个过程更加的慢。React的Virtual Dom解决的是这一部分问题，它并不能解决DOM本身慢的问题。&lt;br&gt;比如说，现在你的list是这样，&lt;br&gt;&amp;lt;ul&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;0&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;1&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;2&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;3&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;/ul&amp;gt;&lt;br&gt;你想把它变成这样&lt;br&gt;&amp;lt;ul&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;6&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;7&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;8&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;9&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;li&amp;gt;10&amp;lt;/li&amp;gt;&lt;br&gt;&amp;lt;/ul&amp;gt;&lt;br&gt;通常的操作是什么？&lt;br&gt;先把0， 1，2，3这些Element删掉，然后加几个新的Element 6，7，8，9，10进去，这里面就有4次Element删除，5次Element添加。&lt;br&gt;而React会把这两个做一下Diff，然后发现其实不用删除0，1，2，3，而是可以直接改innerHTML，然后只需要添加一个Element（10）就行了，这样就是4次innerHTML操作加1个Element添加，比9次Element操作快多了吧？&lt;br&gt;&lt;br&gt;当然还有其它一些例子能够优化我们对DOM的操作，就不举例子了。（实际上是因为我举不出例子。。。）&lt;br&gt;&lt;br&gt;2. 关于React&lt;br&gt;2.1 接口和设计&lt;br&gt;在React的设计里，是完全不需要你操作DOM的。在React里其实根本就没有DOM这个概念的存在，只有Component。当你写好一个Component以后，Component会完全负责UI，你不需要也不应该去也不能够指挥Component怎么显示，你只能告诉它你想要显示一个香蕉还是两个梨。&lt;br&gt;隔离DOM并不是因为DOM慢（当然DOM确实慢），而是把界面和业务完全隔离，操作数据的只关心数据，操作界面的只关心界面。可以想象成把MVC里面的Controller分成两个部分，一部分合并到M里面去，一部分合并到V里面去，就剩下MV,没有C了。。。其实M也并不是Model了。推荐看一下Pete Hunt的这个Talk &lt;a href=&quot;//link.zhihu.com/?target=https%3A//youtu.be/DgVS-zXgMTk&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;youtu.be/DgVS-zXgMTk&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;重复一遍，React的意思是，我提供一个Component，然后你只管给我数据，界面的事情完全不用你操心，我保证会把界面变成你想要的样子。&lt;br&gt;你可以把一个React的Component想象成一个Pure Function，只要你给的数据是[1, 2, 3]，我保证显示的是[1, 2, 3]。没有什么删除一个Element，添加一个Element这样的事情。NO。你要我显示什么就给我一个完整的列表。&lt;br&gt;&lt;br&gt;说到这里，插一句别的，我一开始看到这里还以为这样的处理方式比较适合一般的WEB应用，写游戏啊什么的可能这个模式不太好用，然后我就看到Pete Hunt那个Talk，说DOOM 3就是这么干的。&lt;br&gt;。&lt;br&gt;。。&lt;br&gt;。。。&lt;br&gt;眼泪都下来了，大神们的思路果然我是摸不着边的，洗洗睡吧。&lt;br&gt;&lt;br&gt;睡醒了接着说。React其实需要从Imperative Programming转换到Declarative Programming去理解。你不要一步一步告诉我这件事情怎么做，什么先和面再剁馅，NO，告诉我你想要煎饼还是月饼，我会想办法去做的，不要来干扰我。你只需要告诉我有这么一个列表[1, 3, 6]需要显示就行了，不要告诉我怎么显示，我会想办法的，我保证美得冒泡，各种神奇的效果，亮瞎你的钛合金狗眼。&lt;br&gt;&lt;br&gt;行了行了，你真啰嗦。&lt;br&gt;&lt;br&gt;。。。&lt;br&gt;&lt;br&gt;再说几句瞎扯的话，Flux虽然说的是单向的Data Flow，但是实际上就是单向的Observer。&lt;br&gt;Store-&amp;gt;View-&amp;gt;Action-&amp;gt;Store（箭头是数据流向，实现上可以理解为View监听Store，View直接trigger action，然后Store监听Action）&lt;br&gt;等等，不是说Component是pure function不跟谁绑定吗，为啥View要监听Store？你这个骗子。怪不得都没有人给你点赞。&lt;br&gt;。。。&lt;br&gt;。。&lt;br&gt;。&lt;br&gt;我们还是继续说React把，Flux是什么鬼，我反正没听过。&lt;br&gt;&lt;br&gt;&lt;br&gt;2.2 实现&lt;br&gt;OK，那么，如何实现React呢？&lt;br&gt;其实对于React来说，最容易实现的办法是每次完全摧毁整个DOM，然后重新建立一个全新的DOM。因为一个Component是一个Pure function，根本就没有State这个概念，我又不知道DOM现在是什么样子，那最简单的办法当然是只要你给新数据，我就把整个DOM删了，然后根据你给的数据重新生成一个DOM咯。&lt;br&gt;&lt;br&gt;等等，Virtual DOM哪儿去了？&lt;br&gt;&lt;br&gt;事实是这样的，最简单实现React的方式虽然说非常简单，但是效率实在是太低了，你居然要全部都删了重建DOM，DOM本身已经很慢了，你还这么去用，谁能忍啊？&lt;br&gt;&lt;br&gt;然后Virtual DOM就来救场了。&lt;br&gt;&lt;br&gt;Virtual DOM和DOM是啥关系呢？&lt;br&gt;首先，Virtual DOM并没有完全实现DOM，Virtual DOM最主要的还是保留了Element之间的层次关系和一些基本属性。因为DOM实在是太复杂，一个空的Element都复杂得能让你崩溃，并且几乎所有内容我根本不关心好吗。所以Virtual DOM里每一个Element实际上只有几个属性，并且没有那么多乱七八糟的引用。所以哪怕是直接把Virtual DOM删了，根据新传进来的数据重新创建一个新的Virtual DOM出来都非常非常非常快。（每一个component的render函数就是在做这个事情，给新的virtual dom提供input）&lt;br&gt;&lt;br&gt;所以，引入了Virtual DOM之后，React是这么干的：&lt;br&gt;你给我一个数据，我根据这个数据生成一个全新的Virtual DOM，然后跟我上一次生成的Virtual DOM去 diff，得到一个Patch，然后把这个Patch打到浏览器的DOM上去。完事。&lt;br&gt;&lt;br&gt;有点像版本控制打patch的思路。&lt;br&gt;假设在任意时候有，VirtualDom1 == DOM1 （组织结构相同）&lt;br&gt;当有新数据来的时候，我生成VirtualDom2，然后去和VirtualDom1做diff，得到一个Patch。&lt;br&gt;然后将这个Patch去应用到DOM1上，得到DOM2。&lt;br&gt;如果一切正常，那么有VirtualDom2 == DOM2。&lt;br&gt;&lt;br&gt;这里你可以做一些小实验，去破坏VirtualDom1 == DOM1这个假设（手动在DOM里删除一些Element，这时候VirtualDom里的Element没有被删除，所以两边不一样了）。&lt;br&gt;然后给新的数据，你会发现生成的界面就不是你想要的那个界面了。&lt;br&gt;&lt;br&gt;&lt;br&gt;最后，回到为什么Virtual Dom快这个问题上。&lt;br&gt;其实是由于每次生成virtual dom很快，diff生成patch也比较快，而在对DOM进行patch的时候，我能够根据Patch的内容，优化一部分DOM操作，比如之前1.2里的那个例子。&lt;br&gt;重点就在最后，哪怕是我生成了virtual dom，哪怕是我跑了diff，但是我根据patch简化了那些DOM操作省下来的时间依然很可观。所以总体上来说，还是比较快。&lt;br&gt;&lt;br&gt;简单发散一下思路，如果哪一天，DOM本身的已经操作非常非常非常快了，并且我们手动对于DOM的操作都是精心设计优化过后的，那么加上了VirtualDom还会快吗？&lt;br&gt;当然不行了，毕竟你多做了这么多额外的工作。&lt;br&gt;&lt;br&gt;但是那一天会来到吗？&lt;br&gt;诶，大不了到时候不用Virtual DOM。</textarea>


<div class="zh-summary summary clearfix">

虽然Virtual DOM确实是性能杠杠的，但是其实可以说它是无心插柳的一个结果。 React的核心思想： 一个Component拯救世界，忘掉烦恼，从此不再操心界面。 1. Virtual Dom快，有两个前提 1.1 Javascript很快 Chrome刚出来的时候，在Chrome里跑Javascript非常快…

<a href="/question/29504639/answer/44680878" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-04-13" target="_blank" href="/question/29504639/answer/44680878">编辑于 2015-04-15</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3984831"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>11 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="425" data-type="Answer">
<link itemprop="url" href="/question/20296322/answer/16089122">
<meta itemprop="answer-id" content="1564942" />
<meta itemprop="answer-url-token" content="16089122" />
<meta itemprop="answerCount" content="18" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20296322" target="_blank" data-id="298802" data-za-element-name="Title">
Meteor.js 是什么？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20296322/answer/16089122">
<!-- <meta itemprop="answer-id" content="1564942">
<meta itemprop="answer-url-token" content="16089122"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>213</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">213</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$tchen"
target="_blank" href="/people/tchen"
>陈天</a></span><span title="用clojurescript写js的elixir程序猿" class="bio">
用clojurescript写js的elixir程序猿
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="213" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">213</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="298802" data-action="/answer/content" data-author-name="陈天" data-entry-url="/question/20296322/answer/16089122">

<textarea hidden class="content">Meteor的官网( &lt;a href=&quot;//link.zhihu.com/?target=http%3A//meteor.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Meteor&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; )这样介绍这个框架：&lt;br&gt;&lt;blockquote&gt;Meteor is an open-source platform for building top-quality web apps in a fraction of the time, whether you're an expert developer or just getting started.&lt;/blockquote&gt;&lt;strong&gt;top-quality web apps&lt;/strong&gt; 我们放下不表，&lt;strong&gt;fraction of the time&lt;/strong&gt; 的提法很新颖，看来这个框架的目标是解放程序猿，少花时间多办事。虽然具体的演化路径我不得而知，但从网络上的各种蛛丝马迹来看，Meteor吸收了google wave, asana等平台背后的开发工具的精髓，逐渐演进出了目前的版本。Meteor的幕后团队相当强悍：他们大多毕业于MIT，是成功的创业家，也是一流的工程师，其中一个开发者还是神器 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//etherpad.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;etherpad&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 的作者。&lt;br&gt;&lt;br&gt;METEOR究竟有什么NB的地方？&lt;br&gt;&lt;br&gt;首先，Meteor构架与nodejs之上。这使得 &lt;strong&gt;One Language&lt;/strong&gt; 成为可能，同时可依托nodejs上诸如&lt;a href=&quot;//link.zhihu.com/?target=http%3A//soket.io&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://socket.io&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这样强大的类库内置 &lt;strong&gt;realtime&lt;/strong&gt;，&lt;strong&gt;Date on the Wire&lt;/strong&gt; 等特性。&lt;br&gt;&lt;br&gt;在一种语言的基础上，Meteor统一了服务器端和客户端的数据访问，提出 &lt;strong&gt;Database Everywhere&lt;/strong&gt;，一套DB API大大减轻了开发负担，不用再做server data JSON client data的转换（想想你的django 或者rails app，在这上面花了多少功夫？）。&lt;br&gt;&lt;br&gt;为了让app达到最佳的用户体验，Meteor还提供了 &lt;strong&gt;Latency Compensation&lt;/strong&gt;，客户端对数据的更新即时反应到UI，如果更新被服务器reject，再rollback。大多数情况下，用户会得到极佳的类似本地数据库的体验。&lt;br&gt;&lt;br&gt;Meteor最让人叫绝的是其 &lt;strong&gt;Full Stack Reactivity&lt;/strong&gt;。关于reactivity programming的详细介绍，请参考&lt;a href=&quot;//link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Reactive_programming&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reactivity Programming&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这里不展开。简言之，当数据发生改变的时候，所有依赖该数据的地方自动发生相应的改变。&lt;br&gt;&lt;br&gt;用过backbone的同学都知道，当model发生改变的时候，我们需要通过注册相应的事件，显式更新对应的DOM，如果数据在页面中多处被渲染，则每处对应的DOM需挨个更新。&lt;br&gt;&lt;br&gt;ember在backbone的思想上更近了一大步，通过内置的data binding API，让数据和DOM能够双向绑定，程序猿不用再花心思去考虑DOM的更新。然而，蹩脚的API调用（所有对binding的数据的访问需要通过getter和setter，你懂的）和DOM中无处不在的script垃圾让ember既不简约也不优雅。&lt;br&gt;而Meteor则另辟蹊跷，通过reactivity context和dependency巧妙地支持了reactivity（据作者说核心代码就几十行），使用者几乎感受不到代码的变化。&lt;br&gt;&lt;br&gt;Meteor另一个很贴心的点是零部署。开发web app有点小头疼的点是打包和部署。比如说，把less转成css，coffee转成javascript，然后混淆，压缩，虽然有些自动化的工具可以简化这部分工作，可还免不了相应的配置和一些脚本工作。在开发环境下，meteor会自动替你加载js/css，如果你使用了coffee/less (sass)，只要add了相应的smart package，meteor会自动帮你处理；开发完毕后要部署，只需要运行meteor bundle，系统自动会将相关的资源打包，只要目标系统上有相应版本的nodejs，meteor和mongodb，就能运行一个标准的production版本。&lt;br&gt;&lt;br&gt;以下是meteor官网上的介绍，当你真正使用meteor后，会发现还真不是吹牛。&lt;blockquote&gt;SEVEN PRINCIPLES OF METEOR&lt;ol&gt;&lt;li&gt;&lt;br&gt;Data on the Wire. Don't send HTML over the network. Send data and let the client decide how to render it.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;One Language. Write both the client and the server parts of your interface in JavaScript.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;Database Everywhere. Use the same transparent API to access your database from the client or the server.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;Latency Compensation. On the client, use prefetching and model simulation to make it look like you have a zero-latency connection to the database.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;Full Stack Reactivity. Make realtime the default. All layers, from database to template, should make an event-driven interface available.&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;br&gt;Embrace the Ecosystem. Meteor is open source and integrates, rather than replaces, existing open source tools and frameworks. Simplicity Equals Productivity. The best way to make something seem simple is to have it actually be simple. Accomplish this through clean, classically beautiful APIs.&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;br&gt;以上内容摘自我的博客文章：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//tchen.me/posts/2012-12-16-why-meteor.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;为什么是Meteor&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;[补充] 下一代的web app是什么？&lt;br&gt;我们看看几代计算机体系的发展。web/cloud时代是不是重复者mainframe/CS时代走过的路？那么，我们是不是有理由相信，meteor在此做的尝试是一个正确的方向？&lt;img src=&quot;https://pic1.zhimg.com/e87aef393689f7eb15c6a6f90393250c_b.jpg&quot; data-rawwidth=&quot;1816&quot; data-rawheight=&quot;1330&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1816&quot; data-original=&quot;https://pic1.zhimg.com/e87aef393689f7eb15c6a6f90393250c_r.jpg&quot;&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic1.zhimg.com/e87aef393689f7eb15c6a6f90393250c_200x112.jpg" data-rawwidth="1816" data-rawheight="1330" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic1.zhimg.com/e87aef393689f7eb15c6a6f90393250c_r.jpg">
Meteor的官网( <a href="//link.zhihu.com/?target=http%3A//meteor.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Meteor<i class="icon-external"></i></a> )这样介绍这个框架： Meteor is an open-source platform for building top-quality web apps in a fraction of the time, whether you're an expert developer or just getting started.<strong>top-quality web apps</strong> 我们放下不表，<strong>fraction…</strong>

<a href="/question/20296322/answer/16089122" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2013-02-03" target="_blank" href="/question/20296322/answer/16089122">编辑于 2013-02-06</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-298802"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>13 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="426" data-type="Answer">
<link itemprop="url" href="/question/35703265/answer/64147164">
<meta itemprop="answer-id" content="21074014" />
<meta itemprop="answer-url-token" content="64147164" />
<meta itemprop="answerCount" content="57" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35703265" target="_blank" data-id="6487997" data-za-element-name="Title">
计算机基础知识不牢的前端都是瞎扯淡吗？为什么？对于前端来说哪些计算机基础知识很重要？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35703265/answer/64147164">
<!-- <meta itemprop="answer-id" content="21074014">
<meta itemprop="answer-url-token" content="64147164"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>212</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">212</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$leeluolee"
target="_blank" href="/people/leeluolee"
>郑海波</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/leeluolee#hilightbadge" target="_blank">前端开发、JavaScript话题优秀回答者</a></span>



<span title="网易程序猿" class="bio">
网易程序猿
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="212" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">212</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6487997" data-action="/answer/content" data-author-name="郑海波" data-entry-url="/question/35703265/answer/64147164">

<textarea hidden class="content">&lt;a data-hash=&quot;c11336b8607d86bc9090bed90757a34c&quot; href=&quot;//www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@玉伯&quot; data-tip=&quot;p$b$c11336b8607d86bc9090bed90757a34c&quot; data-hovercard=&quot;p$b$c11336b8607d86bc9090bed90757a34c&quot;&gt;@玉伯&lt;/a&gt; 的回答有更新了，我是认同的，也解答了之前的质疑。  所以我删掉之前的措辞。 但是我还是认为 &lt;b&gt;『 知乎之所以称为知乎，还是应该看提问者的问题，这个世界上正确的事情太多了 』&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;----  以下是原回答  ---- &lt;br&gt;&lt;br&gt;&lt;br&gt;下面其实很多被忽略的同学都答得不错，但我觉得自己的一些感悟还是挺适合回答这个问题&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;我是个『非计算机专业毕业，并且原本抱着计算机基础对前端没啥卵用』心态的人。&lt;/b&gt;&lt;/blockquote&gt;&lt;br&gt;因为我的计算机基础就非常薄弱，但是我当年进公司却拿了较高评价的Offer。我会反感公司校招时放那么多计算机基础的题目，因为不符合自己的评价，会反感领导要求前端有计算机背景，因为自己没有，等等等，自负的人总是容易对自身产生认同感，这个很容易理解。这个也可以映射现在年轻的应届生拿了较好的Offer的心态， Too young ， too simple。&lt;br&gt;&lt;br&gt;我曾经在这个回答里回答了这个问题，&lt;a href=&quot;http://www.zhihu.com/question/29178984/answer/45509020&quot; class=&quot;internal&quot;&gt;Web前端需要熟悉大学里［高大上］计算专业课吗？ - 郑海波的回答&lt;/a&gt;。 &lt;b&gt;应该可以明显的感受到我的态度的转变&lt;/b&gt;，事实上，知道的越多，就越感受到自己的渺小， 因为我感受到了我那自学的皮毛都算不上的基础知识带给我的巨大收益， &lt;b&gt;我甚至会开始计算并焦虑我好像得花非常多的时间来弥补自己知识的短板&lt;/b&gt;。&lt;br&gt;&lt;br&gt;我其实是很羡慕那些学了4年甚至7年计算机的同学， 但是我发现，有些科班的同学甚至无法和我交流类似的知识体系， 说明应试教育体系下，&lt;b&gt;所谓的计算机基础还是需要通过思考和实践来真正成为自己的东西， 否则并没什么卵用&lt;/b&gt;。&lt;br&gt;&lt;br&gt;我相信在很多人也看出来了，前端这些年看似发展的非常蓬勃，但其实并没有太多新鲜的东西， 一切都是重演。 &lt;b&gt;计算机基础是以不变应万变的秘诀。&lt;/b&gt;现在的前端现在已经不再需要『我会写java后台代码』等等愚蠢的强调来站直腰板了，成熟的公司已经开始重视前端带来的实际价值， 所以前端本身当然不能固步自封，巩固计算机基础，用以灵活应用到日常业务，用以吸收新鲜技术，也就是自然而然的事情。&lt;br&gt;&lt;br&gt;&lt;br&gt;或许很多人的疑虑来自于『很多前端牛人并没有掌握计算机基础， 仍然成功了』。我相信这里的成功指的是名气，收入、职位 抑或是其它的什么。  我父辈那一代，胆儿大的很多人进入建筑和房地产领域也都发达了，特别是给通信或医院做基建的项目， 净利润都非常高，但是了解现在，即使有上千万上亿的工程摆你面前， 一般人也盘不下来。 说白了， 时代不同了， 别人可以成功并不意味着你现在还可以， 就比如按趋势， 前端肯定不会延续  页面重构工程师 这一尴尬的工种， 纵使无论有多少人吹捧它的重要性。&lt;br&gt;&lt;br&gt;&lt;br&gt;我非常同意 &lt;a data-hash=&quot;97f817fc8d790493bab8539575f16eef&quot; href=&quot;//www.zhihu.com/people/97f817fc8d790493bab8539575f16eef&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Keaton&quot; data-tip=&quot;p$b$97f817fc8d790493bab8539575f16eef&quot; data-hovercard=&quot;p$b$97f817fc8d790493bab8539575f16eef&quot;&gt;@Keaton&lt;/a&gt;  『基础决定你可能达到的高度， 而业务决定了你的最低瓶颈』，两者不可偏废。&lt;br&gt;&lt;br&gt;我列下我觉得部分已经让我受益的基础知识&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;- 高中的物理知识 + 最最基础的大学物理&lt;br&gt;&lt;/li&gt;&lt;li&gt;- 编译原理的最最基础的前端知识用以一致的处理文本类问题，帮你从肮脏的逻辑判断和正则表达式滥用中拯救出来。&lt;br&gt;&lt;/li&gt;&lt;li&gt;- 大学中的矩阵论、线性代数  ， 进而一些 计算机图形学的简单理解，这些并不一定要和webGL结合，但是和物理一样可以帮助你做出&lt;b&gt;『符合直觉』&lt;/b&gt;的效果和动画&lt;br&gt;&lt;/li&gt;&lt;li&gt;- 数据结构和基本算法， 你要清楚特定的基础数据结构的可以处理的问题， 其实很多不是那么基础的算法和数据结构都需要自己在实际需求中去摸索或学习， 所以如果你已经知道这些算法，那可以跳过很多耗时的技术选型阶段， 这就是&lt;b&gt;知识的广度&lt;/b&gt;带来的优势&lt;br&gt;&lt;/li&gt;&lt;li&gt;- 一些函数式编程的思想， SICP是大家广泛推荐的书， 然而我还没看完。一些衍生的内容，比如不变数据结构的定义和应用，事实上你现在就可以通过几十行代码在js里实现不变数据结构的帮助函数来帮助你在复杂应用里实现undo, redo甚至历史回溯功能， 而不需引入facebook那高大120kb的immuable.js. &lt;br&gt;&lt;/li&gt;&lt;li&gt;- 等等等等...&lt;/li&gt;&lt;/ul&gt;</textarea>


<div class="zh-summary summary clearfix">

<a data-hash="c11336b8607d86bc9090bed90757a34c" href="//www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c" class="member_mention" data-editable="true" data-title="@玉伯" data-tip="p$b$c11336b8607d86bc9090bed90757a34c" data-hovercard="p$b$c11336b8607d86bc9090bed90757a34c">@玉伯</a> 的回答有更新了，我是认同的，也解答了之前的质疑。 所以我删掉之前的措辞。 但是我还是认为 <b>『 知乎之所以称为知乎，还是应该看提问者的问题，这个世界上正确的事情太多了 』</b> ---- 以下是原回答 ---- 下面其实很多被忽略的同学都答得不错，但我觉得…

<a href="/question/35703265/answer/64147164" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-18" target="_blank" href="/question/35703265/answer/64147164">编辑于 2015-09-19</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6487997"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>30 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="427" data-type="Answer">
<link itemprop="url" href="/question/35525276/answer/63202623">
<meta itemprop="answer-id" content="20695218" />
<meta itemprop="answer-url-token" content="63202623" />
<meta itemprop="answerCount" content="57" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35525276" target="_blank" data-id="6416796" data-za-element-name="Title">
专注前端还是全栈？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35525276/answer/63202623">
<!-- <meta itemprop="answer-id" content="20695218">
<meta itemprop="answer-url-token" content="63202623"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>211</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">211</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$tapir"
target="_blank" href="/people/tapir"
>貘吃馍香</a></span><span title="偶是造粪机器" class="bio">
偶是造粪机器
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="211" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">211</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6416796" data-action="/answer/content" data-author-name="貘吃馍香" data-entry-url="/question/35525276/answer/63202623">

<textarea hidden class="content">泻药&lt;br&gt;&lt;br&gt;是个程序员&lt;br&gt;就别老纠结什么前端全栈的破名词儿&lt;br&gt;圈里某些人天天造名词儿瞎JB忽悠菜鸟&lt;br&gt;实际上是&lt;br&gt;写什么代码不是写</textarea>


<div class="zh-summary summary clearfix">

泻药 是个程序员 就别老纠结什么前端全栈的破名词儿 圈里某些人天天造名词儿瞎JB忽悠菜鸟 实际上是 写什么代码不是写

<a href="/question/35525276/answer/63202623" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-11" target="_blank" href="/question/35525276/answer/63202623">编辑于 2015-09-11</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6416796"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>9 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="428" data-type="Answer">
<link itemprop="url" href="/question/47966707/answer/112306497">
<meta itemprop="answer-id" content="40398208" />
<meta itemprop="answer-url-token" content="112306497" />
<meta itemprop="answerCount" content="64" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/47966707" target="_blank" data-id="11401861" data-za-element-name="Title">
女孩子适合长期做IT吗？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/47966707/answer/112306497">
<!-- <meta itemprop="answer-id" content="40398208">
<meta itemprop="answer-url-token" content="112306497"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>211</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">211</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$shi-zi-zhang"
target="_blank" href="/people/shi-zi-zhang"
>兰茝</a></span><span title="M以上、F未满" class="bio">
M以上、F未满
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="211" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">211</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="11401861" data-action="/answer/content" data-author-name="兰茝" data-entry-url="/question/47966707/answer/112306497">

<textarea hidden class="content">几千年前：女孩子适合长期读书吗？&lt;br&gt;几百年前：女孩子适合长期在外抛头露面吗？&lt;br&gt;几十年前：女孩子应该有选举权和被选举权等基本的政治权利吗？&lt;br&gt;那么请问聪明的题主，女孩子适合长期做IT吗？&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;没有适不适合的性别，只有适不适合的人。</textarea>


<div class="zh-summary summary clearfix">

几千年前：女孩子适合长期读书吗？ 几百年前：女孩子适合长期在外抛头露面吗？ 几十年前：女孩子应该有选举权和被选举权等基本的政治权利吗？ 那么请问聪明的题主，女孩子适合长期做IT吗？ 没有适不适合的性别，只有适不适合的人。

<a href="/question/47966707/answer/112306497" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-07-21" target="_blank" href="/question/47966707/answer/112306497">编辑于 2016-07-22</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-11401861"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>32 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="429" data-type="Answer">
<link itemprop="url" href="/question/35247399/answer/61877744">
<meta itemprop="answer-id" content="20164142" />
<meta itemprop="answer-url-token" content="61877744" />
<meta itemprop="answerCount" content="188" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35247399" target="_blank" data-id="6305576" data-za-element-name="Title">
如何评价 Google 的新 Logo 及 VI ？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35247399/answer/61877744">
<!-- <meta itemprop="answer-id" content="20164142">
<meta itemprop="answer-url-token" content="61877744"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>210</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">210</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$xia-bingying"
target="_blank" href="/people/xia-bingying"
>夏冰莹</a></span><span title="UX设计师@Google" class="bio">
UX设计师@Google
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="210" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">210</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6305576" data-action="/answer/content" data-author-name="夏冰莹" data-entry-url="/question/35247399/answer/61877744">

<textarea hidden class="content">谢邀。利益相关，第一次看到这个logo是几个月前，第一反应是“卧槽谁这么脑抽筋千万千万别launch这货”，但是几个月来看多了就越来越喜欢。单独的大写G辨识度很高，比起以前那个16x16根本看不出是什么的小写g好太多。新的动画设计也是赞到爆，logo不再是一个静止的贴图而是一个能和用户沟通的系统。&lt;br&gt;&lt;br&gt;至于logotype略显幼稚也是我感到比较遗憾的地方，尤其因为我是做企业产品的，就算是现在看到新logo的 “Google AdWords” lockup还是会想揍人… &lt;br&gt;&lt;br&gt;嘛，但是放在Gmail、Maps等consumer product里看着还是很干净漂亮的。少了一份拘谨多了一份亲切。现在觉得别扭接受不能的人，用几个礼拜下来相信你们也会觉得很自然的。&lt;br&gt;&lt;br&gt;另外推荐大家看一下Google design blog介绍他们的设计过程的这篇blog：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//design.google.com/articles/evolving-the-google-identity/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;design.google.com/artic&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;les/evolving-the-google-identity/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;----------&lt;br&gt;&lt;br&gt;好多人在评论里说“你说的就是习惯了就好了呗”，我不是这个意思啊喂( -᷅_-᷄ )（好吧是我表达不好），我是想说 习惯了之后才可以开始客观地看一个logo而不是只能看到它不熟悉很别扭的地方。实际上这个logo的确蛮适合Google consumer products的形象的所以习惯了就不会有违和感。</textarea>


<div class="zh-summary summary clearfix">

谢邀。利益相关，第一次看到这个logo是几个月前，第一反应是“卧槽谁这么脑抽筋千万千万别launch这货”，但是几个月来看多了就越来越喜欢。单独的大写G辨识度很高，比起以前那个16x16根本看不出是什么的小写g好太多。新的动画设计也是赞到爆，logo不再是一…

<a href="/question/35247399/answer/61877744" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-02" target="_blank" href="/question/35247399/answer/61877744">编辑于 2015-09-03</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6305576"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>58 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="430" data-type="Answer">
<link itemprop="url" href="/question/20084964/answer/13924025">
<meta itemprop="answer-id" content="689632" />
<meta itemprop="answer-url-token" content="13924025" />
<meta itemprop="answerCount" content="22" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20084964" target="_blank" data-id="214028" data-za-element-name="Title">
淘宝 UED 前端、腾讯脚本开发、豆瓣前端开发，应该如何在这几个工作之间选择？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20084964/answer/13924025">
<!-- <meta itemprop="answer-id" content="689632">
<meta itemprop="answer-url-token" content="13924025"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>210</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">210</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$lifesinger"
target="_blank" href="/people/lifesinger"
>玉伯</a></span><span title="因上努力，果上随缘。" class="bio">
因上努力，果上随缘。
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="210" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">210</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="214028" data-action="/answer/content" data-author-name="玉伯" data-entry-url="/question/20084964/answer/13924025">

<textarea hidden class="content">受邀回答该问题，这个问题我挺不愿意回答，最近时不时有人问我，整理下，算是在这里统一答复。&lt;br&gt;&lt;br&gt;1. 我的确离开淘宝 UED 了，但不是最近的事，而是一年前就离开了。当时离开淘宝 UED，是因为想做产品，想实现自己内心的产品梦。不过很不幸，没成（悲剧的湖畔项目）。这算是一段内部创业的经历，很短暂只有几个月，但收获蛮多。后来就去了开发部门，和同事一起做了些页面优化项目和前端运维系统，思考和沉淀的一段时期，很感谢与我一路同行的几位同事（小虎、文河、决尘、云翼、小凡等）。&lt;br&gt;&lt;br&gt;2. 关注我微博的，会知道我上周离开淘宝，入职支付宝了。这是事实，但跟淘宝 UED 没关系，是因为我自己的技术梦。我很想将自己在前端方面的思考和想法落地得更实在更具体些。在比较淘宝 UED、支付宝前端团队、还有天猫、一淘等前端团队后，发现支付宝前端团队不少项目规划和大局策略与我的思路最为契合。我想做的事情，不是一个人可以单枪匹马去做的，如果能有一个强大的团队协同来做，会更容易达成。去支付宝前端团队的理由，就这么简单：因为更能做成我想做的事。&lt;br&gt;&lt;br&gt;3. 针对你的问题，很抱歉我无法给出具体建议。去哪个团队，最关键取决于你自己想要什么，你追求什么，你的梦是什么。当你想清楚自己想要什么的时候，选择去哪个团队的标准，自然而然地就会呈现出来。&lt;br&gt;&lt;br&gt;4. 想清楚自己想要什么，找到符合自己实际情况的选择标准后，直接联系各个团队去了解情况就好。比如你可以直接发邮件或打电话给淘宝 UED 前端团队的负责人圆心，我相信圆心能给你详细地介绍相关情况，辅助你做出选择。同样的方式，去联系腾讯和豆瓣的负责人就好。也热烈欢迎考虑下支付宝前端团队，打电话或发邮件给么么茶或给我就好，呵呵。&lt;br&gt;&lt;br&gt;5. 最后，想说一点：任何一个团队，永远不会像你想象中的那么好，也不会如你所听说的那么糟。一个团队的好坏，往往在你自己的心中。想好自己想要什么，并为之去努力去改变，这远比选择外界环境更重要。&lt;br&gt;&lt;br&gt;就这些，祝福你能找到心之所属。</textarea>


<div class="zh-summary summary clearfix">

受邀回答该问题，这个问题我挺不愿意回答，最近时不时有人问我，整理下，算是在这里统一答复。 1. 我的确离开淘宝 UED 了，但不是最近的事，而是一年前就离开了。当时离开淘宝 UED，是因为想做产品，想实现自己内心的产品梦。不过很不幸，没成（悲剧的湖畔…

<a href="/question/20084964/answer/13924025" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/20084964/answer/13924025">发布于 2012-02-25</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-214028"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>17 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="431" data-type="Answer">
<link itemprop="url" href="/question/46474722/answer/102756875">
<meta itemprop="answer-id" content="36558854" />
<meta itemprop="answer-url-token" content="102756875" />
<meta itemprop="answerCount" content="11" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/46474722" target="_blank" data-id="10803702" data-za-element-name="Title">
如何评价蚂蚁金服新一代数据可视化引擎 G2 ？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/46474722/answer/102756875">
<!-- <meta itemprop="answer-id" content="36558854">
<meta itemprop="answer-url-token" content="102756875"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>210</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">210</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$li-harry"
target="_blank" href="/people/li-harry"
>Li Harry</a></span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="210" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">210</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="10803702" data-action="/answer/content" data-author-name="Li Harry" data-entry-url="/question/46474722/answer/102756875">

<textarea hidden class="content">谢邀 &lt;a data-title=&quot;@罗宸&quot; data-editable=&quot;true&quot; class=&quot;member_mention&quot; href=&quot;//www.zhihu.com/people/b7734862be39b570374b4d89e058666a&quot; data-hash=&quot;b7734862be39b570374b4d89e058666a&quot; data-hovercard=&quot;p$b$b7734862be39b570374b4d89e058666a&quot;&gt;@罗宸&lt;/a&gt; 。一句话回答，G2只是图形语法（The Grammar of Graphics）的&lt;b&gt;“又”&lt;/b&gt;一个实现。&lt;br&gt;&lt;br&gt;为了详细回答这个问题，让我们先拨开“蚂蚁金服”、“新一代数据可视化引擎”这些光环，近距离看一下G2背后的理论基础，也就是图形语法，The Grammar of Graphics。&lt;br&gt;&lt;br&gt;The Grammar of Graphics代指东西中的一个就是Leland Wilkinson所著的这本书&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//book.douban.com/subject/10123863/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Grammar of Graphics (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。估计一般人知道的不多，只有专门搞可视化或者统计图形的人才知道，但就算知道，读过这本书的人也应该不多（将近700页的厚书）。俺稍微通读过一遍这本书。这本书向我们介绍了看待统计图形的一种形式化方法，也就是“图形语法”。&lt;br&gt;&lt;br&gt;图形语法与一般基于分类的图表理论有很大不同。比如说，我们知道有柱状图、折线图、散点图、饼图等等这些图表，但是这个世界上是不是只有这些图表了呢？当然不是，比如说还有堆叠柱状图、环状图、南丁格尔玫瑰图、雷达图……等等等等。分类是分不过来的。更可怕的是，图表之间还可以进行“组合”，比如说一张图表里既有柱子又有折线，那对这种组合图形怎么分类呢？图形语法提出，不光光数据是有结构的，图形也是有结构的。图形语法首先描述清楚了（统计）图形的结构，并提出了一种组合方法，从而可以描述很多、很多、很多种传统与非传统甚至是没有出现过的图表，包括但不限于柱状图、折线图……等等。&lt;br&gt;&lt;br&gt;做一个比喻。比如说我们知道有牛、羊、马、鹿、狗、猫、兔等等这些动物。这是一种对动物基于分类的认知。但假设突然基因变异，出现一个四不像，那这个时候分类就起不了作用了。但如果有一种“动物语法”，规定了动物的结构，比如说有头、躯干、四肢、尾巴，头上又有多少只眼睛、多少个鼻子、有没有胡子、有没有鬃毛，眼睛是什么颜色的，鼻子是什么形状的，那么这个时候我们对四不像也可以正确的进行认知：我虽然不知道它的名字，但是我知道它有头、躯干、四肢、尾巴，头上有N只眼睛、M个鼻子、没有胡子、没有鬃毛，眼睛是蓝色的，鼻子是扁的，它虽然没有名字，但我知道它就是它！&lt;br&gt;&lt;br&gt;另外，既然名字中带有“语法”，那么这其实跟程序语言也有一定关系。比如我们在写C、Python的时候，需要遵循这门语言的语法，才能写出正确的程序。所谓的语法，可以是认为是一种生成规则，是一门形式化系统。图形语法只不过定义了一种合理的统计图形的生成方式，仅此而已。由于数据对统计图形的重要性，图形语法中也对数据的操纵也定义了一套代数理论，但在此不再赘述。&lt;br&gt;&lt;br&gt;对图形语法的简介到此为之。然后，我们是不是会好奇，图形语法到底是怎么来的？为了回答这个问题，我们首先来认识一下图形语法的作者，&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Leland_Wilkinson&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Leland Wilkinson&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。这哥们从上世纪80年代就开始开发统计软件包SYSTAT，然后把它卖给了大名鼎鼎的IBM的SPSS统计学软件，并为SPSS工作了十年之久。SPSS中用于描述图表的语言叫做GPL（Graphics Production Language，&lt;a class=&quot; external&quot; href=&quot;//link.zhihu.com/?target=http%3A//www.helsinki.fi/%7Ekomulain/Tilastokirjat/IBM-SPSS-GPL-Reference-Guide.pdf&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;helsinki.fi/~komulain/T&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ilastokirjat/IBM-SPSS-GPL-Reference-Guide.pdf&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），便是Wilkinson的图形语法最初的实现。在一开始开发统计图形库的时候，Wilkinson由于碰到很多神烦的问题，特别是统计图形的表示问题，“一怒之下”便发明了图形语法。经过不断的实践与经验积累，图形语法便逐渐成熟起来。在他的这本书里，Wilkinson用一种写研究论文的方式撰写了这本书，有各种引用、各种数学上的形式化定义，可以认为，这本书是可视化与统计图形&lt;b&gt;学术界&lt;/b&gt;一本里程碑式的经典文献。&lt;br&gt;&lt;br&gt;知道了图形语法是什么，以及它是从哪里来的、怎么来的，我们再回过头来看G2。G2所宣称的“新一代数据可视化引擎”，其实是有一定道理的。因为现在市面上所流行可视化库，大部分是类似HighCharts、ECharts、Google Charts等这种基于图表分类的可视化库。一是逼格较低，二是用户无法表达库作者没有预先设置好的图表。另外一个具代表性的是D3可视化库，但D3略偏向底层，学习曲线也略陡峭，因此，基于图形语法的可视化引擎还是有一定的优势的。因此，G2作为图形语法的又一种实现，&lt;b&gt;让枯燥无味的理论从高贵的学术殿堂走出来服务广大劳动者&lt;/b&gt;，可以算得上是“新一代数据可视化引擎”。&lt;br&gt;&lt;br&gt;但是，别忘了“又”字。GPL就不说了，多少年前的东西了，而且还不是免费的。学术圈里那几个万年炒冷饭的也不提了。这里只举几个俺觉得有实际价值的项目：&lt;br&gt;&lt;ul&gt;&lt;li&gt;R语言中著名的ggplot2，是Hadley Wickham针对R语言基于图形语法的一个实现，免费又开源。虽然俺不是学统计学的，但估计学统计学的同学应该都知道吧？&lt;/li&gt;&lt;li&gt;Vega &lt;a href=&quot;//link.zhihu.com/?target=http%3A//vega.github.io/vega/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vega: A Visualization Grammar&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，华盛顿大学那边最近几年搞出的一套基于D3的可视化语法，其中一些概念借鉴了图形语法，神似而形不似。&lt;/li&gt;&lt;li&gt;Bokeh &lt;a class=&quot; external&quot; href=&quot;//link.zhihu.com/?target=http%3A//bokeh.pydata.org/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;bokeh.pydata.org/en/lat&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;est/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这个知道的人可能更少些。这是一个基于图形语法的Python可视化库。个人觉得比G2更加成熟。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;还有一些不太成熟的就不举例子了，比如说Clojure也有基于图形语法的可视化库。然后除了阿里，某些公司内部也有未公开的基于图形语法的可视化库。其实，要实现一个基于图形语法的可视化库并不算太难，但难的在于细节、在于成熟度。就像是一个刚诞生的产品，与一个经过N次迭代的产品，其实是有质的区别的。而在俺看来，蚂蚁金服的G2只是基于图形语法的可视化库当中的“又”一个（算不上太成熟的）成员。&lt;/p&gt;</textarea>


<div class="zh-summary summary clearfix">

谢邀 <a data-title="@罗宸" data-editable="true" class="member_mention" href="//www.zhihu.com/people/b7734862be39b570374b4d89e058666a" data-hash="b7734862be39b570374b4d89e058666a" data-hovercard="p$b$b7734862be39b570374b4d89e058666a">@罗宸</a> 。一句话回答，G2只是图形语法（The Grammar of Graphics）的<b>“又”</b>一个实现。 为了详细回答这个问题，让我们先拨开“蚂蚁金服”、“新一代数据可视化引擎”这些光环，近距离看一下G2背后的理论基础，也就是图形语法，The Grammar of Graphics。…

<a href="/question/46474722/answer/102756875" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/46474722/answer/102756875">发布于 2016-05-26</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-10803702"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>22 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic1.zhimg.com/5949706390af4d459cc398f8e8e23c28_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="432" data-type="Answer">
<link itemprop="url" href="/question/35992354/answer/66488394">
<meta itemprop="answer-id" content="22012753" />
<meta itemprop="answer-url-token" content="66488394" />
<meta itemprop="answerCount" content="33" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35992354" target="_blank" data-id="6603837" data-za-element-name="Title">
如何編寫不可維護的php代碼？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35992354/answer/66488394">
<!-- <meta itemprop="answer-id" content="22012753">
<meta itemprop="answer-url-token" content="66488394"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>209</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">209</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$netcan"
target="_blank" href="/people/netcan"
>netcan</a></span><span title="合肥工业大学，计算机科学与技术，前食品科学与工程，在校学生。" class="bio">
合肥工业大学，计算机科学与技术，前食品…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="209" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">209</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6603837" data-action="/answer/content" data-author-name="netcan" data-entry-url="/question/35992354/answer/66488394">

<textarea hidden class="content">以前看到的，在这分享（翻译来自&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/80241/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;老码农冒死揭开行业黑幕：如何编写无法维护的代码&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，作者 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;伯乐在线&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jobbole.com/members/laomanong&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;老码农&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，已征得作者同意）&lt;br&gt;============================================================&lt;br&gt;&lt;p&gt;&lt;b&gt;如何编写无法维护的代码让自己稳拿铁饭碗&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;– Roedy Green&lt;/strong&gt;&lt;/p&gt;简介&lt;p&gt;永远不要（把自己遇到的问题）归因于（他人的）恶意，这恰恰说明了（你自己的）无能。 — 拿破仑&lt;/p&gt;&lt;p&gt;为了造福大众，在Java编程领域创造就业机会，兄弟我在此传授大师们的秘籍。这些大师写的代码极其难以维护，后继者就是想对它做最简单的修改都需要花上数年时间。而且，如果你能对照秘籍潜心修炼，你甚至可以给自己弄个铁饭碗，因为除了你之外，没人能维护你写的代码。再而且，如果你能练就秘籍中的&lt;strong&gt;全部&lt;/strong&gt;招式，那么连你自己都无法维护你的代码了！&lt;/p&gt;&lt;p&gt;你不想练功过度走火入魔吧。那就不要让你的代码&lt;strong&gt;一眼看去&lt;/strong&gt;就完全无法维护，只要它&lt;strong&gt;实质上是&lt;/strong&gt;那样就行了。否则，你的代码就有被重写或重构的风险！&lt;/p&gt;总体原则&lt;p&gt;Quidquid latine dictum sit, altum sonatur.&lt;br&gt;(随便用拉丁文写点啥都会显得高大上。)&lt;/p&gt;&lt;p&gt;想挫败维护代码的程序员，你必须先明白他的思维方式。他接手了你的庞大程序，没有时间把它全部读一遍，更别说理解它了。他无非是想快速找到修改代码的位置、改代码、编译，然后就能交差，并希望他的修改不会出现意外的副作用。&lt;/p&gt;&lt;p&gt;他查看你的代码不过是管中窥豹，一次只能看到一小段而已。你要确保他永远看不到全貌。要尽量让他难以找到他想找的代码。但更重要的是，要让他不能有把握&lt;strong&gt;忽略&lt;/strong&gt;任何东西。&lt;/p&gt;&lt;p&gt;程序员都被编程惯例洗脑了，还为此自鸣得意。每一次你处心积虑地违背编程惯例，都会迫使他必须用放大镜去仔细阅读你的每一行代码。&lt;/p&gt;&lt;p&gt;你可能会觉得每个语言特性都可以用来让代码难以维护，其实不然。你必须精心地误用它们才行。&lt;/p&gt;命名&lt;p&gt;“当我使用一个单词的时候” Humpty Dumpty 曾经用一种轻蔑的口气说, “它就是我想表达的意思，不多也不少。“&lt;br&gt;– Lewis Carroll — 《爱丽丝魔镜之旅》， 第6章&lt;/p&gt;&lt;p&gt;编写无法维护代码的技巧的重中之重是变量和方法命名的艺术。如何命名是和编译器无关的。这就让你有巨大的自由度去利用它们迷惑维护代码的程序员。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;妙用 宝宝起名大全&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;买本宝宝起名大全，你就永远不缺变量名了。比如 Fred 就是个好名字，而且键盘输入它也省事。如果你就想找一些容易输入的变量名，可以试试 adsf 或者 aoeu之类。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;单字母变量名&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;如果你给变量起名为a,b,c，用简单的文本编辑器就没法搜索它们的引用。而且，没人能猜到它们的含义。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;创造性的拼写错误&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;如果你必须使用描述性的变量和函数名，那就把它们都拼错。还可以把某些函数和变量名拼错，再把其他的拼对(例如 SetPintleOpening 和 SetPintalClosing) ，我们就能有效地将grep或IDE搜索技术玩弄于股掌之上。这招超级管用。还可以混淆不同语言（比如colour — 英国英语，和 color — 美国英语)。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;抽象&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在命名函数和变量的时候，充分利用抽象单词，例如 it, everything, data, handle, stuff, do, routine, perform 和数字，像这样命名的好例子有 routineX48, PerformDataFunction, DoIt, HandleStuff还有 do_args_method。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;首字母大写的缩写&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;用首字母大写缩写（比如GNU 代表 GNU’s Not Unix) 使代码简洁难懂。真正的汉子(无论男女)从来不说明这种缩写的含义，他们生下来就懂。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;辞典大轮换&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;为了打破沉闷的编程气氛，你可以用一本辞典来查找尽量多的同义词。例如 display, show, present。在注释里含糊其辞地暗示这些命名之间有细微的差别，其实根本没有。不过，如果有两个命名相似的函数真的有重大差别，那倒是一定要确保它们用相同的单词来命名(例如，对于 “写入文件”, “在纸上书写” 和 “屏幕显示” 都用 print 来命名)。 在任何情况下都不要屈服于编写明确的项目词汇表这种无理要求。你可以辩解说，这种要求是一种不专业的行为，它违反了结构化设计的信息隐藏原则。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;首字母大写&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;随机地把单词中间某个音节的首字母大写。例如 ComputeReSult()。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;重用命名&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在语言规则允许的地方，尽量把类、构造器、方法、成员变量、参数和局部变量都命名成一样。更高级的技巧是在{}块中重用局部变量。这样做的目的是迫使维护代码的程序员认真检查每个实例的作用域。特别是在Java代码中，可以把普通方法伪装成构造器。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;使用非英语字母&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在命名中偷偷使用不易察觉的非英语字母，例如&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;typedef struct { int i; } ínt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;看上去没啥不对是吧？嘿嘿嘿…这里的第二个 ínt 的 &lt;strong&gt;í &lt;/strong&gt;实际上是东北欧字母，并不是英语中的 i 。在简单的文本编辑器里，想看出这一点点区别几乎是不可能的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;巧妙利用编译器对于命名长度的限制&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;如果编译器只区分命名的前几位，比如前8位，那么就把后面的字母写得不一样。比如，其实是同一个变量，有时候写成 var_unit_update() ，有时候又写成 var_unit_setup()，看起来是两个不同的函数调用。而在编译的时候，它们其实是同一个变量 var_unit。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;下划线，真正的朋友&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;可以拿 _ 和 __ 作为标示符。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;混合多语言&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;随机地混用两种语言（人类语言或计算机语言都行）。如果老板要求使用他指定的语言，你就告诉他你用自己的语言更有利于组织你的思路，万一这招不管用，就去控诉这是语言歧视，并威胁起诉老板要求巨额精神损失赔偿。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;扩展 ASCII 字符&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;扩展 ASCII 字符用于变量命名是完全合法的，包括 ß, Ð, 和 ñ 等。在简单的文本编辑器里，除了拷贝/粘贴，基本上没法输入。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;其他语言的命名&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;使用外语字典作为变量名的来源。例如，可以用德语单词 punkt 代替 point。除非维护代码的程序员也像你一样熟练掌握了德语. 不然他就只能尽情地在代码中享受异域风情了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;数学命名&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;用数学操作符的单词来命名变量。例如：&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;openParen = (slash + asterix) / equals;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;ul&gt;(左圆括号 = (斜杠 + 星号)/等号;)&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;令人眩晕的命名&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;用带有完全不相关的感情色彩的单词来命名变量。例如：&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;marypoppins = (superman + starship) / god;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;ul&gt;(欢乐满人间 = (超人 + 星河战队)/上帝;)&lt;/ul&gt;&lt;ol&gt;这一招可以让阅读代码的人陷入迷惑之中，因为他们在试图想清楚这些命名的逻辑时，会不自觉地联系到不同的感情场景里而无法自拔。&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;何时使用 i&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要把 i 用作最内层的循环变量。 用什么命名都行，就是别用i。把 i 用在其他地方就随便了，用作非整数变量尤其好。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;惯例 — 明修栈道，暗度陈仓&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;忽视 Java 编码惯例，Sun 自己就是这样做的。幸运的是，你违反了它编译器也不会打小报告。这一招的目的是搞出一些在某些特殊情况下有细微差别的名字来。如果你被强迫遵循驼峰法命名，你还是可以在某些模棱两可的情况下颠覆它。例如，input&lt;strong&gt;F&lt;/strong&gt;ilename 和 input&lt;strong&gt;f&lt;/strong&gt;ile&lt;strong&gt;N&lt;/strong&gt;ame 两个命名都可以合法使用。在此基础上自己发明一套复杂到变态的命名惯例，然后就可以对其他人反咬一口，说他们违反了惯例。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;小写的 l 看上去很像数字 1&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;用小写字母 l 标识 long 常数。例如 10l 更容易被误认为是 101 而不是 10L 。 禁用所有能让人准确区分 uvw wW gq9 2z 5s il17|!j oO08 `’” ;,. m nn rn {[()]} 的字体。要做个有创造力的人。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;把全局命名重用为私有&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在A 模块里声明一个全局数组，然后在B 模块的头文件里再声明一个同名的私有数组，这样看起来你在B 模块里引用的是那个全局数组，其实却不是。不要在注释里提到这个重复的情况。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;误导性的命名&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;让每个方法都和它的名字蕴含的功能有一些差异。例如，一个叫 isValid(x)的方法在判断完参数x的合法性之后，还顺带着把它转换成二进制并保存到数据库里。&lt;/ol&gt;伪装&lt;p&gt;当一个bug需要越长的时间才会暴露，它就越难被发现。- Roedy Green（本文作者）&lt;/p&gt;&lt;p&gt;编写无法维护代码的另一大秘诀就是伪装的艺术，即隐藏它或者让它看起来像其他东西。很多招式有赖于这样一个事实：编译器比肉眼或文本编辑器更有分辨能力。下面是一些伪装的最佳招式。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;把代码伪装成注释，反之亦然&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;下面包括了一些被注释掉的代码，但是一眼看去却像是正常代码。&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;for(j=0; j&amp;lt;array_len; j+ =8)
{ 
total += array[j+0 ]; 
total += array[j+1 ]; 
total += array[j+2 ]; /* Main body of 
total += array[j+3]; * loop is unrolled 
total += array[j+4]; * for greater speed. 
total += array[j+5]; */
total += array[j+6 ]; 
total += array[j+7 ]; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;如果不是用绿色标出来，你能注意到这三行代码被注释掉了么？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;用连接符隐藏变量&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;对于下面的定义&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#define local_var xy_z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;可以把 “xy_z” 打散到两行里：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#define local_var xy\
_z // local_var OK
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;这样全局搜索 xy_z 的操作在这个文件里就一无所获了。 对于 C 预处理器来说，第一行最后的 “\” 表示继续拼接下一行的内容。&lt;/p&gt;文档&lt;p&gt;任何傻瓜都能说真话，而要把谎编圆则需要相当的智慧。- Samuel Butler (1835 – 1902)&lt;/p&gt;&lt;p&gt;不正确的文档往往比没有文档还糟糕。- Bertrand Meyer&lt;/p&gt;&lt;p&gt;既然计算机是忽略注释和文档的，你就可以在里边堂而皇之地编织弥天大谎，让可怜的维护代码的程序员彻底迷失。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;在注释中撒谎&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;实际上你不需要主动地撒谎，只要没有及时保持注释和代码更新的一致性就可以了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;只记录显而易见的东西&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;往代码里掺进去类似于&lt;/ol&gt;&lt;/ol&gt;1&lt;br&gt;/* 给 i 加 1 */&lt;br&gt;&lt;ol&gt;&lt;ol&gt;这样的注释，但是永远不要记录包或者方法的整体设计这样的干货。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;记录 How 而不是 Why&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;只解释一个程序功能的细节，而不是它要完成的任务是什么。这样的话，如果出现了一个bug，修复者就搞不清这里的代码应有的功能。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;该写的别写&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;比如你在开发一套航班预定系统，那就要精心设计，让它在增加另一个航空公司的时候至少有25处代码需要修改。永远不要在文档里说明要修改的位置。后来的开发人员要想修改你的代码？门都没有，除非他们能把每一行代码都读懂。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;计量单位&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要在文档中说明任何变量、输入、输出或参数的计量单位，如英尺、米、加仑等。计量单位对数豆子不是太重要，但在工程领域就相当重要了。同理，永远不要说明任何转换常量的计量单位，或者是它的取值如何获得。要想让代码更乱的话，你还可以在注释里写上错误的计量单位，这是赤裸裸的欺骗，但是非常有效。如果你想做一个恶贯满盈的人，不妨自己发明一套计量单位，用自己或某个小人物的名字命名这套计量单位，但不要给出定义。万一有人挑刺儿，你就告诉他们，你这么做是为了把浮点数运算凑成整数运算而进行的转换。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;坑&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要记录代码中的坑。如果你怀疑某个类里可能有bug，天知地知你知就好。如果你想到了重构或重写代码的思路，看在老天爷的份上，千万别写出来。切记电影《小鹿斑比》里那句台词 “如果你不能说好听的话，那就什么也不要说。”。万一这段代码的原作者看到你的注释怎么办？万一老板看到了怎么办？万一客户看到了怎么办？搞不好最后你自己被解雇了。一句”这里需要修改“的匿名注释就好多了，尤其是当看不清这句注释指的是哪里需要修改的情况下。切记“难得糊涂”四个字，这样大家都不会感觉受到了批评。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;说明变量&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要对变量声明加注释。有关变量使用的方式、边界值、合法值、小数点后的位数、计量单位、显示格式、数据录入规则等等，后继者完全可以自己从程序代码中去理解和整理嘛。如果老板强迫你写注释，就在方法体里胡乱多写点，但绝对不要对变量声明写注释，即使是临时变量！&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;在注释里挑拨离间&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;为了阻挠任何雇佣外部维护承包商的倾向，可以在代码中散布针对其他同行软件公司的攻击和抹黑，特别是可能接替你工作的其中任何一家。例如：&lt;/ol&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;/* 优化后的内层循环
这套技巧对于SSI软件服务公司的那帮蠢材来说太高深了，他们只会
用 &amp;lt;math.h&amp;gt; 里的笨例程，消耗50倍的内存和处理时间。
*/
class clever_SSInc
{ 
.. . 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;可能的话，除了注释之外，这些攻击抹黑的内容也要掺到代码里的重要语义部分，这样如果管理层想清理掉这些攻击性的言论然后发给外部承包商去维护，就会破坏代码结构。&lt;/ol&gt;程序设计&lt;blockquote&gt;&lt;p&gt;编写无法维护代码的基本规则就是：在尽可能多的地方，以尽可能多的方式表述每一个事实。- Roedy Green&lt;/p&gt;&lt;/blockquote&gt;&lt;ol&gt;编写可维护代码的关键因素是只在一个地方表述应用里的一个事实。如果你的想法变了，你也只在一个地方修改，这样就能保证整个程序正常工作。所以，编写无法维护代码的关键因素就是反复地表述同一个事实，在尽可能多的地方，以尽可能多的方式进行。令人高兴的是，像Java这样的语言让编写这种无法维护代码变得非常容易。例如，改变一个被引用很多的变量的类型几乎是不可能的，因为所有造型和转换功能都会出错，而且关联的临时变量的类型也不合适了。而且，如果变量值要在屏幕上显示，那么所有相关的显示和数据录入代码都必须一一找到并手工进行修改。类似的还有很多，比如由C和Java组成的Algol语言系列，Abundance甚至Smalltalk对于数组等结构的处理，都是大有可为的。&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Java 造型&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;Java的造型机制是上帝的礼物。你可以问心无愧地使用它，因为Java语言本身就需要它。每次你从一个Collection 里获取一个对象，你都必须把它造型为原始类型。这样这个变量的类型就必须在无数地方表述。如果后来类型变了，所有的造型都要修改才能匹配。如果倒霉的维护代码的程序员没有找全（或者修改太多），编译器能不能检测到也不好说。类似的，如果变量类型从short 变成 int，所有匹配的造型也都要从(short) 改成 (int)。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;利用Java的冗余&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;Java要求你给每个变量的类型写两次表述。 Java 程序员已经习惯了这种冗余，他们不会注意到你的两次表述有细微的差别，例如&lt;/ol&gt;&lt;/ol&gt;&lt;br&gt;Bubblegum b = new Bubblegom();&lt;br&gt;&lt;ol&gt;&lt;ol&gt;不幸的是 ++ 操作符的盛行让下面这种伪冗余代码得手的难度变大了：&lt;/ol&gt;&lt;/ol&gt;swimmer = swimner + 1;&lt;br&gt;&lt;p&gt;&lt;strong&gt;永远不做校验&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要对输入数据做任何的正确性或差异性检查。这样能表现你对公司设备的绝对信任，以及你是一位信任所有项目伙伴和系统管理员的团队合作者。总是返回合理的值，即使数据输入有问题或者错误。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;有礼貌，无断言&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;避免使用 assert() 机制，因为它可能把三天的debug盛宴变成10分钟的快餐。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;避免封装&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;为了提高效率，不要使用封装。方法的调用者需要所有能得到的外部信息，以便了解方法的内部是如何工作的。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;复制粘贴修改&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;以效率的名义，使用 复制+粘贴+修改。这样比写成小型可复用模块效率高得多。在用代码行数衡量你的进度的小作坊里，这招尤其管用。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;使用静态数组&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;如果一个库里的模块需要一个数组来存放图片，就定义一个静态数组。没人会有比512 X 512 更大的图片，所以固定大小的数组就可以了。为了最佳精度，就把它定义成 double 类型的数组。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;傻瓜接口&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;编写一个名为 “WrittenByMe” 之类的空接口，然后让你的所有类都实现它。然后给所有你用到的Java 内置类编写包装类。这里的思想是确保你程序里的每个对象都实现这个接口。最后，编写所有的方法，让它们的参数和返回类型都是这个 WrittenByMe。这样就几乎不可能搞清楚某个方法的功能是什么，并且所有类型都需要好玩的造型方法。更出格的玩法是，让每个团队成员编写它们自己的接口(例如 WrittenByJoe)，程序员用到的任何类都要实现他自己的接口。这样你就可以在大量无意义接口中随便找一个来引用对象了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;巨型监听器&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要为每个组件创建分开的监听器。对所有按钮总是用同一个监听器，只要用大量的if…else 来判断是哪一个按钮被点击就行了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;好事成堆TM&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;狂野地使用封装和OO思想。例如&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;myPanel.add( getMyButton() ); 
private JButton getMyButton()
{ 
return myButton; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;ol&gt;&lt;ol&gt;这段很可能看起来不怎么好笑。别担心，只是时候未到而已。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;友好的朋友&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在C++ 里尽量多使用friend声明。再把创建类的指针传递给已创建类。现在你不用浪费时间去考虑接口了。另外，你应该用上关键字private 和 protected 来表明你的类封装得很好。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;使用三维数组&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;大量使用它们。用扭曲的方式在数组之间移动数据，比如，用arrayA里的行去填充arrayB的列。这么做的时候，不管三七二十一再加上1的偏移值，这样很灵。让维护代码的程序员抓狂去吧。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;混合与匹配&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;存取方法和公共变量神马的都要给他用上。这样的话，你无需调用存取器的开销就可以修改一个对象的变量，还能宣称这个类是个”Java Bean”。对于那些试图添加日志函数来找出改变值的源头的维护代码的程序员，用这一招来迷惑他尤其有效。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;没有秘密!&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;把每个方法和变量都声明为 public。毕竟某个人某天可能会需要用到它。一旦方法被声明为public 了，就很难缩回去。对不？这样任何它覆盖到的代码都很难修改了。它还有个令人愉快的副作用，就是让你看不清类的作用是什么。如果老板质问你是不是疯了，你就告诉他你遵循的是经典的透明接口原则。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;全堆一块&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;把你所有的没用的和过时的方法和变量都留在代码里。毕竟说起来，既然你在1976年用过一次，谁知道你啥时候会需要再用到呢？当然程序是改了，但它也可能会改回来嘛，你”不想要重新发明轮子”（领导们都会喜欢这样的口气）。如果你还原封不动地留着这些方法和变量的注释，而且注释写得又高深莫测，甭管维护代码的是谁，恐怕都不敢对它轻举妄动。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;就是 Final&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;把你所有的叶子类都声明为 final。毕竟说起来，你在项目里的活儿都干完了，显然不会有其他人会通过扩展你的类来改进你的代码。这种情况甚至可能有安全漏洞。 java.lang.String 被定义成 final 也许就是这个原因吧？如果项目组其他程序员有意见，告诉他们这样做能够提高运行速度。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;避免布局&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要用到布局。当维护代码的程序员想增加一个字段，他必须手工调整屏幕上显示所有内容的绝对坐标值。如果老板强迫你使用布局，那就写一个巨型的 GridBagLayout 并在里面用绝对坐标进行硬编码。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;全局变量，怎么强调都不过分&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;如果上帝不愿意我们使用全局变量，他就不会发明出这个东西。不要让上帝失望，尽量多使用全局变量。每个函数最起码都要使用和设置其中的两个，即使没有理由也要这么做。毕竟，任何优秀的维护代码的程序员都会很快搞清楚这是一种侦探工作测试，有利于让他们从笨蛋中脱颖而出。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;再一次说说全局变量&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;全局变量让你可以省去在函数里描述参数的麻烦。充分利用这一点。在全局变量中选那么几个来表示对其他全局变量进行操作的类型。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;局部变量&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要用局部变量。在你感觉想要用的时候，把它改成一个实例或者静态变量，并无私地和其他方法分享它。这样做的好处是，你以后在其他方法里写类似声明的时候会节省时间。C++程序员可以百尺竿头更进一步，把所有变量都弄成全局的。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;配置文件&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;配置文件通常是以 关键字 = 值 的形式出现。在加载时这些值被放入 Java 变量中。最明显的迷惑技术就是把有细微差别的名字用于关键字和Java 变量.甚至可以在配置文件里定义运行时根本不会改变的常量。参数文件变量和简单变量比，维护它的代码量起码是后者的5倍。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;子类&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;对于编写无法维护代码的任务来说，面向对象编程的思想简直是天赐之宝。如果你有一个类，里边有10个属性（成员/方法），可以考虑写一个基类，里面只有一个属性，然后产生9层的子类，每层增加一个属性。等你访问到最终的子类时，你才能得到全部10个属性。如果可能，把每个类的声明都放在不同的文件里。&lt;/ol&gt;编码迷局&lt;p&gt;&lt;strong&gt;迷惑 C&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;从互联网上的各种混乱C 语言竞赛中学习，追随大师们的脚步。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;追求极致&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;总是追求用最迷惑的方式来做普通的任务。例如，要用数组来把整数转换为相应的字符串，可以这么做：&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;char *p; 
switch (n) 
{ 
case 1: 
p = &quot;one&quot;; 
if (0) 
case 2: 
p = &quot;two&quot;; 
if (0) 
case 3: 
p = &quot;three&quot;; 
printf(&quot;%s&quot;, p); 
break; 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;一致性的小淘气&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;当你需要一个字符常量的时候，可以用多种不同格式： ‘ ‘, 32, 0×20, 040。在C或Java里10和010是不同的数（0开头的表示8进制），你也可以充分利用这个特性。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;造型&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;把所有数据都以 void * 形式传递，然后再造型为合适的结构。不用结构而是通过位移字节数来造型也很好玩。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;嵌套 Switch&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;Switch 里边还有 Switch，这种嵌套方式是人类大脑难以破解的。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;利用隐式转化&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;牢记编程语言中所有的隐式转化细节。充分利用它们。数组的索引要用浮点变量，循环计数器用字符，对数字执行字符串函数调用。不管怎么说，所有这些操作都是合法的，它们无非是让源代码更简洁而已。任何尝试理解它们的维护者都会对你感激不尽，因为他们必须阅读和学习整个关于隐式数据类型转化的章节，而这个章节很可能是他们来维护你的代码之前完全忽略了的。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;分号!&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在所有语法允许的地方都加上分号，例如：&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;if(a); 
else;
{ 
int d; 
d = c; 
} 
;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;使用八进制数&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;把八进制数混到十进制数列表里，就像这样：&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;array = new int []
{ 
111, 
120, 
013,
121, 
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;嵌套&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;尽可能深地嵌套。优秀的程序员能在一行代码里写10层()，在一个方法里写20层{}。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;C数组&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;C编译器会把 myArray[i] 转换成 *(myArray + i)，它等同于 *(i + myArray) 也等同于 i[myArray]。 高手都知道怎么用好这个招。可以用下面的函数来产生索引，这样就把代码搞乱了：&lt;/ol&gt;&lt;/ol&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;int myfunc(int q, int p) { return p%q; } 
... 
myfunc(6291, 8)[Array];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;遗憾的是，这一招只能在本地C类里用，Java 还不行。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;放长线钓大鱼&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;一行代码里堆的东西越多越好。这样可以省下临时变量的开销，去掉换行和空格还可以缩短源文件大小。记住，要去掉运算符两边的空格。优秀的程序员总是能突破某些编辑器对于255个字符行宽的限制。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;异常&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在这里我要向你传授一个编程领域里鲜为人知的秘诀。异常是个讨厌的东西。良好的代码永远不会出错，所以异常实际上是不必要的。不要把时间浪费在这上面。子类异常是给那些知道自己代码会出错的低能儿用的。在整个应用里，你只用在main()里放一个try/catch，里边直接调用 System.exit()就行了。在每个方法头要贴上标准的抛出集合定义，至于会不会抛出异常你就甭管了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;使用异常的时机&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在非异常条件下才要使用异常。比如终止循环就可以用 ArrayIndexOutOfBoundsException。还可以从异常里的方法返回标准的结果。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;狂热奔放地使用线程&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;如题。&lt;/ol&gt;测试&lt;p&gt;在程序里留些bug，让后继的维护代码的程序员能做点有意思的事。精心设计的bug是无迹可寻的，而且谁也不知道它啥时候会冒出来。要做到这一点，最简单的办法的就是不要测试代码。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;永不测试&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要测试负责处理错误、当机或操作系统故障的任何代码。反正这些代码永远也不会执行，只会拖累你的测试。还有，你怎么可能测试处理磁盘错误、文件读取错误、操作系统崩溃这些类型的事件呢？为啥你要用特别不稳定的计算机或者用测试脚手架来模拟这样的环境？现代化的硬件永远不会崩溃，谁还愿意写一些仅仅用于测试的代码？这一点也不好玩。万一将来出了事用户抱怨，你就怪到操作系统或者硬件头上。他们永远不会知道真相的。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;永远不要做性能测试&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;嘿，如果软件运行不够快，只要告诉客户买个更快的机器就行了。如果你真的做了性能测试，你可能会发现一个瓶颈，这会导致修改算法，然后导致整个产品要重新设计。谁想要这种结果？而且，在客户那边发现性能问题意味着你可以免费到外地旅游。你只要备好护照和最新照片就行了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;永远不要写任何测试用例&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要做代码覆盖率或路径覆盖率测试。自动化测试是给那些窝囊废用的。搞清楚哪些特性占到你的例程使用率的90%，然后把90%的测试用在这些路径上。毕竟说起来，这种方法可能只测试到了大约你代码的60%，这样你就节省了40%的测试工作。这能帮助你赶上项目后端的进度。等到有人发现所有这些漂亮的“市场特性”不能正常工作的时候，你早就跑路了。一些有名的大软件公司就是这样测试代码的，所以你也应该这样做。如果因为某种原因你还没走，那就接着看下一节。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;测试是给懦夫用的&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;勇敢的程序员会跳过这个步骤。太多程序员害怕他们的老板，害怕丢掉工作，害怕客户的投诉邮件，害怕遭到起诉。这种恐惧心理麻痹了行动，降低了生产率。有科学研究成果表明，取消测试阶段意味着经理有把握能提前确定交付时间，这对于规划流程显然是有利的。消除了恐惧心理，创新和实验之花就随之绽放。程序员的角色是生产代码，调试工作完全可以由技术支持和遗留代码维护组通力合作来进行。&lt;/ol&gt;&lt;p&gt;如果我们对自己的编程能力有充分信心，那么测试就没有必要了。如果我们逻辑地看待这个问题，随便一个傻瓜都能认识到测试根本都不是为了解决技术问题，相反，它是一种感性的信心问题。针对这种缺乏信心的问题，更有效的解决办法就是完全取消测试，送我们的程序员去参加自信心培训课程。毕竟说起来，如果我们选择做测试，那么我们就要测试每个程序的变更，但其实我们只需要送程序员去一次建立自信的培训课就行了。很显然这么做的成本收益是相当可观的。&lt;/p&gt;编程语言的选择&lt;p&gt;计算机语言正在逐步进化，变得更加傻瓜化。使用最新的语言算什么好汉？尽可能坚持使用你会用的最老的语言，先考虑用穿孔纸带，不行就用汇编，再不行用FORTRAN 或者 COBOL，再不行就用C 还有 BASIC，实在不行再用 C++。&lt;br&gt;&lt;strong&gt;FORTRAN&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;用 FORTRAN 写所有的代码。如果老板问你为啥，你可以回答说它有很多非常有用的库，你用它可以节约时间。不过，用 FORTRAN 写出可维护代码的概率是 0，所以，要达到不可维护代码编程指南里的要求就容易多了。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;用 ASM&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;把所有的通用工具函数都转成汇编程序。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;用 QBASIC&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;所有重要的库函数都要用 QBASIC 写，然后再写个汇编的封包程序来处理 large 到 medium 的内存模型映射。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;内联汇编&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;在你的代码里混杂一些内联的汇编程序，这样很好玩。这年头几乎没人懂汇编程序了。只要放几行汇编代码就能让维护代码的程序员望而却步。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;宏汇编调用C&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;如果你有个汇编模块被C调用，那就尽可能经常从汇编模块再去调用C，即使只是出于微不足道的用途，另外要充分利用 goto, bcc 和其他炫目的汇编秘籍。&lt;/ol&gt;与他人共事之道&lt;p&gt;&lt;strong&gt;老板才是真行家&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;如果你的老板认为他20年的 FORTRAN 编程经验对于现代软件开发具有很高的指导价值，你务必严格采纳他的所有建议。投桃报李，你的老板也会信任你。这会对你的职业发展有利。你还会从他那里学到很多搞乱程序代码的新方法。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;颠覆技术支持&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;确保代码中到处是bug的有效方法是永远不要让维护代码的程序员知道它们。这需要颠覆技术支持工作。永远不接电话。使用自动语音答复“感谢拨打技术支持热线。需要人工服务请按1，或在嘀声后留言。”，请求帮助的电子邮件必须忽略，不要给它分配服务追踪号。对任何问题的标准答复是“我估计你的账户被锁定了，有权限帮你恢复的人现在不在。”&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;沉默是金&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;永远不要对下一个危机保持警觉。如果你预见到某个问题可能会在一个固定时间爆发，摧毁西半球的全部生命，不要公开讨论它。不要告诉朋友、同事或其他你认识的有本事的人。在任何情况下都不要发表任何可能暗示到这种新的威胁的内容。只发送一篇正常优先级的、语焉不详的备忘录给管理层，保护自己免遭秋后算账。如果可能的话，把这篇稀里糊涂的信息作为另外一个更紧急的业务问题的附件。这样就可以心安理得地休息了，你知道将来你被强制提前退休之后一段时间，他们又会求着你回来，并给你对数级增长的时薪！&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;每月一书俱乐部&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;加入一个计算机每月一书俱乐部。选择那些看上去忙着写书不可能有时间真的去写代码的作者。去书店里找一些有很多图表但是没有代码例子的书。浏览一下这些书，从中学会一些迂腐拗口的术语，用它们就能唬住那些自以为是的维护代码的程序员。你的代码肯定会给他留下深刻印象。如果人们连你写的术语都理解不了，他们一定会认为你非常聪明，你的算法非常深奥。不要在你的算法说明里作任何朴素的类比。&lt;/ol&gt;自立门户&lt;p&gt;你一直想写系统级的代码。现在机会来了。忽略标准库， 编写你自己的标准，这将会是你简历中的一大亮点。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;推出你自己的 BNF 范式&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;ol&gt;总是用你自创的、独一无二的、无文档的BNF范式记录你的命令语法。永远不要提供一套带注解的例子（合法命令和非法命令之类）来解释你的语法体系。那样会显得完全缺乏学术严谨性。确保没有明显的方式来区分终结符和中间符号。永远不要用字体、颜色、大小写和其他任何视觉提示帮助读者分辨它们。在你的 BNF 范式用和命令语言本身完全一样的标点符号，这样读者就永远无法分清一段 (…), [...], {…} 或 “…” 到底是你在命令行里真正输入的，还是想提示在你的BNF 范式里哪个语法元素是必需的、可重复的、或可选的。不管怎么样，如果他们太笨，搞不清你的BNF 范式的变化，就没资格使用你的程序。&lt;/ol&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;推出你自己的内存分配&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;地球人儿都知道，调试动态存储是复杂和费时的。与其逐个类去确认它没有内存溢出，还不如自创一套存储分配机制呢。其实它无非是从一大片内存中 malloc 一块空间而已。用不着释放内存，让用户定期重启动系统，这样不就清除了堆么。重启之后系统需要追踪的就那么一点东西，比起解决所有的内存泄露简单得不知道到哪里去了！而且，只要用户记得定期重启系统，他们也永远不会遇到堆空间不足的问题。一旦系统被部署，你很难想象他们还能改变这个策略。&lt;/ol&gt;其他杂七杂八的招&lt;p&gt;如果你给某人一段程序，你会让他困惑一天；如果你教他们如何编程，你会让他困惑一辈子。 — Anonymous&lt;/p&gt;&lt;p&gt;&lt;strong&gt;不要重编译&lt;/strong&gt;&lt;br&gt;让我们从一条可能是有史以来最友好的技巧开始：把代码编译成可执行文件。如果它能用，就在源代码里做一两个微小的改动 — 每个模块都照此办理。&lt;strong&gt;但是不要费劲巴拉地再编译一次了。&lt;/strong&gt; 你可以留着等以后有空而且需要调试的时候再说。多年以后，等可怜的维护代码的程序员更改了代码之后发现出错了，他会有一种错觉，觉得这些肯定是他自己最近修改的。这样你就能让他毫无头绪地忙碌很长时间。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;挫败调试工具&lt;/strong&gt;&lt;br&gt;对于试图用行调试工具追踪来看懂你的代码的人，简单的一招就能让他狼狈不堪，那就是把每一行代码都写得很长。特别要把 then 语句 和 if 语句放在同一行里。他们无法设置断点。他们也无法分清在看的分支是哪个 if 里的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;公制和美制&lt;/strong&gt;&lt;br&gt;在工程方面有两种编码方式。一种是把所有输入都转换为公制（米制）计量单位，然后在输出的时候自己换算回各种民用计量单位。另一种是从头到尾都保持各种计量单位混合在一起。总是选择第二种方式，这就是美国之道！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;持续改进&lt;/strong&gt;&lt;br&gt;要持续不懈地改进。要常常对你的代码做出“改进”，并强迫用户经常升级 — 毕竟没人愿意用一个过时的版本嘛。即便他们觉得他们对现有的程序满意了，想想看，如果他们看到你又“完善“了它，他们会多么开心啊！不要告诉任何人版本之间的差别，除非你被逼无奈 — 毕竟，为什么要告诉他们本来永远也不会注意到的一些bug呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;“关于”&lt;/strong&gt;&lt;br&gt;”关于“一栏应该只包含程序名、程序员姓名和一份用法律用语写的版权声明。理想情况下，它还应该链接到几 MB 的代码，产生有趣的动画效果。但是，里边永远不要包含程序用途的描述、它的版本号、或最新代码修改日期、或获取更新的网站地址、或作者的email地址等。这样，所有的用户很快就会运行在各种不同的版本上，在安装N+1版之前就试图安装N+2版。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;变更&lt;/strong&gt;&lt;br&gt;在两个版本之间，你能做的变更自然是多多益善。你不会希望用户年复一年地面对同一套老的接口或用户界面，这样会很无聊。最后，如果你能在用户不注意的情况下做出这些变更，那就更好了 — 这会让他们保持警惕，戒骄戒躁。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;无需技能&lt;/strong&gt;&lt;br&gt;写无法维护代码不需要多高的技术水平。喊破嗓子不如甩开膀子，不管三七二十一开始写代码就行了。记住，管理层还在按代码行数考核生产率，即使以后这些代码里的大部分都得删掉。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;只带一把锤子&lt;/strong&gt;&lt;br&gt;一招鲜吃遍天，会干什么就吆喝什么，轻装前进。如果你手头只有一把锤子，那么所有的问题都是钉子。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;规范体系&lt;/strong&gt;&lt;br&gt;有可能的话，忽略当前你的项目所用语言和环境中被普罗大众所接受的编程规范。比如，编写基于MFC 的应用时，就坚持使用STL 编码风格。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;翻转通常的 True False 惯例&lt;/strong&gt;&lt;br&gt;把常用的 true 和 false 的定义反过来用。这一招听起来平淡无奇，但是往往收获奇效。你可以先藏好下面的定义：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#define TRUE 0 
#define FALSE 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;把这个定义深深地藏在代码中某个没人会再去看的文件里不易被发现的地方，然后让程序做下面这样的比较&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;if ( var == TRUE )
if ( var != FALSE )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;某些人肯定会迫不及待地跳出来“修正”这种明显的冗余，并且在其他地方照着常规去使用变量var：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;if ( var )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;还有一招是为 TRUE 和 FALSE赋予相同的值，虽然大部分人可能会看穿这种骗局。给它们分别赋值 1 和 2 或者 -1 和 0 是让他们瞎忙乎的方式里更精巧的，而且这样做看起来也不失对他们的尊重。你在Java 里也可以用这一招，定义一个叫 TRUE 的静态常量。在这种情况下，其他程序员更有可能怀疑你干的不是好事，因为Java里已经有了内建的标识符 true。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;第三方库&lt;/strong&gt;&lt;br&gt;在你的项目里引入功能强大的第三方库，然后不要用它们。潜规则就是这样，虽然你对这些工具仍然一无所知，却可以在你简历的“其他工具”一节中写上这些没用过的库。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;不要用库&lt;/strong&gt;&lt;br&gt;假装不知道有些库已经直接在你的开发工具中引入了。如果你用VC++编程，忽略MFC 或 STL 的存在，手工编写所有字符串和数组的实现；这样有助于保持你玩指针技术的高水平，并自动阻止任何扩展代码功能的企图。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;创建一套Build顺序&lt;/strong&gt;&lt;br&gt;把这套顺序规则做得非常晦涩，让维护者根本无法编译任何他的修改代码。秘密保留 SmartJ ，它会让 make脚本形同废物。类似地，偷偷地定义一个 javac 类，让它和编译程序同名。说到大招，那就是编写和维护一个定制的小程序，在程序里找到需要编译的文件，然后通过直接调用 sun.tools.javac.Main 编译类来进行编译。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Make 的更多玩法&lt;/strong&gt;&lt;br&gt;用一个 makefile-generated-batch-file 批处理文件从多个目录复制源文件，文件之间的覆盖规则在文档中是没有的。这样，无需任何炫酷的源代码控制系统，就能实现代码分支，并阻止你的后继者弄清哪个版本的 DoUsefulWork() 才是他需要修改的那个。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;搜集编码规范&lt;/strong&gt;&lt;br&gt;尽可能搜集所有关于编写可维护代码的建议，例如 SquareBox 的建议 ，然后明目张胆地违反它们。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;规避公司的编码规则&lt;/strong&gt;&lt;br&gt;某些公司有严格的规定，不允许使用数字标识符，你必须使用预先命名的常量。要挫败这种规定背后的意图太容易了。比如，一位聪明的 C++ 程序员是这么写的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#define K_ONE 1 
#define K_TWO 2 
#define K_THOUSAND 999
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;编译器警告&lt;/strong&gt;&lt;br&gt;一定要保留一些编译器警告。在 make 里使用 “-” 前缀强制执行，忽视任何编译器报告的错误。这样，即使维护代码的程序员不小心在你的源代码里造成了一个语法错误，make 工具还是会重新把整个包build 一遍，甚至可能会成功！而任何程序员要是手工编译你的代码，看到屏幕上冒出一堆其实无关紧要的警告，他们肯定会觉得是自己搞坏了代码。同样，他们一定会感谢你让他们有找错的机会。学有余力的同学可以做点手脚让编译器在打开编译错误诊断工具时就没法编译你的程序。当然了，编译器也许能做一些脚本边界检查，但是真正的程序员是不用这些特性的，所以你也不该用。既然你用自己的宝贵时间就能找到这些精巧的bug，何必还多此一举让编译器来检查错误呢？&lt;/p&gt;&lt;p&gt;&lt;strong&gt;把 bug 修复和升级混在一起&lt;/strong&gt;&lt;br&gt;永远不要发布什么“bug 修复”版本。一定要把 bug 修复和数据库结构变更、复杂的用户界面修改，还有管理界面重写等混在一起。那样的话，升级就变成一件非常困难的事情，人们会慢慢习惯 bug 的存在并开始称他们为特性。那些真心希望改变这些”特性“的人们就会有动力升级到新版本。这样从长期来说可以节省你的维护工作量，并从你的客户那里获得更多收入。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;在你的产品发布每个新版本的时候都改变文件结构&lt;/strong&gt;&lt;br&gt;没错，你的客户会要求向上兼容，那就去做吧。不过一定要确保向下是不兼容的。这样可以阻止客户从新版本回退，再配合一套合理的 bug 修复规则（见上一条），就可以确保每次新版本发布后，客户都会留在新版本。学有余力的话，还可以想办法让旧版本压根无法识别新版本产生的文件。那样的话，老版本系统不但无法读取新文件，甚至会否认这些文件是自己的应用系统产生的！温馨提示：PC 上的 Word 文字处理软件就典型地精于此道。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;抵消 Bug&lt;/strong&gt;&lt;br&gt;不用费劲去代码里找 bug 的根源。只要在更高级的例程里加入一些抵销它的代码就行了。这是一种很棒的智力测验，类似于玩3D棋，而且能让将来的代码维护者忙乎很长时间都想不明白问题到底出在哪里：是产生数据的低层例程，还是莫名其妙改了一堆东西的高层代码。这一招对天生需要多回合执行的编译器也很好用。你可以在较早的回合完全避免修复问题，让较晚的回合变得更加复杂。如果运气好，你永远都不用和编译器前端打交道。学有余力的话，在后端做点手脚，一旦前端产生的是正确的数据，就让后端报错。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;使用旋转锁&lt;/strong&gt;&lt;br&gt;不要用真正的同步原语，多种多样的旋转锁更好 — 反复休眠然后测试一个(non-volatile的) 全局变量，直到它符合你的条件为止。相比系统对象，旋转锁使用简便，”通用“性强，”灵活“多变，实为居家旅行必备。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;随意安插 sync 代码&lt;/strong&gt;&lt;br&gt;把某些系统同步原语安插到一些用不着它们的地方。本人曾经在一段不可能会有第二个线程的代码中看到一个临界区（critical section）代码。本人当时就质问写这段代码的程序员，他居然理直气壮地说这么写是为了表明这段代码是很”关键“（单词也是critical）的！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;优雅降级&lt;/strong&gt;&lt;br&gt;如果你的系统包含了一套 NT 设备驱动，就让应用程序负责给驱动分配 I/O 缓冲区，然后在任何交易过程中对内存中的驱动加锁，并在交易完成后释放或解锁。这样一旦应用非正常终止，I/O缓存又没有被解锁，NT服务器就会当机。但是在客户现场不太可能会有人知道怎么弄好设备驱动，所以他们就没有选择（只能请你去免费旅游了）。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;定制脚本语言&lt;/strong&gt;&lt;br&gt;在你的 C/S 应用里嵌入一个在运行时按字节编译的脚本命令语言。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;依赖于编译器的代码&lt;/strong&gt;&lt;br&gt;如果你发现在你的编译器或解释器里有个bug，一定要确保这个bug的存在对于你的代码正常工作是至关重要的。毕竟你又不会使用其他的编译器，其他任何人也不允许！&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一个货真价实的例子&lt;/strong&gt;&lt;br&gt;下面是一位大师编写的真实例子。让我们来瞻仰一下他在这样短短几行 C 函数里展示的高超技巧。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;void* Realocate(void*buf, int os, int ns) 
{
void*temp; 
temp = malloc(os); 
memcpy((void*)temp, (void*)buf, os); 
free(buf); 
buf = malloc(ns); 
memset(buf, 0, ns); 
memcpy((void*)buf, (void*)temp, ns); 
return buf;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;重新发明了标准库里已有的简单函数。&lt;/li&gt;&lt;li&gt;Realocate 这个单词拼写错误。所以说，永远不要低估创造性拼写的威力。&lt;/li&gt;&lt;li&gt;无缘无故地给输入缓冲区产生一个临时的副本。&lt;/li&gt;&lt;li&gt;无缘无故地造型。 memcpy() 里有 (void*)，这样即使我们的指针已经是 (void*) 了也要再造型一次。另外，这样做可以传递任何东西作为参数，加10分。&lt;/li&gt;&lt;li&gt;永远不必费力去释放临时内存空间。这样会导致缓慢的内存泄露，一开始看不出来，要程序运行一段时间才行。&lt;/li&gt;&lt;li&gt;把用不着的东西也从缓冲区里拷贝出来，以防万一。这样只会在Unix上产生core dump，Windows 就不会。&lt;/li&gt;&lt;li&gt;很显然，os 和 ns 的含义分别是”old size” 和 “new size”。&lt;/li&gt;&lt;li&gt;给 buf 分配内存之后，memset 初始化它为 0。不要使用 calloc()，因为某些人会重写 ANSI 规范，这样将来保不齐 calloc() 往 buf 里填的就不是 0 了。（虽然我们复制过去的数据量和 buf 的大小是一样的，不需要初始化，不过这也无所谓啦）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;strong&gt;如何修复 “unused variable” 错误&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果你的编译器冒出了 “unused local variable” 警告，不要去掉那个变量。相反，要找个聪明的办法把它用起来。我最喜欢的方法是：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;i = i;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;大小很关键&lt;/strong&gt;&lt;br&gt;差点忘了说了，函数是越大越好。跳转和 GOTO 语句越多越好。那样的话，想做任何修改都需要分析很多场景。这会让维护代码的程序员陷入千头万绪之中。如果函数真的体型庞大的话，对于维护代码的程序员就是哥斯拉怪兽了，它会在他搞清楚情况之前就残酷无情地将他踩翻在地。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;一张图片顶1000句话，一个函数就是1000行&lt;/strong&gt;&lt;br&gt;把每个方法体写的尽可能的长 — 最好是你写的任何一个方法或函数都不会少于1000行代码，而且里边是深度嵌套，这是必须的。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;少个文件&lt;/strong&gt;&lt;br&gt;一定要保证一个或多个关键文件无法找到。利用includes 里边再 includes 就能做到这一点。例如，在你的 main 模块里，你写上：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#include &amp;lt;stdcode.h&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;Stdcode.h 是有的。但是在 stdcode.h 里，还有个引用：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#include &quot;a:\\refcode.h&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;然后，refcode.h 就没地方能找到了。&lt;/p&gt;&lt;p&gt;（【译者注】为啥找不到呢？仔细看看，现在还有人知道 a:\ 是什么吗？A盘！传说中的软盘…）&lt;/p&gt;&lt;p&gt;&lt;strong&gt;到处都写，无处会读&lt;/strong&gt;&lt;br&gt;至少要把一个变量弄成这样：到处被设置，但是几乎没有哪里用到它。不幸的是，现代编译器通常会阻止你做相反的事：到处读，没处写。不过你在C 或 C++ 里还是可以这样做的。&lt;/p&gt;============================================================&lt;br&gt;&lt;br&gt;英文原版： &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.thc.org/root/phun/unmaintain.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;thc.org/root/phun/unmai&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ntain.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>


<div class="zh-summary summary clearfix">

以前看到的，在这分享（翻译来自<a href="//link.zhihu.com/?target=http%3A//blog.jobbole.com/80241/" class=" wrap external" target="_blank" rel="nofollow noreferrer">老码农冒死揭开行业黑幕：如何编写无法维护的代码<i class="icon-external"></i></a>，作者 <a href="//link.zhihu.com/?target=http%3A//blog.jobbole.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">伯乐在线<i class="icon-external"></i></a> - <a href="//link.zhihu.com/?target=http%3A//www.jobbole.com/members/laomanong" class=" wrap external" target="_blank" rel="nofollow noreferrer">老码农<i class="icon-external"></i></a>，已征得作者同意） ============================================================ <b>如何编写无法维护的代码让自己稳拿铁饭碗</b> <strong>– Roedy Green</strong>简介…

<a href="/question/35992354/answer/66488394" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-10-06" target="_blank" href="/question/35992354/answer/66488394">编辑于 2015-10-12</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6603837"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>53 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="433" data-type="Answer">
<link itemprop="url" href="/question/51337482/answer/125377849">
<meta itemprop="answer-id" content="45655805" />
<meta itemprop="answer-url-token" content="125377849" />
<meta itemprop="answerCount" content="29" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/51337482" target="_blank" data-id="12752550" data-za-element-name="Title">
为什么JS社区大量使用未发布或未广泛支持的语言特性，而其他社区很少使用新发布的语言特性？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/51337482/answer/125377849">
<!-- <meta itemprop="answer-id" content="45655805">
<meta itemprop="answer-url-token" content="125377849"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>209</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">209</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$he-shi-jun"
target="_blank" href="/people/he-shi-jun"
>贺师俊</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/he-shi-jun#hilightbadge" target="_blank">JavaScript、前端开发、CSS话题优秀回答者</a></span>



<span title="Web开发者" class="bio">
Web开发者
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="209" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">209</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="12752550" data-action="/answer/content" data-author-name="贺师俊" data-entry-url="/question/51337482/answer/125377849">

<textarea hidden class="content">【略作一些补充】&lt;br&gt;有不少其他答案说是因为JS太差。我下面的答案已经说了，这不是根本性的原因。但除此之外，我还要纠正一些对JS具体问题的误解。JS当初是被作为脚本语言设计的，所以某些问题并不是JS设计得差或者是JS设计者的失误。比如var的作用域问题，并不是“错误”，而是当时绝大部分脚本语言都是这样的，如perl/php/sh等。模块的问题也是，脚本语言几乎都没有模块/命名空间功能。弱类型、for-in之类的问题也是，只不过现在用那些老的脚本语言的人比较少，所以很多人都误以为是JS才有的坑。另外有人说JS是半残语言，满足不了开发需求，1999年就该死。半残这个嘛，就夸张了。JS虽然有很多问题，但是设计总体还是优秀的。比如跟PHP比一下，10天设计出来就不能改的JS还是比改了好几个大版本的PHP要设计得好得多。就closure这一条，就足够让其他特性都是渣的JS能秒掉PHP 10条街，因为大部分重要的语言特性都能在closure的帮助下模拟出来。话说编译最后都是到es3，你们真写过transpiler的人，就会知道es3作为编译target能在变换不大（即源码和编译后的代码基本上是可人肉识别和对应的）的情况下实现绝大部分的es6特性，说明es3本身的语言能力其实是不算差的。所以说“js满足不了开发需求”我也是嘿嘿了。PHP都能满足开发需求……而XXXX年就该死这个，PHP那么多年都能活（原因这里就不展开了），没道理JS不行嘛。&lt;br&gt;&lt;br&gt;&lt;br&gt;-------- 以下是回答部分 --------&lt;br&gt;&lt;br&gt;这个问题我在去年的演讲 JavaScript — The World’s Best Programming Language &lt;a href=&quot;//link.zhihu.com/?target=http%3A//johnhax.net/2015/js-the-best/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;johnhax.net/2015/js-the&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-best/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 里专门讨论过。&lt;br&gt;&lt;br&gt;简单说：&lt;br&gt;&lt;br&gt;1. 原本的JS（ES3）语言很糟糕，并且与其他语言平台不同，JS是浏览器平台唯一可用的语言，且由于兼容性需求，浏览器平台是最无法进行语言特性升级的。注意，轮子的答案有正确的部分，但一如既往的轻佻。其实，尽管python2确实比es3好用，但是这不构成根本性的差异。关键差异在于，浏览器上没有其他语言可用，也很难升级语言特性。对python2不满的人，可以换用ruby，或者升级到python3。但是浏览器平台（web前端开发）上，对js不满意的程序员，没有其他路可走（除了改行不做前端）。&lt;br&gt;&lt;br&gt;2. 由于上述原因，加上浏览器平台越来越重要且web应用越来越复杂，因此唯一的出路就是将其他语言（或新语言特性）编译到es3。于是出现了许多alt js语言，特别是coffeescript，使得js社区逐渐接受了源码编译到js，并且是用于生产环境的。这在其他语言平台上是不存在的。&lt;br&gt;&lt;br&gt;3. 由于js社区比其他语言社区更接受在生产环境使用转译，加上es6的制定，导致出现了许多&lt;br&gt;es6草案特性到es3的编译器，并且被用于生产环境。&lt;br&gt;&lt;br&gt;4. 通常编译器是无法共存的（比如你有generator编译器和jsx编译器，但你无法同时使用两者，因为它们互相不认对方的语法），但是因为js社区太多这样的情况，最终产生了babel这一集大成者，它使得不同的语言特性可以单独设计实现和部署。这在其他语言社区也是没有的。从技术上说这也不算什么了不起的创造发明，但是从语言生态上说是历史上从来没有过的。&lt;br&gt;&lt;br&gt;5. 自babel开始，js就建立了与其他语言平台完全不同的生态，即题主说的“大量使用未发布或未广泛支持的语言特性”，并且注意是在生产环境用哦！这又带来一个特别的优点，就是建立了语言特性在生产环境的试验和feedback机制，这种正向反馈进一步推动了js语言特性的发展和快速部署，这是为什么我提出JS是“The World’s Best Programming Language”的最重要原因之一。&lt;br&gt;&lt;br&gt;&lt;br&gt;BTW，我虽然不写C++，不过以我的耳闻，去年QCon语言场还在讲C++11新特性。有人在生产环境使用C++17新特性？我深表怀疑。&lt;br&gt;&lt;br&gt;而JS呢，2016年还没结束，社区里连es6（es2015）新特性这样的演讲都已经不好意思出来说了，2015年的生产环境里已经有人用上了async/await这样es2017的特性。要是考虑typescript早晚会纳入标准，那可以认为用ts的人已经在用es2019+了。</textarea>


<div class="zh-summary summary clearfix">

【略作一些补充】 有不少其他答案说是因为JS太差。我下面的答案已经说了，这不是根本性的原因。但除此之外，我还要纠正一些对JS具体问题的误解。JS当初是被作为脚本语言设计的，所以某些问题并不是JS设计得差或者是JS设计者的失误。比如var的作用域问题，并…

<a href="/question/51337482/answer/125377849" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-10-07" target="_blank" href="/question/51337482/answer/125377849">编辑于 2016-10-08</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-12752550"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>49 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="434" data-type="Answer">
<link itemprop="url" href="/question/20440679/answer/15142365">
<meta itemprop="answer-id" content="1183961" />
<meta itemprop="answer-url-token" content="15142365" />
<meta itemprop="answerCount" content="19" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20440679" target="_blank" data-id="356664" data-za-element-name="Title">
现在网页设计中的为什么少有人用 11px、13px、15px 等奇数的字体？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20440679/answer/15142365">
<!-- <meta itemprop="answer-id" content="1183961">
<meta itemprop="answer-url-token" content="15142365"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>207</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">207</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$lianghai"
target="_blank" href="/people/lianghai"
>梁海</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/lianghai#hilightbadge" target="_blank">字体设计、CSS、语言、用户界面设计话题优秀回答者</a></span>



<span title="多语言字体技术开发者" class="bio">
…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="207" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">207</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="356664" data-action="/answer/content" data-author-name="梁海" data-entry-url="/question/20440679/answer/15142365">

<textarea hidden class="content">&lt;ul&gt;&lt;li&gt;偶数字号相对更容易和 web 设计的其他部分构成比例关系。比如：当我用了 14 px 的正文字号，我可能会在一些地方用 14 × 0.5 = 7 px 的 margin，在另一些地方用 14 × 1.5 = 21 px 的标题字号。&lt;br&gt;&lt;/li&gt;&lt;li&gt;Windows 自带的点阵宋体（中易宋体）从 Vista 开始只提供 12、14、16 px 这三个大小的点阵，而 13、15、17 px 时用的是小一号的点阵（即每个字占的空间大了 1 px，但点阵没变），于是略显稀疏。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;这个我不确定，需要确认：&lt;/b&gt;听说有不少字体的 hinting 都只专门处理了常用的几个偶数字号。&lt;/li&gt;&lt;li&gt;除了上面说的这些，奇偶字号的字体渲染效果似乎其实差别不大（尤其在 OS X 和 Linux 以及手持设备上）。即使在 Windows 里，微软雅黑在 11 至 17 px 之间的奇偶字号效果似乎也都差不多。（呃，都差不多糟糕……）&lt;/li&gt;&lt;li&gt;目前 12、13、14、15、16 px 其实都是很不错的正文字号。知乎和豆瓣的正文字号都是 13 px，而中文维基百科的正文字号是 15 px，并没有什么不好。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;另，@贺师俊 指出：&lt;ul&gt;&lt;li&gt;早期的 Windows 里，中易宋体点阵只有 12 和 14、15、16 px，唯独缺少 13 px。&lt;/li&gt;&lt;/ul&gt;</textarea>


<div class="zh-summary summary clearfix">

偶数字号相对更容易和 web 设计的其他部分构成比例关系。比如：当我用了 14 px 的正文字号，我可能会在一些地方用 14 × 0.5 = 7 px 的 margin，在另一些地方用 14 × 1.5 = 21 px 的标题字号。 Windows 自带的点阵宋体（中易宋体）从 Vista 开始只提供 12…

<a href="/question/20440679/answer/15142365" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2012-08-24" target="_blank" href="/question/20440679/answer/15142365">编辑于 2013-12-14</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-356664"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>17 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="436" data-type="Answer">
<link itemprop="url" href="/question/38564170/answer/77137021">
<meta itemprop="answer-id" content="26280142" />
<meta itemprop="answer-url-token" content="77137021" />
<meta itemprop="answerCount" content="32" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/38564170" target="_blank" data-id="7633107" data-za-element-name="Title">
前端开发的壁垒在哪儿？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/38564170/answer/77137021">
<!-- <meta itemprop="answer-id" content="26280142">
<meta itemprop="answer-url-token" content="77137021"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>206</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">206</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$fouber"
target="_blank" href="/people/fouber"
>张云龙</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/fouber#hilightbadge" target="_blank">前端开发、JavaScript话题优秀回答者</a></span>



<span title="全民直播CTO" class="bio">
全民直播CTO
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="206" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">206</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7633107" data-action="/answer/content" data-author-name="张云龙" data-entry-url="/question/38564170/answer/77137021">

<textarea hidden class="content">一般意义上的前端项目：&lt;br&gt;- 从0到1，智力稍微健全点的都能捣鼓出来；&lt;br&gt;- 从1到60，后端或者设计岗位勉强能兼任；&lt;br&gt;- 从60到80，需要比较专业的前端；&lt;br&gt;- 从80到100，这么好的前端可遇不可求。&lt;br&gt;&lt;br&gt;从0到1是从无到有的过程，很多人用WordPress，建站之星就差不多就能搞个demo了，可以拿去骗投资人的钱。&lt;br&gt;&lt;br&gt;从1到60，就是做到勉强可用，基本上让后端工程师或者UI设计师找一套bootstrap的模板东拼西凑的也能勉强应付到第一版上线。&lt;br&gt;&lt;br&gt;从60到80，就是真正要做一款功能完备、性能优良、架构合理的中小规模产品，没有专业的设计、前端、后端、产品、运营是走不到这步的，差不多到A轮了。&lt;br&gt;&lt;br&gt;从80到100，那就是要追求各方面的极致，与竞争对手一较高下，各个方向没有顶尖的人才都会影响整体的战斗力，木桶问题。&lt;br&gt;&lt;br&gt;市面上看得见的web产品，属于0-1的一般就是一些快速成型的页面吧，都是现成东西搭建的，无所谓前端技术，最多是加个统计脚本；属于1-60的可以围观各种地方政府网站，一些垃圾流量站；60-80的属于标准的中小创业项目，80-100属于BAT和准上市公司产品。&lt;br&gt;&lt;br&gt;你可以随便打开一些web端应用，然后体会一下这个产品处于什么阶段，再体会一下团队前端的level。&lt;br&gt;&lt;br&gt;前端门槛低，所以很多初级场景中的可替代性确实很强，但在专业团队专业领域是很难被替代的，因为从一个基础学科扎实的科班毕业生到成长为专业前端工程师需要时间的积累。&lt;br&gt;&lt;br&gt;回到问题本身，前端的壁垒是什么，或者前端工程师的核心竞争力是什么？我的回答是：&lt;br&gt;&lt;br&gt;『能cover项目从0到80+整个发展过程所需的工程经验』。&lt;br&gt;&lt;br&gt;解释一下：&lt;br&gt;&lt;br&gt;1. 核心竞争力的主体是工程经验。&lt;br&gt;其实这个结论可以推广到其他研发岗位，就是每个研发岗位的知识体系都是由基础学科知识＋领域工程经验构成，彼此不可替代的就是工程经验部分。一个后端工程师一时间不能替代同等级前端工程师到不是基础或者智商的问题，主要是工程经验不足，你让一个前端一个后端分别实现对方领域中一个有明确输入输出的功能函数，二者通过简单学习新语言新语法，加上开发手册查询，一般都能比较正常的实现业务逻辑，但你让他们hold住对方领域的完整项目就很困难了，技术选型，系统设计，模块拆分，平台特性，宿主环境，性能优化，构建部署，系统测试等等都是领域工程经验问题。&lt;br&gt;&lt;br&gt;2. 工程经验的等级是能cover项目从0发展到80+。&lt;br&gt;这个很好解释，因为从0-60的非专业前端也能做到，60+的才是专业前端。&lt;br&gt;&lt;br&gt;所以不用担心核心竞争力问题，60+的前端现在都很抢手啊。工程经验只有60-的话确实压力比较大。</textarea>


<div class="zh-summary summary clearfix">

一般意义上的前端项目： - 从0到1，智力稍微健全点的都能捣鼓出来； - 从1到60，后端或者设计岗位勉强能兼任； - 从60到80，需要比较专业的前端； - 从80到100，这么好的前端可遇不可求。 从0到1是从无到有的过程，很多人用WordPress，建站之星就差不多就能…

<a href="/question/38564170/answer/77137021" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-12-17" target="_blank" href="/question/38564170/answer/77137021">编辑于 2015-12-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7633107"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>33 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="437" data-type="Answer">
<link itemprop="url" href="/question/29380608/answer/75823250">
<meta itemprop="answer-id" content="25753375" />
<meta itemprop="answer-url-token" content="75823250" />
<meta itemprop="answerCount" content="52" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/29380608" target="_blank" data-id="3935066" data-za-element-name="Title">
前端开发中有什么经典的轮子值得自己去实现一遍？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/29380608/answer/75823250">
<!-- <meta itemprop="answer-id" content="25753375">
<meta itemprop="answer-url-token" content="75823250"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>212</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">212</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$jimnox"
target="_blank" href="/people/jimnox"
>Jim Liu</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/jimnox#hilightbadge" target="_blank">JavaScript话题优秀回答者</a></span>



<span title="前端码畜，INTJ，各种打自己脸" class="bio">
前端码畜，INTJ，各种打…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="212" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">212</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3935066" data-action="/answer/content" data-author-name="Jim Liu" data-entry-url="/question/29380608/answer/75823250">

<textarea hidden class="content">我造过的轮子：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/jas&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LiuJi-Jim/jas&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：异步控制的工具，11年写的，只有60行，然而炒鸡好用，吃自己狗食的级别。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/raze-tpl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LiuJi-Jim/raze-tpl&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：模板引擎，语法风骚迷人，吃自己狗食的级别。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/mirror&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LiuJi-Jim/mirror&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：Virtual-DOM实现，玩具级别。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/h5pal&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LiuJi-Jim/h5pal&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：万吨巨轮，仙剑奇侠传web移植（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jimliu.net/2015/09/30/h5pal-release/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;介绍&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/c-struct&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LiuJi-Jim/c-struct&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：一个用于JS读写C结构体的工具，从h5pal里拆出来重构的。&lt;br&gt;还有一些烂尾了，还有一些不想发出来的，各种Promise、EventEmitter、Module Loader、山寨Lodash、数据结构、类工厂、MVC……不提也罢。</textarea>


<div class="zh-summary summary clearfix">

我造过的轮子： <a href="//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/jas" class=" wrap external" target="_blank" rel="nofollow noreferrer">LiuJi-Jim/jas<i class="icon-external"></i></a>：异步控制的工具，11年写的，只有60行，然而炒鸡好用，吃自己狗食的级别。 <a href="//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/raze-tpl" class=" wrap external" target="_blank" rel="nofollow noreferrer">LiuJi-Jim/raze-tpl<i class="icon-external"></i></a>：模板引擎，语法风骚迷人，吃自己狗食的级别。 <a href="//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/mirror" class=" wrap external" target="_blank" rel="nofollow noreferrer">LiuJi-Jim/mirror<i class="icon-external"></i></a>：Virtual-DOM实现，玩具级别。 <a href="//link.zhihu.com/?target=https%3A//github.com/LiuJi-Jim/h5pal" class=" wrap external" target="_blank" rel="nofollow noreferrer">LiuJi-Jim/h5pal<i class="icon-external"></i></a>：万吨巨轮，仙…

<a href="/question/29380608/answer/75823250" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/29380608/answer/75823250">发布于 2015-12-08</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3935066"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>14 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="438" data-type="Answer">
<link itemprop="url" href="/question/27796801/answer/38157342">
<meta itemprop="answer-id" content="10654374" />
<meta itemprop="answer-url-token" content="38157342" />
<meta itemprop="answerCount" content="39" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/27796801" target="_blank" data-id="3301682" data-za-element-name="Title">
IE 市场占有率这么高，为什么开发者们不优先适配 IE？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/27796801/answer/38157342">
<!-- <meta itemprop="answer-id" content="10654374">
<meta itemprop="answer-url-token" content="38157342"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>206</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">206</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">
<span class="name">匿名用户</span>
</div>

<div class="zm-item-vote-info" data-votecount="206" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">206</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3301682" data-action="/answer/content" data-author-name="匿名用户" data-entry-url="/question/27796801/answer/38157342">

<textarea hidden class="content">&lt;p&gt;我开始以为这个问题是几年前提的，仔细确认了，居然是今天提的！实在看不下去其他批评IE的答案。先回答题主的问题：因为无需适配IE，大家全按照标准来写程序，浏览器按照标准实现功能，这是最好的。IE的开发者已经表示“we began a major investment in interoperability with other modern browsers to ensure that developers don’t have to deal with cross-browser inconsistencies.”[1]&lt;/p&gt;&lt;br&gt;&lt;p&gt;再评论下其他答案：&lt;/p&gt;&lt;p&gt;&lt;a class=&quot;member_mention&quot; href=&quot;//www.zhihu.com/people/d6f6514b932ffe30f97e50dd578c8a2c&quot; data-editable=&quot;true&quot; data-title=&quot;@Arthur Wang&quot; data-hash=&quot;d6f6514b932ffe30f97e50dd578c8a2c&quot; data-hovercard=&quot;p$b$d6f6514b932ffe30f97e50dd578c8a2c&quot;&gt;@Arthur Wang&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;但是旋即发现：IE6不支持HTML5&lt;/p&gt;&lt;p&gt;HTML5非常强大，就一个特点：没彻底完成&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;IE6是2001年发布的产品，HTML5是2014年定稿的标准。就说各网站使用HTML5成为主流也只是近几年的事。IE6不支持它发布之后13年的标准，这也怨IE6? 微软目前也是W3C成员，而且&lt;b&gt;HTML5的作者里其中两个人都来自微软&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;HTML5已于2014年10月底成为W3C Recommendation.[2] 当然HTML5.1仍是草案。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;a class=&quot;member_mention&quot; href=&quot;//www.zhihu.com/people/6d11f4d0ce00d647330b9d917e91e56e&quot; data-editable=&quot;true&quot; data-title=&quot;@章孜&quot; data-hash=&quot;6d11f4d0ce00d647330b9d917e91e56e&quot; data-hovercard=&quot;p$b$6d11f4d0ce00d647330b9d917e91e56e&quot;&gt;@章孜&lt;/a&gt; 如今早已不存在您说的“ie比较奇葩的地方在于，不会提示用户升级浏览器”。&lt;strong&gt;IE从2011年12月15日开始就通过Windows Update自动升级，默认升级IE版本&lt;/strong&gt;[3]。当然国内因为盗版问题，部分用户的Windows Update是关着的，不过这怪不着微软吧？另外Windows 7、8、8.1都能免费升Windows 10，旧版IE今年会大幅下降，应该是没有问题的。微软也承诺了Spartan持续升级，IE不再有非安全更新。&lt;/p&gt;&lt;br&gt;&lt;p&gt;@steven zhou: “早在几年前ff的技术就至少甩ie十年，直到今天还看不出ie有多少进步值得开发者津津称赞的地方。”&lt;/p&gt;&lt;br&gt;&lt;p&gt;ECMAScript 6大家听说过吧。目前&lt;b&gt;IE Developer Preview是所有浏览器（包含其他浏览器预览版）里对ES6支持最好的&lt;/b&gt;[4]。IE支持率是70%，遥遥领先Chrome 41的48%，小幅领先Firefox 37的69%。我还可以举出：IE11是所有浏览器中最先支持TLS1.2的，最先淘汰RC4加密算法的。曾经IE是最先支持SSL3.0、TLS1.0的，最先屏蔽HTTPS混合内容的，最先支持OCSP stapling，最先宣布淘汰SHA1数字证书。XMLHttpRequest也是微软发明的，并最早用于IE5上。这些难道还不够津津称赞么？&lt;/p&gt;&lt;br&gt;&lt;p&gt;最后说一点，用户坚持用XP，坚持用IE6，怨IE么？为什么大家那么愿意拿2001年的IE6和2015年的Chrome 40比，并能得出IE永远差的结论？&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;[1] &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.smashingmagazine.com/2015/01/26/inside-microsofts-new-rendering-engine-project-spartan/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Inside Microsoft’s New Rendering Engine For The &quot;Project Spartan&quot;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[2] &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/TR/html5/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[3] &lt;a href=&quot;//link.zhihu.com/?target=https%3A//wpdev.uservoice.com/forums/257854-internet-explorer-platform/suggestions/6509607-auto-update-older-ie-versions&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Auto Update Older IE Versions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[4] &lt;a href=&quot;//link.zhihu.com/?target=http%3A//kangax.github.io/compat-table/es6/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 6 compatibility table&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;</textarea>


<div class="zh-summary summary clearfix">

我开始以为这个问题是几年前提的，仔细确认了，居然是今天提的！实在看不下去其他批评IE的答案。先回答题主的问题：因为无需适配IE，大家全按照标准来写程序，浏览器按照标准实现功能，这是最好的。IE的开发者已经表示“we began a major investment in int…

<a href="/question/27796801/answer/38157342" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-01-26" target="_blank" href="/question/27796801/answer/38157342">编辑于 2015-01-26</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3301682"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>35 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="439" data-type="Answer">
<link itemprop="url" href="/question/41050429/answer/122380612">
<meta itemprop="answer-id" content="44445606" />
<meta itemprop="answer-url-token" content="122380612" />
<meta itemprop="answerCount" content="7" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/41050429" target="_blank" data-id="8627472" data-za-element-name="Title">
要实现一个Web IDE 需要哪些前端技术？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/41050429/answer/122380612">
<!-- <meta itemprop="answer-id" content="44445606">
<meta itemprop="answer-url-token" content="122380612"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>205</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">205</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$vangie"
target="_blank" href="/people/vangie"
>杜万</a></span><span title="写了 Coding WebIDE 的前端初始版本" class="bio">
写了 Coding WebIDE 的前端初始版本
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="205" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">205</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="8627472" data-action="/answer/content" data-author-name="杜万" data-entry-url="/question/41050429/answer/122380612">

<textarea hidden class="content">&lt;img src=&quot;https://pic3.zhimg.com/b48ace764f1b7c5d0705db8507256bca_b.png&quot; data-rawwidth=&quot;2148&quot; data-rawheight=&quot;1576&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2148&quot; data-original=&quot;https://pic3.zhimg.com/b48ace764f1b7c5d0705db8507256bca_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;谢邀！我是 Coding WebIDE 的项目负责人。我们的 WebIDE 采用的前后端分离的架构，前端一共写过三个版本：&lt;br&gt;第一版：Backbonejs，Coffeescript&lt;br&gt;第二版：Reactjs，Coffeescript&lt;br&gt;第三版：Reactjs，Redux，ES6&lt;br&gt;&lt;br&gt;2014年10月发起这个项目，到现在快2年了，后端代码好多都健在，前段已过了三代，前端技术风起云涌啊。&lt;br&gt;&lt;br&gt;从控件组成上说，最精简的版本需要实现五样东西&lt;br&gt;&lt;ul&gt;&lt;li&gt;layout &lt;/li&gt;&lt;li&gt;菜单&lt;/li&gt;&lt;li&gt;文件树&lt;/li&gt;&lt;li&gt;编辑器&lt;/li&gt;&lt;li&gt;Terminal&lt;/li&gt;&lt;/ul&gt;基于学习的目的，我建议菜单和文件树可以自己实现。每一个版本我们都是自己实现的。layout 主要负责各个控件的布局，没有找到一个合适的开源实现，所以我们也是自己实现的。&lt;br&gt;&lt;br&gt;编辑器有两种选择 CodeMirror 和 Ace，这两个都做的不错，看你个人偏好，我们选了 Ace。&lt;br&gt;&lt;br&gt;Terminal 分为前端部分的终端模拟器和后端的 tty server，刚开始开发的时候从还是比较有难度了，需要了解一些底层的知识以处理出现的一些棘手的问题，比如宽字符集的支持，国外搞的 Web Terminal 基本对宽字符处理不友好。这部分内容可以参考我的博客&lt;a href=&quot;//link.zhihu.com/?target=https%3A//blog.coding.net/blog/Docker-use-in-Coding-WebIDE&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Docker 在 Coding WebIDE 项目中的运用&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;和开源项目&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/vangie/docker-web-terminal&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - vangie/docker-web-terminal: A web-based terminal for docker container&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。我们的 Terminal 后端采用了 docker 技术，主要是考虑到平台版本多租户情况下的资源限制问题。需要限制CPU，内存和磁盘。CPU和内存用docker原生的技术很容易搞定，限制磁盘比较棘手，我们做了不少尝试，目前的解决方案可以参考我在社区做的技术分享&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1mgridok&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Docker Container 磁盘容量限制》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1mgridok&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1mgrido&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。社区版本并不需要这些功能，所以社区版我们并没有加入这些繁琐的模块。&lt;br&gt;&lt;br&gt;前后端的通讯：Restful + Websocket，restful处理常规的业务 API，Websocket 负责服务器想客户端发送文件变化通知，主要是 git 模块或者 terminal 中改变了文件，需要更新的文件树和编辑器中去。&lt;br&gt;&lt;br&gt;后端部分的实现，平台版本我们采用的混合语言的微服务架构：Java，Golang，Elixir，Ruby 都实现了部分模块。社区版本简化了繁杂的部署，只用 Java 实现了所有的业务。当然如果你偏爱前端技术的话，用 Nodejs 写一个后端完全是没有问题的。&lt;br&gt;&lt;br&gt;打个广告，Coding WebIDE 欢迎你的参与 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//ide.coding.net/community&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Coding WebIDE 开启云端开发模式！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;最后以一张模块图结束吧，&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/11b6974607eaef237ab761550edc111a_b.png&quot; data-rawwidth=&quot;1027&quot; data-rawheight=&quot;770&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1027&quot; data-original=&quot;https://pic3.zhimg.com/11b6974607eaef237ab761550edc111a_r.png&quot;&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/b48ace764f1b7c5d0705db8507256bca_200x112.png" data-rawwidth="2148" data-rawheight="1576" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/b48ace764f1b7c5d0705db8507256bca_r.png">
谢邀！我是 Coding WebIDE 的项目负责人。我们的 WebIDE 采用的前后端分离的架构，前端一共写过三个版本： 第一版：Backbonejs，Coffeescript 第二版：Reactjs，Coffeescript 第三版：Reactjs，Redux，ES6 2014年10月发起这个项目，到现在快2年了，后端代码…

<a href="/question/41050429/answer/122380612" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-09-17" target="_blank" href="/question/41050429/answer/122380612">编辑于 2016-09-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-8627472"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>21 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="440" data-type="Answer">
<link itemprop="url" href="/question/37222407/answer/73248606">
<meta itemprop="answer-id" content="24722151" />
<meta itemprop="answer-url-token" content="73248606" />
<meta itemprop="answerCount" content="12" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/37222407" target="_blank" data-id="7095959" data-za-element-name="Title">
现在 TypeScript 的生态如何？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/37222407/answer/73248606">
<!-- <meta itemprop="answer-id" content="24722151">
<meta itemprop="answer-url-token" content="73248606"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>205</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">205</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$wang-ze-52"
target="_blank" href="/people/wang-ze-52"
>王泽</a></span><span title="Hello Egret" class="bio">
Hello Egret 
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="205" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">205</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7095959" data-action="/answer/content" data-author-name="王泽" data-entry-url="/question/37222407/answer/73248606">

<textarea hidden class="content">谢邀&lt;br&gt;&lt;br&gt;截止目前，此问题共有151人关注，3人回答。这已侧面回答楼主的半个问题：TypeScript 在国内的生态并不成熟。&lt;br&gt;&lt;br&gt;但是，在2014年3月白鹭引擎 v0.9 版本第一次发布的时候，除了少数开发者认同（ 主要是和 TypeScript 非常相似的 ActionScript 3.0 开发者）之外，绝大部分 JavaScript 开发者在质疑：为什么不直接用 JavaScript ，非得多此一举弄个什么没听说过的 TypeScript ? 而目前，越来越多的开发者（无论是否使用白鹭引擎）已经认可了 TypeScript 的价值。&lt;br&gt;&lt;br&gt;我认为，这主要是微软对 TypeScript 的定位清晰、野心庞大并且心胸开阔决定的。（ P.S：我真的不是软粉）&lt;br&gt;&lt;br&gt;我第一次了解 TypeScript 是2013年，Adobe 的 Flash Player 产品经理宣布离开 Flash 团队并参与到 Adobe 的一个OpenWeb 相关的项目中（至今我也不知道到底是啥项目），当时他说他已经不再搞 AS3 了，并给大家推荐 TypeScript 。 在那个时候，TypeScript 给人的感觉就是单纯的 JavaScript + ActionScript （或者说是 ES4，这其中的渊源大家可以自行百度谷歌）。&lt;br&gt;&lt;br&gt;在 TypeScript 进化的过程中，我认为几个关键节点是：&lt;br&gt;&lt;br&gt;1. TypeScript 1.1发布&lt;br&gt;这个版本重写了全部编译器代码，大幅提升性能（在白鹭引擎的实际项目测试结果至少提升了三倍），并且&lt;b&gt;不再托管在微软自身的开源代码仓库&lt;/b&gt;（不好意思忘了叫什么了，我又不是软粉，怎么会记得这种东西╮(╯▽╰)╭ ） 而是改为了在 GitHub 上托管。&lt;br&gt;&lt;br&gt;2. TypeScriptService 发布和稳定&lt;br&gt;TypeScript 开源了其抽象语法树分析器，并提供友好的 API 接口，这被称为 TypeScriptService，这使得第三方 IDE 可以非常快速的提供 TypeScript 代码补全、类型检查、代码重构等支持，而&lt;b&gt;不是把开发者绑定在 VisualStudio 和微软体系中&lt;/b&gt;。&lt;br&gt;&lt;br&gt;3. TypeScript 1.6 发布&lt;br&gt;TypeScript 从1.5开始 开始支持 ES6 特性，并且废弃了和 ES6 矛盾的 module 关键字。从这点可以看出，在 ES6 标准出台之后，TypeScript 坚定&lt;b&gt;遵循标准，而非自己制定“标准”&lt;/b&gt;的决心和魄力。在 1.6版本中，TypeScript 实现了几乎所有的 ES6 新特性，并能将其编译为 ES5，就像开源社区风头很劲的 Babel 一样。由于 TypeScript 遵循并实现了 ES6 标准，TypeScript 自身的价值变得更大，因为只要掌握了 TypeScript ，就相当于掌握了 JavaScript 语言的最新标准，并且能在老式浏览器上完整运行。&lt;br&gt;&lt;br&gt;除此之外，TypeScript 1.6 支持 Facebook React 框架，由于 Facebook 引入了 JSX 这个神奇的标签语法以及组件化编程思想，强类型变得更加必要（如果你看了 React 的 PropsType 你就知道我在说什么），相比 PropsType 这样在运行时进行类型检查，TypeScript 的编译时检查显然可以让开发变得更有效率。&lt;br&gt;&lt;br&gt;4. VSCode 发布&lt;br&gt;VSCode 是微软的第一款（可能是，求确认）跨平台开发工具，他&lt;b&gt;使用了大量的开源社区的优秀技术&lt;/b&gt;以至于如果把 VS 这两个字母去掉的话，几乎根本看不出这是一款微软的产品。VSCode 包含了对一个文本编辑器来说非常优秀的 JavaScript 代码分析能力，但是如果你通过一个简单的命令，下载一个框架定义文件，这种代码分析和智能感知能力立马感动到哭。以一个比较简单的 jQuery 为例：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/d3575167e5e222f0ee9e1f375e075602_b.jpg&quot; data-rawwidth=&quot;972&quot; data-rawheight=&quot;634&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;972&quot; data-original=&quot;https://pic3.zhimg.com/d3575167e5e222f0ee9e1f375e075602_r.jpg&quot;&gt;&lt;br&gt;而这里的奥秘，就是 VSCode 采用 TypeScriptService 来分析 JavaScript 代码，以及用 TypeScript Definitions File 来做 API 支持。这意味着 TypeScript 自身已经不仅仅是一门语言，其服务和开源社区贡献的第三方 Definitions 文件已经&lt;b&gt;反哺回馈到 JavaScript 生态&lt;/b&gt;中。哪怕是最固执的 JavaScript 开发者以后都可能会在不经意间用到 TypeScript 生态中的内容。&lt;br&gt;&lt;br&gt;5. ` Salsa ` 项目&lt;br&gt;Salsa 是一个 TypeScript 新版本的代号（并且确认不是2.0）。在微软  VSCode 和 TypeScript 的 Github 讨论和 Roadmap 中我多次看到了这个代号。VSCode 路线图提到，通过 Salsa，JavaScript 可以被更加智能的支持。目前我简单的理解是，在未来，JavaScript 代码可以直接由 TypeScript 编译器编译，也就是说，在可能稍微遥远的未来，并不存在 TypeScript 这门语言，只存在经典 JavaScript （ ES5） ， ES6语法糖，类型检测混合在一起的新一代 JavaScript 语言，微软在其中&lt;b&gt;只专注做两件事&lt;/b&gt;：&lt;br&gt;1. 将ES6语法翻译成ES5&lt;br&gt;2. 在“你认为必要的地方”添加类型检查支持&lt;br&gt;&lt;br&gt;&lt;br&gt;从上述回答中，我们把黑色字部分提取出来，重新读一遍&lt;br&gt;&lt;br&gt;不再托管在微软自身的开源代码仓库&lt;br&gt;不是把开发者绑定在 VisualStudio 和微软体系中&lt;br&gt;遵循标准，而非自己制定“标准”&lt;br&gt;使用了大量的开源社区的优秀技术&lt;br&gt;反哺回馈到 JavaScript 生态&lt;br&gt;只专注做两件事&lt;br&gt;&lt;br&gt;这真的是那个我们印象中的，想把所有东西都大包大揽，牢牢控制住开发者衣食住行吃喝拉撒的微软么？&lt;br&gt;&lt;br&gt;由此可以看出，遵循国际标准，拥抱开源社区，然后最广泛的人民群众群策群力，有人提供运行时支持（ Google Chromium ），有人提供框架支持 （ Google AngularJS / Facebook React ），有人提供技术标准（ ES6 / NPM ）有人提供开发工具（ Microsoft TypeScript / Definition / VSCode ) 才能皆大欢喜。埋头发明背离 Web标准的新语言的的做法已经不再适用。&lt;br&gt;&lt;br&gt;&lt;br&gt;关于提主提问的 TypeScript 生态，通过上面的观点，我认为目前，大家关心的是 TypeScript “ 生态” ，但也许，微软其实根本不想做自己的 “ TypeScript 生态 ” ，而是用 TypeScript 去完善 JavaScript 生态。毕竟，无论是ES6翻译为ES5，还是&lt;b&gt;在必要的地方&lt;/b&gt;添加类型检查，都是当下 JavaScript 生态中非常迫切的需求。&lt;br&gt;&lt;br&gt;在这个大 JavaScript 生态中，Google ( AngularJS ) , Facebook ( React ) 等大厂都是微软的朋友。&lt;br&gt;&lt;br&gt;敌人？目前我能想到的可能只有一个&lt;br&gt;&lt;br&gt;Babel&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;更新于11月22日&lt;br&gt;&lt;br&gt;今天看见了 InfoQ 上的一篇文章 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.infoq.com/cn/news/2015/11/anders-hejlsberg-typescript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Delphi、C#之父Anders Hejlsberg首次访华 推广TypeScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 感受颇多。自己的很多见解和这篇文章一致，包括 TypeScript 的目标、关注点和主要竞争对手。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/d3575167e5e222f0ee9e1f375e075602_200x112.jpg" data-rawwidth="972" data-rawheight="634" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/d3575167e5e222f0ee9e1f375e075602_r.jpg">
谢邀 截止目前，此问题共有151人关注，3人回答。这已侧面回答楼主的半个问题：TypeScript 在国内的生态并不成熟。 但是，在2014年3月白鹭引擎 v0.9 版本第一次发布的时候，除了少数开发者认同（ 主要是和 TypeScript 非常相似的 ActionScript 3.0 开发者）…

<a href="/question/37222407/answer/73248606" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-11-21" target="_blank" href="/question/37222407/answer/73248606">编辑于 2015-11-22</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7095959"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>23 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="zm-invite-pager">

<span><a href="?page=21">上一页</a></span>





<span><a href="?page=1">1</a></span>

<span>...</span>



<span><a href="?page=20">20</a></span>



<span><a href="?page=21">21</a></span>



<span class="zg-gray-normal">22</span>



<span><a href="?page=23">23</a></span>



<span><a href="?page=24">24</a></span>



<span>...</span>

<span><a href="?page=50">50</a></span>



<span><a href="?page=23">下一页</a></span>

</div>

</div>
</div>

</div>
</div>


<div class="zu-main-sidebar" data-za-module="RightSideBar">

<div class="zm-side-section">
<div class="zm-side-section-inner">
<div class="topic-header-side zm-entry-head-wrap">

<div class="clearfix"><div id="zh-topic-side-head">

<a href="javascript:;" name="focus" class="zg-mr10 zu-entry-focus-button zg-btn-white" id="tf-225">取消关注</a>

<div class="zm-topic-side-followers-info">

<a href="/topic/19550901/followers"><strong>108703</strong></a> 人关注了该话题

</div>
</div></div>
<div style="margin-top: 15px;">

<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/organize">组织</a>
<span class="zg-bull">•</span>
<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/manage">管理</a>
<span class="zg-bull">•</span>

<a class="zg-link-litblue-normal" href="/topic/19550901/log">日志</a>
</div>

</div>
</div>
</div>

<div class="zm-side-section">
<div class="zm-side-section-inner">
<h3 class="zm-topic-side-organize-title">描述
</h3>
<div id="zh-topic-desc" data-resourceid="225" data-action="/topic-introduction">
<div class="zm-editable-content" data-editable-maxlength="130" ></div>
</div>
</div>
</div>
<div class="shameimaru-placeholder" data-loc="topic_up" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

<div class="zm-side-section" id="zh-topic-side-parents-list">
<div class="zm-side-section-inner parent-topic">
<h3 class="zm-topic-side-organize-title">父话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19550516"
data-hovercard="t$b$19550516" data-token="19550516" data-topicid="98" data-za-element-name="Title">
Web 开发
</a>

<a class="zm-item-tag"
href="/topic/19552332"
data-hovercard="t$b$19552332" data-token="19552332" data-topicid="708" data-za-element-name="Title">
软件开发
</a>

<a class="zm-item-tag"
href="/topic/19561719"
data-hovercard="t$b$19561719" data-token="19561719" data-topicid="3839" data-za-element-name="Title">
网站开发
</a>

</div>
</div>
</div>
<div class="zm-side-section" id="zh-topic-side-children-list">
<div class="zm-side-section-inner child-topic">
<h3 class="zm-topic-side-organize-title">子话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19552521"
data-hovercard="t$b$19552521" data-token="19552521" data-topicid="769" data-za-element-name="Title">
JavaScript
</a>

<a class="zm-item-tag"
href="/topic/19551326"
data-hovercard="t$b$19551326" data-token="19551326" data-topicid="369" data-za-element-name="Title">
CSS
</a>

<a class="zm-item-tag"
href="/topic/19573936"
data-hovercard="t$b$19573936" data-token="19573936" data-topicid="7912" data-za-element-name="Title">
前端工程师
</a>

<a class="zm-item-tag"
href="/topic/19551323"
data-hovercard="t$b$19551323" data-token="19551323" data-topicid="367" data-za-element-name="Title">
HTML
</a>

<a class="zm-item-tag"
href="/topic/19583739"
data-hovercard="t$b$19583739" data-token="19583739" data-topicid="11152" data-za-element-name="Title">
前端性能优化
</a>

<a class="zm-item-tag"
href="/topic/19806306"
data-hovercard="t$b$19806306" data-token="19806306" data-topicid="87560" data-za-element-name="Title">
前端框架
</a>

<a class="zm-item-tag"
href="/topic/19621319"
data-hovercard="t$b$19621319" data-token="19621319" data-topicid="23778" data-za-element-name="Title">
前端开发框架和库
</a>

<a class="zm-item-tag"
href="/topic/19590813"
data-hovercard="t$b$19590813" data-token="19590813" data-topicid="13512" data-za-element-name="Title">
前端入门
</a>

<a class="zm-item-tag"
href="/topic/19597369"
data-hovercard="t$b$19597369" data-token="19597369" data-topicid="15721" data-za-element-name="Title">
浏览器兼容性
</a>

<a class="zm-item-tag"
href="/topic/19566907"
data-hovercard="t$b$19566907" data-token="19566907" data-topicid="5573" data-za-element-name="Title">
Div+CSS
</a>

</div>

<a class="zg-link-litblue zm-topic-side-title-link" href="/topic/19550901/organize/entire#anchor-children-topic">共有 31 个子话题，查看话题结构 » </a>

</div>
</div>


<div class="zm-side-section">
<div class="zm-side-section-inner" id="zh-topic-top-answerer">
<h3>

<a href="/topic/19550901/top-writer" class='SidebarListNav-sideLink Link--light' target="_blank">
查看全部 »
</a>

活跃回答者</h3>
<div class='zm-topic-side-person-list'>

<div class="zm-topic-side-person-item">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="author-link">徐飞</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="三流程序员，二流架构师">三</span>流程序员，二流架构师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/sharpmaster/topic/19550901/answers">在该话题下有 91 个回答，8980 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/ecfeb2b0c_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="author-link">张云龙</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="全民直播CTO">全</span>民直播CTO

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/fouber/topic/19550901/answers">在该话题下有 30 个回答，9722 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic4.zhimg.com/7be980a0f_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="author-link">尤雨溪</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="不会搞艺术的程序员不是好设计师">不</span>会搞艺术的程序员不是好设计师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/evanyou/topic/19550901/answers">在该话题下有 128 个回答，12K 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic2.zhimg.com/191ec5daa9b4d6931eed0eba8a9cf39d_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="author-link">张克军</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="豆瓣前端工程师">豆</span>瓣前端工程师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/kejun/topic/19550901/answers">在该话题下有 40 个回答，3330 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="author-link">贺师俊</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="Web开发者">W</span>eb开发者

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/he-shi-jun/topic/19550901/answers">在该话题下有 396 个回答，14K 赞同</a>


</div>
</div>
</div>


</div>
</div>
</div>


<div class="shameimaru-placeholder" data-loc="topic_down" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

</div>


</div>


<div id="zh-footer" class="zh-footer">
<div class="content zg-wrap clearfix">
<ul>

<li><a href="https://liukanshan.zhihu.com" target="_blank">刘看山</a></li>

<li><a href="/question/19581624" target="_blank">知乎指南</a></li>
<li><a href="javascript:;" id="js-feedback-button">建议反馈</a></li>

<li><a href="/app" target="_blank">移动应用</a></li>
<li><a href="/careers">加入知乎</a></li>
<li><a href="/terms" target="_blank">知乎协议</a></li>
<li><a href="/jubao" target="_blank">举报投诉</a></li>
<li><a href="/contact">联系我们</a></li>

</ul>

<span class="copy">&copy; 2017 知乎</span>

</div>
</div>

<script type="text/json" class="json-inline" data-name="guiders2">{"exclusive-popover":{},"section":{},"editor":[]}</script>
<script type="text/json" class="json-inline" data-name="current_user">["\u6587\u5200\u6c34\u539f","liu-yuan-39-9","https:\/\/pic2.zhimg.com\/56a9754ca686ba7d3b1e725c6452ccd1_s.png","649f8fe7032b205a3cbbbb875135734d","\u534a\u8def\u51fa\u5bb6\u5b66\u5b89\u5353",0,0,true,"174596549@qq.com","http:\/\/mail.qq.com",0,false,false,false,"32745954738176",false,false,false,true,null]</script>
<script type="text/json" class="json-inline" data-name="user_status">[null,null,false]</script>
<script type="text/json" class="json-inline" data-name="env">["zhihu.com","comet.zhihu.com",false,null,false,false]</script>
<script type="text/json" class="json-inline" data-name="permissions">[]</script>


<script type="text/json" class="json-inline" data-name="ga_vars">{"user_created":1378258190000,"now":1486365876000,"abtest_mask":"---------0--------------------","user_attr":[1,0,0,"-",1],"user_hash":"649f8fe7032b205a3cbbbb875135734d"}</script>

<script type="text/json" class="json-inline" data-name="ra-urls">{"Copyright":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Copyright.98ac6609.js","PayUIApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PayUIApp.ca78ba78.js","CouponApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CouponApp.66b486a6.js","PaymentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PaymentApp.7f16d61c.js","Community":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Community.920e484a.js","Report":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Report.26635627.js","OrgOpHelp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/OrgOpHelp.f1709e97.js","common":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/common.a4dd3236.js","BalanceApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/BalanceApp.14e3a013.js","AnswerWarrant":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/AnswerWarrant.97f134aa.js","CommentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CommentApp.7556991d.js"}</script>

<script type="text/json" class="json-inline" data-name="current_topic">[["\u524d\u7aef\u5f00\u53d1","19550901","https:\/\/pic1.zhimg.com\/v2-8e66233f5558e741bad3a8c50b9566c8_s.jpg",225],[["Web \u5f00\u53d1","19550516","https:\/\/pic3.zhimg.com\/891b4f32a_s.jpg"],["\u8f6f\u4ef6\u5f00\u53d1","19552332","https:\/\/pic2.zhimg.com\/185d9c33d_s.jpg"],["\u7f51\u7ad9\u5f00\u53d1","19561719","https:\/\/pic2.zhimg.com\/78645670d_s.jpg"]],1,0,"",0]</script>

<script src="https://static.zhihu.com/static/revved/-/js/vendor.cb14a042.js"></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/base.6cca0b95.js"></script>

<script src="https://static.zhihu.com/static/revved/-/js/closure/common.31d4e5c0.js"></script>


<script src="https://static.zhihu.com/static/revved/-/js/closure/richtexteditor.71ca49de.js" async></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/page-main.c075e49f.js"></script>
<meta name="entry" content="ZH.entryT" data-module-id="page-main">

<script type="text/zscript" znonce="c4ff6aba6bc342ea95abf24d1a0d0178"></script>

<input type="hidden" name="_xsrf" value="b08047425d2b394c9b9106bb47ce2ec8"/>
</body>
</html>