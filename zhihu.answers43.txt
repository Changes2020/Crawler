[
  {
    "question": "\n做前端如何克服新技术焦虑？\n",
    "author": "rank",
    "content": "\n\n<textarea hidden class=\"content\">做技术要做有沉淀的事。&lt;br&gt;&lt;br&gt;前几年 grunt 特火的时候，学会了 grunt，看看现在有 gulp，新的还有 webpack。新技术与技术栈没有什么可炫耀的，正如与 N 年我们学到 IE 6 tricky 去到处炫耀一样自蔽。&lt;br&gt;&lt;br&gt;不是没有价值，而是非码农核心。盲目追新，没有学习技术的本心和初衷，就很容易被时代淘汰，因为多数人无法比更年轻人一样有精力去「追新」。&lt;br&gt;&lt;br&gt;不盲目是怎么样的？&lt;br&gt;&lt;br&gt;React 有哪些优势，怎么做到的学其核而不是面。为何 FB 做出来了，学习看待问题与做技术的态度，分析为什么 webcomponent 没火起来，x-tag 和polymer 都自己家里人用？为什么 hta 落寞。flux 写起来难吗？难的是理解与设计，为什么我们思索不到，看看 redux… Babel 代码写得一般般，为何这么火，要不试试改造后给 PR？jquery 这么易用上手快，selector 查询慢？那 sizzle 选择器设计是否有缺陷？你能 fixed 吗？less sass 为何出现，是否是 css 缺陷，那 css 又有什么缺陷？w3c 又如何看的呢？未来发展是怎么样？要不自己写个试试？&lt;br&gt;&lt;br&gt;那新技术层出不穷，要不要用新技术栈？当然可以，只要你愿意去多花时间学习，能弄「懂」。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n做技术要做有沉淀的事。 前几年 grunt 特火的时候，学会了 grunt，看看现在有 gulp，新的还有 webpack。新技术与技术栈没有什么可炫耀的，正如与 N 年我们学到 IE 6 tricky 去到处炫耀一样自蔽。 不是没有价值，而是非码农核心。盲目追新，没有学习技术的本…\n\n<a href=\"/question/46820352/answer/104885003\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-06-08\" target=\"_blank\" href=\"/question/46820352/answer/104885003\">编辑于 2016-06-11</a></p>\n\n",
    "link": "https://zhihu.com/question/46820352/answer/104885003"
  },
  {
    "question": "\n为什么都说富文本编辑器是天坑？\n",
    "author": "王福朋",
    "content": "\n\n<textarea hidden class=\"content\">我是&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wangeditor.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wangEditor - 轻量级web富文本编辑器&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的作者。&lt;br&gt;作为一个在web富文本编辑器贡献了1年半时间的非菜鸟人员，我来谈谈我的感受。说到这个话题，我感受特别多，也特别乱。因此，想到哪里就写到哪里吧。&lt;br&gt;&lt;br&gt;2014年11月开始，我是想着练练手，就绷着一股劲写了1000多行的代码，提交到github，就有了最初的wangEditor编辑器，那时候的样子，完全不符合上述的『工业化』这个标准，无论你对『工业化』这个词的要求有多低。说白了，就是一个简单的div增加contenteditable属性，然后用浏览器原生的execCommand执行命令，要不然代码怎么会那么少呢？现在想起来，那时候谈什么稳定性、兼容性，那就是妄想了。&lt;br&gt;&lt;br&gt;后来，经过了大约两次代码重构，直到2015年夏天那会儿，总算是有了好转——只是『好转』啊，离着『工业化』的要求还是有一段距离。此时的编辑器，在代码上比较清晰，结构也比较稳定，我可以自己去灵活的扩展一些用户提出来的功能。但是那时候在功能层级和用户自定义扩展层级上，还是远远不够。第一，用户无法自定义菜单和插件，有啥问题只能我来加。第二，现在的功能稳定级别，紧紧是在于用户完全没有特殊操作和特殊需求的时候稳定，例如，用户要是ctrl+a全选内容然后删除，这时再写入内容就会有问题，再例如，用户粘贴一段文字也会有各种问题，再例如，用户引用了一段内容之后无法通过两次enter跳出……再多了我就不说了&lt;br&gt;&lt;br&gt;但是，到那时候通过我一年多的努力，QQ群里有了几百个关注着，也有人真正的开始尝试用我的这款产品。然后吸引大家来的，不是功能多么多么强大，而是靠漂亮的UI——不要见笑！&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_b.png&quot; data-rawwidth=&quot;1111&quot; data-rawheight=&quot;190&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1111&quot; data-original=&quot;https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_r.png&quot;&gt;&lt;br&gt;到2015年的冬天，将近春节一个多月的时候，我蓄势待发，重构代码，开发2.0版本。因此此时，我已经在编辑器这个领域混了1年多了，见过了各种各样用户的需求，研究了网络上所有看得见的竞品，我现在已经知道了用户到底需要一款什么样子的编辑器，用户的需求在哪里、问题在哪里、痛点在哪里。&lt;br&gt;&lt;br&gt;大约2周的事件来开发，春节前发布了基础版本，直到现在春节后刚上班没几天，这段时间里，我又做了5次小版本升级，基础版基本稳定。接下来，我还要继续升级，做一些更加符合用户需求的功能，例如集成七牛云存储的图片上传、国际化、标准的表情包、集成第三方上传插件等等。&lt;br&gt;&lt;br&gt;另外，我今年还会将移动端集成进来，做成响应式、支持手机pad的编辑器。&lt;br&gt;&lt;br&gt;&lt;b&gt;总结来说，web富文本编辑器——没进来的人觉得没啥大不了的，开源插件那么多，何必重做轮子。真正进来的人，会发现这东西真的可做的东西特别多。&lt;/b&gt;&lt;br&gt;&lt;br&gt;共勉！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_200x112.png\" data-rawwidth=\"1111\" data-rawheight=\"190\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_r.png\">\n我是<a href=\"//link.zhihu.com/?target=http%3A//wangeditor.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">wangEditor - 轻量级web富文本编辑器<i class=\"icon-external\"></i></a>的作者。 作为一个在web富文本编辑器贡献了1年半时间的非菜鸟人员，我来谈谈我的感受。说到这个话题，我感受特别多，也特别乱。因此，想到哪里就写到哪里吧。 2014年11月开始，我是想着练练手，就绷着一股劲写了1000…\n\n<a href=\"/question/38699645/answer/86736306\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/38699645/answer/86736306\">发布于 2016-02-17</a></p>\n\n",
    "link": "https://zhihu.com/question/38699645/answer/86736306"
  },
  {
    "question": "\n前端切图切到很高的境界是怎样一种体验？\n",
    "author": "豪情",
    "content": "\n\n<textarea hidden class=\"content\">就我个人的一点经验分享一下，谈不上很高的境界，只说是一点心得，我认为比较好的切图的同学是，如何在众多林立的需求之间取得一个平衡。说到底还是眼界的问题，刚开始可能纠结如何命名css比较易用，过后可能纠结html结构是否合理，然后页面是否兼容，可复用，再往后页面功能设计是否合理，页面体验是否符合人的基本心理需求。做的时间长了，就有空琢磨这个产品到底如何，能否真的占有一定的市场或用户量，然后做失败几个产品之后，看看其它行业是否还有潜力的机会，是否有与互联网接合的切点。然后在跨地区看看，地球那边的行业是怎么样的？所以，下午去巴黎看看那边是否有订餐需求不是一个梦。然后在每个阶段下对前端的审视或要求是不一样的，也谈不上很高的境界，只是公司或人原来的目标或需求变了，所以就像我以前提到一样，这个点永远都达不到，只有无限可能的接近。&lt;br&gt;&lt;br&gt;然后在分享点目前我接触到具体的体验：&lt;br&gt;1. 满足UI同学的视觉需求。&lt;br&gt;无论是css hack还是通过js进行差异化处理，从技术手段上无底线的实现UI同学的视觉要求。这是工作负责的态度，也是自我需求突破的一个手段。从UI同学来说，做的设计稿没有达到要求，是对其本身工作成果的不尊重。&lt;br&gt;&lt;br&gt;2. 控制好后端同学的数据显示。&lt;br&gt;前端做为后端同学的代言人，无趣的数字通过有趣的交互或界面展现出来，本身是一件很美好的事情，通过合作的方式让整个流程完美无瑕，但总是在外界因素的影响下，把握不好。&lt;br&gt;&lt;br&gt;3. 在这有限的条件下提高自己的效率或代码质量。&lt;br&gt;这就要提到一般页面的 页面的健壮性，扩展性，复用性。&lt;br&gt;&lt;br&gt;a. 健壮性：&lt;br&gt;这个怎么说呢，UI出的psd图是一个页面理想状态下的形态，而页面有数据，会出现两种极端状态，一，数据极多，二，数据极少。所以在页面排版的时候，考虑这两种状态，以免数据太多的时候，撑破页面，以免数据太少，页面部分元素会出现收回去状况，这样的页面会出现一些细节没有处理的常规失误。&lt;br&gt;&lt;br&gt;b. 扩展性：&lt;br&gt;可以说，这个也是第一条的扩充，扩展性的意思为，在页面的模块很少的时候，要考虑未来添加子模块或兄弟模块的状态，为将来留好html接口。在将来添加模块的时候，尽可能少的去动原来的html结构，使html易于扩展。这个具体情况，具体处理。一般的处理就是如果有可能会有兄弟元素就多套一层，为后台添加兄弟元素尽可能的不影响现有结构。这个点乍看起来很小，其实如果扩充到整个项目，多个项目就有可观的效应了。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/07adb47cd8f0ae30f36ce38184f4da4c_b.png&quot; data-rawwidth=&quot;259&quot; data-rawheight=&quot;605&quot; class=&quot;content_image&quot; width=&quot;259&quot;&gt;&lt;br&gt;c. 复用性：&lt;br&gt;由于页面中风格相似的模块很多，或页面中与页面中相似的模块很多，但是总会有那么一丁点的差异，这是设计师认识世界然后在表达世界的产物，我们理解设计师的职业操守，所以只能在前期做一些技术处理，免得后期问候某岗位的亲人。具体的有的模块高点有的模块低点，还有结构完全一样，但底纹不一定。这样建议把表现形式的样式放在一个class中，物理属性放在一个class中。还有就是装饰性的图片决不不以明标签的方式插入到页面中，内容式的内容绝对以&amp;lt;img src=&quot;&quot; /&amp;gt;的方式插入中去，以免将来多主题，多语言版本的实现。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/61c13faa9a8d592fd4f2963a550c60d1_b.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;207&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic2.zhimg.com/61c13faa9a8d592fd4f2963a550c60d1_r.jpg&quot;&gt;&lt;br&gt;可能有时候还有的情况是，页面完全切不出来，html，css完全不知道怎么写了。但基础掌握良好，概念基本清楚。这时候我个人建议应该是吸收别人好的东西时候到了，也是个人水平瓶颈的时候，需要在坚持一下完全的突破。具体的方式就是，用firebug去分析先有的bat各个项目的各个页面，总有你可以借鉴的地方。有兴趣加入专业前端开发群：&lt;b&gt;492107297&lt;/b&gt;，禁止闲聊，禁发大gif，非喜勿进。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/07adb47cd8f0ae30f36ce38184f4da4c_200x112.png\" data-rawwidth=\"259\" data-rawheight=\"605\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/07adb47cd8f0ae30f36ce38184f4da4c_r.png\">\n就我个人的一点经验分享一下，谈不上很高的境界，只说是一点心得，我认为比较好的切图的同学是，如何在众多林立的需求之间取得一个平衡。说到底还是眼界的问题，刚开始可能纠结如何命名css比较易用，过后可能纠结html结构是否合理，然后页面是否兼容，可复…\n\n<a href=\"/question/37048605/answer/70177425\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-10-31\" target=\"_blank\" href=\"/question/37048605/answer/70177425\">编辑于 2015-10-31</a></p>\n\n",
    "link": "https://zhihu.com/question/37048605/answer/70177425"
  },
  {
    "question": "\nIE6 具体哪些问题让前端工程师无法忍受？\n",
    "author": "邓妍",
    "content": "\n\n<textarea hidden class=\"content\">問題並不出在 IE6 本身。&lt;br&gt;&lt;br&gt;很遺憾地看到在這個問題下質疑 IE6 產品經理智商的言論……首先，IE6 是 12 年前的產物，IE6 放在 12 年前沒什麽不好。在它發佈後的兩年內，市場份額達到 90% 以上，當然不是因為它有多麼創新，而是因為它是 XP 的默認瀏覽器。這個數據告訴我們，全世界 90% 以上的網民，都在用它瀏覽網頁——那個時候全世界的網頁都在兼容著 IE6。&lt;br&gt;&lt;br&gt;這麽多年前的事情，現在有什麼好討論的？IE6 不是早就被 7 8 9 10 11更新換代了嗎？&lt;br&gt;&lt;br&gt;什麼？中國還有 22.2% 的用戶仍在使用 IE6？！&lt;br&gt;&lt;br&gt;See，這纔是問題。&lt;br&gt;&lt;br&gt;&lt;b&gt;問題並不出在 IE6 本身。它只是一個早就被更新換代的產品。&lt;/b&gt;如果中國沒有那麽多盜版 Windows 導致無法升級、政府銀行不願升級瀏覽器控件等等因素，就不會有今天中國前端工程師的抱怨。前端工程師不可能忽略這 22.2% 的市場。&lt;br&gt;&lt;br&gt;巧就巧在，IE6 就出生在中國互聯網剛剛開始準備蓬勃發展的年代。如果這個時間稍微晚一點，也許……&lt;br&gt;&lt;br&gt;題主若感興趣，可以來這裏看一下全球統計：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.modern.ie/ie6countdown&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;modern.ie/ie6countdown&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;全球範圍 IE6 份額目前為 4.4%。中國以 22.2% 高居首位，接下來是台灣 3.5%，印度 2.8%。大部分都在 1% 以下。&lt;br&gt;&lt;br&gt;基本上在國外，各種日新月異的前端技術開發早就已經放棄 IE6 了。&lt;br&gt;&lt;br&gt;&lt;b&gt;所以，回答非網站開發人員的題主，IE6 的各個方面都讓前端工程師無法忍受，因為它只是互聯網時代的一個試驗品——就像所有我們見過用過的軟件一樣。互聯網世界時時刻刻都在變化著，而軟件開發者們也在奮起追逐著。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;而只有中國的前端工程師們，被迫去研究調試一個早已被扔在垃圾桶裏的舊物。具體哪個部件會出問題，你我都不想去知道，也沒必要知道，說出來也沒人叫好。所以，就回答到這裏好了。請題主見諒。&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n問題並不出在 IE6 本身。 很遺憾地看到在這個問題下質疑 IE6 產品經理智商的言論……首先，IE6 是 12 年前的產物，IE6 放在 12 年前沒什麽不好。在它發佈後的兩年內，市場份額達到 90% 以上，當然不是因為它有多麼創新，而是因為它是 XP 的默認瀏覽器。這個…\n\n<a href=\"/question/22534343/answer/21717195\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-01-17\" target=\"_blank\" href=\"/question/22534343/answer/21717195\">编辑于 2014-01-17</a></p>\n\n",
    "link": "https://zhihu.com/question/22534343/answer/21717195"
  },
  {
    "question": "\n23 岁在深圳工作做前端开发，月收入 2.5 万元有可能吗？\n",
    "author": "maxzhang",
    "content": "\n\n<textarea hidden class=\"content\">前端更准确应该说web前端，近两年经过爆发式增长，有点前几年ios的味道，93年25k这样的薪水绝对有可能，有几个原因：&lt;br&gt;&lt;br&gt;1、前端行业之前是被严重低估的，这体现在薪水和认识两方面。一方面早年前端因为职业的特殊性，学习入门简单，做的事情相较后端来说也更为简单，有一部分后端都兼任前端工作，所以前端薪水普遍比后端低。另一方面认识，是全行业普遍都轻视前端，不论是其他程序员还是hr，就前两天还有hr和我说&quot;我觉得这个人薪水有点高&quot;，但如果换成后端就一点都不会觉得有问题。今天的前端地位有点翻身农奴把歌唱的味道，很多人现在依然无法正视前端该有的价值，&quot;不就做着那么点事，怎么收入就高了呢&quot;，这些人可能很长一段时间内依然无法想明白。&lt;br&gt;&lt;br&gt;2、前端技术野蛮式成长，我喜欢用野蛮这个词，自身技术标准的建设和层出不穷的新技术，别的语言迭代速度是用年来计算，前端技术是按月计算，一年前的技术已经成为旧东西了。在企业应用方面html5 node react angular等都在为前端业务开疆破土，使前端开发在企业应用中更加专业，责任更重，价值更高，这些技术无疑都是近几年才出现的。&lt;br&gt;&lt;br&gt;3、行业高端人才的稀缺，目前前端人才是通过两类人转变而来，一类从美工转到前端，一类从后端转的。前端职业的特殊性，决定了你即要做好页面又要写好代码并不容易，这样就筛选掉一大部分写不好代码的美工，和写不好页面的后端。前端技术比较杂，新东西又多，剩下来的学习能力不行又被筛选掉一大部分。最后剩下的精英既要知识面广又要一些方面理解深，这样的人实在太少太少。&lt;br&gt;&lt;br&gt;虽然前端职业得到了蓬勃发展，但这个职业里有很多浑水摸鱼的，奉劝那些简历里面还只写着精通jquery和切图的人，你现在拿高薪应该感谢那些比你更努力的前端人，因为他们让前端职业有了更长远的发展，所以你才拿到了高薪，绝对不是因为你技术多牛逼。同时也请你们尽快提高自己的技能水平，学好基础知识，因为写node react是程序员干的活，求勿拖后腿。&lt;br&gt;&lt;br&gt;手机码字，辛苦大家看完！&lt;br&gt;&lt;br&gt;私货，熊猫TV招聘前端 zhangdaiping@panda.tv ，工作地点：帝都</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n前端更准确应该说web前端，近两年经过爆发式增长，有点前几年ios的味道，93年25k这样的薪水绝对有可能，有几个原因： 1、前端行业之前是被严重低估的，这体现在薪水和认识两方面。一方面早年前端因为职业的特殊性，学习入门简单，做的事情相较后端来说也更…\n\n<a href=\"/question/42078166/answer/94891824\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-04-12\" target=\"_blank\" href=\"/question/42078166/answer/94891824\">编辑于 2016-04-12</a></p>\n\n",
    "link": "https://zhihu.com/question/42078166/answer/94891824"
  },
  {
    "question": "\n能否用通俗语言讲一下web前端讲的“切图”到底是什么意思？\n",
    "author": "vvhl",
    "content": "\n\n<textarea hidden class=\"content\">楼上的解释真的是……反正我是没看懂&lt;br&gt;&lt;br&gt;首先设计师给了psd之后，前端分析一下布局，然后把其中需要用到的图片或者图标用ps的切片工具分割好，然后点击左上角&lt;br&gt;[文件 ] —[ 保存为web模式]&lt;br&gt;就会得到一个images的文件夹，里面是一些零散的图片（就是你分割的那些）。然后前端开始写代码，一般纯色的背景或者按钮 和一些系统自带的文字都是可以直接用代码打出来的，就那样用代码一点一点的组成、还原设计师设计的网页，其中的一些icon和图片自然是没办法用代码写出来的，所以需要用到之前切好的那些图片和图标，一起拼上去。拼成一个完整的网页，然后还可以给那些图标添加一些代码，使得使用者点击它的时候可以执行一些动作，比如有趣的动效，或者弹出一个神奇的窗口等等。&lt;br&gt;啊～好通俗易懂啊～</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n楼上的解释真的是……反正我是没看懂 首先设计师给了psd之后，前端分析一下布局，然后把其中需要用到的图片或者图标用ps的切片工具分割好，然后点击左上角 [文件 ] —[ 保存为web模式] 就会得到一个images的文件夹，里面是一些零散的图片（就是你分割的那些…\n\n<a href=\"/question/38357171/answer/76030905\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-09\" target=\"_blank\" href=\"/question/38357171/answer/76030905\">编辑于 2016-05-05</a></p>\n\n",
    "link": "https://zhihu.com/question/38357171/answer/76030905"
  },
  {
    "question": "\n公司每周都要开分享会，我是web前端工程师，不知道分享什么好。大神你在哪里？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">这个问题是这样的：从你的角度出发，可能是想给大家讲一个体系的东西，有深度有广度，但这样有几个问题：&lt;br&gt;&lt;br&gt;1. 没几次下来，你就没东西可以讲了&lt;br&gt;2. 你一次很难把东西讲得很透彻&lt;br&gt;3. 听众的接受度不好&lt;br&gt;4. 因为太笼统，听众在选择去还是不去听的时候，很纠结&lt;br&gt;5. 深浅度很难照顾不同的人群&lt;br&gt;&lt;br&gt;这些问题我都深入思考过，因为我之前召集组织了整个苏宁前端的分享活动，我的组织形式是大小分享穿插，每周的是小分享，只讲一个小知识点，不一定要多久，20分钟也行，懂得就不来，不知道的来一下，目的也很简单，就为了让大家知道有这么个东西。&lt;br&gt;&lt;br&gt;我的想法是，这种单次分享，你只要能吸引20%的人来参加，其中20%的人在今后能想起来有这么个东西，就赚了。至于比较有深度的话题，适合每一两个月搞一次，看情况而定。&lt;br&gt;&lt;br&gt;我的高中数学老师很有技巧，他总是只讲填空题选择题，然后大题前两题。因为我们母校是严重落后地区的学校，150分的数学，均分是到不了90分的，之前几届只能有60分，甚至还不到，他想了这种办法，给提高到了80多分，这是很大的进步。&lt;br&gt;&lt;br&gt;所以，可以把平时这种小的分享当做一个极小知识点的分享，积少成多，慢慢大家基础就会提高了，而且话题定得小，新员工也可以讲，应届生也能听，这是很有益的。不要想一下搞个大新闻，不现实的。前端知识点这么多，总有东西讲。&lt;br&gt;&lt;br&gt;推动事情，要和风细雨，不要着急，慢慢来。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这个问题是这样的：从你的角度出发，可能是想给大家讲一个体系的东西，有深度有广度，但这样有几个问题： 1. 没几次下来，你就没东西可以讲了 2. 你一次很难把东西讲得很透彻 3. 听众的接受度不好 4. 因为太笼统，听众在选择去还是不去听的时候，很纠结 5. …\n\n<a href=\"/question/34625985/answer/59462167\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-16\" target=\"_blank\" href=\"/question/34625985/answer/59462167\">编辑于 2015-08-16</a></p>\n\n",
    "link": "https://zhihu.com/question/34625985/answer/59462167"
  },
  {
    "question": "\n大公司或专业团队目前流行的前端工具有什么？\n",
    "author": "祖明",
    "content": "\n\n<textarea hidden class=\"content\">造轮子的路过：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//efe.baidu.com&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;EFE Tech - 百度EFE（Excellent FrontEnd）技术体系&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//echarts.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECharts - 数据可视化图表库&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ecomfe/esl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ESL - AMD Loader&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ecomfe/edp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;EDP - 前端开发平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ecomfe.github.io/est/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;EST - 基于 Less 的样式工具库&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ecomfe.github.io/saber/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Saber - 移动 SPA 项目解决方案&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ecomfe/rider&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rider - 移动样式工具库&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ecomfe/er&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ER - SPA 应用框架&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ecomfe/esui&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ESUI - UI 组件库&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ecomfe.github.io/etpl/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ETpl - 灵活、高性能的模板引擎&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/BE-FE/iSlider&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;iSlider - 轻量、高性能的移动滑动方案&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//tushuo.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;图说 - 可视化数据分享平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ecomfe.github.io/fontmin/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fontmin - 字体子集化方案&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n造轮子的路过：<a href=\"//link.zhihu.com/?target=http%3A//efe.baidu.com\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EFE Tech - 百度EFE（Excellent FrontEnd）技术体系<i class=\"icon-external\"></i></a> <a href=\"//link.zhihu.com/?target=http%3A//echarts.baidu.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ECharts - 数据可视化图表库<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=https%3A//github.com/ecomfe/esl\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ESL - AMD Loader<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=https%3A//github.com/ecomfe/edp\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EDP - 前端开发平台<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=http%3A//ecomfe.github.io/est/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">EST - 基于 Less 的样式工具库<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=http%3A//ecomfe.github.io/saber/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Saber - 移动 SPA 项目解决方案<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=https%3A//github.com/ecomfe/rider\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Rider - 移动样式工具库<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=https%3A//github.com/ecomfe/er\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ER - SPA 应用框架<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=https%3A//github.com/ecomfe/esui\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ESUI - UI 组件库<i class=\"icon-external\"></i></a><a href=\"//link.zhihu.com/?target=http%3A//ecomfe.github.io/etpl/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">ETp…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/28638304/answer/44616734\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-04-12\" target=\"_blank\" href=\"/question/28638304/answer/44616734\">编辑于 2015-04-14</a></p>\n\n",
    "link": "https://zhihu.com/question/28638304/answer/44616734"
  },
  {
    "question": "\n前端如何计算网页的打开时间？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">1. Web performance APIs ，可以得到各种时间比如dns解析时间、连接时间、跳转时间、加载时间等指标，具体请自行查资料，不赘述。&lt;br&gt;2. 浏览器的私有API，比如 chrome.loadTimes()&lt;br&gt;3. DOM ready/load 事件&lt;br&gt;4. 白屏时间（first paint time）&lt;br&gt;5. 首屏时间（Above-the-fold time）&lt;br&gt;&lt;br&gt;4和5尚无公认的确定方法和对应api。特别是5，怎么定义首屏没有统一的标准。因此需要自行确定，并用一些相对hack的方式获取。前一段时间百度和腾讯都有人分享过他们的做法，可以参考，具体链接等回头找到了再补。&lt;br&gt;&lt;br&gt;如果只是要大致了解网站的性能，最简单的办法是使用Google Analytics，它包含了性能统计。如果要非常细致的数据（比如web performance api上的数据），可以自己写，也可用我写的这个库：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//github.com/hax/WebPerf&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/hax/WebPerf&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; （有基本的兼容处理，但优化不够，所以我们自己只取样5%~10%的用户加载这个脚本。下个月我还会抽时间改进）。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n1. Web performance APIs ，可以得到各种时间比如dns解析时间、连接时间、跳转时间、加载时间等指标，具体请自行查资料，不赘述。 2. 浏览器的私有API，比如 chrome.loadTimes() 3. DOM ready/load 事件 4. 白屏时间（first paint time） 5. 首屏时间（Abov…\n\n<a href=\"/question/24889192/answer/29333117\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-08-18\" target=\"_blank\" href=\"/question/24889192/answer/29333117\">编辑于 2014-08-18</a></p>\n\n",
    "link": "https://zhihu.com/question/24889192/answer/29333117"
  },
  {
    "question": "\n如何成为一名web前端工程师？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">我今年应届毕业，大四的时候偶然接触过编程，当时只是把这个当作兴趣来学。前端学了一个月左右，当时看的是慕课网的HTML+CSS+JavaScript，后来因为每天要实验要写毕业论文没有时间学习就搁置了。毕业后找了个跟专业不符的公司，工作跟售后有点类似，现在正式工作大概两个月了，公司很nice，领导nice，团队nice，但是工作内容跟我的性格不符，已经开始打算转行。&lt;br&gt;&lt;br&gt;现在的工作每天的重点就是和客户打交道，很不喜欢。之所以干这么一个自己不喜欢的工作，不是找工作的时候不了解工作的内容，而是之前不了解自己。工作之前以为自己性格开朗，跟所有同学都能有说有笑，自以为是个乐于跟人打交道的人。工作以后才发现自己其实没有那么外向。&lt;br&gt;&lt;br&gt;我能很快地和团队里的人打成一片，但面对客户的时候我总是无所适从，最要命的是客户的电话不断，那种工作思路被打断以及随时要应付客户各种稀奇古怪问题的疲惫让我日渐烦躁。刚开始我以为这是从学校向社会转变必然要经历的痛苦，所以一直默默地鼓励自己要加油，适应了就好。于是每天极不情愿地上班，忙忙碌碌，被各种各样客户消耗，晚上拖着疲惫的身体回到出租屋。煎熬，那段时间真的是比南方六月中午十二点的太阳还要熬人。干什么都不起劲，唯一的感觉就是心累，所有的能量都用来应对工作，根本没有生活可言。&lt;br&gt;&lt;br&gt;事情转机出现在一个月前，那天因为要赶进度，领导特批不用考核电话量，而且刚好没有一个客户主动打电话给我。那天就一个电话也不打一个电话也不接地加班到了晚上八点。回去的路上抬头望天，乌云密布一颗星星也没有，手机里预存的BBC广播说的是欧洲反恐形势严峻，坐了一天脖子有点僵、腰也有点酸。但是原地蹦两蹦、伸伸懒腰，一切的不美好都与我无关，此刻的我内心平和，甚至隐隐有种高三冲刺时的满足与兴奋：对于所谓的未来没有明确的方向，但每天放学看着一道道写过的试题，一摞摞写过的试卷，我很满足，我不彷徨。&lt;br&gt;&lt;br&gt;就是在那天我知道我其实不擅长跟陌生人打交道，特别是那种带着业绩压力的打交道，我喜欢创造东西，遇到了问题喜欢自己动脑解决，我喜欢思考，我是个偏内向的人。了解自己之后第一时间我想到了转行，想到了码农，想到了前端，我喜欢写程序的感觉。&lt;br&gt;&lt;br&gt;现在我已经重拾前端一个月，每天下班从晚上八点看到十二点，已经把&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3school 在线教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的HTML/CSS/HTML5/CSS3刷一遍了，今天花了一天时间做了个小东西，是从这里找的：&lt;a href=&quot;https://www.zhihu.com/question/40149352&quot; class=&quot;internal&quot;&gt;纯html5+css能写出什么惊人的效果？ - 网页设计 (Web Design)&lt;/a&gt;。&lt;br&gt;&lt;br&gt;我准备再花一个月时间把HTML和CSS的基础打好，之后会正式进入JavaScript的学习。目前已经把&lt;a href=&quot;//link.zhihu.com/?target=https%3A//book.douban.com/subject/6038371/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript DOM编程艺术 （第2版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;看过一遍，现在准备看&lt;a href=&quot;//link.zhihu.com/?target=https%3A//book.douban.com/subject/10546125/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript高级程序设计（第3版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，在打好HTML和CSS的基础后，会把上面这两本书中的例子认认真真敲至少一遍。&lt;br&gt;&lt;br&gt;还有很多东西要学，希望各位大大不吝赐教，也希望能和大家一起：仰望星空，脚踏实地。&lt;br&gt;&lt;br&gt;最后附上我今天做的大白：&lt;img src=&quot;https://pic1.zhimg.com/cc408128e5c354f41d3abbd3e0676c50_b.png&quot; data-rawwidth=&quot;414&quot; data-rawheight=&quot;557&quot; class=&quot;content_image&quot; width=&quot;414&quot;&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/cc408128e5c354f41d3abbd3e0676c50_200x112.png\" data-rawwidth=\"414\" data-rawheight=\"557\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/cc408128e5c354f41d3abbd3e0676c50_r.png\">\n我今年应届毕业，大四的时候偶然接触过编程，当时只是把这个当作兴趣来学。前端学了一个月左右，当时看的是慕课网的HTML+CSS+JavaScript，后来因为每天要实验要写毕业论文没有时间学习就搁置了。毕业后找了个跟专业不符的公司，工作跟售后有点类似，现在正…\n\n<a href=\"/question/49577323/answer/116697001\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-14\" target=\"_blank\" href=\"/question/49577323/answer/116697001\">编辑于 2016-08-14</a></p>\n\n",
    "link": "https://zhihu.com/question/49577323/answer/116697001"
  },
  {
    "question": "\n如何评价 TypeScript？\n",
    "author": "王泽",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;怒答。&lt;/p&gt;&lt;br&gt;&lt;p&gt;TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;TypeScript 是 JavaScript 的超集，这意味着他支持所有的 JavaScript 语法。并在此之上对 JavaScript 添加了一些扩展，如 class / interface / module 等。这样会大大提升代码的可阅读性。&lt;/p&gt;&lt;p&gt;强类型语言的优势在于静态类型检查，具体可以参见 &lt;a href=&quot;http://www.zhihu.com/question/28016252/answer/39056940&quot; class=&quot;internal&quot;&gt;flow.js/typescript 这类定义参数类型的意义何在？ - vilicvane 的回答&lt;/a&gt;。概括来说主要包括以下几点： &lt;br&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;1. 静态类型检查 &lt;br&gt;2. IDE 智能提示 &lt;br&gt;3. 代码重构 &lt;br&gt;4. 可读性&lt;/p&gt;&lt;br&gt;&lt;p&gt;TypeScript 虽然是强类型语言，但是如果对象被声明为了 any 类型，就会忽略所有的类型检查。这种灵活的结构保证了他可以在保证整体有强类型检查优势的同时，在一些细节问题上保持弱类型的灵活。&lt;/p&gt;&lt;br&gt;&lt;p&gt;TypeScript 本身是开源的，这意味着开发者可以自由修改其源代码，同时 TypeScript 的架构设计也很优秀，提供了充分的 API 接口方便开发者进行进一步扩展。顺便说一下，TypeScript 编译器本身是用 TypeScript 开发的。构建流程是先用旧版本的 TypeScirptCompiler.js 将新版本的 TypeScript Language 的 TypeScript源代码编译成新的 TypeScriptCompiler.js，听起来很厉害的样子。&lt;/p&gt;&lt;br&gt;&lt;p&gt;由于其开源性，通过 TypeScript Compiler API，开发者可以自己实现编译器（比如添加增量编译和自动编译，大幅提升编译速度），自定义语法检查，以及自定义输出结构等。 由于编译器核心灵活的结构，开发者只需要简单的添加一些代码，就可以在 IDE 中支持 TypeScript 的诸多特性。&lt;/p&gt;&lt;br&gt;&lt;p&gt;顺便打个广告，白鹭引擎是基于 TypeScript 的开源 HTML5 游戏引擎。白鹭引擎的后续版本会利用这些特性不断完善引擎自身。举例，我们的 IDE Egret Wing 就利用了 TypeScript Service API 实现了了代码智能提示等功能。文档生成工具也是通过扩展 TypeScript Compiler API 实现的。&lt;/p&gt;&lt;p&gt;总结：&lt;/p&gt;&lt;br&gt;&lt;p&gt;我认为 TypeScript 是一项非常值得学习的新技术，由于他是 JavaScript 的超集，对 JavaScript 开发者来说入门门槛很低（相对于 Dart / CoffeeScript 等其他 JavaScript 变种来说 ）。&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果一定要找出几个不用 TypeScript的原因。我能想到以下情况：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;需要在 HTML 里大量嵌入 JavaScript 代码，而非 HTML 和 JavaScript 分离。&lt;/li&gt;&lt;li&gt;熟练运用原型继承，不喜欢 class 关键字&lt;/li&gt;&lt;li&gt;项目中大量依赖了第三方 JavaScript 类库，并且这些类库没有 .d.ts 文件&lt;/li&gt;&lt;li&gt;“微软雅黑”&lt;/li&gt;&lt;/ol&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n怒答。 TypeScript 是 JavaScript 的强类型版本。然后在编译期去掉类型和特有语法，生成纯粹的 JavaScript 代码。由于最终在浏览器中运行的仍然是 JavaScript，所以 TypeScript 并不依赖于浏览器的支持，也并不会带来兼容性问题。 TypeScript 是 JavaScript…\n\n<a href=\"/question/21879449/answer/57236840\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-31\" target=\"_blank\" href=\"/question/21879449/answer/57236840\">编辑于 2015-07-31</a></p>\n\n",
    "link": "https://zhihu.com/question/21879449/answer/57236840"
  },
  {
    "question": "\n某些互联网企业招聘前端工程师时为什么要先面试后笔试？\n",
    "author": "Rio",
    "content": "\n\n<textarea hidden class=\"content\">不要给自己找借口逃避了，如果你讲不明白某个概念，你就是没有完全理解它，你对它的认识也就仅仅停留在「知其然」的层面。显然人家要找的不仅仅是「知其然」，还要「知其所以然」的人，而你不是。不要再骗自己说什么「技术高于表达」了。任何团队都要讲合作，如果你无法同别人有效沟通，又如何有效合作呢？对于绝大多数普通人来说，个人的力量是渺茫的，企业也不可能依靠一两个开发者做完所有核心业务。&lt;br&gt;&lt;br&gt;面试是唯一能够快速有效剔除不符合上述两点要求的人的手段。中国人多了去了，哪怕偶尔错过个别真的大牛也无所谓。对团队而言，错过一两个牛人的可能损失远小于误招一个不符合团队需求的人带来的负面影响。&lt;br&gt;&lt;br&gt;假设能力不是问题，而只是无法有效表达的话，这是可以改变的。表达能力不佳是中国学生的普遍现象，主要还是因为平时学校教育中获得的训练太少。中国教育大规模批量生产无法给个人提供足够的锻炼机会【最简单的一点：时间不够用、也没有那么多师资辅导】，所以自己应该在平时多练习。最简单的可以先从写作开始，锻炼养成清晰的思路和合理的语言组织。比如，写博客解释自己感兴趣的技术概念、手段方法等。你提到你做前端开发却不知道 position 取值的具体意义，那么这就是一个很好的机会：先学习各种相关文档，理解后用自己的语言解释给现在的你听。当然，在知乎回答你擅长领域的问题也是非常有效的帮你理清自己思路的办法。&lt;br&gt;&lt;br&gt;进行一段时间的写作训练，做到思路清晰、表达有条理后，可以尝试参加一些演讲活动练习口头表达。多参加这类活动，准备一段二三十分钟的演讲，拿电脑或者手机把自己讲的过程录制下来，回放研究看看哪些地方需要改进，再重复这个过程直到满意为止。有条件的话可以请相关的老师或者同学观看并给出评价。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n不要给自己找借口逃避了，如果你讲不明白某个概念，你就是没有完全理解它，你对它的认识也就仅仅停留在「知其然」的层面。显然人家要找的不仅仅是「知其然」，还要「知其所以然」的人，而你不是。不要再骗自己说什么「技术高于表达」了。任何团队都要讲合作…\n\n<a href=\"/question/21570428/answer/18655996\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-08-31\" target=\"_blank\" href=\"/question/21570428/answer/18655996\">编辑于 2013-08-31</a></p>\n\n",
    "link": "https://zhihu.com/question/21570428/answer/18655996"
  },
  {
    "question": "\n现在互联网创业公司或者中小型互联网科技公司的技术栈是什么？\n",
    "author": "小芋头君",
    "content": "\n\n<textarea hidden class=\"content\">大概讲一下，公司涉及到前端的技术栈大概有两个阶段：传统Web和移动Web。二者的技术栈是完全不同的。&lt;br&gt;&lt;br&gt;去年的时候，我们公司的业务主要是C2C，跟优信车猫之类的类似，前端做的其实就是普通的网站，跟taobao啊之类的没差，对于这种传统的信息量很大的页面，我们是采用最基础的jQuery+少量第三方库+requirejs管理模块+自定义模块的方式来开发+java vm&amp;amp;jstl模板。&lt;br&gt;当时因为团队人很少，很不成熟，绝对不能轻易尝试新技术，从最稳健的做法开始，配合这个技术栈，我们一开始就做了各方面的规范，从开发工具配套到js，css，html都要有规范，模块要有规范，包括划分模块的方式也有规范。&lt;br&gt;我觉得这个业务对应这种选型其实没什么特别大的弊端，后续我们做了一年左右，项目进行良好，没有任何失控的局面，我感觉对于一个高速成长期的公司来说，这已经是很好的评判标准了。&lt;br&gt;&lt;br&gt;后来，我们公司业务转型B2B，主要跑了两种业务：&lt;br&gt;1. 纯移动端。&lt;br&gt;2. 给B用的Web管理后台。&lt;br&gt;&lt;br&gt;其中给B用的管理后台，其实就是大量的表单和报表之类的东西，一开始我们就坚定的选型 AngularJS+后端纯接口 的技术栈。一开始我对AngularJS其实并不太了解，只是在公司某个业务上用过一个月，做了一波调研后觉得在Web上用它来做管理系统还是很适合的，这个选型持续至今，没打算做什么改变，现在整个后台大概有四五个前端在做这块事情，也制定了很多规范，做了很多分享，算是在慢慢走向成熟的路上。&lt;br&gt;&lt;br&gt;纯移动端，技术栈就比较杂了，因为一年前转型的时候，我们的前端团队还没有统一，所以有些选型和代码风格有巨大差异，后来慢慢统一到一个团队后，现在的趋势是三种方案混合：&lt;br&gt;&lt;br&gt;1. 传统的H5，jQuery 2.x 或者zepto，这种页面交互较少，基本用不到太复杂的技术。后端都是纯接口，其实app后端也是我团队做的，nodejs。&lt;br&gt;2. AngularJS做的部分Hybrid应用，客户端里有些很复杂的表单界面，一百多个表单元素那种，而且还有很多业务逻辑，这种我们用AngularJS（ionic）+一些原生模块调用+纯服务端接口，性能是不太好滴，但是在ios里表现稳定，android分辨率高的机器渲染性能不太好。也有不少兼容性问题，这块我们在考虑走原生或者react-native。&lt;br&gt;3. 还有不少移动端的业务，选型是React，例如一些报表系统，重复利用的组件特别多，用React还是很有优势的，而且React有个好处是模块一致性好，容易规范，几个人一起开发项目，规范定的很快，不需要每天跟在屁股后面代码review。目前移动端使用React的系统越来越多，也正在研究flux之类的复杂React工作流的技术，为后续大规模采用做准备。&lt;br&gt;&lt;br&gt;另外，打包工具，我们大部分是用gulp、webpack之类来管理，部分自己用node写（毕竟我们团队还有六七个纯node开发）。&lt;br&gt;&lt;br&gt;最后总结下。&lt;br&gt;前端技术日新月异，我觉得一定不能排斥新技术，否则很容易就落后了。这个事情我面试别人的时候一再强调，对于新技术，一定要大胆研究尝试，到了明年这就不是新技术了，而是一门通用技术。当然，到了后年，可能这门技术就过时了，不过这正是前端的乐趣所在啊。抱着一门稳定的技术啃来啃去，现在反而觉得无聊得慌。&lt;br&gt;&lt;br&gt;对于现在一些热门的，Vue，阿里的Weex，我们都有关注，对React-native我们也深入研究过，并且已经在尝试集成。不过就是感觉人不够啊，要不对这些新技术的推进会更快一些，唉，小公司招人真是太难了。&lt;br&gt;&lt;br&gt;PS：&lt;br&gt;1. 基础还是很重要的，直接搞顶层建筑不搞好底层根基的话，很快就会碰到瓶颈，毕竟都只是解决问题的一个个工具而已。&lt;br&gt;2. 解决问题的思路，编程思想，这些才是最重要的，鼓励大家多想多总结，而不是不断接触新技术新写法，掌握的语言框架多的确是件好事，但是远远不够，这就是你跟那些工作五六年的大牛之间的差距。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n大概讲一下，公司涉及到前端的技术栈大概有两个阶段：传统Web和移动Web。二者的技术栈是完全不同的。 去年的时候，我们公司的业务主要是C2C，跟优信车猫之类的类似，前端做的其实就是普通的网站，跟taobao啊之类的没差，对于这种传统的信息量很大的页面，我…\n\n<a href=\"/question/38603033/answer/77167629\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-17\" target=\"_blank\" href=\"/question/38603033/answer/77167629\">编辑于 2015-12-17</a></p>\n\n",
    "link": "https://zhihu.com/question/38603033/answer/77167629"
  },
  {
    "question": "\n未来是 HTML 5 还是 Flash 的时代？\n",
    "author": "Rainmaker",
    "content": "\n\n<textarea hidden class=\"content\">如图&lt;img data-rawwidth=&quot;440&quot; data-rawheight=&quot;618&quot; src=&quot;https://pic1.zhimg.com/fb3afce3521457ecaae3166cabfb0b08_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic1.zhimg.com/fb3afce3521457ecaae3166cabfb0b08_r.jpg&quot;&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawwidth=\"440\" data-rawheight=\"618\" src=\"https://pic1.zhimg.com/fb3afce3521457ecaae3166cabfb0b08_200x112.jpg\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/fb3afce3521457ecaae3166cabfb0b08_r.jpg\">\n如图\n\n<a href=\"/question/19728465/answer/63964715\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19728465/answer/63964715\">发布于 2015-09-17</a></p>\n\n",
    "link": "https://zhihu.com/question/19728465/answer/63964715"
  },
  {
    "question": "\nangularjs项目需要从一个页面跳转到另一个页面，同时需要传递一个参数。请问大神该通过什么实现？\n",
    "author": "Ye Huang",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;Angular页面传参有多种办法，根据不同用例，我举5种最常见的（请在网页版知乎浏览答案）：&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;PS:  在实际项目中，请参照&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/johnpapa/angular-styleguide&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/johnpapa/ang&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ular-styleguide&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;优化您的代码。&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;1. 基于ui-router的页面跳转传参&lt;/b&gt;&lt;br&gt;(1) 在AngularJS的app.js中用ui-router定义路由，比如现在有两个页面，一个页面（producers.html）放置了多个producers，点击其中一个目标，页面跳转到对应的producer页，同时将producerId这个参数传过去。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'producers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/producers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'views/producers.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ProducersCtrl'&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'producer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/producer/:producerId'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'views/producer.html'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ProducerCtrl'&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;(2) 在producers.html中，定义点击事件，比如ng-click=&quot;toProducer(producerId)&quot;，在ProducersCtrl中，定义页面跳转函数 (使用ui-router的$state.go接口)：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ProducersCtrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toProducer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;producerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'producer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;producerId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;producerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;(3) 在ProducerCtrl中，通过ui-router的$stateParams获取参数producerId，譬如：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ProducerCtrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$stateParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;producerId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$stateParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;producerId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;2. 基于factory的页面跳转传参&lt;/b&gt;&lt;br&gt;Demo: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jsfiddle.net/k3phygpz/869/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;jsfiddle.net/k3phygpz/8&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;69/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;举例：你有N个页面，每个页面都需要用户填选信息，最终引导用户至尾页提交，同时后一个页面要显示前面所有页面填写的信息。这个时候用factory传参是比较合理的选择（下面的代码是一个简化版，根据需求可以不同定制）：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myFactory'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;   \n    &lt;span class=&quot;c1&quot;&gt;//定义参数对象&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;\n    \n    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * 定义传递数据的setter函数&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * @param {type} xxx&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * @returns {*}&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * @private&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_setter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n       &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     \n    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n\n    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * 定义获取数据的getter函数&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * @param {type} xxx&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * @returns {*}&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     * @private&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_getter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// Public APIs&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 在controller中通过调setter()和getter()方法可实现提交或获取参数的功能&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;setter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_setter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_getter&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;3. 基于factory和$rootScope.$broadcast()的传参&lt;/b&gt;&lt;br&gt;(1) 举例：在一个单页中定义了nested views，你希望让所有子作用域都监听到某个参数的变化，并且作出相应动作。比如一个地图应用，某个$state中定义元素input，输入地址后，地图要定位，同时另一个状态下的列表要显示出该位置周边商铺的信息，此时多个$scope都在监听地址变化。&lt;br&gt;PS: $rootScope.$broadcast()可以非常方便的设置全局事件，并让所有子作用域都监听到。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'addressFactory'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$rootScope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 定义所要返回的地址对象   &lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;\n    \n    &lt;span class=&quot;c1&quot;&gt;// 定义components数组，数组包括街道，城市，国家等&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// 定义更新地址函数，通过$rootScope.$broadcast()设置全局事件'AddressUpdated'&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 所有子作用域都能监听到该事件&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateAddress&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n\t&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\t&lt;span class=&quot;nx&quot;&gt;$rootScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$broadcast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AddressUpdated'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n    \n    &lt;span class=&quot;c1&quot;&gt;// 返回地址对象&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}]);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;(2) 在获取地址的controller中：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 动态获取地址，接口方法省略&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;addressLongName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;addressShortName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;cityLongName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;cityShortName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;countryLongName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xxxx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;countryShortName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;postCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xxxxx&lt;/span&gt;         \n&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// 定义地址数组&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;\n\n&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'components'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 将component对象推入$scope.components数组&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 更新addressFactory中的components&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;addressFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateAddress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;(3) 在监听地址变化的controller中：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 通过addressFactory中定义的全局事件'AddressUpdated'监听地址变化&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'AddressUpdated'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n   &lt;span class=&quot;c1&quot;&gt;// 监听地址变化并获取相应数据&lt;/span&gt;\n   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;street&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addressLongName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;city&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cityLongName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n   &lt;span class=&quot;c1&quot;&gt;// 通过获取的地址数据可以做相关操作，譬如获取该地址周边的商铺，下面代码为本人虚构&lt;/span&gt;\n   &lt;span class=&quot;nx&quot;&gt;shopFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getShops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;street&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;city&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shops&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  \n       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;$log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'对不起，获取该位置周边商铺数据出错: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;4. 基于localStorage或sessionStorage的页面跳转传参&lt;/b&gt;&lt;br&gt;注意事项：通过LS或SS传参，一定要监听变量，否则参数改变时，获取变量的一端不会更新。AngularJS有一些现成的WebStorage dependency可以使用，譬如&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/gsklee/ngStorage&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gsklee/ngStorage · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/grevory/angular-local-storage&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;grevory/angular-local-storage · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。下面使用ngStorage来简述传参过程：&lt;br&gt;(1) 上传参数到localStorage - Controller A&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 定义并初始化localStorage中的counter属性&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$storage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// 假设某个factory（此例暂且命名为counterFactory）中的updateCounter()方法&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// 可以用于更新参数counter&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;counterFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateCounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 将新的counter值上传到localStorage中&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$storage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;(2) 监听localStorage中的参数变化 - Controller B&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$watch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'counter'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;oldVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 监听变化，并获取参数的最新值&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;$log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'newVal: '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;    \n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;5. 基于localStorage/sessionStorage和Factory的页面传参&lt;/b&gt;&lt;br&gt;由于传参出现的不同的需求，将不同方式组合起来可帮助你构建低耦合便于扩展和维护的代码。&lt;br&gt;举例：应用的Authentication（授权）。用户登录后，后端传回一个时限性的token，该用户下次访问应用，通过检测token和相关参数，可获取用户权限，因而无须再次登录即可进入相应页面（Automatically Login）。其次所有的APIs都需要在HTTP header里注入token才能与服务器传输数据。此时我们看到token扮演一个重要角色：（a）用于检测用户权限，（b）保证前后端数据传输安全性。以下实例中使用&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/gsklee/ngStorage&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - gsklee/ngStorage: localStorage and sessionStorage done right for AngularJS.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;和&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Narzerus/angular-permission&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - Narzerus/angular-permission: Simple route authorization via roles/permissions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;（1）定义一个名为auth.service.js的factory，用于处理和authentication相关的业务逻辑，比如login，logout，checkAuthentication，getAuthenticationParams等。此处略去其他业务，只专注Authentication的部分。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n    &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'authService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;cm&quot;&gt;/** @ngInject */&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PermissionStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiUserPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user/permission'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authServices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;getAuthenticationParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;checkAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkAuthentication&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n      \n      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n      &lt;span class=&quot;c1&quot;&gt;////////////////&lt;/span&gt;\n\n      &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 定义处理错误函数，私有函数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @param {type} xxx&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @returns {*}&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @private&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       */&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'XHR Failed for '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'.\\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      \n      &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 定义login函数，公有函数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 若登录成功，把服务器返回的token存入localStorage。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @param {type} xxx&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @returns {*}&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @public&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       */&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiLoginUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;baseUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'user/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; \n          \n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'POST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apiLoginUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;\n          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loginFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n          \n        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;c1&quot;&gt;// 将token存入localStorage。&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;setAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;setAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n          \n        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loginFailed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'login()'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      \n      &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 定义logout函数，公有函数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 清除localStorage和PermissionStore中的数据。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @public&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       */&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;PermissionStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clearStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n      &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 定义传递数据的setter函数，私有函数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 用于设置isAuth参数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @param {type} xxx&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @returns {*}&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @private&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       */&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      \n      &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 定义获取数据的getter函数，公有函数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 用于获取isAuth和token参数。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 通过setter和getter函数，可以避免使用第四种方法所提到的$watch变量。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @param {type} xxx&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @returns {*}&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * @public&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       */&lt;/span&gt;      \n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;isAuth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$localStorage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    \n     \n      &lt;span class=&quot;cm&quot;&gt;/* &lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 第一步: 检测token是否有效.&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 若token有效，进入第二步。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       *&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 第二步: 检测用户是否依旧属于admin权限.&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       *&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 只有满足上述两个条件，函数才会返回true，否则返回false。 &lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       * 请参看angular-permission文档了解其工作原理https://github.com/Narzerus/angular-permission/wiki/Managing-permissions&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;       */&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n        \n        &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apiUserPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authorities&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'admin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'checkAuthentication()'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n          \n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;deferred&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;promise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;（2）定义名为index.run.js的文件，用于在应用载入时自动运行权限检测代码。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n  &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n  &lt;span class=&quot;cm&quot;&gt;/** @ngInject */&lt;/span&gt;\n  \n  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * angular-permission version 3.0.x.&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * https://github.com/Narzerus/angular-permission/wiki/Managing-permissions.&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * &lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * 第一步: 运行authService.getAuthenticationParams()函数.&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * 返回true：用户之前成功登陆过。因而localStorage中已储存isAuth和authtoken两个参数。 &lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * 返回false：用户或许已logout，或是首次访问应用。因而强制用户至登录页输入用户名密码登录。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   *&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * 第二步: 运行authService.checkAuthentication()函数.&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * 返回true：用户的token依旧有效，同时用户依然拥有admin权限。因而无需手动登录，页面将自动重定向到admin页面。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   * 返回false：要么用户token已经过期，或用户不再属于admin权限。因而强制用户至登录页输入用户名密码登录。&lt;/span&gt;\n&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;checkPermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;PermissionStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;PermissionStore&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;definePermission&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ADMIN'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;（3）定义名为authInterceptor.service.js的文件，用于在所有该应用请求的HTTP requests的header中注入token。关于AngularJS的Interceptor，请参看&lt;a href=&quot;//link.zhihu.com/?target=https%3A//docs.angularjs.org/api/ng/service/%2524http&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;AngularJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n&lt;span class=&quot;s1&quot;&gt;'use strict'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n\n    &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'authInterceptorService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authInterceptorService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;cm&quot;&gt;/** @ngInject */&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authInterceptorService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$injector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'authService'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n    \n      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authInterceptorServices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;responseError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseError&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n      \n      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authInterceptorServices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n      \n      &lt;span class=&quot;c1&quot;&gt;////////////////&lt;/span&gt;\n      \n      &lt;span class=&quot;c1&quot;&gt;// 将token注入所有HTTP requests的headers。&lt;/span&gt;\n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getAuthenticationParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;authParams&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;authtoken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n      \n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n      \n      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;authService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n          &lt;span class=&quot;nx&quot;&gt;$location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/login'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rejection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  \n      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>Angular页面传参有多种办法，根据不同用例，我举5种最常见的（请在网页版知乎浏览答案）：</b> <b> PS: 在实际项目中，请参照<a href=\"//link.zhihu.com/?target=https%3A//github.com/johnpapa/angular-styleguide\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/johnpapa/ang</span><span class=\"invisible\">ular-styleguide</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>优化您的代码。 </b> <b>1. 基于ui-router的页面跳转传参</b> (1) 在AngularJS的app.js中用ui-router定义路由，比如现在有两个…\n\n<a href=\"/question/33565135/answer/69651500\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-10-27\" target=\"_blank\" href=\"/question/33565135/answer/69651500\">编辑于 2016-07-25</a></p>\n\n",
    "link": "https://zhihu.com/question/33565135/answer/69651500"
  },
  {
    "question": "\n前端和后台哪个工作更累？\n",
    "author": "赵劼",
    "content": "\n\n<textarea hidden class=\"content\">前台最累。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n前台最累。\n\n<a href=\"/question/28201682/answer/39829694\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28201682/answer/39829694\">发布于 2015-02-15</a></p>\n\n",
    "link": "https://zhihu.com/question/28201682/answer/39829694"
  },
  {
    "question": "\nLABjs、RequireJS、SeaJS 哪个最好用？为什么？\n",
    "author": "李翌",
    "content": "\n\n<textarea hidden class=\"content\">------------------------------更新于2014.6.21------------------------------&lt;br&gt;&lt;br&gt;因为最近在给InfoQ写一篇投稿，关于浏览器资源加载优化的文章，&lt;br&gt;又因为文章经过玉伯的审核，于是和他有了一些交流，&lt;br&gt;发现原帖的部分内容是不够准确甚至是错误的（很遗憾为什么没有人在这里给我指出来……）。&lt;br&gt;&lt;br&gt;关于requirejs和seajs的正确的比较都融入在我发表在InfoQ的这篇文章上：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.infoq.com/cn/articles/browser-resource-loading-optimization&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;让我们再聊聊浏览器资源加载优化&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  或者移步到我的个人博客（这里的排版会比较好看- -）&lt;a href=&quot;//link.zhihu.com/?target=http%3A//qingbob.com/let-us-talk-about-resource-load/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;让我们再聊聊浏览器资源加载优化&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;原帖就不删除了，大家可以对比一下错误的原帖和正确的解读应该是怎样的&lt;br&gt;&lt;br&gt;-------------------------------以下是原帖-------------------------------------&lt;br&gt;&lt;br&gt;个人认为玉伯聊的比较抽象和宏观，比如标准，概念，机制，社区等。最近一直在做性能优化方面的工作，就自己的经验谈谈require.js和sea.js的异同。这两个加载器和标准没有优劣之分，这里指出的只是差别。具体还是要根据实际情况进行选择&lt;br&gt;&lt;br&gt;在开始之前我已经假设你对requirejs与seajs语法已经基本熟悉了，如果还没有，请移步这里：&lt;br&gt;&lt;br&gt;- CMD标准：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/cmdjs/specification/blob/master/draft/module.md&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/cmdjs/specif&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ication/blob/master/draft/module.md&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;- AMD标准：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/amdjs/amdjs-api/blob/master/AMD.md&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/amdjs/amdjs-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;api/blob/master/AMD.md&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;对比require.js与sea.js，某种意义上说就是对比AMD标准与CMD标准，个人认为两个类库在模块和factory的书写上其实无太大差异，差异在于&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;模块的加载&lt;br&gt;&lt;/li&gt;&lt;li&gt;factory函数的执行。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;这里提前说一句，如果你的网站再上线前习惯把所有的模块打包压缩，其实requirejs和seajs并无太大差别。&lt;br&gt;&lt;br&gt;## 加载差异&lt;br&gt;&lt;br&gt;这一小节请允许我照搬一个帖子&lt;br&gt;&lt;br&gt;玉伯转过的一个&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.douban.com/note/283566440/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SeaJS与RequireJS最大的区别&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这个帖子原始(不包括后记)的结论是&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;RequireJS你坑的我一滚啊, 这也就是为什么我不喜欢RequireJS的原因, 坑隐藏得太深了.&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;SeaJS是异步加载模块的没错, 但执行模块的顺序也是严格按照模块在代码中出现(require)的顺序, 这样才更符合逻辑吧! 你说呢, RequireJS?&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;而RequireJS会先尽早地执行(依赖)模块, 相当于所有的require都被提前了, 而且模块执行的顺序也不一定100%就是先mod1再mod2&lt;br&gt;因此你看到执行顺序和你预想的完全不一样! 颤抖吧~ RequireJS!&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;因为他认为他的测试代码&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'require module: main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./mod1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;mod1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./mod2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;mod2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n            &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hello main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;运行结果应该是顺序的(sea.js下的结果)：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod1&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod1&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod2&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod2&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;helo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;而不应该是异步的require.js下：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod2&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod1&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod1&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod2&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;helo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;main&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;但问题是，为什么&quot;执行模块的顺序&quot;应该是&quot;严格按照模块在代码中出现(require)的顺序&quot;? 并且&quot;这样才更符合逻辑吧&quot;?&lt;br&gt;&lt;br&gt;如果他以seajs的运行结果来要求requirejs，那requirejs肯定吃亏了。AMD标准从来都没有规定模块的加载顺序，它只是需要保证：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;The dependencies must be resolved prior to the execution of the module factory function, and the resolved values should be passed as arguments to the factory function with argument positions corresponding to indexes in the dependencies array.&lt;/blockquote&gt;&lt;br&gt;评论下方有人(jockchou)的回复更切中要害：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;我个人感觉requirejs更科学，所有依赖的模块要先执行好。如果A模块依赖B。当执行A中的某个操doSomething()后，再去依赖执行B模块require('B');如果B模块出错了，doSomething的操作如何回滚？ &lt;br&gt;很多语言中的import, include, useing都是先将导入的类或者模块执行好。如果被导入的模块都有问题，有错误，执行当前模块有何意义？ &lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;楼主说requirejs是坑，是因为你还不太理解AMD“异步模块”的定义，被依赖的模块必须先于当前模块执行，而没有依赖关系的模块，可以没有先后。&lt;/blockquote&gt;&lt;br&gt;&lt;blockquote&gt;想像一下factory是个模块工厂吧，而依赖dependencies是工厂的原材料，在工厂进行生产的时候，是先把原材料一次性都在它自己的工厂里加工好，还是把原材料的工厂搬到当前的factory来什么时候需要，什么时候加工，哪个整体时间效率更高？显然是requirejs，requirejs是加载即可用的。为了响应用户的某个操作，当前工厂正在进行生产，当发现需要某种原材料的时候，突然要停止生产，去启动原材料加工，这不是让当前工厂非常焦燥吗？ &lt;/blockquote&gt;&lt;br&gt;这样看来其实两者并无太大差别。&lt;br&gt;&lt;br&gt;&lt;b&gt;不&lt;/b&gt;&lt;br&gt;&lt;br&gt;但考虑这样一种业务情况，考虑某一个功能只对登陆用户开放，这样的话requirejs提前把模块加载是否有必要？(因为来到你页面的用户到离开也不会登陆)。&lt;br&gt;&lt;br&gt;这是非常实际的问题，一个页面可以有非常多的功能，比如登陆、分享、留言、收藏……但不一定每一个来到页面的用户都会使用这些功能，如果都作为页面模块的依赖提前加载的话，对页面一定是一个不小的负担。&lt;br&gt;&lt;br&gt;但seajs可以即用即加载，比如代码可以这么写&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;user_login&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;login_feature_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    \n\n    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;show_module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;我同意这句话：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;很多语言中的import, include, useing都是先将导入的类或者模块执行好。如果被导入的模块都有问题，有错误，执行当前模块有何意义？ &lt;/blockquote&gt;&lt;br&gt;但个人觉得考虑到页面的性能，可以考虑将要导入模块的懒加载(Lazy load)。&lt;br&gt;&lt;br&gt;你会不会觉得我上面说的懒加载是一种天方夜谭？&lt;br&gt;&lt;br&gt;但然不是，你去看看现在的人人网个人主页看看&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/80f2b165bfa53a6486a83185572055ae_b.jpg&quot; data-rawwidth=&quot;165&quot; data-rawheight=&quot;212&quot; class=&quot;content_image&quot; width=&quot;165&quot;&gt;&lt;br&gt;&lt;br&gt;图中标注的“与我相关”、“相册”、“分享”都是在点击之后才加载对应的模块&lt;br&gt;&lt;br&gt;Facebook的情况更为严重，不仅要考虑内部不同团队的功能模块，还要考虑第三方的功能模块。&lt;br&gt;&lt;br&gt;早在09年，他们就是用了一套静态资源管理方案(Static Resource Management)，用于管理一个功能所需要的js/css静态文件：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/c38917f3d4c612b1789c7f54a12423a0_b.jpg&quot; data-rawwidth=&quot;548&quot; data-rawheight=&quot;347&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;548&quot; data-original=&quot;https://pic1.zhimg.com/c38917f3d4c612b1789c7f54a12423a0_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;简单来说，就是由页面上有没有功能所需的html片段，来决定是否加载和打包功能所需的js与style。也就是说静态文件需要通过html“声明”之后才可用。&lt;br&gt;&lt;br&gt;具体可以参考这里：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//velocityconf.com/velocity2009/public/schedule/detail/7611&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Frontend Performance Engineering in Facebook : Velocity 2009&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;## 执行差异&lt;br&gt;&lt;br&gt;为了增强对比，我们在定义依赖模块的时候，故意让它的factory函数要执行相当长的时间，比如1秒：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// dep_A.js定义如下，dep_B/dep_C定义同理&lt;/span&gt;\n\n&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    \n    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EXE_TIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n    &lt;span class=&quot;c1&quot;&gt;// window.EXE_TIME = 1；此处会连续执行1s&lt;/span&gt;\n\n    &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// main中同时加载三个相同模块&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;//require.js:&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dep_A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dep_B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dep_C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n\n\n&lt;span class=&quot;c1&quot;&gt;//sea.js:&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod_A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dep_A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod_B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dep_B&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mod_C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dep_C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;requirejs加载的瀑布图：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/88ee0a98b4294bfccd9a9e59513374cd_b.jpg&quot; data-rawwidth=&quot;822&quot; data-rawheight=&quot;383&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;822&quot; data-original=&quot;https://pic2.zhimg.com/88ee0a98b4294bfccd9a9e59513374cd_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;seajs加载的瀑布图：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/1461f4d41d683c54727a4ff6c8c222c9_b.jpg&quot; data-rawwidth=&quot;795&quot; data-rawheight=&quot;324&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;795&quot; data-original=&quot;https://pic2.zhimg.com/1461f4d41d683c54727a4ff6c8c222c9_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;如果把一个模块的执行拆分为执行define和执行factory函数的话(对requirejs和seajs都适用)，从上图可以看出：&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;requirejs：一个模块的factory函数执行是紧跟随在define(也就是Evaluate Script脚本模块文件)之后&lt;/li&gt;&lt;li&gt;seajs: 执行一个模块的factory函数需要等待所有模块define完毕。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;重点不是这些，我想说的是我在seajs中看到一个闪光点。&lt;br&gt;&lt;br&gt;在上面一节中我提到了懒加载模块，在加载模块的时候需要1. 临时请求模块文件 ; 2. 执行factory函数。&lt;br&gt;&lt;br&gt;但如果我们在载入页面时仅仅是执行把懒加载的模块的define(从上面两个图可以看出define的代价是非常小的)，而设法不执行factory函数。&lt;br&gt;&lt;br&gt;那么在真正需要懒加载的时候只要执行factory函数即可。这样不是能够让模块响应更及时，更靠谱？&lt;br&gt;&lt;br&gt;这是可以实现的。但技术细节就不赘述了。这可以作为优化模块加载的一种方案。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/c38917f3d4c612b1789c7f54a12423a0_200x112.jpg\" data-rawwidth=\"548\" data-rawheight=\"347\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/c38917f3d4c612b1789c7f54a12423a0_r.jpg\">\n------------------------------更新于2014.6.21------------------------------ 因为最近在给InfoQ写一篇投稿，关于浏览器资源加载优化的文章， 又因为文章经过玉伯的审核，于是和他有了一些交流， 发现原帖的部分内容是不够准确甚至是错误的（很遗憾为什…\n\n<a href=\"/question/20342350/answer/24718689\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-04-20\" target=\"_blank\" href=\"/question/20342350/answer/24718689\">编辑于 2014-06-21</a></p>\n\n",
    "link": "https://zhihu.com/question/20342350/answer/24718689"
  },
  {
    "question": "\n在前端开发中，页面渲染指什么？\n",
    "author": "阿安",
    "content": "\n\n<textarea hidden class=\"content\">废话少说，先来看个图：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/c582b0e4d8034f9994b174d3a5cd4056_b.jpg&quot; class=&quot;content_image&quot;&gt;&lt;br&gt;从上面这个图中，我们可以看到那么几个事：&lt;br&gt;&lt;br&gt;1）浏览器会解析三个东西：&lt;br&gt;一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。&lt;br&gt;CSS，解析CSS会产生CSS规则树。&lt;br&gt;Javascript，脚本，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.&lt;br&gt;&lt;br&gt;2）解析完成后，浏览器引擎会通过DOM Tree 和 CSS Rule Tree 来构造 Rendering Tree。注意：&lt;br&gt;Rendering Tree 渲染树并不等同于DOM树，因为一些像Header或display:none的东西就没必要放在渲染树中了。&lt;br&gt;CSS 的 Rule Tree主要是为了完成匹配并把CSS Rule附加上Rendering Tree上的每个Element。也就是DOM结点。也就是所谓的Frame。&lt;br&gt;然后，计算每个Frame（也就是每个Element）的位置，这又叫layout和reflow过程。&lt;br&gt;&lt;br&gt;3）最后通过调用操作系统Native GUI的API绘制。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;DOM解析&lt;/b&gt;&lt;br&gt;&lt;br&gt;HTML的DOM Tree解析如下：&lt;br&gt;&lt;br&gt;&amp;lt;html&amp;gt;&lt;br&gt;&amp;lt;html&amp;gt;&lt;br&gt;&amp;lt;head&amp;gt;&lt;br&gt;    &amp;lt;title&amp;gt;Web page parsing&amp;lt;/title&amp;gt;&lt;br&gt;&amp;lt;/head&amp;gt;&lt;br&gt;&amp;lt;body&amp;gt;&lt;br&gt;    &amp;lt;div&amp;gt;&lt;br&gt;        &amp;lt;h1&amp;gt;Web page parsing&amp;lt;/h1&amp;gt;&lt;br&gt;        &amp;lt;p&amp;gt;This is an example Web page.&amp;lt;/p&amp;gt;&lt;br&gt;    &amp;lt;/div&amp;gt;&lt;br&gt;&amp;lt;/body&amp;gt;&lt;br&gt;&amp;lt;/html&amp;gt;&lt;br&gt;&lt;br&gt;上面这段HTML会解析成这样：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/32a083371f69b044cedf3f93eb86d59a_b.jpg&quot; class=&quot;content_image&quot;&gt;下面是另一个有SVG标签的情况。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/f116250dc3bf4cbd3ef702f9f1885be4_b.jpg&quot; class=&quot;content_image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;CSS解析&lt;/b&gt;&lt;br&gt;&lt;br&gt;CSS的解析大概是下面这个样子（下面主要说的是Gecko也就是Firefox的玩法），假设我们有下面的HTML文档：&lt;br&gt;&lt;br&gt;&amp;lt;doc&amp;gt;&lt;br&gt;&amp;lt;title&amp;gt;A few quotes&amp;lt;/title&amp;gt;&lt;br&gt;&amp;lt;para&amp;gt;&lt;br&gt;  Franklin said that &amp;lt;quote&amp;gt;&quot;A penny saved is a penny earned.&quot;&amp;lt;/quote&amp;gt;&lt;br&gt;&amp;lt;/para&amp;gt;&lt;br&gt;&amp;lt;para&amp;gt;&lt;br&gt;  FDR said &amp;lt;quote&amp;gt;&quot;We have nothing to fear but &amp;lt;span&amp;gt;fear itself.&amp;lt;/span&amp;gt;&quot;&amp;lt;/quote&amp;gt;&lt;br&gt;&amp;lt;/para&amp;gt;&lt;br&gt;&amp;lt;/doc&amp;gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;于是DOM Tree是这个样子：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/4587dc073df85888093ae7457cd5bdb7_b.jpg&quot; class=&quot;content_image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;然后我们的CSS文档是这样的：&lt;br&gt;&lt;br&gt; /* rule 1 */ doc { display: block; text-indent: 1em; }&lt;br&gt;/* rule 2 */ title { display: block; font-size: 3em; }&lt;br&gt;/* rule 3 */ para { display: block; }&lt;br&gt;/* rule 4 */ [class=&quot;emph&quot;] { font-style: italic; }&lt;br&gt;&lt;br&gt;&lt;br&gt;于是我们的CSS Rule Tree会是这个样子：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/9ac0b728bc733bf1c40e8e4dff9e48a9_b.jpg&quot; class=&quot;content_image&quot;&gt;&lt;br&gt;&lt;br&gt;注意，图中的第4条规则出现了两次，一次是独立的，一次是在规则3的子结点。所以，我们可以知道，建立CSS Rule Tree是需要比照着DOM Tree来的。CSS匹配DOM Tree主要是从右到左解析CSS的Selector，好多人以为这个事会比较快，其实并不一定。关键还看我们的CSS的Selector怎么写了。&lt;br&gt;&lt;br&gt;注意：CSS匹配HTML元素是一个相当复杂和有性能问题的事情。所以，你就会在N多地方看到很多人都告诉你，DOM树要小，CSS尽量用id和class，千万不要过渡层叠下去，……&lt;br&gt;&lt;br&gt;通过这两个树，我们可以得到一个叫Style Context Tree，也就是下面这样（把CSS Rule结点Attach到DOM Tree上）：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/5981bd1602d6d411f36480916becd569_b.jpg&quot; class=&quot;content_image&quot;&gt;所以，Firefox基本上来说是通过CSS 解析 生成 CSS Rule Tree，然后，通过比对DOM生成Style Context Tree，然后Firefox通过把Style Context Tree和其Render Tree（Frame Tree）关联上，就完成了。注意：Render Tree会把一些不可见的结点去除掉。而Firefox中所谓的Frame就是一个DOM结点，不要被其名字所迷惑了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/365767515fbfbfcdc6551d33dfa04655_b.jpg&quot; class=&quot;content_image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;注：Webkit不像Firefox要用两个树来干这个，Webkit也有Style对象，它直接把这个Style对象存在了相应的DOM结点上了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;渲染&lt;/b&gt;&lt;br&gt;&lt;br&gt;渲染的流程基本上如下（黄色的四个步骤）：&lt;br&gt;计算CSS样式&lt;br&gt;构建Render Tree&lt;br&gt;Layout – 定位坐标和大小，是否换行，各种position, overflow, z-index属性 ……&lt;br&gt;正式开画&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/bef6d6a4b59014367c124613d5779a10_b.jpg&quot; class=&quot;content_image&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;选自：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//coolshell.cn/articles/9666.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;coolshell.cn/articles/9&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;666.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n废话少说，先来看个图： 从上面这个图中，我们可以看到那么几个事： 1）浏览器会解析三个东西： 一个是HTML/SVG/XHTML，事实上，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。 CSS，解析CSS会产生CSS规则树。 Javascript，脚本，…\n\n<a href=\"/question/20117417/answer/22359160\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-02-11\" target=\"_blank\" href=\"/question/20117417/answer/22359160\">编辑于 2014-02-11</a></p>\n\n",
    "link": "https://zhihu.com/question/20117417/answer/22359160"
  },
  {
    "question": "\n如何看待 React is a tax Facebook levies on startup 的说法？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">声明下，每次回答 React 相关的问题，即使我答案里一个字都没提到 Vue，也总会有些人不分场合来纠结 Vue 哪里不如 React，评论里的不会再回了，爱用 React 您就继续用呗，没人逼你用 Vue &lt;br&gt;&lt;br&gt;¯\\_(ツ)_/¯&lt;br&gt;&lt;br&gt;---&lt;br&gt;&lt;br&gt;&lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt; 邀请我来答这个问题，就是想看我黑 React 嘛，真是太坏了。&lt;br&gt;&lt;br&gt;并不完全认同这篇文章，但是原文里面很重要的一点就是 startup 这个场景。&lt;br&gt;&lt;br&gt;楼下有人说，咱们是工程师啊，你得有追求啊，你得写正确、可维护、可靠、可复用的代码啊！道理我都懂，可是你有没有这个时间去做这样的事是个问题。&lt;br&gt;&lt;br&gt;Facebook 的工程师，工资福利待遇好，公司股价蒸蒸日上，人又多，当然可以（也必须）精雕细作。很多基层工程师可能一个人就只负责几个组件，万一走人了还要人来接摊，确保正确性和可维护性自然是最优先事项。&lt;br&gt;&lt;br&gt;换成那些两三个人的 startup，很多创始人可能原本就不是搞前端的，为了做个 MVP 不得不撸着袖子现学现卖，这种时候早一天出 demo，早一天有用户，早一天融到钱才是关键，谁来管你代码有多正确、可靠、可维护？当然不是说就一点也不管这些了，但是这时候这些东西是有代价的：在早期 startup 这个场景限定下，这是一个 tradeoff 而不是 no-brainer。&lt;br&gt;&lt;br&gt;我认为 React 栈的生产力曲线是慢热的，在到达高生产力之前有一段相当长的低谷。为什么这么说呢？如果不是已经有一个已经熟悉 React 栈的人带路，你面临两个选择：1. 一开始就试图吃下整个栈，研究各种 boilerplate，筛选出合适的部件，并且把它们组合起来。2. 从最基本的 React 本身用起，遇到什么问题再去找对应方案。但不管走哪条路线，都不是很轻松的事情。这个低谷期对于一些 startup 来说可能就是一个致命的问题，也就是节奏不合拍。很多已经越过低谷、并且不理解 startup 初期那种节奏的人，自然会站着说话不腰疼地强调一旦你精通了以后这个栈是多么多么好，但这就像『何不食肉糜』- 对于一个 startup 来说，如果你活不到那一天，这些好处都是白搭。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n声明下，每次回答 React 相关的问题，即使我答案里一个字都没提到 Vue，也总会有些人不分场合来纠结 Vue 哪里不如 React，评论里的不会再回了，爱用 React 您就继续用呗，没人逼你用 Vue ¯\\_(ツ)_/¯ --- <a data-hash=\"3ec3b166992a5a90a1083945d2490d38\" href=\"//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38\" class=\"member_mention\" data-editable=\"true\" data-title=\"@贺师俊\" data-hovercard=\"p$b$3ec3b166992a5a90a1083945d2490d38\">@贺师俊</a> 邀请我来答这个问题，就是想看我黑 Re…\n\n<a href=\"/question/49297106/answer/115399492\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-06\" target=\"_blank\" href=\"/question/49297106/answer/115399492\">编辑于 2016-08-09</a></p>\n\n",
    "link": "https://zhihu.com/question/49297106/answer/115399492"
  },
  {
    "question": "\n如何评价百度前端技术学院(IFE)2016春季班?\n",
    "author": "祖明",
    "content": "\n\n<textarea hidden class=\"content\">作为整个流程的主要制定者，报名组队流程是有一些自己的考虑，以后有机会再细说，流程体验上自己也觉得办得不是那么漂亮。&lt;br&gt;&lt;br&gt;但是，哪商业化了啊？一毛钱收入没有好不好，ife的官网托管到百度云上还是自己掏的腰包，而且做这事儿跟我和我的团队的KPI半毛钱关系都没有好不好！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n作为整个流程的主要制定者，报名组队流程是有一些自己的考虑，以后有机会再细说，流程体验上自己也觉得办得不是那么漂亮。 但是，哪商业化了啊？一毛钱收入没有好不好，ife的官网托管到百度云上还是自己掏的腰包，而且做这事儿跟我和我的团队的KPI半毛钱关…\n\n<a href=\"/question/41030595/answer/90659653\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/41030595/answer/90659653\">发布于 2016-03-14</a></p>\n\n",
    "link": "https://zhihu.com/question/41030595/answer/90659653"
  }
]