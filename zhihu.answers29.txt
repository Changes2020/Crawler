[
  {
    "question": "\n前端 Leader 是如何带领团队和建设团队文化的？\n",
    "author": "rank",
    "content": "\n\n<textarea hidden class=\"content\">谢邀。&lt;br&gt;&lt;br&gt;正好我最近对这方面进行系统总结，那我根据题主提的 3 个点简单谈谈我的看法。&lt;br&gt;&lt;br&gt;我的个人资料：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA5NDY0ODkxNA%3D%3D%26mid%3D202787061%26idx%3D1%26sn%3D752d54d5605bffb49c1e24ae9dadbd57%23rd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;跨界码农&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;到目前为止，带过大公司的业务大前端团队、创业公司大前端负责人、大公司基础团队负责人，现在 客户端/前端/全栈的基础团队 Leader，同时兼顾技术规划和写部分代码。&lt;br&gt;&lt;br&gt;&lt;b&gt;一. 愿景.&lt;/b&gt;&lt;br&gt;&lt;br&gt;先说愿景，是团队高度问题。主要取决于 2 点：&lt;br&gt;&lt;br&gt;1）公司/部门影响力。&lt;br&gt;&lt;br&gt;&lt;b&gt;愿景是站在公司和部门的肩膀上看，这也是起点。&lt;/b&gt;所以，在做团队之前，先看大部门、或公司定位。试想一个小的创业公司现在和你谈改变世界的愿景，多数人应聘的人怎么看？而如果是 Google 和 Facebook 呢？&lt;br&gt;&lt;br&gt;大公司较小公司有优势，不赘述。&lt;br&gt;&lt;br&gt;2）Leader 的视野和高度。&lt;br&gt;&lt;br&gt;前端 Leader 如果要做好团队， &lt;b&gt;Leader 只懂「前端」&lt;/b&gt;（局限的认为是 HTML/CSS/JavaScript）&lt;b&gt;技能，那么一开始就「输」在起跑线上了。&lt;/b&gt;&lt;br&gt;&lt;br&gt;团队的高度一般是随创立 Leader 定性，高度只定位在技能上，只能天天看 ECMAScript 规范与 W3C 草案，显摆发现了某些新特性为乐。&lt;br&gt;&lt;br&gt;从职业和技术角度来看「前端工程师」，&lt;b&gt;「前端」是专业领域的定语，「工程师」才是核心。&lt;/b&gt;愿景是技术理想能到达多高，而不是变成知识库。这点我以前就在团队中提到：&lt;br&gt;&lt;blockquote&gt;技术能达到多高，不是因为技术难度，而是取决于对待技术的态度与源自内心的理想；&lt;/blockquote&gt;所以团队 Leader 除了前端视角外，应多了解后端、客户端、产品、运营等多方面知识面扩展自己的思维，并多与横向团队的 Leader 学习交流。让自己多些工程师的行业视野与全局视角。&lt;br&gt;&lt;br&gt;Leader 能力足够牛逼，改变世界、把弯路走直的例子比比皆是，不展开。&lt;br&gt;&lt;br&gt;Leader 除横向看团队在公司所处位置外，还要看在团队实现阶段目标后给大家争取多少福利。加多少工资，跳槽后能拿多少钱，是否实现自身价值。简单粗暴点的标准是看是否有公司从你这抢人作为判断依据，让你的团队变得牛逼。&lt;br&gt;&lt;br&gt;总结「愿景」部分对 Leader 的要求用《三体》的话概括：&lt;b&gt;能升维到全局思考来画饼&lt;/b&gt;。&lt;br&gt;&lt;br&gt;愿景的规划能力，这是 Leadership 要义之一。&lt;br&gt;&lt;br&gt;&lt;b&gt;二. 文化.&lt;/b&gt;&lt;br&gt;&lt;br&gt;这部分也只简单回答 2 个问题：&lt;br&gt;&lt;br&gt;1）团队文化有什么用。&lt;br&gt;&lt;br&gt;团队文化既虚也实，不是一开始必须先有，而是长年积累而成。&lt;br&gt;&lt;b&gt;是遇到冲突时解决问题的根基与底线。&lt;/b&gt;&lt;br&gt;&lt;br&gt;如果说团队文化包括价值观，那么「价值观」则是团队的基线。&lt;br&gt;&lt;br&gt;觉得话虚那我就举实际例子：&lt;br&gt;&lt;ul&gt;&lt;li&gt;其他人都 10 点上班，就是有人 12 点才到，你怎么看？&lt;br&gt;&lt;/li&gt;&lt;li&gt;技术人材都有自己的个性，就是不合群，这样的人你要是不要？&lt;br&gt;&lt;/li&gt;&lt;li&gt;有人喜欢传播负能量，你又怎么看？&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;这几个问题答案都与文化有关。&lt;br&gt;&lt;br&gt;2）团队文化与什么相关。&lt;br&gt;&lt;br&gt;与 Leader 有关，&lt;b&gt;特别是创始人 Founder 有关&lt;/b&gt;。VP 受 CEO 影响，CEO 受 Founder 影响。团队文化和 Leader 的脾性、心态、经验、甚至人品昔昔相关。大到 BAT 每个公司形成下来的做事方法论，小到一个业务线的具体某一件小事，无不与 Leader 创始人相关，如果 Founder 缺失，文化缺失的可能性也很大。&lt;br&gt;&lt;br&gt;试想：BAT 任何一家公司的创始人离开，在公司文化上意味着什么？&lt;br&gt;&lt;br&gt;再举一个细微例子：&lt;br&gt;通常来说一般一个人在一个工作岗位，即使有挑战，2 年差不多也快到一个瓶颈，如果 Leader 对这件事没有认知，工程师在遇到瓶颈，转岗或想离职。&lt;br&gt;&lt;ul&gt;&lt;li&gt;大多团队 Leader 都会不管三七二十一，先留人再说。&lt;br&gt;&lt;/li&gt;&lt;li&gt;也有 Leader 和他 review 为何遇到瓶颈，如果真不合适主动让他或帮他寻找到更合适的工作岗位。&lt;/li&gt;&lt;/ul&gt;这是两种不同 Leader 的风格。&lt;br&gt;&lt;br&gt;这也是上述文化例子我不予回答的原因，每个 Leader 创立的团队文化都有所不同，无对错之分。不是自己不想做好，而是当时觉得这么做合适，而若干年后觉得当时的做法不当。这很正常，人生阅历就是这么一步步坑踩过来的。这就是所谓做 Leader 的经验。&lt;br&gt;&lt;br&gt;小结，&lt;b&gt;「团队文化」就像一个人的性格，也随 Leader &amp;amp; Founder 性格，有很深的个人魅力烙印&lt;/b&gt;。建设与沉淀它需要你有坚强的小心脏，总会有人不吃你这套，所以可能也会得罪人；更需要自己以身作则践行团队文化。&lt;br&gt;&lt;br&gt;&lt;b&gt;三. 执行.&lt;/b&gt;&lt;br&gt;&lt;br&gt;这点最为复杂，因人而异，并不是别人走的路合适自己。我觉得掌握思考的核心就是每个 Leader 都可以用老板的角度来思考 —— 能宏观进行全局思考，有方向的判断力；在微观上有敏锐的洞察力发现执行中的问题。&lt;br&gt;&lt;br&gt;我自己的经验吧，贴几篇原来写的：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA5NDY0ODkxNA%3D%3D%26mid%3D200675256%26idx%3D1%26sn%3D99c5db27492ef094f1f7cebb6e191015%23rd&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;mp.weixin.qq.com/s?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;__biz=MzA5NDY0ODkxNA==&amp;amp;mid=200675256&amp;amp;idx=1&amp;amp;sn=99c5db27492ef094f1f7cebb6e191015#rd&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA5NDY0ODkxNA%3D%3D%26mid%3D200826061%26idx%3D1%26sn%3D397668dfe0e511c382bfc1dbcbb29797%23rd&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;mp.weixin.qq.com/s?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;__biz=MzA5NDY0ODkxNA==&amp;amp;mid=200826061&amp;amp;idx=1&amp;amp;sn=397668dfe0e511c382bfc1dbcbb29797#rd&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA5NDY0ODkxNA%3D%3D%26mid%3D200835579%26idx%3D1%26sn%3Db3042aaf837b16c01c4ecccd608aaa5b%23rd&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;mp.weixin.qq.com/s?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;__biz=MzA5NDY0ODkxNA==&amp;amp;mid=200835579&amp;amp;idx=1&amp;amp;sn=b3042aaf837b16c01c4ecccd608aaa5b#rd&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;最后.&lt;/b&gt;&lt;br&gt;&lt;br&gt;我的经验告诉我（这不一定是对的）从工程师转成 Leader，一开始有很长时间会不适应，在乎得失：&lt;br&gt;&lt;ul&gt;&lt;li&gt;在乎工程师出风头，你没有；&lt;br&gt;&lt;/li&gt;&lt;li&gt;在乎时间需要花在管理上，而不在技术上，以后找工作可能相对技术会难一些；&lt;br&gt;&lt;/li&gt;&lt;li&gt;在乎为什么没有纯技术升职快；&lt;/li&gt;&lt;/ul&gt;等等问题。&lt;br&gt;&lt;br&gt;其实到最后都是殊途同归的，甚至到后期做的事都是类似。再贴一次这张图。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/912da4e7fc3b3f395df0a160cbff8493_b.jpg&quot; data-rawwidth=&quot;586&quot; data-rawheight=&quot;446&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;586&quot; data-original=&quot;https://pic4.zhimg.com/912da4e7fc3b3f395df0a160cbff8493_r.jpg&quot;&gt;&lt;br&gt;最后，Leader  是不限于前端的，所以以上经验我觉得在其他专业领域也可适用，只不过所需专业和行业视角不一样。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/912da4e7fc3b3f395df0a160cbff8493_200x112.jpg\" data-rawwidth=\"586\" data-rawheight=\"446\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/912da4e7fc3b3f395df0a160cbff8493_r.jpg\">\n谢邀。 正好我最近对这方面进行系统总结，那我根据题主提的 3 个点简单谈谈我的看法。 我的个人资料：<a href=\"//link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzA5NDY0ODkxNA%3D%3D%26mid%3D202787061%26idx%3D1%26sn%3D752d54d5605bffb49c1e24ae9dadbd57%23rd\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">跨界码农<i class=\"icon-external\"></i></a> 到目前为止，带过大公司的业务大前端团队、创业公司大前端负责人、大公司基础团队负责人，现在 客户端/前端/全栈的基础团队 Leader，同时兼顾技…\n\n<a href=\"/question/28373692/answer/40632741\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-02-26\" target=\"_blank\" href=\"/question/28373692/answer/40632741\">编辑于 2015-03-01</a></p>\n\n",
    "link": "https://zhihu.com/question/28373692/answer/40632741"
  },
  {
    "question": "\n想深入了解一下 jQuery 的源码，但是觉得学习曲线有点陡峭，有没什么好的方法或者学习资源推荐？\n",
    "author": "薛天禄",
    "content": "\n\n<textarea hidden class=\"content\">&lt;i&gt;Jquery Deconstructed&lt;/i&gt; 把 Jquery 源码解构并可视化了，非常好的材料，而且也有其他库如 Prototype，MooTools 的版本。不过字体看着不太舒服，可以自己改改。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.keyframesandcode.com/resources/javascript/deconstructed/jquery/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;keyframesandcode.com/re&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;sources/javascript/deconstructed/jquery/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;Paul Irish，HTML5 Boilerplate 的作者，录有两个老幼咸宜的视频，可以从这里起步。&lt;br&gt;&lt;i&gt;10 Things I Learned from the jQuery Source&lt;br&gt;&lt;/i&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//paulirish.com/2010/10-things-i-learned-from-the-jquery-source/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;paulirish.com/2010/10-t&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;hings-i-learned-from-the-jquery-source/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;i&gt;11 More Things I Learned from the jQuery Source&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//paulirish.com/2011/11-more-things-i-learned-from-the-jquery-source/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;paulirish.com/2011/11-m&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ore-things-i-learned-from-the-jquery-source/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;其他例如 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//james.padolsey.com/jquery/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;james.padolsey.com/jque&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ry/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 之类，没用过，不了解。我觉得最好是把 Jqeury source 存一份到书签栏上，时不时打开看一看：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ajax.googleapis.com/ajax/libs/jquery/1/jquery.js&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ajax.googleapis.com/aja&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;x/libs/jquery/1/jquery.js&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;这里面很多所谓的“奇淫巧技”，以及很多经过锤炼的集体智慧，是 JavaScript developer 必看的代码之一。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<i>Jquery Deconstructed</i> 把 Jquery 源码解构并可视化了，非常好的材料，而且也有其他库如 Prototype，MooTools 的版本。不过字体看着不太舒服，可以自己改改。 <a href=\"//link.zhihu.com/?target=http%3A//www.keyframesandcode.com/resources/javascript/deconstructed/jquery/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">keyframesandcode.com/re</span><span class=\"invisible\">sources/javascript/deconstructed/jquery/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> Paul Irish，HTML5 Boilerplate 的作者，录有两个老幼咸宜的视频，可以从这…\n\n<a href=\"/question/19671522/answer/12678089\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-06-04\" target=\"_blank\" href=\"/question/19671522/answer/12678089\">编辑于 2011-09-05</a></p>\n\n",
    "link": "https://zhihu.com/question/19671522/answer/12678089"
  },
  {
    "question": "\n0基础到成为前端工程师需要多久？从哪里入手？最大的困难是什么？\n",
    "author": "豪情",
    "content": "\n\n<textarea hidden class=\"content\">1. 需要多久？&lt;br&gt;这个没办法量化，主要看你投入的时间或精力。其实也好量化，你只要积累一定的作品，有能力对做过的作品中的技术点有一定的看法。比如在跟面试官去交流的时候，可以说，当时是怎么样的思路来做这个东西，然后碰到那些问题，你是通过什么手段去解决的。现在有那些困难等等。&lt;br&gt;我这儿写了一下，你随便看看，代码质量不高，但可以做为一个方向来努力：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jikeytang.github.io&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;豪情前端作品列表&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;2. 从html,css入手然后到js-&amp;gt;ajax-&amp;gt;某一门后端语言(建议了解流程，不要关注细节，以后有空在细化)-&amp;gt;如何操作sql(建议了解)&lt;br&gt;从前到后，js是重点，jquery只是js里边的一个工具，核心还是基础原生的js。&lt;br&gt;3. 最大的困难是什么？&lt;br&gt;最大的困难可能是内心不能承受内心的孤独或彷徨，时常会自我否定？&lt;br&gt;我学了这么久怎么还没入门，别人怎么很快就入门了。&lt;br&gt;我学了这么久不能入门，我是不是不适合干这一行。&lt;br&gt;这时候就需要沉下心了，休息一下。或者整个的去评估你以往的学习方法或兴趣点？&lt;br&gt;或者这时候找一个高手来适当的释放这种孤独，交流一下高手碰到这种问题时的应对之则。或者适当的用一种运动的方式来排解学习或生活带来的压力，或者多参加一下交流会，看看当前流行的技术现状，跟现场的参会人员聊聊他们的工作方式，或学习方法等等的。&lt;br&gt;还有个困难可能是：&lt;br&gt;前端又是css,js,ajax,东西太多太杂，没有一个合适的着重点来学习，感觉学那儿都不是个事。&lt;br&gt;css建议花费1-2个月入门一下，了解基础的选择器，布局方式，多页面的页面css划分或架构就好。&lt;br&gt;剩下的需要长时间的兼容实战经验的积累，这个是急不来的。是可以放下了，有空来了解一下。&lt;br&gt;然后主要还是js，js，js重要的东西说三遍。&lt;br&gt;jquery,extjs，seajs,requirejs,grunt,gulp,avalon,angularjs&lt;br&gt;这一大堆东西考验的是你的js基础，不是对每个框架api的熟练程度。&lt;br&gt;还有就是有空的时候看看这个回答：&lt;br&gt;&lt;a href=&quot;http://www.zhihu.com/question/29933334/answer/46175391&quot; class=&quot;internal&quot;&gt;怎么提高javascript编程能力? - 豪情的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;另外我建议的学习路径，仅供参考，不是适合每个人，但找到适合自己的方法最重要。&lt;br&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3600308.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;1. web前端开发分享-css,js入门篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3601666.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2. web前端开发分享-css,js进阶篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3604459.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;3. web前端开发分享-css,js提高篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3607133.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;4. web前端开发分享-css,js工具篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3611394.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;5. web前端开发分享-css,js深化篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3632392.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;6. web前端开发分享-css,js移动篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;另外我的一些前端工作方面的感悟或心得：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/4042309.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;豪情-关于生活工作学习之感悟&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;当然，你如果到我们群来那是最好不过了：327388215，禁止闲聊，非喜勿进。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/xuliuzhu1834/demo/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Issues · xuliuzhu1834/demo · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;每天都有编程题目讨论，有空进来看看吧。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n1. 需要多久？ 这个没办法量化，主要看你投入的时间或精力。其实也好量化，你只要积累一定的作品，有能力对做过的作品中的技术点有一定的看法。比如在跟面试官去交流的时候，可以说，当时是怎么样的思路来做这个东西，然后碰到那些问题，你是通过什么手段去…\n\n<a href=\"/question/31152541/answer/50976605\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-06-11\" target=\"_blank\" href=\"/question/31152541/answer/50976605\">编辑于 2015-06-11</a></p>\n\n",
    "link": "https://zhihu.com/question/31152541/answer/50976605"
  },
  {
    "question": "\n以下 CSS 栅格布局除了用 table 以外，有什么其他的方法吗？\n",
    "author": "一丝",
    "content": "\n\n<textarea hidden class=\"content\">抛砖引玉。&lt;br&gt;&lt;br&gt;这个题目看似是最简单的二维布局，实际透露出整个 CSS 的发展方向。向前可以考察对兼容性的处理功底，向后可以考察对 CSS 新特性的洞察能力。可攻可受，攻守兼备。&lt;br&gt;&lt;br&gt;需要注意的是：&lt;b&gt;这是一个两端对齐的布局，需要仔细考虑中间空隙的处理&lt;/b&gt;。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/869165fb6d14b755990cbe6476c6b348_b.jpg&quot; data-rawwidth=&quot;449&quot; data-rawheight=&quot;749&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;449&quot; data-original=&quot;https://pic1.zhimg.com/869165fb6d14b755990cbe6476c6b348_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 兼容方案 float&lt;/b&gt;&lt;br&gt;&lt;br&gt;最容易想到的就是运用 float 的浮动特性，为了更好的处理间距，我们需要三层结构，利用 margin 负值来抵消间距，形成视觉上的两段对齐效果。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;demo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;float&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;a&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;b&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;c&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;d&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;e&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;\n  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;2. 渐进增强 flex&lt;/b&gt;&lt;br&gt;&lt;br&gt;flex 的处理需要一个小技巧，需要把主轴方向旋转90度，也就是 flex-direction: column。&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;优点：&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;flex 可以较好的处理两端对齐布局，中间的空隙可以通过 &lt;b&gt;align-content: space-between,justify-content: space-between&lt;/b&gt; 来实现自适应（但超过两行或两列时会有问题）。&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;缺点：&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;需要通过 order 属性手动调节为正确的元素顺序。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 面向未来 grid&lt;/b&gt;&lt;br&gt;&lt;br&gt;如果说从 Flex 开始 CSS有了真正的二维布局特性，那么 CSS Grid 将是二维布局的未来。&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;优点：&lt;/li&gt;&lt;/ul&gt;1）可以把传统的网页栅格体系直接对应到 CSS 声明，例如：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这样三句代码就表明我定义了一个两行三列的栅格，也就是题中的布局。&lt;br&gt;&lt;br&gt;2）通过 grid-column/row 属性里的 span 值可以方便的实现跨行或夸列，无需显性指定宽高的改变，非常方便的实现了跨行或夸列。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;缺点：&lt;/li&gt;&lt;/ul&gt;从我粗浅的理解来看，Grid 处理之间的空隙还比较麻烦，需要把空隙当做单独的栅格来看待，然后通过 grid-area 属性来定位主要的非空隙区块。类似这样：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;grid-template-columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1fr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1fr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1fr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;grid-template-rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1fr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;10px&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;1fr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;grid-template-areas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;\n      &lt;span class=&quot;s2&quot;&gt;&quot;a a a . b&quot;&lt;/span&gt;\n      &lt;span class=&quot;s2&quot;&gt;&quot;. . . . .&quot;&lt;/span&gt;\n      &lt;span class=&quot;s2&quot;&gt;&quot;c . d . e&quot;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;「.」 (U+002E FULL STOP)代表空的格子。详见 &lt;a data-hash=&quot;5fb0012aa84178c10cabdc95d7f30d08&quot; href=&quot;//www.zhihu.com/people/5fb0012aa84178c10cabdc95d7f30d08&quot; class=&quot;member_mention&quot; data-tip=&quot;p$b$5fb0012aa84178c10cabdc95d7f30d08&quot; data-hovercard=&quot;p$b$5fb0012aa84178c10cabdc95d7f30d08&quot;&gt;@大漠&lt;/a&gt; 的答案。&lt;br&gt;&lt;br&gt;无论如何，在 CSS Grid 的青春期里，我们期待更多特性的萌芽，你准备好了吗？&lt;br&gt;&lt;br&gt;Demo：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/yisi/pen/wBxbKV/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;多种方案实现跨行或夸列布局&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;笔记本键盘坏了，背个键盘回来写答案，容易吗！！！˃̣̣̥᷄⌓˂̣̣̥᷅ &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/6f8d79fe41a78b52e489083289165590_b.jpg&quot; data-rawwidth=&quot;3264&quot; data-rawheight=&quot;2448&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;3264&quot; data-original=&quot;https://pic1.zhimg.com/6f8d79fe41a78b52e489083289165590_r.jpg&quot;&gt;&lt;br&gt;&lt;b&gt;2015年12月05日 更新&lt;/b&gt;&lt;br&gt;&lt;br&gt;很高兴的告诉大家，CSS Grid 布局现在已经增加了 grid-gap 属性来控制间距，而且 WebKit, Blink, Firefox 都已经实现。&lt;br&gt;&lt;br&gt;以上&lt;br&gt;壹丝</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/869165fb6d14b755990cbe6476c6b348_200x112.jpg\" data-rawwidth=\"449\" data-rawheight=\"749\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/869165fb6d14b755990cbe6476c6b348_r.jpg\">\n抛砖引玉。 这个题目看似是最简单的二维布局，实际透露出整个 CSS 的发展方向。向前可以考察对兼容性的处理功底，向后可以考察对 CSS 新特性的洞察能力。可攻可受，攻守兼备。 需要注意的是：<b>这是一个两端对齐的布局，需要仔细考虑中间空隙的处理</b>。 <b>1. 兼容…</b>\n\n<a href=\"/question/28542816/answer/41228611\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-03-05\" target=\"_blank\" href=\"/question/28542816/answer/41228611\">编辑于 2015-12-05</a></p>\n\n",
    "link": "https://zhihu.com/question/28542816/answer/41228611"
  },
  {
    "question": "\n有哪些非常好的前端网站或个人博客？\n",
    "author": "何秉骏",
    "content": "\n\n<textarea hidden class=\"content\">大神们个人博客:(排名不分先后)&lt;br&gt;张鑫旭&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.zhangxinxu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 » 张鑫旭&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;小胡子哥&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.barretlee.com/entry/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blog Entry | 小胡子哥的个人网站&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;阮一峰&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ruanyifeng.com/home.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阮一峰的个人网站 - Ruan YiFeng's Personal Website&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;Js大神Tom大叔：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;深入理解JavaScript系列 - 汤姆大叔 - 博客园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;前端美：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.qianduanmei.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端美 - 一个前端妹纸的博客，专注国内外前端设计资讯，前端资源下载，前端开发教程，国内前端行业最好博客站点&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;团队博客：&lt;br&gt;淘宝：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//taobaofed.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Taobao FED | 淘宝前端团队&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;腾讯：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.alloyteam.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Web前端 腾讯AlloyTeam  Blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;百度：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//fex.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 - FEX&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;奇舞团：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.75team.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;奇舞团博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;大搜车：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//f2e.souche.com/blog/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;大搜车前端团队博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;前端网站：&lt;br&gt;伯乐在线：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//web.jobbole.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WEB前端 - 伯乐在线&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;前端乱炖：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html-js.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端乱炖, 最专业的前端技术内容社区&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;MDN：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mozilla Developer Network&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;（欢迎补充）&lt;br&gt;收藏的倒是很多，不过很多都没精力看，如果有需要我可以发给书签给你。&lt;br&gt;7.19&lt;br&gt;稀土掘金 有app 内容质量很高</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n大神们个人博客:(排名不分先后) 张鑫旭<a href=\"//link.zhihu.com/?target=http%3A//www.zhangxinxu.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">首页 » 张鑫旭<i class=\"icon-external\"></i></a> 小胡子哥<a href=\"//link.zhihu.com/?target=http%3A//www.barretlee.com/entry/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Blog Entry | 小胡子哥的个人网站<i class=\"icon-external\"></i></a> 阮一峰<a href=\"//link.zhihu.com/?target=http%3A//www.ruanyifeng.com/home.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">阮一峰的个人网站 - Ruan YiFeng's Personal Website<i class=\"icon-external\"></i></a> Js大神Tom大叔：<a href=\"//link.zhihu.com/?target=http%3A//www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">深入理解JavaScript系列 - 汤姆大叔 - 博客园<i class=\"icon-external\"></i></a> 前端美：<a href=\"//link.zhihu.com/?target=http%3A//www.qianduanmei.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">前端美 - 一个前端妹纸的…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/42186243/answer/94331414\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-04-08\" target=\"_blank\" href=\"/question/42186243/answer/94331414\">编辑于 2016-07-19</a></p>\n\n",
    "link": "https://zhihu.com/question/42186243/answer/94331414"
  },
  {
    "question": "\n女生学HTML5有何发展前途？\n",
    "author": "吉April",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;奔三女码农一枚。。。公司的it男比较多。。。尽情选择。。。噗哈哈~~~&lt;/p&gt;&lt;p&gt;-------------------------华丽丽的分割线----------update 2015-06-02-------------------------------------------&lt;/p&gt;&lt;p&gt;在男生多的地方工作真的比较轻松，但有时候你也必须像一个男人一样跟他们并肩作战。。。&lt;/p&gt;&lt;p&gt;但是一般男生都会让着你，比如说通宵上线的时候，我一般都是第一个回家去休息的（早上四点左右），男生有些就睡在现场了。。。体力活都不会让我做的，外出拎个笔记本什么的，使个眼色就行了。。。基本上是被当成国宝一样宠着的。。。请假啊什么的也能有足够的理由（每个月大姨妈之类的。。。有时候觉得我的pm挺可怜的，还得算着我每个月的周期，给我假！o(^▽^)o~~~），就真的不像那些都是女生的地方有那么大的竞争力了，妥妥的。。。o(^▽^)o~~）&lt;/p&gt;&lt;p&gt;说正经的，跟同事请教问题啥的，也都挺好说话的，同事会比较愿意帮助你，而且态度较好。。。&lt;/p&gt;&lt;p&gt;当然，你也别显得太愚蠢，总会有被嫌弃的一天。。。&lt;/p&gt;&lt;p&gt;我觉得it公司开发部门真的是最单纯友善的地方了。。。大家就一起找bug，解决bug，什么职场风云，根本没有。。。&lt;/p&gt;&lt;p&gt;我是女码农我骄傲，就酱紫~~~&lt;/p&gt;&lt;p&gt;----------------------------------------update 2015-06-08-------------------------------------------------------&lt;/p&gt;&lt;p&gt;最近有一些可爱的男孩女孩们（大学生）私信我，问我，编程需要学一些什么。。。（答主从来没有觉得自己这么老过，可是想想我已经毕业那么多年，你们在我眼里简直都是美丽的小花朵儿）&lt;/p&gt;&lt;p&gt;在这里统一回复一下，当然，你们有具体问题想要问我的还是可以继续私信。。。&lt;/p&gt;&lt;p&gt;先说一下，答主不是一个技术高的程序媛，编程对我来说是爱，但没有到痴狂的地步。。。&lt;/p&gt;&lt;p&gt;所以我不如很多很多的it界精英。。。我有同事（男）是真的把这当作爱好而非职业，一段代码可以重写好几回。。。org。。。&lt;/p&gt;&lt;p&gt;刚毕业的时候，好多人问我，为什么要当程序媛啊？多辛苦啊？it男都被糙成什么样子啦？会不会嫁不出去啊？&lt;/p&gt;&lt;p&gt;。。。。。。。。。。。。&lt;/p&gt;&lt;br&gt;&lt;p&gt;我大一学c的时候，就是觉得自己有那么一点点的天赋，更准确的说是兴趣吧。。。就是特别想第一个把老师布置的作业做出来（是通过写c，运行出一段什么东西貌似）。。。当时，下课后就开始码，我居然还真的做到了。。。接着学sql，vb，php，c#，好胜心越来越强，做课堂作业的时候就想超前完成更难得东西（真能得瑟！）。。。（很多时候写代码都是直觉啊~~就猜着猜着就蒙出了个程序啊！哈哈哈~~~）那时候我就知道，我喜欢这个。。。我以后要干这行。。。&lt;/p&gt;&lt;p&gt;毕业后，班级20多个女生大概只有我成功地当了程序媛，有的干了商务，有的干了管理，有的去做了行政，有的成了董事长秘书，更有甚者考了研，从了医。。。（你们都太厉害了啊！！！）&lt;/p&gt;&lt;p&gt;我想说的是，即使专业是计算机编程类的，但是对编程真的很头疼的女生也不必焦虑，条条大路通罗马。。。未来职业的选择性还是很多的。。。&lt;/p&gt;&lt;p&gt;最主要的是&lt;u&gt;发现自己的兴趣所在&lt;/u&gt;，如果跟答主一样，真的喜欢这个，那就好好学！前景也是一片大好的！！！&lt;/p&gt;&lt;p&gt;当很多人问我，为什么选择这一行的时候，我的回答是：我只会编程啊。。。&lt;/p&gt;&lt;p&gt;答主为人处事方面真的是单线程的，只有编码的时候才能多线程火拼啊。。。&lt;/p&gt;&lt;p&gt;所以，商务、助理、秘书之类的，真心做不来。。。答主特羞羞。。。羞羞羞羞羞~~~哈哈哈~~~&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n奔三女码农一枚。。。公司的it男比较多。。。尽情选择。。。噗哈哈~~~-------------------------华丽丽的分割线----------update 2015-06-02-------------------------------------------在男生多的地方工作真的比较轻松，但有时候你也必须像一个男人一样跟…\n\n<a href=\"/question/30775414/answer/49377254\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-29\" target=\"_blank\" href=\"/question/30775414/answer/49377254\">编辑于 2015-06-08</a></p>\n\n",
    "link": "https://zhihu.com/question/30775414/answer/49377254"
  },
  {
    "question": "\n在 CSS 中，用 float 和 position 的区别是什么？\n",
    "author": "李锦",
    "content": "\n\n<textarea hidden class=\"content\"> 呃，其实这个命题有误，只有position才是定位，float不能说是定位，不过你可以说这两种布局方式有什么不同。&lt;br&gt;float和position这两者并没有孰好孰不好的问题，两者按需使用，各得所需的效果。&lt;br&gt;float从字面上的意思就是浮动，这种在印刷排版之类中可能解释的更加贴切。float能让元素从文档流中抽出，它并不占文档流的空间，典型的就是图文混排中文字环绕图片的效果了。并且float这也是目前使用最多的网页布局方式。不过需要注意的是清除浮动是你可能需要注意的地方。并且如果你要考虑到古老的IE6之类的还会有一些bug诸如双边距等等问题。&lt;br&gt;而position顾名思义就是定位。他有以下这几种属性：static(默认)，relative(相对定位)，absolute(绝对定位)和fixed(固定定位)。其中static和relative会占据文档流空间，他们并不是脱离文档的。absolute和fixed是脱离文档流的，不会占据文档流空间。&lt;br&gt;&lt;br&gt;比较可以发现，float和position最大的区别其实是是否占据文档流空间的问题。虽然position有absolute和fixed这两个同样不会占据文档流的属性，但是这两个并不适合被用来给整个网页做布局。为什么？因为这样你就得为页面上的每一个元素设置一个xy坐标来定位。&lt;br&gt;&lt;br&gt;float布局就显得灵活多了。但是一些特殊的地方搭配relative和absolute布局可以实现更好的效果。因为absolute是基于父级元素的定位，当父级元素是relative的时候，absolute的元素就会是基于它的定位了。比如你可以让一个按钮始终显示在一个元素的右下角。&lt;br&gt;&lt;br&gt;如果说到性能问题reflow问题，将元素的position设置为absolute和fixed可以使元素从DOM树结构中脱离出来独立的存在，而浏览器在需要渲染时只需要渲染该元素以及位于该元素下方的元素，从而在某种程度上缩短浏览器渲染时间。所以如果是制作js动画等，用absolute或者fixed定位会更好。&lt;br&gt;&lt;br&gt;说得不好的地方请大家补充。总结一句就是不推荐用position来布局整个页面的大框架，而推荐用float或者文档流的默认方式。 </textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n呃，其实这个命题有误，只有position才是定位，float不能说是定位，不过你可以说这两种布局方式有什么不同。 float和position这两者并没有孰好孰不好的问题，两者按需使用，各得所需的效果。 float从字面上的意思就是浮动，这种在印刷排版之类中可能解释的…\n\n<a href=\"/question/19588854/answer/12309368\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19588854/answer/12309368\">发布于 2011-04-07</a></p>\n\n",
    "link": "https://zhihu.com/question/19588854/answer/12309368"
  },
  {
    "question": "\n如何评价Facebook推出的JavaScript模块管理器yarn？\n",
    "author": "宋亮",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;就在昨天（2016 年 10 月 11 日），facebook 公开了新的 javascript 包管理工具 yarn, 用来替代目前被广泛使用的 npm (nodejs 自带的包管理工具)​&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;github 项目地址：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/yarnpkg/yarn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - yarnpkg/yarn:    Fast, reliable, and secure dependency management for JavaScript.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;仅仅一天的时间，github 上的这个项目已经得到了 200+ 的 watch 以及 8000+ 的 star. (还在急速增加中……人们到底是有多讨厌 npm)&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-33235cf1bd065ec8d1690e4acffec22b_b.png&quot; data-rawwidth=&quot;395&quot; data-rawheight=&quot;111&quot; class=&quot;content_image&quot; width=&quot;395&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;yarn 有什么优点？&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;yarn 和 npm 做的是完全一样的事情：作为 nodejs 的包管理工具。既然是一样的事情，那么 yarn 必须有一些优点，才能说服大家去用。&lt;/p&gt;&lt;br&gt;&lt;p&gt;根据官方网站的介绍，yarn 有以下六项特点：&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;gt; 离线模式（重要）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;如果之前已经安装过一个软件包，再次安装时就不用再从网络下载了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这一点很重要，npm 饱受诟病的一点就是，每次安装依赖，都需要从网络下载一大堆东西，而且是全部重新下载。工程多的时候比较烦人。这下子可以节约大量时间了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;gt; 依赖关系确定性（重要）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;在每一台机器上针对同一个工程安装依赖时，生成的依赖关系顺序和版本是一致的。&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e37ac1e2686bff8f9e2570c6613e331c_b.png&quot; data-rawwidth=&quot;539&quot; data-rawheight=&quot;208&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;539&quot; data-original=&quot;https://pic1.zhimg.com/v2-e37ac1e2686bff8f9e2570c6613e331c_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;之前 npm 在这里有一个处理得不好的地方。举例来说，我写的工程依赖 A, B, C 三个库，我在编写 package.json 的时候，给 A, B, C 都指定了版本号。但是 A 库可能又依赖 D, E, F 库，D 库又依赖 G, H 库。这么多关联依赖关系中，很可能某个库在指定依赖时，没有指定版本号。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;于是，这就导致了一个问题。如果我在另一台机器上对同样的工程安装依赖，或者把这台机器工程下的 node_modules 目录删除来重新安装依赖。&lt;strong&gt;由于关联依赖中，没有指定版本号的库，发生了版本更新，就会导致再次安装的依赖，其中具体某些软件包的版本是不一致的&lt;/strong&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;在这种情况下，你会发现原来能够正常运行的程序，忽然变得不能工作或一堆 BUG. 我在最近使用 react-native 编写手机应用时，就遭遇过这样的问题。只能采取一些很曲折的方式来解决。&lt;/p&gt;&lt;br&gt;&lt;p&gt;yarn 采用的解决方式是，引入了一个 yarn.lock 文件来应对这个问题。lock 机制在很多包管理中都有用到。例如 ruby 的 rubygems 就会生成 Gemfile.lock.&lt;/p&gt;&lt;br&gt;&lt;p&gt;yarn.lock 会记录你安装的所有大大小小的软件包的具体版本号。只要你不删除 yarn.lock 文件，再次运行 yarn install 时，会根据其中记录的版本号获取所有依赖包。你可以把 yarn.lock 提交到版本库里，这样其他同事签出代码并运行 yarn install 时，可以保证大家安装的依赖都是完全一致的。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这就特别适合大型项目的多人协作开发和部署。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;gt; 更好的网络性能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;下载软件包时，会进行更好的排序，避免“请求瀑布”，最大限度提高网络利用率。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;gt; 多注册来源处理&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是 npm 要么是 bower, 防止出现混乱不一致。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;gt; 网络弹性处理&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;安装依赖的过程中，不会因为某个单次网络请求的失败导致整个安装挂掉（这里又要黑一下 npm）。当请求失败时会进行自动重试。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;&amp;gt; 扁平模式（重要）&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;当关联依赖中包括对某个软件包的重复引用，在实际安装时将尽量避免重复的创建。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;为了说明这个问题，我们假设目前工程依赖 A, B, C 三个库，而他们对某个库 somelib 存在这样的依赖关系：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;A - somelib 1.4.x\nB - somelib 1.6.x\nC - somelib 1.6.x\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;如果要安装 ABC 三个库，那么 somelib 会存在版本冲突。npm 会在实际安装时，给三个库分别下载各自依赖的 somelib 版本。假设 npm 先安装了 A, 由于 A 依赖 somelib 1.4.x 版本，那么 1.4.x 会变成主版本。&lt;/p&gt;&lt;p&gt;再安装 B, C 时，由于 B, C 依赖的都不是 1.4.x, 于是安装完之后，关系就变成这个样子了：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;node_modules\n├── A\n├── somelib 1.4.x\n├── B\n│   └── node_modules\n│       └── somelib 1.6.x\n└── C\n    └── node_modules\n        └── somelib 1.6.x\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;明明 B, C 都依赖 1.6.x 版本，实际上 npm 却要把这个版本保存两次，这样明显是对磁盘空间的浪费。我们把这种情况就称为“不扁平的”。尽管 npm 也提供了诸如 flat 等指令去支持“扁平化”处理，yarn 明显试图在这方面做得更好。&lt;/p&gt;&lt;br&gt;&lt;p&gt;总之来说，yarn 要做到的就是三点：&lt;strong&gt;快速，安全，可靠&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;LOGO 是猫咪（这也算优点？）&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-3e2647b57638cb82b8679f18d47d90de_b.png&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;600&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic3.zhimg.com/v2-3e2647b57638cb82b8679f18d47d90de_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;实际的使用体会&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;我把自己手头的几个用到 npm 安装 js 依赖的 rails 工程还有静态 web 工程下的 node_modules 子目录删除，然后用 yarn install 重新安装依赖。&lt;/p&gt;&lt;br&gt;&lt;p&gt;实际体验是速度要比 npm 快上不少，基本上可以令人满意。原来 npm install 需要 8 - 10 分钟的一个工程，改用 yarn install 后，只需 72 秒完成。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;而且更令人欣喜的是&lt;/strong&gt;：如果某个 js 库的某个版本在这个系统里被安装过一次，那么另一个工程再次需要安装这个库时，就完全不用再次下载。会直接从当前系统里获取这个库。大大节约了网络传输量和下载安装时间。&lt;/p&gt;&lt;br&gt;&lt;p&gt;可以做一个简单的测试，对某个工程执行过 yarn install 后，删除 node_modules 目录，再次 yarn install. 会看到完全不用进行网络下载，几秒内就能再次生成 node_modules 目录。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这其中 lock 机制起到了很大的作用。对于经常要同时编写维护很多依赖 nodejs 的工程师而言，这是一个非常好的消息。&lt;/p&gt;&lt;br&gt;&lt;p&gt;建议大家马上开始尝试使用 yarn.&lt;/p&gt;&lt;br&gt;&lt;p&gt;--------------------&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;2016.10.13 补充：&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果觉得安装速度慢，安装源和原来 npm 是一样的，可以通用，修改方法如下：&lt;br&gt;&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;yarn config get registry\n# -&amp;gt; https://registry.yarnpkg.com\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以改成 taobao 的源：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;yarn config set registry 'https://registry.npm.taobao.org'\n# -&amp;gt; yarn config v0.15.0\n# -&amp;gt; success Set &quot;registry&quot; to &quot;https://registry.npm.taobao.org&quot;.\n# -&amp;gt; Done in 0.04s.\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后 yarn install 的速度就快多了&lt;/p&gt;&lt;br&gt;&lt;p&gt;另外，目前的小瑕疵还是不少，例如我刚刚遇到的问题，某个工程的 package.json 里面是这样写的：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint-plugin-markdown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;yarn install 的时候报错：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;error Couldn't find any versions for eslint-plugin-markdown that matches *.\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint-plugin-markdown&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;latest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后，安装可以通过。&lt;/p&gt;&lt;br&gt;此外，这样的写法（直接引用本工程路径）目前也是不支持的：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;s2&quot;&gt;&quot;eslint-plugin-material-ui&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./packages/eslint-plugin-material-ui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;类似的小问题估计在近期会被各种人发现（提 issue 呗），最后如何取舍，是否都能修复，看团队的反应。目前还是可以看好。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/v2-e37ac1e2686bff8f9e2570c6613e331c_200x112.png\" data-rawwidth=\"539\" data-rawheight=\"208\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/v2-e37ac1e2686bff8f9e2570c6613e331c_r.png\">\n就在昨天（2016 年 10 月 11 日），facebook 公开了新的 javascript 包管理工具 yarn, 用来替代目前被广泛使用的 npm (nodejs 自带的包管理工具) github 项目地址：<a href=\"//link.zhihu.com/?target=https%3A//github.com/yarnpkg/yarn\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - yarnpkg/yarn: Fast, reliable, and secure dependency management for JavaScript.<i class=\"icon-external\"></i></a>…\n\n<a href=\"/question/51502849/answer/126290224\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-10-13\" target=\"_blank\" href=\"/question/51502849/answer/126290224\">编辑于 2016-10-15</a></p>\n\n",
    "link": "https://zhihu.com/question/51502849/answer/126290224"
  },
  {
    "question": "\n前端开发基础扎实的标准是什么？\n",
    "author": "fluxxu",
    "content": "\n\n<textarea hidden class=\"content\">你问的是基础扎实，我觉得那就要先讨论一下什么是基础。&lt;br&gt;&lt;br&gt;首先，作为前端，html+css，是基础中的基础。这两个东西相对于半年不搞就面目全非的js来讲，比较简单，但是由于过于灵活，限制太少，很容易给人造成&quot;没有我不能做的&quot;的错觉。实际上写的代码让有经验的程序员看了想全选删除重新写。我觉得在这方面基础扎实就是对自己的代码负责，不以完成任务为唯一目的。HTML方面我觉得就是对w3c标准有一定了解并遵守。CSS方面要知道哪些东西滥用会导致代码无法维护或者卡爆浏览器。&lt;br&gt;&lt;br&gt;然后就是JavaScript了，你不要看有些人摆弄几下时髦的框架啊构建工具啊就可以出来谈笑风生了，比如你去看看Vue的那些例子（注意我并不是拿Vue作为反面的例子，只是Vue的抽象级别比较高，然后工具链也比较典型），非常干净优雅直观，给新手一种就算没啥基础上战场写程序也指日可待的错觉。然后他们一旦真开搞Vue，倒腾了几天webpack，npm，babel，解决了若干构建系统跑不起来的神奇bug后信心更加膨胀没准就转型传教士正式开始鄙视jQuery了。我认为这其实是很危险的，比基础差不会用jQuery还危险，比如你现在要做一个点击按钮隐藏某元素，如果用jQuery，你不得不知道on，off, show, hide，你知道这些过两天你就不小心也知道了addEventListener，然后后又不小心知道了事件冒泡机制啊什么的。而如果上来就玩的是Vue＋webpack，强行站在大神的肩膀上光速飞跃新手原本应该掉进去再爬出来的各种坑， 可能很长时间内倒腾的就是Vue template的那些elem啊attr是啥意思怎么用，如何把webpack全家loader升级到昨天的最新版而不产生看不懂的错误这些问题。不是说研究这些问题没有价值，而是在该了解的基础都不了解的情况下研究这些问题纯属折腾价值不大，付出的实际努力和收获的巨大成就感完全不成正比。可能有些和你同样起点的人可能已经开始夸夸其谈什么MVVM，Component，Data Binding， Virtual DOM什么的了，你却还在研究繁琐啰嗦的DOM API，但这完全不表示他们基础比你扎实，自学能力比你强。总结一下我的意思就是，想要基础扎实，对于JavaScript这门语言本身，和BOM/DOM这套API本身要投入大量时间了解，最好不要过早的碰Vue啊，Angular啊这些抽象级别比较高的框架，等你基础打好了，再来学这些，会有一种“太棒了这不就是被发明出来解决我现在瓶颈的吗？”的感觉，这样可以事半功倍。&lt;br&gt;&lt;br&gt;以上只是我的个人见解，不一定对你适用，祝你好运。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n你问的是基础扎实，我觉得那就要先讨论一下什么是基础。 首先，作为前端，html+css，是基础中的基础。这两个东西相对于半年不搞就面目全非的js来讲，比较简单，但是由于过于灵活，限制太少，很容易给人造成\"没有我不能做的\"的错觉。实际上写的代码让有经验…\n\n<a href=\"/question/38922374/answer/79713983\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-03\" target=\"_blank\" href=\"/question/38922374/answer/79713983\">编辑于 2016-06-11</a></p>\n\n",
    "link": "https://zhihu.com/question/38922374/answer/79713983"
  },
  {
    "question": "\nWeb 前端开发需要使用 MVVM 框架吗？\n",
    "author": "caoglish",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;1. 谈谈jquery + template&lt;/b&gt;&lt;br&gt;在来看看jquery + template 是什么？一看就主要dom操作，和UI交互。而处理数据是弱项&lt;br&gt;&lt;br&gt;网络大型应用程序主要是以下流程&lt;br&gt;1） 你要获取界面上的数据 &lt;br&gt;2）后台交换数据&lt;br&gt;3）获取数据后，对界面重新进行渲染&lt;br&gt;&lt;br&gt;这个过程中，你和后台数据交换怎么实现？jquery的ajax吧，如果数据交换的API假设20多个，那么$.get或者$.ajax你要写多少个才能全部包含进去？而且所有API链接都不在一个地方，管理起来相当麻烦。而backbone只要配置一下route就行了。&lt;br&gt;&lt;br&gt;获取了数据后，你有如何管理这些数据，如何把数据渲染到界面上去？&lt;br&gt;&lt;br&gt;如何管理各种事件?&lt;br&gt;jquery本身特性，也就是事件触发，很多时候，就是你在编写 触发事件-&amp;gt;处理数据 的流程&lt;br&gt;&lt;br&gt;很显然，功能一多，代码就会和面条一样，交织在一起了。然后你要么崩溃，要么自然而然的开始写你自己的框架来管理代码了&lt;br&gt;&lt;br&gt;总结一下：&lt;br&gt;1. 重复代码&lt;br&gt;2. 混乱代码&lt;br&gt;4. 更多精力用在UI的交换细节和渲染细节处理&lt;br&gt;5. 不宜扩充&lt;br&gt;6. 用户交互触发事件&lt;br&gt;7. 数据处理不在框架之内&lt;br&gt;8. 面向网页元素编程&lt;br&gt;&lt;br&gt;小项目合适使用。或者只是编写库，而不是系统编写（不涉及数据处理），那纯用jquery还行。&lt;br&gt;&lt;br&gt;jquery+template思路: 面向网页元素编程，把精力更多的放在对网页界面的元素进行定位和操作&lt;br&gt;&lt;br&gt;&lt;b&gt;2.谈谈MVC（MV*）&lt;br&gt;&lt;/b&gt;对于超过一定数量功能的网页应用程序，最困难的如何高效的组织代码，如果能合理的架构出一个合理高效的应用程序，这个是作为程序员在思考的问题。&lt;br&gt;&lt;br&gt;然\n而有很多功能的一个大项目，有很多页面，也有很多代码，那么那么多代码一定会出现重复的，也一定有重复的工作流程在里面，“don‘t repeat \nyourself” \n不要重复自己，那么如果能把所有重复的地方都抽象出来，渐渐的你会发现，你自己就在做一个自己的程序框架。而这个框架可能就和现有的MVC相似&lt;br&gt;&lt;br&gt;编程水平一般的人喜欢看代码是如何实现的，编程水平高的人一般看的的代码的抽象架构&lt;br&gt;&lt;br&gt;backbone的依赖是jquery和underscore，它是建立在这两个库之上的，jquery操控界面，underscore处理数据，ajax进行前台和后台的数据交换，如果加上handlebar，可以减少对节目的代码量。&lt;br&gt;&lt;br&gt;backbone本身就只是把一些重复的流程和代码抽象出来，可以你就可以不必一直重复一些不必要的工作了，（基本上所有的库都是这样）。还有一些简单的规范，迫使你遵循规范来写。&lt;br&gt;&lt;br&gt;另外编程最好的状态是集中精神些业务逻辑，而不是一些实现的细节。优秀的库，就是应该帮助程序员更加集中精力放在业务逻辑上，也更加注重数据和最终的界面关系&lt;br&gt;&lt;br&gt;另外MVC更加合适解耦，模块化，这样十分便于扩充，加个功能，加个API，模型和它的视图会容易很多。&lt;br&gt;&lt;br&gt;MVC还有个感觉，就是更多的配置，更少的编程。或者说，编好各种模块后，通过配置，将他们链接起来(框架通过自己的机制去处理这些配置)。 配置好处有：1）结构化结构清晰一致 2）一个类型的东西在一起 3）可读性高。&lt;br&gt;&lt;br&gt;而事件管理上面，MVC更加注重模型的数据改变而触发各种事件，就是将数据和事件联系起来，数据变动，界面变化。&lt;br&gt;&lt;br&gt;总结一下：&lt;br&gt;1. 简化代码&lt;br&gt;2. 减少重复&lt;br&gt;3. 强制规范&lt;br&gt;4. 集中精神编写业务逻辑&lt;br&gt;5. 易于扩充&lt;br&gt;6. 数据触发事件&lt;br&gt;7. 面向数据编程&lt;br&gt;&lt;br&gt;大项目一定要使用框架，不然到后期要不写不下去，要么回头还是要自己写一个框架来整理代码的。&lt;br&gt;&lt;br&gt;mvc编程思路: 面向数据编程，把所有精力放在数据处理，尽可能减少对网页元素的处理。&lt;br&gt;&lt;br&gt;&lt;b&gt;* 其他&lt;/b&gt;&lt;br&gt;有些人会认为，库越多，越消耗性能，但是当应用网站功能达到一个量级，你的代码开始需要以更好方式组合的时候，你又开始重构为自己网站些框架了，那么使用优秀的库和框架，反而不会减少你应用网站的性能。&lt;br&gt;&lt;br&gt;=====&lt;br&gt;2014年8月22日更新：&lt;br&gt;在谈一些MVC的&lt;b&gt;面向数据&lt;/b&gt;编程，和jquery面&lt;b&gt;向网页元素&lt;/b&gt;编程做个比较。&lt;br&gt;&lt;br&gt;以前看别人写的算法可视化，觉得很神奇。然而我今天有了个灵感，觉得如果用angularjs的面向数据编程的理念做算法可视化，是会大大简化编程难度。所以想了一个思路，用angularjs做了一个冒泡排序的可视化编程。&lt;br&gt;&lt;br&gt;如果你用jquery如何如何去实现？&lt;br&gt;思路大致如下：&lt;br&gt;1. 对网页元素进行定位，&lt;br&gt;2. 把网页元素数据化形成数组，&lt;br&gt;3. 对数组进行排序，&lt;br&gt;4. 重新对网络元素进行定位，&lt;br&gt;5. 对把数组对应的两个网页元素进行操作&lt;br&gt;（注意，jquery把重点放在网页元素和定位和操作上，对定位和操作上花了太多精力了。）&lt;br&gt;&lt;br&gt;angularjs如何实现？简单的思路:&lt;br&gt;1. 数组和网络元素进行数据绑定&lt;br&gt;2. 对数组进行排序.&lt;br&gt;（注意，angularjs，让你把所有重点放在数据处理上，没有网页元素的定位和操作）&lt;br&gt;&lt;br&gt;如果你感兴趣，可以看看我写的代码：&lt;br&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//runjs.cn/detail/jcdxyuo0&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;冒泡排序算法的可视化&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;简单的几句代码，就实现了复杂的算法可视化的处理。这正是体现了MVC数据绑定后，面向数据编程的思路。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>1. 谈谈jquery + template</b> 在来看看jquery + template 是什么？一看就主要dom操作，和UI交互。而处理数据是弱项 网络大型应用程序主要是以下流程 1） 你要获取界面上的数据 2）后台交换数据 3）获取数据后，对界面重新进行渲染 这个过程中，你和后台数据交…\n\n<a href=\"/question/22935917/answer/28675563\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-08-02\" target=\"_blank\" href=\"/question/22935917/answer/28675563\">编辑于 2014-08-22</a></p>\n\n",
    "link": "https://zhihu.com/question/22935917/answer/28675563"
  },
  {
    "question": "\n如何评价百度世界大会2016官网页面设计?\n",
    "author": "Proust",
    "content": "\n\n<textarea hidden class=\"content\">不想点开这个链接，怕自动安装</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n不想点开这个链接，怕自动安装\n\n<a href=\"/question/50243209/answer/120045813\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/50243209/answer/120045813\">发布于 2016-09-01</a></p>\n\n",
    "link": "https://zhihu.com/question/50243209/answer/120045813"
  },
  {
    "question": "\n如何看待 Reaktor Hello World 卫星将搭载 node.js 程序?\n",
    "author": "Ted Yu",
    "content": "\n\n<textarea hidden class=\"content\">问: 哪个应用程序框架性能最烂？&lt;br&gt;Rails:“node.js”&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ASP.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ASP.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; MVC: “node.js”&lt;br&gt;Struts: “node.js”&lt;br&gt;Django: “node.js”&lt;br&gt;node.js:“你们怎么不上天？”</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n问: 哪个应用程序框架性能最烂？ Rails:“node.js” <a href=\"//link.zhihu.com/?target=http%3A//ASP.NET\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">ASP.NET</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> MVC: “node.js” Struts: “node.js” Django: “node.js” node.js:“你们怎么不上天？”\n\n<a href=\"/question/46100153/answer/100258122\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-05-11\" target=\"_blank\" href=\"/question/46100153/answer/100258122\">编辑于 2016-05-17</a></p>\n\n",
    "link": "https://zhihu.com/question/46100153/answer/100258122"
  },
  {
    "question": "\nJavaScript / ES6新关键词 let 是否在任何情况下都优于 var?\n",
    "author": "刘旸",
    "content": "\n\n<textarea hidden class=\"content\">谢邀，还真的想不出有什么情况 var 会优于 let。let 主要有下面三点不同，同时我也认为是三个优点：&lt;br&gt;&lt;br&gt;&lt;b&gt;作用域更加清晰&lt;/b&gt;&lt;br&gt;不存在变量作用域自动提升的问题造成变量值被覆盖的问题，例如：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// a is 1&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// b is 2&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;作用域更容易控制&lt;/b&gt;&lt;br&gt;let 的作用域是根据代码块（enclosing block）来判定的，而 var 的作用域是根据函数块（function block）来判定的。这样的话，如果我们的变量都使用 let/const 来声明，那么以前的立即执行函数就不需要了，我们只要加一个代码块就好了，例如：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//  a is not defined&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Runtime自动检查重复声明的函数并报错&lt;/b&gt;&lt;br&gt;在同一个作用域内不允许重复声明变量，例如：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;Runtime会报错：Uncaught SyntaxError: Identifier 'a' has already been declared&lt;br&gt;&lt;br&gt;有了更加清晰的作用域，我们的代码就能够更好被预测，也更好维护。&lt;br&gt;有了更容易控制的作用域可以让我们减少很多立即执行的函数。&lt;br&gt;Runtime的自动检查可以避免不必要，甚至是错误的代码声明。&lt;br&gt;所以既然所有的不同都是 let 的优点，那确实很难找到 var 更优的使用场景了</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谢邀，还真的想不出有什么情况 var 会优于 let。let 主要有下面三点不同，同时我也认为是三个优点： <b>作用域更加清晰</b> 不存在变量作用域自动提升的问题造成变量值被覆盖的问题，例如： let a = 1;\nvar b = 1;\nif (true) {\n let a = 2;\n var b = 2;\n}\nconsole.…\n\n<a href=\"/question/47456978/answer/106069482\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/47456978/answer/106069482\">发布于 2016-06-15</a></p>\n\n",
    "link": "https://zhihu.com/question/47456978/answer/106069482"
  },
  {
    "question": "\nNode.js 都应用在什么项目上？这些项目为什么选择 Node.js？\n",
    "author": "杨捷",
    "content": "\n\n<textarea hidden class=\"content\">都用在了哪些项目上不清楚，不过可以说说node适合用在什么场景下。&lt;br&gt;&lt;br&gt;首先，node新开一个http连接的开销，相当于一个大函数调用，相比php的新开线程动辄花费2MB内存和上下文切换的漫长时间，已经很小很小了。所以，node天生就是为高并发的应用而诞生，在设计之初就承载着巨大的使命。而这种极度追求代码效率和美感的设计，是以提升学习理解的难度，和考验编程能力为代价。如果你像我一样，有代码洁癖，追求极致，那么node将是不二选择。如果你仅仅是为了完成工作，或者快速搭建项目上线运营，那么还是用php或其它什么看似方便却一点也不“美”的语言吧。&lt;br&gt;&lt;br&gt;再者，由于js的异步特征，始终有用户代码在执行，省去了等待查询数据库和文件系统的时间，相比CPU的时钟频率，去读一次数据库太久太久，久到让CPU等得花儿都谢了。node让CPU不在等待，node让妈妈不用担心我的内存。但是这种高效运用CPU的异步回调，将会带来逻辑上的混乱，一不小心就会一团乱麻理都理不清，下文有叙。&lt;br&gt;&lt;br&gt;以上两点，导致node适合在具有大量细小的http请求环境下工作，典型的就是一个web即时聊天程序，或者一个支撑上万人同时在线的游戏服务器。你甚至不用考虑http请求数太多的问题。&lt;br&gt;&lt;br&gt;如果用node开发网站，你可以把数据请求分的很细，也就是说不必像php那样把所有数据一次性加载到客户端，而是加载一部分，让浏览器渲染页面的同时，再去加载另一部分。Facebook的页面优化技术(叫big...什么的，我忘了)，就是这种分块加载的模式。可以让页面的加载速度在用户体验上提升5到10倍。&lt;br&gt;&lt;br&gt;node无论从代码执行速度，还是开销，都是最完美的选择。但是缺点在于js异步特征的难以理解和控制，如果没有相当过硬的js开发经验和特征理解，项目稍微大一点，代码结构就会一片混乱。node是在考验一个人的代码设计和掌控能力，如同九阴真经，练的好就一身绝学独霸武林，练的不好就走火入魔精神崩溃。动不动就长达8层的回调嵌套，可不是闹着玩的。除了采用step同步方案解决控制流倒置和深层回调嵌套问题，把数据请求分得很细，再分多次加载，不仅在代码流程上更美观，也更符合node的特性。&lt;br&gt;&lt;br&gt;有人说，异步代码是反人类的。其实同步执行才是反人类。想象一下，你需要打印一叠材料：打印机开始工作后，你站在那里等着，5分钟后打印完毕，你取走材料回到办公室。这似乎没什么。但是如果有100份需要打印？10000份呢？你也站在那里干等着？还是趁这个时间喝杯咖啡，或者多写几个 if else 吧。&lt;br&gt;&lt;br&gt;- - - - - - - - - - - - 2014/3/10 更新 - - - - - - - - - - - - &lt;br&gt;列几个我知道的国内项目吧&lt;br&gt;1.雪球 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//xueqiu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;雪球&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;2.花瓣 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//huaban.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;花瓣网_发现、采集你喜欢的一切（家居，美食，时尚，穿搭，设计，商品，美图等）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;3.淘宝指数 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//shu.taobao.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;淘宝指数 - 淘宝消费者数据研究平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;4.CSDN Share - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//share.csdn.net/%23/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Share频道 - CSDN.NET&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;5.酷厨 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//coochu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;酷厨网 - 天下美食 尽在酷厨 | coochu.com&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;6.Worktile - &lt;a href=&quot;//link.zhihu.com/?target=https%3A//worktile.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Worktile 让工作更简单&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;7.兔耳日记 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.tuer.me/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;兔耳日记 | 首页&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;8.牧客 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imokee.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;imokee.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;9.君鉴 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jojoin.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;君鉴&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;另外附上一个Node.js框架：&lt;br&gt;Codekart - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//codekart.jojoin.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CodeTank  欢迎使用Node.js前后端一体化开发框架 ！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;Github地址：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/myworld4059/codekart&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;myworld4059/Codekart · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n都用在了哪些项目上不清楚，不过可以说说node适合用在什么场景下。 首先，node新开一个http连接的开销，相当于一个大函数调用，相比php的新开线程动辄花费2MB内存和上下文切换的漫长时间，已经很小很小了。所以，node天生就是为高并发的应用而诞生，在设计…\n\n<a href=\"/question/20757938/answer/16085816\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-02-02\" target=\"_blank\" href=\"/question/20757938/answer/16085816\">编辑于 2015-11-27</a></p>\n\n",
    "link": "https://zhihu.com/question/20757938/answer/16085816"
  },
  {
    "question": "\nJavaScript加分号影不影响性能？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">加或不加分号是否影响JS执行性能？&lt;br&gt;&lt;br&gt;首先得明白，无论是解释执行还是编译执行，代码先要被parse成AST（抽象语法树），AST中是没有分号这个东西的，也就是说单纯执行本身，是不可能因为有无分号而造成性能差异的。所以唯一会有差异的是在parsing代码的阶段。而parsing本身是一次性的，因此通常不可能是性能问题的重点，何况ASI（自动分号插入）只是整个parsing的很小一点。&lt;br&gt;&lt;br&gt;有人实际测试过相同代码在依赖ASI或不依赖ASI下的性能差异，据说较早版本的V8下，依赖ASI（即不加分号）略慢，但较新版本则反之。也有人认为性能测试结果在统计上没有差异。无论如何，实测结果都表明即使有差异，也小到完全可忽略。&lt;br&gt;&lt;br&gt;以上。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n加或不加分号是否影响JS执行性能？ 首先得明白，无论是解释执行还是编译执行，代码先要被parse成AST（抽象语法树），AST中是没有分号这个东西的，也就是说单纯执行本身，是不可能因为有无分号而造成性能差异的。所以唯一会有差异的是在parsing代码的阶段。…\n\n<a href=\"/question/26673918/answer/112827195\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/26673918/answer/112827195\">发布于 2016-07-24</a></p>\n\n",
    "link": "https://zhihu.com/question/26673918/answer/112827195"
  },
  {
    "question": "\n有哪些不错的前端开发博客？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">推荐一些我个人订阅的 blog的rss地址。     &lt;br&gt;&lt;i&gt;（以下仅包含国内部分）&lt;/i&gt;  &lt;br&gt;&lt;br&gt;&lt;i&gt;  &lt;br&gt;&lt;/i&gt; &lt;ul&gt;&lt;li&gt;专注前端的一些blog：    &lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;CSS森林(CSS Forest)：&lt;/b&gt;无需多解释了。       &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cssforest.org/blog/index.php%3Fatom%3D1&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cssforest.org/blog/inde&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;x.php?atom=1&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;PuterJam's Blog：&lt;/b&gt;牛人，tx前端库的头头。     &lt;br&gt;  &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.pjhome.net/feed.asp&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pjhome.net/feed.asp&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;      &lt;br&gt;&lt;br&gt;&lt;b&gt;彬Go：&lt;/b&gt;人人网一位高产作者。      &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.bingo929.com/feed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.bingo929.com/feed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;支付宝前端开发车间：&lt;/b&gt;看名字就懂了     &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ued.alipay.com/wd/feed/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ued.alipay.com/wd/feed/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;ria之家--RIA三部曲：&lt;/b&gt;jquery、ext、flex：淘宝几位作者共同撰写的blog，同样十分高产   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.36ria.com/feed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;36ria.com/feed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;幸福收藏夹：&lt;/b&gt;sofish的，不多说了。     &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//feed.sofish.de&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;feed.sofish.de&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;为之漫笔：&lt;/b&gt;李松峰老师，高级js编程等书的译者   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cn-cuckoo.com/feed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cn-cuckoo.com/feed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;前端观察：&lt;/b&gt;学习过程中大量搜索结果都来自于此   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.qianduan.net/feed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;qianduan.net/feed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;WEB前端开发：&lt;/b&gt;愚人码头的站，基本上也是一个教程基地     &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.css88.com/feed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;css88.com/feed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;CssRain-前端技术 ：&lt;/b&gt;又一个教程基地   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cssrain.cn/%3Ffeed%3Drss2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cssrain.cn/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;feed=rss2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;VILIC's Blog：&lt;/b&gt;一员小将，功力不俗   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.vilic.info/blog/feed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;vilic.info/blog/feed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  &lt;ul&gt;&lt;li&gt;介绍一些我认为的牛逼人物的blog：    &lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;老赵：&lt;/b&gt;不解释了，全能，因为搞了jscex，所以可以把他算到前端行列来。   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.zhaojie.me/rss&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.zhaojie.me/rss&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;博客园-三生石上：&lt;/b&gt;亦是js领域牛人，耳熟能详的js秘密花园就是其译作。   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/sanshi/rss.aspx&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/sanshi/rss.&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;aspx&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;博客园-Novice Doodle from Gray Zhang &amp;amp; &lt;/b&gt;&lt;b&gt;宅居：&lt;/b&gt;他有两个blog，百度的前端大牛   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.otakustay.com/feed/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;otakustay.com/feed/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/GrayZhang/rss.aspx&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/GrayZhang/r&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ss.aspx&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;阮一峰：&lt;/b&gt;由于也有很多关于前端的blog，姑且也算他是前端人士吧。   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//feeds.feedburner.com/ruanyifeng&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;feeds.feedburner.com/ru&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;anyifeng&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//typeof.net&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;typeof.net&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：&lt;/b&gt;语言开发层面上的js博客，写手包括老赵， BELLEVE INVIS是主要作者，大牛，写js编译器的，关键是，此人才大一啊，不可估量啊   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//typeof.net/feed/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;typeof.net/feed/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;hax的技术部落格：&lt;/b&gt;也有人提到了，看其博文是种大涨眼界的享受   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//hax.iteye.com/rss&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hax.iteye.com/rss&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;aimingoo的专栏：&lt;/b&gt;爱民老师~   &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/aimingoo/rss.aspx&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.csdn.net/aimingoo/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;rss.aspx&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;博客园-Ruby's Louvre：&lt;/b&gt;司徒正美，除了众多博文外，最近亦有mass Framework 释出    &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/rubylouvre/rss.aspx&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/rubylouvre/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;rss.aspx&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;博客园-Franky：&lt;/b&gt;又一牛~    &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/_franky/rss.aspx&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/_franky/rss&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;.aspx&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt;&lt;b&gt;玉伯：&lt;/b&gt;现在在&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wordpress.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wordpress.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;活动，可惜需要翻墙     &lt;br&gt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//lifesinger.wordpress.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;lifesinger.wordpress.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;     &lt;br&gt;&lt;br&gt; ——————————————      &lt;br&gt;&lt;br&gt; 此外，国内著名公司的一些前端（或前端相关）博客也非常值得订阅，譬如淘宝UED，百度MUX，腾讯CDC等等。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n推荐一些我个人订阅的 blog的rss地址。 <i>（以下仅包含国内部分）</i> <i> </i> 专注前端的一些blog： <b>CSS森林(CSS Forest)：</b>无需多解释了。 <a href=\"//link.zhihu.com/?target=http%3A//www.cssforest.org/blog/index.php%3Fatom%3D1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">cssforest.org/blog/inde</span><span class=\"invisible\">x.php?atom=1</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> <b>PuterJam's Blog：</b>牛人，tx前端库的头头。 <a href=\"//link.zhihu.com/?target=http%3A//www.pjhome.net/feed.asp\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">pjhome.net/feed.asp</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> <b>彬Go：</b>人人网一位高产作者。 …\n\n<a href=\"/question/19951193/answer/13534608\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-12-18\" target=\"_blank\" href=\"/question/19951193/answer/13534608\">编辑于 2011-12-18</a></p>\n\n",
    "link": "https://zhihu.com/question/19951193/answer/13534608"
  },
  {
    "question": "\nAngularJS 在实际应用中有哪些优缺点？\n",
    "author": "徐海峰",
    "content": "\n\n<textarea hidden class=\"content\">谢谢邀请！&lt;br&gt;背景：我们是做 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//worktile.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Worktile&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 的时候使用Angular.js的，当时技术选型的时候是准备使用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//backbonejs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Backbone.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 的，毕竟有很多大公司在使用它，但是实际使用中发现，Backbone太费劲（具体的详细比较我就不说了），偶然发现了Angular.js，顿时被他的模板语言所吸引。&lt;br&gt;&lt;br&gt;优点：&lt;br&gt;1. 模板功能强大丰富，并且是声明式的，自带了丰富的Angular指令；&lt;br&gt;2. 是一个比较完善的前端MV*框架，包含模板，数据双向绑定，路由，模块化，服务，过滤器，依赖注入等所有功能；&lt;br&gt;3. 自定义Directive，比jQuery插件还灵活，但是需要深入了解Directive的一些特性，简单的封装容易，复杂一点官方没有提供详细的介绍文档，我们可以通过阅读源代码来找到某些我们需要的东西，如：在directive使用 $parse；&lt;br&gt;4. ng模块化比较大胆的引入了Java的一些东西（依赖注入），能够很容易的写出可复用的代码，对于敏捷开发的团队来说非常有帮助，我们的项目从上线到目前，UI变化很大，在摸索中迭代产品，但是js的代码基本上很少改动。&lt;br&gt;5. 补充：Angular支持单元测试和e2e-testing。&lt;br&gt;&lt;br&gt;缺点：&lt;br&gt;1. 验证功能错误信息显示比较薄弱，需要写很多模板标签，没有jQuery Validate方便，所以我们自己封装了验证的错误信息提示，详细参考 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/why520crazy/w5c-validator-angular&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;why520crazy/w5c-validator-angular · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ；&lt;br&gt;2. ngView只能有一个，不能嵌套多个视图，虽然有 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/angular-ui/ui-router&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;angular-ui/ui-router · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 解决，但是貌似ui-router 对于URL的控制不是很灵活，必须是嵌套式的（也许我没有深入了解或者新版本有改进）；&lt;br&gt;3. 对于特别复杂的应用场景，貌似性能有点问题，特别是在Windows下使用chrome浏览器，不知道是内存泄漏了还是什么其他问题，没有找到好的解决方案，奇怪的是在IE10下反而很快，对此还在观察中；&lt;br&gt;4. 这次从1.0.X升级到1.2.X，貌似有比较大的调整，没有完美兼容低版本，升级之后可能会导致一个兼容性的BUG，具体详细信息参考官方文档 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//docs.angularjs.org/guide/migration&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;AngularJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，对应的中文版本：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ngnice.com/docs/guide/migration&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Angular 1.0到1.2 迁移指南&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;5. ng提倡在控制器里面不要有操作DOM的代码，对于一些jQuery 插件的使用，如果想不破坏代码的整洁性，需要写一些directive去封装插件，但是现在有很多插件的版本已经支持Angular了，如：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blueimp.github.io/jQuery-File-Upload/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery File Upload Demo&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;6. Angular 太笨重了，没有让用户选择一个轻量级的版本，当然1.2.X后，Angular也在做一些更改，比如把route，animate等模块独立出去，让用户自己去选择。&lt;br&gt;&lt;br&gt;当然使用的人多才会暴露更多的问题，一起为这些问题寻找解决方案是一个社区的良性趋势，选择Angular，的确使我们的开发效率大大提高。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谢谢邀请！ 背景：我们是做 <a href=\"//link.zhihu.com/?target=https%3A//worktile.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Worktile<i class=\"icon-external\"></i></a> 的时候使用Angular.js的，当时技术选型的时候是准备使用 <a href=\"//link.zhihu.com/?target=http%3A//backbonejs.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Backbone.js<i class=\"icon-external\"></i></a> 的，毕竟有很多大公司在使用它，但是实际使用中发现，Backbone太费劲（具体的详细比较我就不说了），偶然发现了Angular.js，顿时被他的模板语言所吸…\n\n<a href=\"/question/22284218/answer/20893162\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-12-16\" target=\"_blank\" href=\"/question/22284218/answer/20893162\">编辑于 2015-11-27</a></p>\n\n",
    "link": "https://zhihu.com/question/22284218/answer/20893162"
  },
  {
    "question": "\n如何面试前端工程师？\n",
    "author": "马骁",
    "content": "\n\n<textarea hidden class=\"content\"> 考查要点：&lt;br&gt;&lt;ul&gt;&lt;li&gt;对Web标准的理解&lt;/li&gt;&lt;li&gt;浏览器差异&lt;/li&gt;&lt;li&gt;CSS基本功：布局、盒模型、选择器优先级及使用等&lt;/li&gt;&lt;li&gt;Javascript 基础、JS面向对象实现原理、闭包机制、作用域&lt;/li&gt;&lt;/ul&gt;通常可以做一些小练习来判断TA的水平，js 虽然很灵活，但是具体的实现方式能体现出一个人的全局观，随着代码规模的增长，复杂度增加，如何合理划分模块实现功能和接口的能力比较重要。这里有一份前不久我出的试题，难度不算大，另存为html 即可 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/darkangle/archive/2011/02/28/1966838.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/darkangle/a&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;rchive/2011/02/28/1966838.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;[2011.3.2 update] 今天看到一篇不错的blog也正好谈到这个问题： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cn-cuckoo.com/2010/01/08/how-nicholas-c-zakas-interviewing-the-front-end-engineer-1332.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cn-cuckoo.com/2010/01/0&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8/how-nicholas-c-zakas-interviewing-the-front-end-engineer-1332.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; </textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n考查要点： 对Web标准的理解浏览器差异CSS基本功：布局、盒模型、选择器优先级及使用等Javascript 基础、JS面向对象实现原理、闭包机制、作用域通常可以做一些小练习来判断TA的水平，js 虽然很灵活，但是具体的实现方式能体现出一个人的全局观，随着代码规…\n\n<a href=\"/question/19568008/answer/12242523\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-02-28\" target=\"_blank\" href=\"/question/19568008/answer/12242523\">编辑于 2011-03-02</a></p>\n\n",
    "link": "https://zhihu.com/question/19568008/answer/12242523"
  },
  {
    "question": "\n开发vue（或类似的MVVM框架）的过程中，需要面对的主要问题有哪些？\n",
    "author": "TANG",
    "content": "\n\n<textarea hidden class=\"content\">既然问的是主要问题，那么我就说下我在开发一个 MVVM 框架中遇到的几个最主要的问/难题吧 ~&lt;br&gt;&lt;br&gt;首先我个人比较喜欢折腾，造了个实现比较完整的 MVVM 框架轮子（指令 API 几乎是参照 Vue 设计的，实现的核心也大致相同，希望了解 MVVM 原理或者实现一个完整的可以看下我的源代码或 Vue 源码）有兴趣的同学可以看下&lt;br&gt;&lt;br&gt; Repository:  &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/tangbc/sugar&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/tangbc/sugar&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; （同时欢迎 Star 和 Contribution）&lt;br&gt;&lt;br&gt;---------- 以下是主要的回答： ----------&lt;br&gt;&lt;br&gt;&lt;br&gt;列举几点我开发 Sugar 或阅读 Vue (1.0.26) 源码时遇到的难题和巧妙之处以及附上我个人极其主观的难度系数和巧妙系数评估：&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;难题一：如何控制指令的编译优先级？（难度系数 6 巧妙系数 6）&lt;/b&gt;&lt;br&gt;&lt;br&gt;如何扫描/提取指令我就不具体说了，就是写一个递归方法遍历所有节点，然后找出所有合法指令（以 v- 开头）放入编译队列，控制指令编译的优先级的场景大概是比如有两个节点：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item of items&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item.id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;因为 v-for 和 v-if 指令的编译优先级别是最高的，所以在编译以上 h1 和 li 节点的时候，需要判断如果有 v-if 或 v-for 必须先编译他们才能保证相同节点上其他指令的正常取值。到这里遇到的另一个问题就是假如进入到了 v-if/v-for 的判断里，如何阻止其他优先级较低的指令继续编译，如果不做处理继续编译的话上面的 v-bind:id=&quot;item.id&quot; 就会无法正常取值。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;难题二：如何解析和获取指令表达式的值？（难度系数 8 巧妙系数 5）&lt;/b&gt;&lt;br&gt;&lt;br&gt;假如指令表达式是更为复杂的带各种运算符的情况比如：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;show || items.length &amp;gt; 0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'Hello, ' + text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item of items&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;v-bind:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item.id + text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这种情况应当如何去获取表达式的值（或者可以将问题理解为如何执行并获取字符表达式的值）？我们很容易想到用 new Function() 可以实现，但是直接 new Function(&quot;return show || items.length &amp;gt; 0&quot;) 可不行，因为 new Function() 弄出来的函数只能访问全局变量，所以需要在表达式上做些改动。&lt;br&gt;&lt;br&gt;在 MVVM 指令中每个表达式都有一个类似于 JS 中作用域的 scope，所有表达式的取值均在这个作用域上，所以不难得出这个 scope 其实就是数据模型对象或其加工后的对象，我们要得到的就是区分变量和常量并且给变量加上 scope 的表达式比如：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; \n    &lt;span class=&quot;na&quot;&gt;v-if=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scope.show || scope.items.length &amp;gt; 0&quot;&lt;/span&gt; \n    &lt;span class=&quot;na&quot;&gt;v-text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'Hello, ' + scope.text&quot;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; \n        &lt;span class=&quot;na&quot;&gt;v-for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;item of scope.items&quot;&lt;/span&gt; \n        &lt;span class=&quot;na&quot;&gt;v-bind:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;scope.item.id + scope.text&quot;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;当然如果你设计的框架要求使用者必须全部手动带上 scope . xxx 的话这个难题就不存在了 。所以这个问题其实就转化成为了如何把字符串 &quot;show || items.length &amp;gt; 0&quot; 变成 &quot;scope.show || scope.items.length &amp;gt; 0&quot;，这时候用 new Function(&quot;scope&quot;, &quot;return scope.show || scope.items.length &amp;gt; 0&quot;) 就可以指定参数作用域进行取值了，由于是用 new Function() 来生成取值函数，所以其他边缘问题还要考虑限制恶意执行的表达式或 JS 关键字，这个问题对于正则表达式玩的溜的人来说绝对不算是难题，因为本人正则比较菜，所以难度系数定在了 8 ~&lt;br&gt;&lt;br&gt;另外还有一个也不算是难题但是实现很巧妙的地方就是比如上面 v-for 循环下的 v-bind:id=&quot;scope.item.id + scope.text&quot; 的取值问题，这里的 scope.item.id 是需要在 v-for 作用域上取值的，但是 scope.text 又是顶层数据模型 $data 上的取值！那这个 scope 到底是个什么样神奇的东西才能同时拥有“两个”取值作用域？其实很简单，就是利用原型！只要将 v-for 中的 vforScope 的原型指向 $data 即可：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vforScope&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;然后在 vforScope 上定义 item 域（术语为 alias）为数组的选项即可：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;vforScope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xxx'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;此时这个 vforScope 既可以在自己的取值域（优先）也可以在 $data 上取值，所以当访问 scope.item.id 就会返回 'xxx' 此时就算是数据模型上有一个同名的 key 比如 $data.item = 123 也不会影响在 v-for 中的取值，因为先访问自己的再访问父级的（原型上）的值。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;难题三：如何实现数据订阅模块？（难度系数 7 巧妙系数 7）&lt;/b&gt;&lt;br&gt;&lt;br&gt;数据订阅是 MVVM 内部的最重要的模块部件之一，是实现数据驱动的核心。这个不太容易用具体的使用场景例子来说明遇到的问题。但是数据订阅模块的实现功能目的非常清晰和明确，就是实现对一个表达式中的任意依赖的变更能产生回调通知，比如：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Watcher&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;'Hello, ' + name + ', ' + text&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;c1&quot;&gt;// 这里需要监听的依赖是 name 和 text&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;数据订阅模块的内部处理需要结合指令表达式的解析结果和依赖追踪机制，是一个承上启下的重要环节，也是有很多的难题和巧妙点，这里不一一列举了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;难题四：如何追踪指令表达式的所有依赖？（难度系数 4 巧妙系数 9）&lt;/b&gt;&lt;br&gt;&lt;br&gt;好吧，当我看到 Vue 源码将 Observer, Depender 和 Watcher 相结合来对任意复杂指令进行依赖追踪的实现后，我感觉这个实在实在是太太太太太巧妙了！！&lt;br&gt;&lt;br&gt;我最初的构思和想法是类似利用一些比较著名的第三方对象变化监测库（哪怕造一个适合 MVVM 场景的）来实现对 $data 变化的监听（Object.observe 已狗带），利用取值的访问路径来实现依赖的追踪，这个方案的确可以实现一个监测依赖变更的 Watcher 并且利用这个思路去实现一个最简单的 MVVM（我的 Sugar 1.2 版本之前的就是这么做的）, 但是基于访问路径的依赖追踪限制非常的多：不能更新依赖，不能分解依赖，不能实现计算属性等，其实也不是不能实现，只是实现起来蛋疼无比而且还不稳定代码量还超级多还难以维护。&lt;br&gt;&lt;br&gt;所以要实现一个小巧玲珑并且功能强大稳定的 MVVM 用对象变化监测模块+访问路径来实现依赖追踪显然不合适。其实 Vue 的做法巧妙的地方更接近于“只拦截不监测”，或者换种说法是在拦截中用 depend 模块来代替监测（依赖驱动）。大致的三个步骤简要概括下：&lt;br&gt;&lt;br&gt;1. 依赖追踪的前期工作要在 MVVM 编译之前就应该开始了，做法就是拦截 $data 对象中每一个属性的 get 和 set（对象存取描述符 Object.defineProperty 目前分析这个的文章应该一搜几箩筐）。然后在每一次拦截前预先生成一个 depend 实例，这个实例需要做的只有两件事：一是在当前被拦截的属性被 get（访问到）的时候把自己交给数据订阅模块 Watcher 作记录；二是在当前被拦截的属性被 set（设置新值）的时候告诉跟自己有关系的所有 Watcher ：“我的值变成 XXX 了，你们都马上更新下！”。&lt;br&gt;&lt;br&gt;2. 在指令表达式被解析的阶段比如 new Function(&quot;scope&quot;, &quot;return scope.show || scope.items.length &amp;gt; 0&quot;) 时会去访问 scope (这里就是 $data) 的 show 和 items，此时 show 和 items 所在的拦截被触发，负责拦截的 depend 就会分别记住他们两个（参见步骤 1 中 depend 的职责），一旦发生变化立刻通知给 Watcher。&lt;br&gt;&lt;br&gt;3. Watcher 实例中关联了该表达式的所有的 depend 实例，只要任意一个依赖变化，表达式收到通知后重新求值并回调给用到该 Watcher 的具体指令实例，指令实例在收到变更通知的同时也能拿到新值和旧值，这样就实现了数据驱动视图（Model drive View）的模式。&lt;br&gt;&lt;br&gt;用 Observer + Depender + Watcer 这个模式来实现依赖追踪机制加起来不过 600 行左右的代码就实现了 MVVM 中最最核心的功能。利用这个模式就可以轻而易举地实现 vm.$watch 这个 API；此外，在这个模式下只用了不超过 30 行 JS 代码就实现了强大的计算属性功能。&lt;br&gt;&lt;br&gt;&lt;br&gt;暂时列举这些难题吧，或许对于不同的人来说这些不一定都是难题。其实实现一个 MVVM 还有很多有趣/巧妙的问题，比如数组的变异方法处理、v-for 循环列表的优化或复用、事件绑定函数和参数处理等等。只要解决了难题，难题就变成了巧妙之处，所以有兴趣就看源码吧，有动力就造轮子吧！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n既然问的是主要问题，那么我就说下我在开发一个 MVVM 框架中遇到的几个最主要的问/难题吧 ~ 首先我个人比较喜欢折腾，造了个实现比较完整的 MVVM 框架轮子（指令 API 几乎是参照 Vue 设计的，实现的核心也大致相同，希望了解 MVVM 原理或者实现一个完整的可…\n\n<a href=\"/question/53176471/answer/134004234\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-12-02\" target=\"_blank\" href=\"/question/53176471/answer/134004234\">编辑于 2016-12-04</a></p>\n\n",
    "link": "https://zhihu.com/question/53176471/answer/134004234"
  },
  {
    "question": "\n为什么 TypeScript 成功了，更先进的 ActionScript 却失败了？\n",
    "author": "黄玄",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;2016 年了，还有人在关心 ActionScript，我感到很是欣慰啊。&lt;/b&gt;&lt;br&gt;作为一个老老老老老 Flasher 来说两句。&lt;br&gt;&lt;br&gt;题主问得  “如果当年 Adobe 对 Flash 见好就收，把 ActionScript 作为以浏览器为目标平台的语言，会取得成功吗？” 和 &lt;a data-hash=&quot;64ea560a29c1a17c50c07475198c6886&quot; href=&quot;//www.zhihu.com/people/64ea560a29c1a17c50c07475198c6886&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@张程易&quot; data-hovercard=&quot;p$b$64ea560a29c1a17c50c07475198c6886&quot;&gt;@张程易&lt;/a&gt; 回答的 “针对题主的第二个问题，我想说，Adobe并没有能力影响浏览器，微软的VBscript凭借Windows内嵌的IE6都没有成功，Adobe有什么能力能占领浏览器平台呢？”&lt;br&gt;&lt;br&gt;&lt;b&gt;其实都不对。啊，简直大错特错。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Adobe 当然想到了把 ActionScript 作为以浏览器为目标平台的语言，Adobe 也当然有能力影响浏览器平台……&lt;/b&gt;&lt;br&gt;&lt;br&gt;君可知浏览器御用语言 JavaScript 背后的 ECMAScript 规范，又可曾听过传说中的 ECMAScript 4th Edition？&lt;br&gt;君可知这个规范由 Adobe 与 JavaScript 作者 Brendan Eich 联手打造，却最终惨遭遗弃，而其唯一实现，就是 Flash 中 ActionScript 3.0 ？&lt;br&gt;君可知从 1999 年的 ES3，到 2009 年的 ES5（Harmony），这段长达十年之久的历史里，又发生了什么惊天地泣鬼神的故事？&lt;br&gt;&lt;br&gt;欢迎来到《走进科学》。&lt;br&gt;&lt;br&gt;啊不，是《知乎 Wiki》&lt;br&gt;知乎上关于这个问题的好答案，真的太多了，由衷感谢下面各位。&lt;br&gt;&lt;br&gt;&lt;b&gt;1.  &lt;a href=&quot;http://zhihu.com/question/24715618/answer/34794413&quot; class=&quot;internal&quot;&gt;ECMAScript 6 会重蹈 ECMAScript 4 的覆辙吗？ - 尤雨溪的回答&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;ES4 的故事相当复杂... 我一时八卦心起整理了一下：&lt;br&gt;2005 年开始弄 ES4 的主要是 Brendan Eich 和开发了 AS3 的 macromedia（后来是收购 macromedia 的 Adobe）……&lt;/blockquote&gt;ES4 的历史与八卦，听小右哥 &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt; 给你娓娓道来。下面的参考文献也满是干货。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2. &lt;a href=&quot;http://zhihu.com/question/24715618/answer/34813745&quot; class=&quot;internal&quot;&gt;ECMAScript 6 会重蹈 ECMAScript 4 的覆辙吗？ - 贺师俊的回答&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;ES4被干掉我个人觉得很大程度上是“政治”原因而非技术原因。注意本段均为带有强烈个人观点的阴谋论叙述……&lt;br&gt;&lt;/blockquote&gt;&lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt; 贺老之所以为贺老，看的就是贺老犀利的观点。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;3. &lt;a href=&quot;http://zhihu.com/question/19728465/answer/63865048&quot; class=&quot;internal&quot;&gt;未来是 HTML 5 还是 Flash 的时代？ - 知乎用户的回答&lt;/a&gt;&lt;br&gt;&lt;/b&gt;&lt;blockquote&gt;1999年开始接触Flash技术，2000年向Macromedia提交了Flash AS1的Math相关算法而成为beta tester，2003年是Macromedia Flash的dev volunteer, 2004年成为Macromedia在中国的第一个技术员工，2005年，Adobe并购Macromedia结束，进入Adobe做工程师，2008成为Flash Video与Flash Media Server的大客户技术经理，2009年成为Flash Platform Evangelist......&lt;br&gt;&lt;/blockquote&gt;来自 Egret Co-founder，Adobe 中国 Flash 平台教主级人物 &lt;a data-hash=&quot;557cc99bfe762006cbe8be655320af2b&quot; href=&quot;//www.zhihu.com/people/557cc99bfe762006cbe8be655320af2b&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@马鉴&quot; data-hovercard=&quot;p$b$557cc99bfe762006cbe8be655320af2b&quot;&gt;@马鉴&lt;/a&gt;，3000 赞的大回答，分享他与 Flash 与 AS 的沸腾十五年。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;4. &lt;a href=&quot;https://www.zhihu.com/question/27078280/answer/35808030&quot; class=&quot;internal&quot;&gt;如何看待 HTML5 开源游戏引擎 Egret，HTML5 游戏开发的前景如何？ - 知乎用户的回答&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;Egret 为何用TypeScript？为何不用Dart,AtScript或者其他？&lt;br&gt;TypeScript（TS）是一个严格意义上JavaScript超集......&lt;/blockquote&gt;同样来自 &lt;a data-hash=&quot;557cc99bfe762006cbe8be655320af2b&quot; href=&quot;//www.zhihu.com/people/557cc99bfe762006cbe8be655320af2b&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@马鉴&quot; data-hovercard=&quot;p$b$557cc99bfe762006cbe8be655320af2b&quot;&gt;@马鉴&lt;/a&gt;，由于 Egret 的设计非常非常接近 Flash，而 TS 又非常接近 AS3……里面有关 ES Feature Set 和 Flash vs Egret 的图挺不错的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;5. &lt;a href=&quot;https://www.zhihu.com/question/23940320/answer/26149559&quot; class=&quot;internal&quot;&gt;Flash 动画是如何兴起和衰退的？ - 曾嵘的回答&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;Flash 和Flash MV依然会有市场，它们还会在自己的领域继续发光，Adobe依然可以开心地卖软件，Macromedia依然是死不瞑目。&lt;br&gt;只是——这世界变了。&lt;/blockquote&gt;大概是我在知乎上关注的第一个 Flasher  &lt;a data-hash=&quot;cbdfeb87f31f79e0b8db33f96ebd5869&quot; href=&quot;//www.zhihu.com/people/cbdfeb87f31f79e0b8db33f96ebd5869&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@曾嵘&quot; data-hovercard=&quot;p$b$cbdfeb87f31f79e0b8db33f96ebd5869&quot;&gt;@曾嵘&lt;/a&gt;，2013 年还力挺 Flash/AIR 的他，2014 年的答案里已经满满都是心酸。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;6. &lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/ECMAScript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; - wikipedia&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;By August 2008, the ECMAScript 4th edition proposal had been scaled back into a project codenamed ECMAScript Harmony.&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;7. &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/63036/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;趣文：编程语言拟人化（第二弹）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;“她的父亲是有名的设计师，但是在她5岁的时候被卷入战火身亡。她希望为即将到来的和平时代出一份力，比谁都更早开始学习这门语言，然而在好不容易能说好这门语言的时候，这语言被采用为公用语的提案泡汤了。”&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;这个世界上纯粹的东西不多，技术算一个。&lt;br&gt;可是就算是技术，也不是那么纯粹的。&lt;br&gt;&lt;br&gt;&lt;br&gt;不说了，满满都是泪。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/6290ea1c0b8644911db3de487063bf83_b.png&quot; data-rawwidth=&quot;597&quot; data-rawheight=&quot;182&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;597&quot; data-original=&quot;https://pic4.zhimg.com/6290ea1c0b8644911db3de487063bf83_r.png&quot;&gt;&lt;br&gt;那年的英语比现在还渣。&lt;br&gt;那年我还说着 HTML5 腊鸡，Flash 牛逼。&lt;br&gt;那年。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/6290ea1c0b8644911db3de487063bf83_200x112.png\" data-rawwidth=\"597\" data-rawheight=\"182\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/6290ea1c0b8644911db3de487063bf83_r.png\">\n<b>2016 年了，还有人在关心 ActionScript，我感到很是欣慰啊。</b> 作为一个老老老老老 Flasher 来说两句。 题主问得 “如果当年 Adobe 对 Flash 见好就收，把 ActionScript 作为以浏览器为目标平台的语言，会取得成功吗？” 和 <a data-hash=\"64ea560a29c1a17c50c07475198c6886\" href=\"//www.zhihu.com/people/64ea560a29c1a17c50c07475198c6886\" class=\"member_mention\" data-editable=\"true\" data-title=\"@张程易\" data-hovercard=\"p$b$64ea560a29c1a17c50c07475198c6886\">@张程易</a> 回答的 “针对题主的第二…\n\n<a href=\"/question/49170215/answer/114640341\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-02\" target=\"_blank\" href=\"/question/49170215/answer/114640341\">编辑于 2016-08-02</a></p>\n\n",
    "link": "https://zhihu.com/question/49170215/answer/114640341"
  }
]