<!DOCTYPE html>
<html lang="zh-CN" dropEffect="none" class="no-js topic-pages">
<head>
<meta charset="utf-8" />

<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="renderer" content="webkit" />
<meta http-equiv="X-ZA-Response-Id" content="0002bfb17e1b7886">
<meta http-equiv="X-ZA-Experiment" content="default:None">

<title>前端开发 - 话题精华 - 知乎</title>

<meta name="apple-itunes-app" content="app-id=432274380" />


<meta name="description" content="Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？120822个最新问答，点击查看更多>>" />

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta http-equiv="mobile-agent" content="format=html5;url=https://www.zhihu.com/topic/19550901/top-answers">
<meta id="znonce" name="znonce" content="67716185e240415b96ca4de2ce6b533a">



<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-152.87c020b9.png" sizes="152x152">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-120.496c913b.png" sizes="120x120">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-76.dcf79352.png" sizes="76x76">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-60.9911cffb.png" sizes="60x60">


<link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">

<link rel="search" type="application/opensearchdescription+xml" href="https://static.zhihu.com/static/search.xml" title="知乎" />
<link rel="stylesheet" href="https://static.zhihu.com/static/revved/-/css/z.96020364.css">





<!--[if lt IE 9]>
<script src="https://static.zhihu.com/static/components/respond/dest/respond.min.js"></script>
<link href="https://static.zhihu.com/static/components/respond/cross-domain/respond-proxy.html" id="respond-proxy" rel="respond-proxy" />
<link href="/static/components/respond/cross-domain/respond.proxy.gif" id="respond-redirect" rel="respond-redirect" />
<script src="/static/components/respond/cross-domain/respond.proxy.js"></script>
<![endif]-->
<script src="https://static.zhihu.com/static/revved/-/js/instant.14757a4a.js"></script>

<link rel="canonical" href="https://www.zhihu.com/topic/19550901" />

</head>

<body class="zhi ">




<div role="navigation" class="zu-top" data-za-module="TopNavBar">
<div class="zg-wrap modal-shifting clearfix" id="zh-top-inner">
<a href="/" class="zu-top-link-logo" id="zh-top-link-logo" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_zhihu_logo">知乎</a>

<div class="top-nav-profile">
<a href="/people/liu-yuan-39-9" class="zu-top-nav-userinfo ">
<span class="name">文刀水原</span>
<img class="Avatar" src="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_s.png" srcset="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_xs.png 2x" alt="文刀水原" />
<span id="zh-top-nav-new-pm" class="zg-noti-number zu-top-nav-pm-count"
style="visibility:hidden" data-count="0">

</span>
</a>
<ul class="top-nav-dropdown" id="top-nav-profile-dropdown">
<li>
<a href="/people/liu-yuan-39-9">
<i class="zg-icon zg-icon-dd-home"></i>我的主页
</a>
</li>

<li>
<a href="/inbox">
<i class="zg-icon zg-icon-dd-pm"></i>私信
<span id="zh-top-nav-pm-count" class="zu-top-nav-pm-count zg-noti-number"
style="visibility:hidden" data-count="0">

</span>
</a>
</li>
<li>
<a href="/settings">
<i class="zg-icon zg-icon-dd-settings"></i>设置
</a>
</li>
<li>
<a href="/logout">
<i class="zg-icon zg-icon-dd-logout"></i>退出
</a>
</li>
</ul>

</div>



<button class="zu-top-add-question" id="zu-top-add-question">提问</button>


<div role="search" id="zh-top-search" class="zu-top-search">
<form method="GET" action="/search" id="zh-top-search-form" class="zu-top-search-form">



<input type="hidden" name="type" value="content">
<label for="q" class="hide-text">知乎搜索</label><input type="text" class="zu-top-search-input" id="q" name="q" autocomplete="off" value="" maxlength="100" placeholder="搜索你感兴趣的内容...">
<button type="submit" class="zu-top-search-button"><span class="hide-text">搜索</span><span class="sprite-global-icon-magnifier-dark"></span></button>
</form>
</div>



<div id="zg-top-nav" class="zu-top-nav">
<ul class="zu-top-nav-ul zg-clear">

<li class="zu-top-nav-li " id="zh-top-nav-home">
<a class="zu-top-nav-link" href="/" id="zh-top-link-home" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_home">首页</a>
</li>



<li class="top-nav-topic-selector zu-top-nav-li current" id="zh-top-nav-topic">
<a class="zu-top-nav-link" href="/topic" id="top-nav-dd-topic">话题</a>
</li>

<li class="zu-top-nav-li " id="zh-top-nav-explore">
<a class="zu-top-nav-link" href="/explore">发现</a>
</li>

<li class="top-nav-noti zu-top-nav-li ">
<a class="zu-top-nav-link" href="javascript:;" id="zh-top-nav-count-wrap" role="button"><span class="mobi-arrow"></span>消息</a>
</li>



</ul>
<div class="zu-top-nav-live zu-noti7-popup zg-r5px no-hovercard" id="zh-top-nav-live-new" role="popup" tabindex="0">
<div class="zu-top-nav-live-inner zg-r5px">
<div class="zu-top-live-icon">&nbsp;</div>
<div class="zu-home-noti-inner" id="zh-top-nav-live-new-inner">
<div class="zm-noti7-popup-tab-container clearfix" tabindex="0">
<button class="zm-noti7-popup-tab-item message">
<span class="icon">消息</span>
</button>
<button class="zm-noti7-popup-tab-item user">
<span class="icon">用户</span>
</button>
<button class="zm-noti7-popup-tab-item thanks">
<span class="icon">赞同和感谢</span>
</button>
</div>
</div>
<div class="zm-noti7-frame-border top"></div>
<div class="zm-noti7-frame">
<div class="zm-noti7-content message">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content user" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content thanks" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
</div>
<div class="zm-noti7-frame-border bottom"></div>
<div class="zm-noti7-popup-footer">
<a href="/notifications" class="zm-noti7-popup-footer-all zg-right">查看全部 &raquo;</a>
<a href="/settings/notification" class="zm-noti7-popup-footer-set" title="通知设置" ><i class="zg-icon zg-icon-settings"></i></a>
</div>
</div>
</div>

</div>

</div>
</div>


<div class="zu-global-notify" id="zh-global-message" style="display:none">
<div class="zg-wrap">
<div class="zu-global-nitify-inner">
<a class="zu-global-notify-close" href="javascript:;" title="关闭" name="close">x</a>
<span class="zu-global-notify-icon"></span>
<span class="zu-global-notify-msg"></span>
</div>
</div>
</div>




<div class="zg-wrap zu-main clearfix "  role="main">
<div class="zu-main-content">
<div class="zu-main-content-inner">


<div itemscope itemtype="https://schema.org/CreativeWork/Topic">
<div class="topic-avatar" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
<div>
<a class="zm-entry-head-avatar-link" href="/topic/19550901" id="zh-avartar-edit-form">
<img alt="前端开发" src="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_m.jpg" class="zm-avatar-editor-preview"></a>
<meta itemprop="image" content="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_l.jpg" />
</div>

<span class="zm-entry-head-avatar-edit-button">修改</span>

</div>
<div class="topic-info">
<div class="topic-name" id="zh-topic-title">
<h1 class="zm-editable-content" data-disabled="1">前端开发</h1>
<div class="zm-editable-editor-wrap" style="display:none">
<input type="text" class="zm-editable-editor-input zg-form-text-input" style="width:150px" />
<span class="zm-command">
<a href="javascript:;" name="save" class="zg-btn-blue" style="margin:0 15px;">完成</a>
<a href="javascript:;" name="cancel" class="zm-command-cancel">取消</a>
</span>
</div>
</div>
<a href="#" class="meta-item share-button zg-right" name="share"><i class="z-icon-share"></i>分享</a>


<div class="zm-topic-topbar">
<div class="zm-topic-topbar-nav clearfix">


<ul class="zm-topic-topbar-nav-list zg-left clearfix">






<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/hot">动态</a>
</li>





<li class="zm-topic-topbar-nav-list-item current">
<span>精华</span>
</li>





<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/unanswered">等待回答</a>
</li>



</ul>

</div>

</div>
</div>
<div class="zm-topic-list-container" itemprop="hasPart" itemscope itemtype="http://schema.org/ItemList/QuestionList">
<div class="zu-top-feed-list" id="zh-topic-top-page-list">
<meta itemprop="questionCount" content="36908" />
<meta itemprop="topAnswerCount" content="1000" />
<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="1" data-type="Answer">
<link itemprop="url" href="/question/22689579/answer/22318058">
<meta itemprop="answer-id" content="4128354" />
<meta itemprop="answer-url-token" content="22318058" />
<meta itemprop="answerCount" content="67" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/22689579" target="_blank" data-id="1256541" data-za-element-name="Title">
Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/22689579/answer/22318058">
<!-- <meta itemprop="answer-id" content="4128354">
<meta itemprop="answer-url-token" content="22318058"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>12K</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">12K</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$zhang-qiu-yi-27"
target="_blank" href="/people/zhang-qiu-yi-27"
>张秋怡</a></span><span title="@ alinode 团队" class="bio">
@ alinode 团队
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="12032" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">12032</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1256541" data-action="/answer/content" data-author-name="张秋怡" data-entry-url="/question/22689579/answer/22318058">

<textarea hidden class="content">一个学期前我也和楼主差不多不知道这些都是啥，一个学期之后差不多都弄懂了，来讲讲自己的理解吧 &amp;gt; &amp;lt; 因为接触的时间不是很长，有错误的地方欢迎指正~&lt;br&gt;&lt;br&gt;首先要知道网站访问大概是什么个过程：&lt;br&gt;假设你在浏览器地址栏输入这个问题的地址&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://www.zhihu.com/question/22689579
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;访问过程和下图差不多，浏览器和服务器交流，服务器和数据库交流（有时候数据库就在服务器那台机子上）&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;591&quot; data-rawwidth=&quot;842&quot; src=&quot;https://pic4.zhimg.com/528560fb56581ae59a16e48309835003_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;842&quot; data-original=&quot;https://pic4.zhimg.com/528560fb56581ae59a16e48309835003_r.jpg&quot;&gt;&lt;br&gt;&lt;b&gt;HTML 与 CSS&lt;/b&gt;&lt;br&gt;你家电脑拿到一个 html （就是上图 HTTP 响应的 body 里的内容）之后，就会对它进行解析渲染。HTML 就是一种标记语言。类比一下，大家在论坛上经常会用一些代码来添加富文本内容，举一些栗子：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[img]图片地址[/img]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    用来贴图&lt;/li&gt;&lt;li&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[url]超链接[/url]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  用来贴地址&lt;/li&gt;&lt;li&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;[del]呵呵[/del]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  表示标签里的文字应该被删掉（默认添加删除线效果）&lt;/li&gt;&lt;/ul&gt;这种&lt;b&gt;论坛代码&lt;/b&gt;也是一种标记语言，HTML 的作用就和它差不多。服务器返回给你的html文件里面，写的是一些代码，大概是这样的：&lt;br&gt;&lt;img data-rawheight=&quot;384&quot; data-rawwidth=&quot;511&quot; src=&quot;https://pic3.zhimg.com/009681382de97041f5fd88f15af96af6_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;511&quot; data-original=&quot;https://pic3.zhimg.com/009681382de97041f5fd88f15af96af6_r.jpg&quot;&gt;浏览器拿到这些代码之后，分析一下给你渲染好页面显示出来，如果不用css，效果是这样的，按照浏览器默认的样式显示出列表、图片、超链接、输入框、按钮等等：&lt;br&gt;&lt;img data-rawheight=&quot;362&quot; data-rawwidth=&quot;330&quot; src=&quot;https://pic2.zhimg.com/8df8c13d0201f95d376713316ba8b4c5_b.jpg&quot; class=&quot;content_image&quot; width=&quot;330&quot;&gt;&lt;br&gt;是不是觉得默认样式有点看瞎狗眼呢……所以很多时候我们需要自定义样式，现行通用的规定样式的语言是CSS，我们可以用它写一些定义样式的代码，然后在 html 文件里用一个&amp;lt;link&amp;gt;标签把这些规定样式的 CSS 代码与表达内容语义的 HTML 代码关联起来，然后你就能看到一个符合人类正常审美的页面了:&lt;br&gt;&lt;img data-rawheight=&quot;296&quot; data-rawwidth=&quot;662&quot; src=&quot;https://pic1.zhimg.com/09c5f8383fa0a5a33379971809fc7cc4_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;662&quot; data-original=&quot;https://pic1.zhimg.com/09c5f8383fa0a5a33379971809fc7cc4_r.jpg&quot;&gt;&lt;br&gt;CSS 代码的格式基本是&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;属性:值
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;比如知乎顶上那个蓝色的导航条，它的 CSS 大约是这样的&lt;br&gt;&lt;img data-rawheight=&quot;256&quot; data-rawwidth=&quot;408&quot; src=&quot;https://pic2.zhimg.com/3f351f51a9043d6166985ff2be4742b1_b.jpg&quot; class=&quot;content_image&quot; width=&quot;408&quot;&gt;&lt;br&gt;第一个属性对应的代码翻译成人话，就是它的位置（position）应该是不动（fixed）的，浏览器会兢兢业业地去实现这段代码要求实现的效果，
所以你在页面上翻来翻去顶上那个导航条都会死死地黏在窗口顶部不跟着滚动。&lt;br&gt;再拿里面的其他几个属性做栗子解释一下就是：&lt;br&gt;&lt;ul&gt;&lt;li&gt;left 和 top 
为零指明这个导航条要紧贴着窗口的左上角&lt;/li&gt;&lt;li&gt;width 和 height 指定这个导航条的宽和高&lt;/li&gt;&lt;li&gt;background 
指明这个导航条的背景是一种渐变的蓝色&lt;/li&gt;&lt;/ul&gt;浏览器就会根据这些 CSS 代码，“画”出对应的样式。&lt;br&gt;&lt;br&gt;&lt;b&gt;HTML 5 与 XHTML&lt;/b&gt;&lt;br&gt;像人的语言一样，网络上的网页里的 HTML 代码也不一定是标准的，好比有时候你发音不太标准，别人会去猜测你说的到底是什么一样，有些时候前端程序猿不小心写错了 HTML，浏览器也会试图猜测他们原来想写的是什么，做对应的渲染，而猜是要有一个常识做依据的。加上有些浏览器支持一些标签，有一些又不支持，以及其他混乱的情况，为了防止大家鸡同鸭讲，我们需要对 HTML 代码里能有什么标签，标签怎么写，标签可以有什么属性这些东西有一定的共识，建立一个通行的标准，HTML5 就是其中一个比较新的标准。这个标准新加了很多可以用的标签和属性，然后各大浏览器也吭哧吭哧按这个标准去实现了很多这些新加的标签和属性，本来前端程序员要写一堆代码去实现的效果，现在浏览器都给你实现好了，只要写两三行，调用一下浏览器给你实现的部分就能搞定，简单愉快，所以很多人都在热情地推广这个标准~（当然新标准也不可能是完美的，总会有一些问题，怕跑题这里按下不表~）&lt;br&gt;&lt;br&gt;至于 XHTML，就是 HTML 的近亲 XML 和 HTML 自己的杂交品种，对语法要求比较严格，并且为了兼容 XML，在语法上与 HTML 有一些不同~&lt;br&gt;&lt;br&gt;&lt;b&gt;JavaScript 与浏览器脚本&lt;/b&gt;&lt;br&gt;有了表示内容和语义的 HTML，规定样式的 CSS，得到的是一个静态的页面，没什么动画（其实用 CSS 还是可以有一些动画的，不过这个跑题了），按 F5 才会刷新数据，都 21世纪了，这么呆板单调的网页怎么能展现我大智人种族的创造性口胡！于是我们有了 Javascript（JS） 来给页面添加一些动态的效果，比如知乎问题的标签，鼠标移上去会弹出一个小窗口，这个就是 JS 实现的效果啦。&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;274&quot; data-rawwidth=&quot;532&quot; src=&quot;https://pic4.zhimg.com/dcb4e911b7ee1e74346a821f03363213_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;532&quot; data-original=&quot;https://pic4.zhimg.com/dcb4e911b7ee1e74346a821f03363213_r.jpg&quot;&gt;&lt;br&gt;浏览器都会帮你实现一些 JS 可以用的工具（函数，对象什么的），你只要写一些 JS 的代码，保存在 xxx.js 里，在 html 文件中用 
&amp;lt;script&amp;gt; 关联进来就可以用了，像上图这个效果应该就包括了 &lt;br&gt;&lt;ol&gt;&lt;li&gt;鼠标悬停到标签上时创建一个新的 &amp;lt;div&amp;gt; 小窗口 &lt;br&gt;&lt;/li&gt;&lt;li&gt; 用 JS 
向知乎服务器发送一个请求，得到这个小窗口应该显示的数据，放在这个小窗口里（这就是所谓的AJAX，不用刷新就能与服务器进行交互，更新页面的一小部分~）&lt;/li&gt;&lt;/ol&gt;浏览器拿到这样的代码，就会解析并实现出相应的效果，楼主问的浏览器脚本，指的就是这样子的代码。其实用来写浏览器脚本的，也不是非得JavaScript 不可，当年还为到底用什么语言写这种代码有过一段战火纷飞的时期，但现在尘埃落定，各大浏览器都默认了：请用 
JS 写这些动态效果的代码给我解析~&lt;br&gt;&lt;br&gt;以上就是前端部分的内容，下面简述一下后端的东西吧&amp;gt; &amp;lt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Web Server 和 Web Services&lt;/b&gt;&lt;br&gt;浏览器给服务器发一个请求，服务器不是一看就知道怎么响应的。首先这些请求和响应要有一个通用的写法，也就是要有一个协议，常用的是 HTTP 协议。&lt;br&gt;像最前面的图，服务器的响应写了一个状态码 200 OK ，是 HTTP 协议里约定俗成的一个东西，服务器写 200 OK 在响应里，表示“你请求的这个东西我有”，如果是404 Not Found，就是“你请求的这个东西我这里没有”。&lt;br&gt;HTTP 响应里还包括很多东西，比如 Content-type 表示服务器发过来的文件类型是什么（文本？动画？图片？音频？），这样发过去了人家浏览器好知道怎么展示给用户看。人家服务器怎么知道按协议要写什么东西进去呢，这就是 Web Server 干活的时候了。&lt;br&gt;&lt;br&gt;形象化一下HTTP响应，大概就长这样：&lt;br&gt;&lt;img data-rawheight=&quot;351&quot; data-rawwidth=&quot;284&quot; src=&quot;https://pic1.zhimg.com/73fc01d295c7e015c11826ef29776d80_b.jpg&quot; class=&quot;content_image&quot; width=&quot;284&quot;&gt;&lt;br&gt;再上个锤子，浏览器和服务器之间请求响应的过程大致是长这样的，右下角的那些东西就是由 Web Server 生成的（服务器脚本可以做一些改动，但这些一般是 Web Server 的份内活）：&lt;br&gt;&lt;img data-rawheight=&quot;349&quot; data-rawwidth=&quot;1364&quot; src=&quot;https://pic2.zhimg.com/2fdad81d11618addf1300d18a86bdf65_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1364&quot; data-original=&quot;https://pic2.zhimg.com/2fdad81d11618addf1300d18a86bdf65_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;再比如说很多时候你访问一个网站，浏览器里输的地址并没有写明你请求的文件，比如这个问题的地址是：&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://www.zhihu.com/question/22689579
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;但知乎的服务器其实返回了一个html给你，服务器怎么知道这个地址对应要返回什么样的 html 代码给你的？也是 Web Server 干的活。&lt;br&gt;&lt;br&gt;除了浏览器输地址敲回车这种赤裸裸的访问，客户端与服务器的交互还有很多种，比如：&lt;br&gt;&lt;ul&gt;&lt;li&gt;前面提到的用 JS 完成的 AJAX，有点像浏览器和服务器之间的悄悄话~&lt;/li&gt;&lt;/ul&gt;还有其他应用软件与服务器的交互，比如：&lt;br&gt;&lt;ul&gt;&lt;li&gt;微信、QQ 与腾讯的服务器的交互&lt;/li&gt;&lt;li&gt;网游客户端与网游公司服务器的交互&lt;/li&gt;&lt;li&gt;搜索引擎用来搜集网页信息的程序（爬虫）与各种各样的网站服务器的交互&lt;br&gt;&lt;/li&gt;&lt;li&gt;只要你知道用什么地址访问、怎样访问人家的服务器，并且有相应权限，你也可以自己写一些程序去和他们的服务器交互（比如用&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//open.weibo.com/wiki/%25E5%25BE%25AE%25E5%258D%259AAPI&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;微博API - 新浪微博API&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;获取微博，开发第三方应用或者做数据分析）。&lt;/li&gt;&lt;/ul&gt;从这些栗子里可以看出，客户端与服务器的交互的主体、客体、载体是五花八门的：&lt;br&gt;&lt;ul&gt;&lt;li&gt;服务器可以是大型机也可以是个人电脑，只要能跑相应的程序就行&lt;/li&gt;&lt;li&gt;客户端像前面举的栗子里一样，可以是各种软件，而且这些软件不一定运行在个人电脑上，也可以是手机、平板、智能穿戴设备等等&lt;/li&gt;&lt;li&gt;有时候不是传生成好的 HTML 或者其他服务器上已经有的文件，而是传输经过一定逻辑处理后生成的字符串或者其他各种封装好的数据&lt;/li&gt;&lt;/ul&gt;像前面提到的 HTML 需要有一定标准一样，为了防止混乱和鸡同鸭讲，我们又需要先对这些机器需要怎么交互达成一定共识，再让它们进行交流。人与人之间通信，需要先有一种大家都认识的写法（比如简体字/繁体字）和一种彼此都懂的语言（比如普通话/广东话）。要让这些形形色色的机器能够通过网络进行交互，我们就需要指明一种协议（比如 HTTP/HTTPS）和一种数据封装格式（比如 HTML/XML），Web Server 提供的 Web Service，指的就是这种协议+格式的交流体系。不过 Web Service 的生态系统和 HTML 的标准不一样，用户可以选择的协议和数据封装格式更多，普通的网站访问用的 HTTP + HTML 只是其中一种，一些封闭系统内的交流还可以自己定义一个协议和格式来用（比如 QQ）。&lt;br&gt;&lt;br&gt;Web Service 传输的数据再经由本地客户端（浏览器、QQ/微信，网游客户端等）的分析渲染，就能够以普通人能够理解的形式展现出来。此外还有一些 Web Service 并不是为普通用户设计的，像前面提到的微博API，是用来给程序猿进行二次开发的~ &lt;br&gt;&lt;br&gt;除了提供 Web Service， Web Server 还会兼顾很多功能，包括提供缓存，平衡负载，这样在访问量比较大的时候能有有条不紊地接客。常见的现成的 Web Server 有开源的 Apache、Nginx和微软的IIS，你也可以用一些工具（比如 Node.js ）自己定制一个。因为 Web Server 需要比较好的性能，所以投产时用的 Web Server 通常是C/C++/Java写的，但是其实很多语言都可以写，而且配合上语言底层的优化和好的模型，其他语言写的 Web Server也可以有不错的表现。&lt;br&gt;&lt;br&gt;&lt;b&gt;PHP ，服务器脚本，Web Framework&lt;/b&gt;&lt;br&gt;开头那张图里服务器接到请求之后可以给访客发送对应的文件，但21世纪的服务器怎么可能只会“接请求-发文件”这么弱智的一招呢，人家还可以处理你上传来的文件的！还可以接受你发过来的各种请求，去操作服务器本地的文件or数据库的！要干这些事，自然服务器那边也少不了要有代码了，这些代码就是服务器脚本。前面说的 Web Service 传输的数据，主要也是由服务器脚本生成，再交由 Web Server ，按照某种协议套好整个响应的格式，返回给客户端的。&lt;br&gt;&lt;br&gt;同一个网址，每个人看到的页面不一定是一样的，比如知乎首页的网址都是&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://www.zhihu.com/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;但是没登陆和登陆之后看到的东西不一样，登陆之后每个人看到的导航栏的用户信息，关注的动态，都不一样。服务器脚本可以对这些不同的状态，生成不同的页面，交给 Web Server 返回给浏览器。&lt;br&gt;知乎的主页给大家看到的 html 整体来说是差不多的，都有导航栏，左边是关注的动态，右边是广告和边栏，每一块的整体构造大同小异，只是一些地方内容有所区别。服务器脚本就是利用已知的数据，在这些因人而异的地方填入相应的内容，生成给每个人看的页面。&lt;br&gt;比如我的主页，导航栏右边的头像和名字跟别人看到的不一样，就是因为这块地方有一个放图片的&amp;lt;img&amp;gt;标签和一个写名字的&amp;lt;span&amp;gt;标签，服务器脚本在查询本地的数据之后给我返回的页面里&amp;lt;img&amp;gt;的标签填了我头像的图片链接，&amp;lt;span&amp;gt;标签里填了我的名字，给别人的页面就填其他链接、其他名字，这样每个人看到的页面就不一样了。&lt;br&gt;&lt;img data-rawheight=&quot;56&quot; data-rawwidth=&quot;597&quot; src=&quot;https://pic1.zhimg.com/500c9bdd6b6397b46d07f249eec5b084_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;597&quot; data-original=&quot;https://pic1.zhimg.com/500c9bdd6b6397b46d07f249eec5b084_r.jpg&quot;&gt;&lt;br&gt;&lt;img data-rawheight=&quot;93&quot; data-rawwidth=&quot;559&quot; src=&quot;https://pic3.zhimg.com/0365d8e71411f27dccc90da76a1ac3c2_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;559&quot; data-original=&quot;https://pic3.zhimg.com/0365d8e71411f27dccc90da76a1ac3c2_r.jpg&quot;&gt;&lt;br&gt;PHP 就是一种常见的用来写服务器脚本的语言，其实只要是能拿来写大家传输数据的通用接口（CGI）的语言都可以用来写服务器脚本（也就是说几乎所有编程语言都可以写 = =b），只是因为现成工具的丰富程度和专攻程度不一样，所以有一些语言在写服务器端脚本的时候会比较热门。&lt;br&gt;&lt;br&gt;为了方便，我们在写服务器脚本的时候，通常还会用个同语言写的 Web Framework 来处理各种细节，防御一些常见的攻击，提供跨站认证（比如用已有的微博账号注册其他网站）的接口，利用cookie处理登陆状态和用户设置，生成网页模版之类的。如果你用 C# 或者 Visual Basic 写服务器脚本，就可以用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ASP.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ASP.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这个框架实现这些功能，帮你省点麻烦。不过现在不少人是反过来为了一个好用的 Web Framework 去选择它对应的服务器脚本语言的。&lt;br&gt;&lt;br&gt;&lt;b&gt;一个普通网站访问的过程&lt;/b&gt;&lt;br&gt;简单概括一下，对于我们普通的网站访问，涉及到的技术就是：&lt;br&gt;&lt;ol&gt;&lt;li&gt;用户操作浏览器访问，浏览器向服务器发出一个 HTTP 请求；&lt;/li&gt;&lt;li&gt;服务器接收到 HTTP 请求，Web Server 进行相应的初步处理，使用服务器脚本生成页面；&lt;/li&gt;&lt;li&gt;服务器脚本（利用Web Framework）调用本地和客户端传来的数据，生成页面；&lt;/li&gt;&lt;li&gt;Web Server 将生成的页面作为 HTTP 响应的 body，根据不同的处理结果生成 HTTP header，发回给客户端；&lt;/li&gt;&lt;li&gt;客户端（浏览器）接收到 HTTP 响应，通常第一个请求得到的 HTTP 响应的 body 里是 HTML 代码，于是对 HTML 代码开始解析；&lt;/li&gt;&lt;li&gt;解析过程中遇到引用的服务器上的资源（额外的 CSS、JS代码，图片、音视频，附件等），再向 Web Server 发送请求，Web Server 找到对应的文件，发送回来；&lt;/li&gt;&lt;li&gt;浏览器解析 HTML 包含的内容，用得到的 CSS 代码进行外观上的进一步渲染，JS 代码也可能会对外观进行一定的处理；&lt;/li&gt;&lt;li&gt;用户与页面交互（点击，悬停等等）时，JS 代码对此作出一定的反应，添加特效与动画；&lt;/li&gt;&lt;li&gt;交互的过程中可能需要向服务器索取或提交额外的数据（局部的刷新，类似微博的新消息通知），一般不是跳转就是通过 JS 代码（响应某个动作或者定时）向 Web Server 发送请求，Web Server 再用服务器脚本进行处理（生成资源or写入数据之类的），把资源返回给客户端，客户端用得到的资源来实现动态效果或其他改变。&lt;/li&gt;&lt;/ol&gt;注意这只是小网站里比较常见的模型，大网站为了解决规模问题还会有很多处理，每个环节都会有一些细微的差异，中间还会使用各种各样的工具减轻服务器的压力，提高效率，方便日常维护~&lt;br&gt;&lt;br&gt;&lt;b&gt;延伸阅读&lt;/b&gt; —— &lt;b&gt;那些看花眼的名词&lt;/b&gt;&lt;br&gt;为了方便调试，很多 Web Framework 会自带一个简单的 Web Server，或者有些 Web Server 会自带一个简单的 Web
 Framework ，实际部署到服务器上开放使用的时候为了性能或者安全等多方面的考虑，可以把内置的 Web Server 换成其他的，比如 
Apache 或者 Nginx （举个栗子，知乎用的是 Tornado 做 Framework，Server 换成了 Nginx，见&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19558038&quot;&gt;知乎使用了哪些框架和开源库？&lt;/a&gt;）。如果是开源的东西，还可以在遵守开源协议的前提下自己改一下再用~&lt;br&gt;&lt;br&gt;因为后端不像前端已经有 HTML + CSS + JS 这样的既定事实标准，服务器脚本与 Web Framework 
的选择很多，所以新手会听到很多眼花缭乱的技术名词的地方多在这里~ 
举一些栗子，早年常见的服务器端语言有：&lt;br&gt;&lt;ul&gt;&lt;li&gt;开源的 PHP&lt;/li&gt;&lt;li&gt;Sun 公司的 JSP 中使用的 Java&lt;/li&gt;&lt;li&gt;微软的 ASP 中使用的 VBScript&lt;/li&gt;&lt;/ul&gt;现在在这方面的应用热起来的语言有&lt;br&gt;&lt;ul&gt;&lt;li&gt; Python，对应常见的 Framework 包括知乎和Quora有用到的 Tornado（其实是自带 Framework 的 Web Server），社区很成熟的 Django （用户包括 Instagram、Pinterest）等&lt;/li&gt;&lt;li&gt;Ruby，一般都用 Rails 这个 Framework，用户包括 Github、早期的 Twitter 等&lt;br&gt;&lt;/li&gt;&lt;li&gt;逆天的 JavaScript，有了 Node.js 这个平台，Web Server、服务器脚本和浏览器脚本全都可以用
 JavaScript 来写……Node.js上最常用的 Framework是Express&lt;br&gt;&lt;/li&gt;&lt;li&gt;微软家的则跟着 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ASP.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ASP.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 转移到了C# 或者 Visual Basic&lt;/li&gt;&lt;li&gt;Erlang，擅长大规模的并发，不少游戏公司拿来写服务器，靠几十个工程师支撑几亿用户的WhatsApp也是用的这个~&lt;/li&gt;&lt;/ul&gt;几种常见的架构包括：&lt;br&gt;&lt;ul&gt;&lt;li&gt;LAMP = Linux + Apache + MySQL + PHP（P还可能是Python或Perl。有时候L会改成W=Windows。），也就是服务器上的操作系统是 Linux，Web Server 用 Apache，数据库用 MySQL，服务器脚本用 PHP，这些都是开源技术，网站起步时用起来的成本会比较低，所以是普通网站里非常常见的架构（虽然对于发展得很大的网站会遇到很多瓶颈），Facebook就是这种，淘宝也曾经是。&lt;/li&gt;&lt;li&gt;J2EE，Java 世界的架构，通常是企业用的（银行、大型公司,.etc），比较常见地还会搭配一种 UNIX 做操作系统，Apache 做 Web Server，Tomcat 转换 JSP 到 Java 给服务器程序用（其实它也自带 Web Server），Oracle 数据库等等。不一定拿来建站，常常用来提供企业里的各种需要用到网络的业务。我们学校教务系统就是用J2EE做的=。= 淘宝现在也是从LAMP转型到了这个。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ASP.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ASP.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，微软家的架构，通常会搭配 Windows Server 操作系统，SQL Server 数据库，IIS 做 Web Server。StackOverflow和京东（曾经）就是这个架构。&lt;/li&gt;&lt;li&gt;神奇的MEAN架构，MongoDB做数据库，Express做 Web Framework，Angular 做前端的 JavaScript 框架，Node.js 用于编写 Web Server。神奇之处在于这几个东西的语言都是 JavaScript （MongoDB的实现不是，但与外界沟通用的语言是）。因为是比较新的架构，还有待时间的考验，不过被很多人（尤其是靠 JavaScript 吃饭的前端程序猿们）热切关注。&lt;/li&gt;&lt;li&gt;一般来说重点不在技术而且在乎成本的新网站比较喜欢用 LAMP，重视安全稳定和速度的企业和机构喜欢 J2EE，想省事的网站喜欢 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ASP.NET&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ASP.NET&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，比较 Geek 的网站和创业公司喜欢折腾各种 Python、Ruby、Node.js世界的东西，Google 这样现成的技术都解决不了需求的超大型网站就自己折腾解决方案。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;虽然可以用的语言和所属体系五花八门，其实服务器端程序要做的事情本质上都差不多的，就好比自然世界中要表达“吃过了没”这句话的意思，你可以用各种各样的语言在各种各样的场景里表达出来~</textarea>


<div class="zh-summary summary clearfix">
<img data-rawheight="591" data-rawwidth="842" src="https://pic4.zhimg.com/528560fb56581ae59a16e48309835003_200x112.jpg" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic4.zhimg.com/528560fb56581ae59a16e48309835003_r.jpg">
一个学期前我也和楼主差不多不知道这些都是啥，一个学期之后差不多都弄懂了，来讲讲自己的理解吧 &gt; &lt; 因为接触的时间不是很长，有错误的地方欢迎指正~ 首先要知道网站访问大概是什么个过程： 假设你在浏览器地址栏输入这个问题的地址 http://www.zhihu.com/…

<a href="/question/22689579/answer/22318058" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-02-10" target="_blank" href="/question/22689579/answer/22318058">编辑于 2014-12-10</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1256541"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>524 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="2" data-type="Answer">
<link itemprop="url" href="/question/20303645/answer/15491214">
<meta itemprop="answer-id" content="1324063" />
<meta itemprop="answer-url-token" content="15491214" />
<meta itemprop="answerCount" content="221" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20303645" target="_blank" data-id="301743" data-za-element-name="Title">
为什么很多看起来不是很复杂的网站，比如 Facebook 需要大量顶尖高手来开发？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20303645/answer/15491214">
<!-- <meta itemprop="answer-id" content="1324063">
<meta itemprop="answer-url-token" content="15491214"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>8868</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">8868</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$zi-liu"
target="_blank" href="/people/zi-liu"
>子柳</a></span><span title="重度网瘾患者，尚未放弃治疗" class="bio">
重度网瘾患者，尚未放弃治疗
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="8868" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<a class="text" data-tooltip="s$t$《2013 年度 300 问 第九辑》" href="/publications/weekly/19550919">知乎周刊</a>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">8868</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="301743" data-action="/answer/content" data-author-name="子柳" data-entry-url="/question/20303645/answer/15491214">

<textarea hidden class="content">就拿淘宝来说说，当作给新人一些科普。&lt;br&gt;&lt;br&gt;先说你看到的页面上，最重要的几个：&lt;br&gt;【搜索商品】——这个功能，如果你有几千条商品，完全可以用select * from tableXX where title like %XX%这样的操作来搞定。但是——当你有10000000000（一百亿）条商品的时候，任何一个数据库都无法存放了，请问你怎么搜索？这里需要用到分布式的数据存储方案，另外这个搜索也不可能直接从数据库里来取数据，必然要用到搜索引擎（简单来说搜索引擎更快）。好，能搜出商品了，是否大功告成可以啵一个了呢？早着呢，谁家的商品出现在第一页？这里需要用到巨复杂的排序算法。要是再根据你的购买行为做一些个性化的推荐——这够一帮牛叉的算法工程师奋斗终生了。&lt;br&gt;&lt;br&gt;【商品详情】——就是搜索完毕，看到你感兴趣的，点击查看商品的页面，这个页面有商品的属性、详细描述、评价、卖家信息等等，这个页面的每天展示次数在30亿以上，同样的道理，如果你做一个网站每天有10个人访问，你丝毫感觉不到服务器的压力，但是30亿，要解决的问题就多了去了。首先，这些请求不能直接压到数据库上，任何单机或分布式的数据库，承受30亿每天的压力，都将崩溃到完全没有幸福感，这种情况下要用到的技术就是大规模的分布式缓存，所有的卖家信息、评价信息、商品描述都是从缓存里面来取到的，甚至更加极致的一点“商品的浏览量”这个信息，每打开页面一次都要刷新，你猜能够从缓存里面来取吗？淘宝做到了，整个商品的详情都在缓存里面。&lt;br&gt;&lt;br&gt;【商品图片】——一个商品有5个图片，商品描述里面有更多图片，你猜淘宝有多少张图片要存储？100亿以上。这么多图片要是在你的硬盘里面，你怎么去查找其中的一张？要是你的同学想拷贝你的图片，你需要他准备多少块硬盘？你需要配置多少大的带宽？你们的网卡是否能够承受？你需要多长时间拷贝给他？这样的规模，很不幸市面上已经没有任何商业的解决方案，最终我们必须自己来开发一套存储系统，如果你听说过google的GFS，我们跟他类似，叫TFS。顺便说一下，腾讯也有这样的一套，也叫TFS。&lt;br&gt;&lt;br&gt;【广告系统】——淘宝上有很多广告，什么，你不知道？那说明我们的广告做的还不错，居然很多人不认为它是广告，卖家怎么出价去买淘宝的广告位？广告怎么展示？怎么查看广告效果？这又是一套算法精奇的系统。&lt;br&gt;&lt;br&gt;【BOSS系统】——淘宝的工作人员怎么去管理这么庞大的一个系统，例如某时刻突然宣布某位作家的作品全部从淘宝消失，从数据库到搜索引擎到广告系统，里面的相关数据在几分钟内全部消失，这又需要一个牛叉的后台支撑系统。&lt;br&gt;&lt;br&gt;【运维体系】——支持这么庞大的一个网站，你猜需要多少台服务器？几千台？那是零头。这么多服务器，上面部署什么操作系统，操作系统的内核能否优化？Java虚拟机能否优化？通信模块有没有榨取性能的空间？软件怎么部署上去？出了问题怎么回滚？你装过操作系统吧，优化过吧，被360坑过没，崩溃过没？这里面又有很多门道。&lt;br&gt;&lt;br&gt;不再多写了，除了上面提到的这些，还有很多很多需要做的技术，当然并不是这些东西有多么高不可攀，任何复杂的庞大的东西都是从小到大做起来的，里面需要牛叉到不行的大犇，也需要充满好奇心的菜鸟，最后这一句，你当我是别有用心好了。</textarea>


<div class="zh-summary summary clearfix">

就拿淘宝来说说，当作给新人一些科普。 先说你看到的页面上，最重要的几个： 【搜索商品】——这个功能，如果你有几千条商品，完全可以用select * from tableXX where title like %XX%这样的操作来搞定。但是——当你有10000000000（一百亿）条商品的时候，…

<a href="/question/20303645/answer/15491214" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/20303645/answer/15491214">发布于 2012-10-30</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-301743"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>320 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="3" data-type="Answer">
<link itemprop="url" href="/question/27457254/answer/36956104">
<meta itemprop="answer-id" content="10172971" />
<meta itemprop="answer-url-token" content="36956104" />
<meta itemprop="answerCount" content="310" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/27457254" target="_blank" data-id="3165798" data-za-element-name="Title">
哪个学校的网站首页最好看？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/27457254/answer/36956104">
<!-- <meta itemprop="answer-id" content="10172971">
<meta itemprop="answer-url-token" content="36956104"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>8284</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">8284</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$K.Kang"
target="_blank" href="/people/K.Kang"
>康凯</a></span><span title="( 啊……本科就要毕业了" class="bio">
( 啊……本科就要毕业了
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="8284" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">8284</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3165798" data-action="/answer/content" data-author-name="康凯" data-entry-url="/question/27457254/answer/36956104">

<textarea hidden class="content">都闪开，怒答一记。 (╯‵□′)╯︵┻━┻&lt;br&gt;最高票答案里有人大官网晒女神的，&lt;br&gt;哼！这就是你们人大的特色吗？&lt;br&gt;你们人大妹子都这么好看吗？&lt;br&gt;&lt;br&gt;我们可不一样，我们向来求实求真，&lt;br&gt;我们给众人呈现最具校园特色的一面，&lt;br&gt;我们用真实而普通的日常情景装点官网！&lt;br&gt;我们的官网才是最接地气的！&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/fd82ee90ecf05200a8950eb45a6ada76_b.jpg&quot; data-rawheight=&quot;480&quot; data-rawwidth=&quot;689&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;689&quot; data-original=&quot;https://pic3.zhimg.com/fd82ee90ecf05200a8950eb45a6ada76_r.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/02d5c9d3f3918354552f1629e120a875_b.jpg&quot; data-rawheight=&quot;286&quot; data-rawwidth=&quot;512&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic2.zhimg.com/02d5c9d3f3918354552f1629e120a875_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;来，哥哥别理她，我们继续谈笑风生。 ( ◔◡◔) (︶.̮︶✽)</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/fd82ee90ecf05200a8950eb45a6ada76_200x112.jpg" data-rawheight="480" data-rawwidth="689" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/fd82ee90ecf05200a8950eb45a6ada76_r.jpg">
都闪开，怒答一记。 (╯‵□′)╯︵┻━┻ 最高票答案里有人大官网晒女神的， 哼！这就是你们人大的特色吗？ 你们人大妹子都这么好看吗？ 我们可不一样，我们向来求实求真， 我们给众人呈现最具校园特色的一面， 我们用真实而普通的日常情景装点官网！ 我们…

<a href="/question/27457254/answer/36956104" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-01-11" target="_blank" href="/question/27457254/answer/36956104">编辑于 2015-01-11</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3165798"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>633 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="4" data-type="Answer">
<link itemprop="url" href="/question/22646257/answer/22113651">
<meta itemprop="answer-id" content="4045223" />
<meta itemprop="answer-url-token" content="22113651" />
<meta itemprop="answerCount" content="186" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/22646257" target="_blank" data-id="1239235" data-za-element-name="Title">
HTML、CSS、JavaScript、PHP、 MySQL 的学习顺序是什么？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/22646257/answer/22113651">
<!-- <meta itemprop="answer-id" content="4045223">
<meta itemprop="answer-url-token" content="22113651"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>8184</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">8184</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$luoyou"
target="_blank" href="/people/luoyou"
>落忧</a></span><span title="程序员" class="bio">
程序员
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="8184" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">8184</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1239235" data-action="/answer/content" data-author-name="落忧" data-entry-url="/question/22646257/answer/22113651">

<textarea hidden class="content">如果你有耐心坚持个一年以上的话, 我会推荐HTML, css ,js, apache ,php, mysql&lt;br&gt;&lt;br&gt;后三者是需要装软件的, 推荐wamp, 绝佳的一站式环境配置, &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.wampserver.com/en/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WampServer, the web development platform on Windows&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;   直接包括了apache, php, mysql三个软件, 省的自己一个一个装.&lt;br&gt;有不少人在评论里问mac os下对应的软件, 这里补充一下: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.apachefriends.org/zh_cn/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;XAMPP Installers and Downloads for Apache Friends&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;首先学习HTML, css, 这两个东西是一套的, 非常容易理解, 把w3school上面的教程过一遍就会了, 记住要一个个过, 千万不要偷懒, 一旦开始偷懒, 你会越来越偷懒, 最后什么都没学成. &lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3school.com.cn/html/index.asp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML 教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ,  &lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3school.com.cn/css/index.asp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS 教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;下一步是学js, js相比前两个会难的多, 因为js才是一门正式的编程语言, 同样, w3school的教程全过一遍, &lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3school.com.cn/js/index.asp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript 教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; , 教程过完了就可以买书看了, 强烈推荐一本超好入门书: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//item.jd.com/10603153.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《JavaScript DOM编程艺术（第2版）》(Jeremy Keith，Jeffrey Sambells)【摘要 书评 试读】&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; , 认真学, 多看, 看完之后学jquery, 这个时候你基本能够了解语言库了, jquery 也直接过一遍w3school的教程, &lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3school.com.cn/jquery/index.asp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; . jquery会了, 基本上你网页开发前端就已经入门了, 如果你学的扎实, 反复的看, 其实你就可以胜任前端开发的工作了, 不过浏览器兼容性还是解决不了的, 不过你目标不是前端工程师, 浏览器的兼容性不了解也无所谓.&lt;/li&gt;&lt;li&gt;在第二步你学习js的时候, 你可能就接触一些后端的东西, 没错, 就是ajax. 这个是需要后端返回数据的. 这个时候你要开始学习php了, 入门php相比于js会更麻烦一些, 因为运行php需要有很多细节要处理, 所以一本好的入门书籍是非常重要的, 这个w3school上面的php帮不了什么忙了, 推荐一本书: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//item.jd.com/10059047.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《php和mysql web开发（原书第4版）》([澳]威利，[澳]汤姆森)【摘要 书评 试读】&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; , 当然, 这过程中你会遇到各种各样的问题, 但是如果你学到了这一步, 非常欢迎你私信我来学习, 我绝对帮助, 现在肯学习的孩子太少了, 而且题主才上高中, 太难能可贵了. &lt;/li&gt;&lt;li&gt;一些注意点, 学习HTML, css, js的时候, 只要有浏览器就够了, 不需要装wamp, 编辑器推荐sublime, 多用google, 多敲代码, 尤其是多敲代码非常重要, 不敲代码你什么都学不会. 其他的想起来再补充吧.&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;对于那些说加入xxx阵营的, 不要理他们, 直接在win上面学, php和apache对win的兼容性非常好, 完全可以从入门学到精通都无需碰linux. 当然, 如果你网站最终上线的话, 还是需要接触linux服务器进行部署. 这个到需要部署的时候再说, 提前接触linux就是浪费时间.</textarea>


<div class="zh-summary summary clearfix">

如果你有耐心坚持个一年以上的话, 我会推荐HTML, css ,js, apache ,php, mysql 后三者是需要装软件的, 推荐wamp, 绝佳的一站式环境配置, <a href="//link.zhihu.com/?target=http%3A//www.wampserver.com/en/" class=" wrap external" target="_blank" rel="nofollow noreferrer">WampServer, the web development platform on Windows<i class="icon-external"></i></a> 直接包括了apache, php, mysql三个软件, 省的自己一个一个装. …

<a href="/question/22646257/answer/22113651" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-02-02" target="_blank" href="/question/22646257/answer/22113651">编辑于 2014-02-16</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1239235"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>356 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="5" data-type="Answer">
<link itemprop="url" href="/question/36991788/answer/69902291">
<meta itemprop="answer-id" content="23381239" />
<meta itemprop="answer-url-token" content="69902291" />
<meta itemprop="answerCount" content="65" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/36991788" target="_blank" data-id="7003727" data-za-element-name="Title">
IT行业都有哪些职位，初学者（0基础，新人）该如何选择，才能够快速进入这个行业？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/36991788/answer/69902291">
<!-- <meta itemprop="answer-id" content="23381239">
<meta itemprop="answer-url-token" content="69902291"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>8086</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">8086</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$ptteng"
target="_blank" href="/people/ptteng"
>暗灭</a></span><span title="修真院已在线上名费收录JS弟子，但是必须要有CSS的经验" class="bio">
修真院已在线上名费收录JS弟子，但是必须…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="8086" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">8086</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7003727" data-action="/answer/content" data-author-name="暗灭" data-entry-url="/question/36991788/answer/69902291">

<textarea hidden class="content">【本人性格不好，被惹到了必然句句带脏字，所以评论中如果有不开眼的，请慎重。另外，这篇回答从头到尾都是我自己的个人偏见，绝对不客观，也绝对不会为本答案负责。所以，有自己正常思维的请不要再看下去了。最后，这篇文章在最后会指向硬广，来佐证文中实例，因此，不喜欢有广告的可以直接举报了，顺手推荐一下修真院的专栏，各种IT行业的真实小故事。&lt;a href=&quot;https://zhuanlan.zhihu.com/jnshu&quot; class=&quot;internal&quot;&gt;IT修真院 - 知乎专栏&lt;/a&gt;】&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;互联网行业的薪资水准相对较高，刚入行一个月，半年，或者一年超过其他行业薪资很正常。&lt;br&gt;那么，互联网行业究竟有哪些职位呢，又分别适合哪些传统行业转型？&lt;br&gt;&lt;br&gt;1.产品&lt;br&gt;2.UI&lt;br&gt;3.CSS&lt;br&gt;4.JS&lt;br&gt;5.后端（Java/php/python）&lt;br&gt;6.DBA(mysql/oracle)&lt;br&gt;7.运维（OP） &lt;br&gt;8.测试（QA）&lt;br&gt;9.算法（分类/聚类/关系抽取/实体识别）&lt;br&gt;10.搜索（Lucene/Solr/elasticSearch）&lt;br&gt;11.大数据工程师（Hadoop）&lt;br&gt;12.Android&lt;br&gt;13.IOS&lt;br&gt;14.运营&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;然后等下我会分别介绍每个职业的工作内容，发展前景，入门门槛，适合哪些职业转行，成长周期，薪水范围等。&lt;br&gt;&lt;br&gt;* 薪水都以北京为例&lt;br&gt;* 运营和市场都有更细致的划分，然而我并不太了解了&lt;br&gt;* 其他的偏门的&lt;br&gt;&lt;br&gt;&lt;br&gt;一.产品&lt;br&gt;========我是求某个姑娘快原谅我的的分割线=============&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：了解用户需求，做竞品调研，画产品原型，写产品文档，讲解产品需求，测试产品Bug，收集用户反馈，苦练金刚罩以防止程序员拿刀砍。&lt;br&gt;&lt;br&gt;2 需要技能：PPT，Word, Axure,XP,MVP，行业知识，沟通&lt;br&gt;&lt;br&gt;&lt;br&gt;                 PPT是最容易被忽视的技能，很多时候很多人都把产品经理=画原型，如果你这么想，再做五年的产品经理也是一个画原型的。我在修真院的时候，给修真院的弟子讲过很多次，产品经理更多的是理解一个行业，熟悉这个行业的用户，知道这个行业有哪些没有满足的需求，寻找解决方案，对比行业，找到自己的切入点，最终落地成：哪些功能要做，哪些功能不要做。&lt;br&gt;&lt;br&gt;                这些都是要在PPT里写清楚的。所以，PPT并不是简简单单的一个工具，而且是用这个工具把你对这个行业的了解和分析和解决方案展示出来。&lt;br&gt;&lt;br&gt;                XP是敏捷开发，不会敏捷开发的产品经理很难说会是一个好的产品经理（我很偏激，所以接受不了可以直接无视）。敏捷开发对于产品经理来讲，是逼着产品经理去用Story的方式去思考，去考虑自己每一个Story的价值是什么，所有的Story优先级是什么。&lt;br&gt;&lt;br&gt;                MVP是最小化验证产品的缩写，这在精益创业里是很重要的概念。也就是说，你臆想了一个产品，他有了什么样的功能，但是！请注意，我们认为所有没有经过用户验证的功能都是在扯淡。所以，你其实是设计了一个扯淡的功能然后交给一堆人去开发，再交给人去运营，直到一个月或者是三个月以后才能拿到反馈结果。我们等不了，所以你必须在程序员开始启动之前，先想办法验证自己要解决的问题是存在的，要解决的需要是用户确实需要的---你有无数的办法可以这么做，真的。好比是，我做IT修真院，并没有先直接做线上的网站，而是直接去贴吧发贴，用QQ群，在论坛直接做，去观察这些弟子的行为，然后去修正自己的产品设计，我发现了他们需要日报，需要点评，需要有班级的概念，需要有学号，需要有首席大弟子等等等等这些。然后我会把这些需要分析整理之后加入到网站的设计里去，这就是MVP的价值--当年穷疯了每个决策都慎重的时候，就会特别喜欢这种方式，土豪除外，只会浪费时间而已。&lt;br&gt;&lt;br&gt;Word是产品需求文档，我自己不太喜欢Word文档，更喜欢XP的Story，不过会一点也没有关系。&lt;br&gt;&lt;br&gt;行业知识是产品经理最重要最重要的技能，没有之一，你可以不懂PPT，不会Axure，不会Word，也不会什么XP和MVP，但是绝对不能不懂一个行业。某种程度上来讲，产品经理拥有的其实是快速了解一个行业的能力。现在的互联网已经和以前的不一样了。以前的产品经理懂点儿交互，知道什么是表单，知道点IT术语就能混日子了，现在必须要懂一个行业，地产，金融，汽车，教育，餐饮，医疗等等各种行业，你都需要了解这个行业的模式，如果你不懂，你就是一个画原型的人。&lt;br&gt;&lt;br&gt;沟通也是产品经理的必备技能，出门不带沟通技能，一定会被程序员砍。一方面是要跟用户沟通，一方面是要跟程序员沟通（这是世界上最难沟通的物种，没有之一），一方面要跟领导沟通（其实就是想办法拍领导马屁然后哄着他们听自己的话）。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;   不用说，产品经理绝对是一个炙手可热的职业，而且，TNND的几乎是零门槛，这表示，是个人都可以说，我想成为一个产品经理。&lt;br&gt;   然而，好的产品经理很多么？并不多，所以，好像围棋一样的，入门容易，学精难。&lt;br&gt;&lt;br&gt;   而且，似乎并没有一个系统的教程（这真是一个很难让人相信的事情啊，这么一种职业，没有大学的知识培养，甚至都很少有标准化的职业化培训，全靠业界手把手培养和自发的交流，就能够拿着无数DS程序员根本就想像不到的薪水--产品经理真的跟DS有点儿不搭边的，当然，我大修真还是在努力做产品人员的培养的）。&lt;br&gt;&lt;br&gt;   产品经理的发展前景是很赞的，只是越来越体系化了，而且很容易出人头地。&lt;br&gt;&lt;br&gt;一般来说：&lt;br&gt;&lt;br&gt;0~6个月：4K~8K&lt;br&gt;6~12个月：6K~12K&lt;br&gt;1年~3年：10K~24K&lt;br&gt;3年~5年：20K~40K&lt;br&gt;5年~     ：30K~&lt;br&gt;&lt;br&gt;三个月到半年左右就可以算是迈入这个行业啦，如果遇到P2P这种对于专业属性要求比较高的，随便在一家公司混点经验，跳到另外一家新的公司就是一个产品总监：因为并没有其他人又了解金融又了解互联网。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;产品助理-产品经理-高级产品经理-产品总监-CEO&lt;br&gt;&lt;br&gt;&lt;br&gt;大致这个样子。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;   无（甚至你可以不认识字）&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做产品经理&lt;br&gt;&lt;br&gt;   IT界：程序员，UI，QA，运营，市场&lt;br&gt;   其他界：无限制&lt;br&gt;&lt;br&gt;  PS：想了想，还真是没见过身边有做运维的转产品经理的。&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;    很多产品经理都很怕跟程序员沟通。而且经常会苦恼，觉得自己设计的功能，程序员做不了，做不出来，做的太慢，做的太差。惟独不会觉得自己设计的太烂。&lt;br&gt;&lt;br&gt;    所以，很多产品经理都会认为不同技术是自己的一个弱项，我曾经整理过一个产品经理需要了解的技术术语，有需要直接看楼下的广告。&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;    还用问，自然是跟着大修真院最好。&lt;br&gt;    如果IT修真院你看不上，可以去一些有产品经理培训的地方去，虽然我肯定觉得自家的好。&lt;br&gt;    如果这些产品经理培训的差不多了，有了一个基本概念了，找个产品助理或者是实习的职位去吧。&lt;br&gt;&lt;br&gt;    会画点儿原型图，有个线上的作品，就能找工作（虽然我很不喜欢这样的产品经理）。&lt;br&gt;    然后有机会就去大公司了解一下各个部门是如何扯皮的，镀镀金，Over了。&lt;br&gt;&lt;br&gt;&lt;br&gt;二  UI&lt;br&gt;=============我是累死了的分割线================================&lt;br&gt;马丹，首先写软文，又要写成干货，又要带广告真心不是一件容易的事儿。我在之前&lt;a href=&quot;http://www.zhihu.com/question/36823157/answer/69156567?group_id=643447526423064576WEB&quot; class=&quot;internal&quot;&gt;如何在一个月之内从零基础成为初级CSS前端开发工程师？ - xdyl 的回答&lt;/a&gt; 的贴子中，写了整整一个星期才写出来。我写小说都是分分钟好么。&lt;br&gt;&lt;br&gt;可是没办法。一个是确实需要跟大家介绍一下每个职业的比较和特点，一个是也确实需要告诉更多的人，写代码真的不是看视频看会的。&lt;br&gt;&lt;br&gt;好了我接着说。&lt;br&gt;&lt;br&gt;1 工作内容：收到产品原型，给原型上色，偶尔会自作主张调整下原型的位置，出不同的风格给老板和客户选，然后听他们的意见给出一个自己极不喜欢的风格，最好给Android，IOS或者是CSS做好标注，还有的需要直接帮他们切好图，最后要练出来象素眼，看看这些不靠谱的程序员们有没有上错色或者是有偏差。&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：PS，Illustrator，Sketch，耐性，找素材&lt;br&gt;&lt;br&gt;PS是最基础的技能。各种图层通道蒙版神马的细节的东西就不用说了，很多时候很多公司都愿意出所谓的高保真图。什么叫高保真图，简单说就是不折磨产品折磨UI的破玩意儿。就是把所有的图都画出来然后对着UI图来改，偶尔还会要求做出来网页能够点，对于这点我不想再吐槽了，总之，PS是少不了的技能，基本上很多时候其他人都会以为你只需要用PS就能搞定一切。&lt;br&gt;&lt;br&gt;然而PS始终只是一个工具而已，所以在这里，PS代表的更多的是一种方案的选择。比如什么行业用什么配色，怎么样对齐，怎么突出重点，PC下应该是多宽，手机应该是多宽，等等等等。&lt;br&gt;&lt;br&gt;ILLustrator最近似乎是用的少了，我不太确定，但是做矢量图以前是就是靠他的。什么是位图什么是矢量图，自行百度就好。以及还有CoreDraw，不知道现在是否常用。然而，慢慢的似乎Sketch流行起来了。&lt;br&gt;&lt;br&gt;SKetch和Illustrator和CoreDraw之间的差别我说不上来，我记得我的UI小姑娘跟我讲这个工具很好用。&lt;br&gt;&lt;br&gt;&lt;br&gt;耐性必须是UI必备的技能，因为有的时候，老板跟你较真起来，一个星期不停的反复修改一个首页是很正常的事儿。可能颜色要从红换成黑再换成绿。所以你必须要有耐性，除非你做的设计没人管，你说了算。而且，UI这东西，是个人都有自己的审美观。更不用说之前朋友圈的测试，人和人看到的颜色真心不一样。&lt;br&gt;所以你必须要有耐性，这是很重要的。&lt;br&gt;&lt;br&gt;找素材的能力也是必不可少的，你手上必须要备几个常用的素材网站，大部分的人都是在别人的素材基础上改来改去。&lt;br&gt;&lt;br&gt;&lt;br&gt;说到这里，其实忍不住想加上一句。UI设计师最重要的能力并非是以上几种，而在于是理解产品经理的需求--前提条件是产品经理很明确的说出来了而且讲清楚了需求。&lt;br&gt;&lt;br&gt;比如说，一个页面的重要是什么？最想引人注目的内容是什么？应该配什么样的图？加上什么样的元素能让网站的风格更醒目一些呢？&lt;br&gt;&lt;br&gt;这里大部分其实都是原型设计师要做的事儿，我一直有一个观点，就是UI其实最应该做原型，只有这样，才能让产品经理着重去考虑功能点，让设计完美传达产品的功能点。&lt;br&gt;然而原型设计师这个角色慢慢的被消融了，已经变成了产品经理了。所以大部分产品经理都以为自己是画原型的，然后大部分UI都会自作主张改掉原型，因为没有美感。所以通常你会发现美感说有了，也有那么一点儿，可是总觉得会有一些不对。&lt;br&gt;&lt;br&gt;我对他们的要求就是，先别管美不美，你先告诉我这张页面每个模块想要重点表达的内容是什么，能不能让人分清主次。做到了这一点 ，再去考虑美感。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;UI的发展前景是很赞的，在两到三年前，甚至都有人推动让UI来代替产品经理来驱动。某种程度上来说，UI其实最好的发展方向就是UE，也就是交互，然后就是所谓的用户体验优化师--坦白的说我并未觉得有多少公司会真正的设置这个职位，因为太泛了。但是对于现在火热的O2O来说，无论是线上还是线下，都希望提供一个极致的用户体验，所以我说不好。&lt;br&gt;&lt;br&gt;但是大部分的UI都应该去朝着交互的方向发展，而不是去切页面。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;UI薪水其实跟产品经理在前期差不太多，中期差点。后期相差比较远，一般来说：&lt;br&gt;&lt;br&gt;0~6个月：4K~8K&lt;br&gt;6~12个月：6K~12K&lt;br&gt;1年~3年：10K~20K&lt;br&gt;3年~5年：16K~30K&lt;br&gt;5年~ ：24K~&lt;br&gt;&lt;br&gt;UI的成长时间大概是在两年左右，基本上PC，IOS，Android，H5全部都做过一些项目，设计过几个Logo，做过一些专题和Banner图，才算是比较完美报。&lt;br&gt;&lt;br&gt;然而想要做的更好一些就有点困难了，除非你的遇到了一家公司，对用户体验要求极致，然而那个时候，并不仅仅是UI和UE相关的内容了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;实习UI-初级U-中级UI-高级UI（UE)&lt;br&gt;&lt;br&gt;&lt;br&gt;大致这个样子。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;UI对入门门槛要求还算是比较高的。首先你得有一台Mac。。大部分的情况下你都需要Mac。&lt;br&gt;然后你要懂之前提到的常用软件，UI的交互规范，配色等等等。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做UI&lt;br&gt;&lt;br&gt;IT界：无&lt;br&gt;其他界：传统做VI的，就是平面设计的会转一些。跟着基本上就是小鲜肉了，刚毕业就从事这个行业的会比较多一些。还有一些学美术的，会手绘的。&lt;br&gt;&lt;br&gt;PS：想了想，从没怎么见过程序员转行做UI的。只见过UI人员会写代码的。&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;UI这个职业的限制在某种程度上就是不太清楚自己应该朝着UE发展。所以时间长了工作就会变得单调，两年或者是三年之后原地踏步走没怎么有进步的人很多。像Metro（扁平化）或者是material design这样的风格一不熟悉二不了解三不想尝试的人还是挺多的。&lt;br&gt;&lt;br&gt;很多人做了很久其实还是分不清产品经理想要在一个页面上表达什么--这有时候真的并不是UI的错。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;对于初学者来说，找个培训学校还真是比较好的选择。&lt;br&gt;我大修真院暂时并未打算去培养UI人员，主要是没有时间也没有精力去做一个系统的教程，而且我们自己在UI上也在不断的摸索。&lt;br&gt;一般来说，最好的成长路线就是不断的去参考别人的例子，然后再多动动脑子，多看一些UI规范。&lt;br&gt;&lt;br&gt;先想清楚自己要表达什么，然后想想用什么表达，再去查查怎么样能做到自己期望的结果。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;三 CSS&lt;br&gt;=============我是再也不要写软文的分割线================================&lt;br&gt;&lt;br&gt;没办法。自己拉的屎不能拉个开头就提裤子走。。。说起来这也是知乎挺好玩的地方，如果不是知乎允许这种自问自答的方式，只要你说的是真正有价值的内容，并不拒绝你有做广告的嫌疑，恐怕我也不会写这些东西，你们也看不到这个贴子。&lt;br&gt;&lt;br&gt;以下的内容是我从UI那边粘过来的，还没改呢，等我去沙发上喘口气歇会再写。中午吃的麻辣香锅有点咸。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：产品设计好原型，UI做出来了效果图，剩下的就是CSS工程师用代码把静态文件写出来的。&lt;br&gt;&lt;br&gt; 所以CSS工程师和OP一样，都是可以在不用了解业务需求的情况下就能完成工作的唯一两个特殊职业。&lt;br&gt;一般来说，CSS工程师并不存在，写CSS的人多少要写一些JS代码，然而确实也会有一些妹子真的就是学不会JS，有一些汉子真的就是写不出来JS，所以我还是把他们两个拆开了。&lt;br&gt;&lt;br&gt;CSS工程师要考虑更多的就是兼容性，简单说，IE内核和非IE内核（WEBKit），IE10以下和其他。我是强烈建议新人不要去学IE10以下的Hack的写法的，让IE10以下的，不支持Html5的都去死吧，表再来跟我说用户还在用IE678了。&lt;br&gt;&lt;br&gt;当页面切完以后，另一个工作就是去帮助菜鸟后端和某些JSER把页面又重新套错了，什么是套页面，可以看这个 &lt;a href=&quot;http://www.zhihu.com/people/ptteng/answers&quot; class=&quot;internal&quot;&gt;http://www.zhihu.com/question/22689579/answer/69899644&lt;/a&gt; 。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt; 环境【IDE（WEBStorm，Sublime，EditPlus），源码管理（SVN/Git） ，WEB服务器(nginx)】&lt;br&gt; 基础【PS，域名，Html，Html5，CSS，CSS3】&lt;br&gt;扩展【自适应，响应式，Bootstrap，Less，Flex】&lt;br&gt;&lt;br&gt;&lt;br&gt;无论是哪一种程序员，学会搭好的自己的环境都是第一步。选好IDE，选好源码管理工具，学会每天把自己做好的Html文件发布到服务器上可以直接访问。这都是最基础的技能，记着这些东西并不难，你只是需要不断的去练习去熟悉它而已。所以从第一开始就去适应它。&lt;br&gt;&lt;br&gt;&lt;br&gt;会用PS是因为一是要切图，二是要制作雪碧图。这儿简单说一下，很多人都会说，切图这个活倒底分给UI还是分给前端。我一直都觉得这是CSS必须要做的，因为只有CSSER才会知道怎么切合适。然而大部分Android和IOS人员都不具备切图的能力，这也是我一直很无语的工作方式，反正，我要求我的Team,无论是Android还是IOS都必须要会自己切图。&lt;br&gt;&lt;br&gt;另外再解释一下所谓切图和切页面的概念。切图指的是把需要用到的小图标了神马的切出来。切页面一般指的是就是把整个效果图做成Html网页。两种叫法我都觉得Low的不行，然而很多人都喜欢这么叫，而且会混到一起，时间长了，也就习惯了。&lt;br&gt;&lt;br&gt;&lt;br&gt;自适应和响应式是前端人员必须要懂的概念，也是必须要能做到的。毕竟现在是各种跨屏时代，以及各种分辨率都层出不穷，H5又是眼下最火红的职业和技能。&lt;br&gt;&lt;br&gt;曾经有过工作半年或者是一年都不太懂什么是自适应和响应式的，这并不好。&lt;br&gt;&lt;br&gt;Bootstrap，Less和Flex也是CSS工程师必须要会的。学会Bootstrap更重要的还是要去学习它的思想，这是很重要的一点，它帮助你开阔视野，你才会明白，靠，原来可以这么写。&lt;br&gt;&lt;br&gt;Less也是一样，在推荐less和Sass之前我犹豫了很久，然而看到Sass要Ruby环境就有点不喜欢了，虽然Bootstrap已经转向Sass，但是在一般的项目中，Less也够用了。所以还是果断的推荐Less了。&lt;br&gt;&lt;br&gt;Flex是一个好东西，我了解的还不多，在真实的项目中还未有使用过，不过挺看好的。&lt;br&gt;简单说呢，前端工程师需要的大多数就是技术相关的技能，倒不需要太多的沟通啊和耐性啊神马的技巧。&lt;br&gt;&lt;br&gt;哦哦，想起来了，CSS的知识比较零散，要死记的东西其实是比较多的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;CSS的发展前景最近几年好的不行。在Android和IOS大行其道的时候，一大部分人都转去做了这两个行业，然而突然之间，因为微信的缘故加上JS的魅力，H5突然又火爆起来，所以呢，CSS整体来说还是一个挺靠谱的职业。最关键的是，CSS入门最快的职业啊，几乎零门槛，只是转JS还是挺不容易的。&lt;br&gt;&lt;br&gt;CSS薪水如果纯粹只是做CSS的话，12K到15K基本上就是封顶了。。。所以：&lt;br&gt;&lt;br&gt;0~3个月：4K~6K&lt;br&gt;3~12个月：5K~8K&lt;br&gt;12个月以上~：8K~15K&lt;br&gt;&lt;br&gt;&lt;br&gt;CSS的成长是非常快的。修真院的线下弟子都是一个月左右就可以独立做项目，可以进入IT修真界闯荡江湖了。正常情况下，3个月左右是没问题的。&lt;br&gt;&lt;br&gt;我的要求比较高，所以所谓的独立做项目就一定是独立做项目，不用怀疑这一点。包括自适应，响应式和Bootstrap。&lt;br&gt;&lt;br&gt;所以。想要拿高薪，CSS都必须要学JS，没有其他的途径。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;CSS工程师-初级JS工程师-JS工程师-前端架构师-前端Leader（IOS，Android和JS通吃）&lt;br&gt;&lt;br&gt;&lt;br&gt;不要相信NodeJS，那只是玩玩而已。不要想从前端转后端，太难了，后端和前端是两个不同的概念，特别是对基础知识要求的特别高。&lt;br&gt;&lt;br&gt;CSS和JS最好的方式就是IOS和Android通吃，精通一种，然后其他的能做项目，并不需要考虑其他的选择，推荐再学点其他脚本语言，首推Python，永远不要去学PHP，表问我为啥，个人好恶。&lt;br&gt;你一定要问，等我心情不好的时候再说。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;零门槛！你相信咩，一个程序员的职业居然可以零门槛进入。。。&lt;br&gt;好吧，大多数人其实并不把CSSER称为程序员，不过，你至少学会了CSS，就能在IT修真界这个神奇的元世界里生存，就有了进军其他职业的可能性。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做CSS&lt;br&gt;&lt;br&gt;IT界：All&lt;br&gt;其他界：All&lt;br&gt;&lt;br&gt;PS：正常人都可以学的会啦（马丹我就不是正常人）&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;CSS的职业限制有三个，一个就是不去学自适应和响应式，一个是不去学框架，另一个就是学不会JS。&lt;br&gt;这三点都是很重要的突破。然后这个职业呢，怎么讲，在一家公司里可替代的程度比较高，并不算特别重要，做不了核心岗，也不存在什么代码交接。你就算代码写的再烂，也最多就是花一个月时间重写。。。&lt;br&gt;&lt;br&gt;所以如果你不想做JS，你就真的真的发展受限制了，一定要记着，CSS只是你的一个跳板。&lt;br&gt;另外，因为零门槛，所以你其实还是有很多计算机相关的知识要补的，这是一定的，没什么可商量的。&lt;br&gt;&lt;br&gt;只是做前端还好，如果想做后端，只是不想花那么长的时间才进入这个行业，就必须要从CSS做起，跟着用自己的其他时间恶补计算机基础了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;之前说我的贴子是广告的，你们错了。&lt;br&gt;看到这里，这才是真正的广告。&lt;br&gt;&lt;br&gt;要说去哪里学CSS，绝对是IT修真院，请先看这里 &lt;a href=&quot;http://www.zhihu.com/question/36823157/answer/69156567?group_id=643479018993934336&quot; class=&quot;internal&quot;&gt;如何在一个月之内从零基础成为初级CSS前端开发工程师？ - xdyl 的回答&lt;/a&gt;。&lt;br&gt;IT修真院跟其他任何一家培训机构都不一样 ，完完全全不一样的教学模式。看完这篇贴子，其实你就能大概明白这是什么样的教学方式。&lt;br&gt;&lt;br&gt;而且，线上学习完全是免费，不仅如此，大修真院还给你入院就提供了良好的人脉关系。嗯。&lt;br&gt;然后，如果你真的不想来大修真院，或者我没看上你，那么你就也不要看视频或者是交钱学什么的，看W3C吧，自己偷偷按照修真院的Task做项目，跟着就找家公司实习去吧。&lt;br&gt;&lt;br&gt;虽然慢了点，好坏也入门了。&lt;br&gt;&lt;br&gt;&lt;br&gt;四 JS&lt;br&gt;=============我是第一次过100赞的分割线================================&lt;br&gt;&lt;br&gt;JS说起来必须是一个神器，这个当年10天内被开发出来的神器，以一种谁也想象不到的速度快速发展，它击败了Java Applet，逼死Flash，当Android和IOS看似一统全球的时候，JS慢条斯理的和Html5一起蚕食App市场，甚至还出来了NodeJS这种连后端都不放过的残暴东西。&lt;br&gt;&lt;br&gt;原生和WEB的两种方式一直在争论不休，而我自己在三年前就是绝对的WEB支持者，windows对于JS支持的更彻底，只是Winphone一直不给力。&lt;br&gt;&lt;br&gt;好吧，对于拿NODEJS做后端工程项目我还是有点不情愿，然而提供各种辅助工具什么的还是挺不错的。JQuery，Ajax和RequireJS和Angularjs和PhoneGap都是一些标志性的转变，还包括ReactJS。JS简直了，简直了，简直什么都不放过。&lt;br&gt;&lt;br&gt;所以JS简单么？我带着你们了解一下JS工程师是什么样子的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：JS工程师其实分成两类，在之前讲CSS的时候已经提到过，一个是套页面的，一个是前后端分离的。对这两个概念还是分不太清的，可以回过头去看CSS的部分。&lt;br&gt;&lt;br&gt;对于套页面来说，JS工程师的职责非常简单，一个是做一些简单的动画和交互和验证，轮播图，弹框，验证用户名是否为空等等。另一个就是通过Ajax取一些后台数据，然后在页面上展示出来。&lt;br&gt;&lt;br&gt;那个时候的JS工程师并不被太多人重视，很多时候一些后端的人把前端的工作也做了--除了写CSS，大部分的后端工程师写点JS还是不成问题的。&lt;br&gt;&lt;br&gt;可是前后端分离的出现，彻彻底底的改变了前端的世界。前端居然有架构了，前端居然也有“编译”的概念了（你能想象么，JS的项目居然不能直接打开源码直接使用了，必须要经过编译才可以）。前端工程师和后端工程师只通过Json数据交互（感谢Nginx提供了一个完美的跨域解决方案，再也不用什么Jsonp了），然后服务器端的同学发现：好简单啊，我对Android，对IOS，对Html都只需要提供一套API就够了~~&lt;br&gt;&lt;br&gt;前端同学更开心，再也不用去搭建各种悲剧的开发环境了！前端变的很轻，而且控制欲很强（AngualarJS好赞），页面跳转神马的SoEasy，而且也有了Bower这样的包管理工具，还有类似于JSP自定义Tag的指令，MVC，还有了Service的概念，马丹，前端到底发生了什么！&lt;br&gt;&lt;br&gt;所以我们现在说到的，基本上就是前后端分离的工程师，他们的工作职责就是和IOS&amp;amp;Android的工程师一样，跟后端定接口，确定框架和架构，分模块，然后跟后端联调互相吐槽对方是渣渣。&lt;br&gt;&lt;br&gt;项目结束之后修复线上Bug，不停的跟用户说：在我这里是正常的，你换个浏览器试试？不行就清一下Cookie，再不然就换台电脑。&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;环境【IDE（WEBStorm，Sublime，EditPlus），源码管理（SVN/Git） ，WEB服务器(nginx)】&lt;br&gt;基础【Http，REST，跨域，语法，组件，F12，Json，Websocket】&lt;br&gt;框架【JQuery，AngularJS，Bower，RequireJS，GruntJS，ReactJS，PhoneGap】&lt;br&gt;业务【金融，教育，医疗，汽车，房产等等等等各种行业】&lt;br&gt;第三方【微信，QQ等各种第三方登录，支付，IM，地图，语音，视频，图片】&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;环境不说了，参考CSS的。&lt;br&gt;基础跟CSS差别就好大了，要有一些网络协议的基本概念，要了解什么是Http，什么是Https，什么是WebSocket，什么是Rest，各种JS的语法（太复杂的完全不用管，别去管什么闭包什么Prototype什么This的指向），Json是必不可少的东西。&lt;br&gt;&lt;br&gt;框架就多了去了。直接拿JQuery来学习就好，表去太在意什么原生语法，大部分场景你都不用担心引入一个JQuery的库导致系统变慢，AngularJS真是一个好东西，表太纠结一些细节，Bower，RequireJS和GruntJS这些会有一些前端大牛帮你搭好框架你直接用就好了。 &lt;br&gt;想做点App就用PhoneGap，想尝试一下ReactJS就去试吧（我很想试一下然而看到有Render就看不下去了）。&lt;br&gt;&lt;br&gt;必须提醒一次，如果你是从CSS转到JS的，那么一定要看一下这篇贴子。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//bbs.ptteng.com/forum.php%3Fmod%3Dviewthread%26tid%3D7473%26extra%3Dpage%253D1%2526filter%253Dtypeid%2526typeid%253D2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;【IT修真院】怎么样从CSS转JS-IT修真院&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 。这里强调的就是，你必须要懂业务逻辑，这跟CSS完全不需要懂业务逻辑简直是天壤之别，很多时候你并不是因为技术而无法学会JS，而是缺少对于业务逻辑的理解。&lt;br&gt;&lt;br&gt;当然啊，这并没有完。还有无数的第三方库等着你，做微信呢你必须要用WX的SDK，要用百度地图呢就必须要用百度的SDK，还有各种支付啊神马的。如果你要做IM就有环信啊神马的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;所以。JS就是一个真正的程序员，一个真正的工程师，不但要能把代码实现，还需要理解需求，需要懂得编码规范，需要知道如何控制项目流程和进度风险，需要修复线下Bug，需要调优，需要做版本管理，需要制订接口，需要编写技术文档，还需要做新技术的调研或者是带新人。&lt;br&gt;&lt;br&gt;现在你了解了咩?(如果不了解，加入IT修真院嘛，老大带你在IT界从菜鸟修成大神)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;我说了那么多，你们对JS的期望也很高了吧。坦白的说，有点高的离谱！&lt;br&gt;JS是唯一一个可以在两年之内薪水到20K的职业。&lt;br&gt;虽然工作五年或者是七年的JS在薪水上差别并不太大，但是也已经让很多人难以置信了好么。&lt;br&gt;&lt;br&gt;好多人在别的行业，工作十年都拿不到10K啊亲。&lt;br&gt;&lt;br&gt;&lt;br&gt;0~6个月：6K~10K&lt;br&gt;6~12个月：8K~14K&lt;br&gt;一年~两年：12K~20K&lt;br&gt;两年~五年：18K~30K&lt;br&gt;五年以上：24K~&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;JS的入门相对来说比CSS难的多（表怕，有我大IT大修真院），但是他的好处是学会一点是一点，并不像Java一样，绝对是前期Gank型英雄，到了6级就能四处杀人。Java是后期，要到16级以后才能出山才能够震撼全场。&lt;br&gt;&lt;br&gt;所以JS相对来说比较平滑，而且现在学习的曲线也比较清晰，慢慢在业界都形成了相对完善的框架。JS可以选择前进的路有很多种，只要你不是太瞎（跟着修真院就一定不会瞎），就没什么大的问题。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;JS菜鸟-JS初级工程师-JS中级工程师-JS架构师-UED-前端Leader-前端大牛&lt;br&gt;&lt;br&gt;大概这个样子啦，JS工程师在后面有一点后续无力，一般来说，我还是强烈推荐JS，IOS，Android三者通吃，在我的带的Team中也一直要求他们这么做（虽然并未能完全实施成功）。&lt;br&gt;&lt;br&gt;这三者有太多相似之处了，到最后你会发现，语言只是一种工具而已。要做的事情，其实是差不太多的，并不需要对所有的语言都特别熟悉，有一种打底的，其他的都可以随意去玩了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;必须有CSS基础，必须有CSS基础，必须有CSS基础。&lt;br&gt;或者是有后端Java基础。&lt;br&gt;&lt;br&gt;总之你要么是会了CSS，要么是精通了一种后端语言，千万不要CSS没学好，后端语言也不会就直接学JS，心里会没底，不踏实。&lt;br&gt;&lt;br&gt;其他的都没什么了，列出来的基础知识，自己慢慢补就行了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做JS&lt;br&gt;&lt;br&gt;IT界：CSS，然后是所有的都可以&lt;br&gt;其他界：所有的都可以&lt;br&gt;&lt;br&gt;好蛋疼的结论然而事实上就是如此，这波JS的红利受益于微信，以及移动端的普及。我不确定在三年或者是五年之后会不会还是这种状态，然而三年和五年已经足够可以改变你的人生了，所以，你在等毛线？&lt;br&gt;&lt;br&gt;大修真院的弟子中有搬砖的有退学的有高中毕业的有做电汽和通信的，你想想为什么你不可以？唯一不合适你的大概就是：你真的没有编程思想哈哈哈，然而这确实是一件很难解释和预测的事儿。我也确实见过反应比较慢的，进度比较慢的，但是无论如何，混口饭吃，不成问题。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;JS的职业限制也挺多的，主要就在于学习的方向上很容易误入歧途（至少在我眼里是这样的，相信我，我不是什么好人，我并不会我说过的每一句话负责）。比如说一直坚持喜欢用原生，各种喜欢写一些奇奇怪怪语法（我把我看不懂的语法都归结为奇怪的语法），各种回调等等等等。&lt;br&gt;&lt;br&gt;学到一些好的框架其实很赞的，对于大多数人来讲，就够了。只是缺少一个清晰的指引。&lt;br&gt;有的时候你会发现，你对Http了解的比较少，会是一个瓶颈。&lt;br&gt;你对数组啊，循环啊不了解，是一个瓶颈。&lt;br&gt;你对MVC不了解，也是另一个瓶颈。&lt;br&gt;对Json不懂，不知道怎么定接口，也是个问题。&lt;br&gt;&lt;br&gt;这些都学会了，也会遇到一些问题。就是JS的工程师三年，五年，七年的差别，大多数人都不算特别的大。&lt;br&gt;所以总会有人想学后端--但是我绝对不赞成学Java，NodeJS也可以不去学，不如去学习Python，更不要提PHP啦（我真心不喜欢PHP，不知道为嘛）&lt;br&gt;&lt;br&gt;或者说，后端并不是语法，而是牵涉到算法，架构，性能，业务，选型等等跟前端几乎没有任何关系的知识，所以学习一门脚本语言，能做点简单的东西就好了。&lt;br&gt;&lt;br&gt;还是需要把注意力转到IOS，Android上去。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;不用说。首推的当然还是我大IT修真院。IT修真院是先总结归纳一个能够独立完成项目的JS工程师需要掌握的技术体系，然后设计15个Task来让你逐步完成对于知识的掌握。修真院一直在传播代码是写出来，而不是看视频看出来的概念。更看重你们在真正去做Task的时候独立解决问题的能力，除此之外，还有跟你一起学习和成长的师兄。这就是IT修真院去培养JS工程师的方式，而且，线上是完全不收费的。&lt;br&gt;&lt;br&gt;如果你不想用这种方式去学习，还是我之前说的那些话，W3C，然后做点东西，跟着去一家公司实习。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;五 后端（Java/python/go）&lt;br&gt;=============我是想玩Dota的分割线================================&lt;br&gt;&lt;br&gt;说到后端，其实我主要想说的是Java。C和PHP这两种语言我都不喜欢，之前也说过了，我自己绝对不是一个说话公平公正的人，什么观点都带着自己偏激和极端的调调。&lt;br&gt;&lt;br&gt;我之前在贴吧跟Java吧的吧主一直在撕逼（原因很简单，我说教大家学Java，一个月收400块钱，他说我是骗子封我贴。然后我说好吧，我不说教大家学Java了，我来给大家解决在学习过程中遇到的困惑，他说贴吧不能发问答贴。我说行，那么我就写一些新人学Java必须要学数据库，数据结构和计算机网络，于是一群吧主过来喷我说，我没学过这些我也照样学会Java了啊，什么多线程什么继承等等，我无语了解释说Java语法不重要，重要的是要学会后端的架构，要懂算法，要懂业务，要懂系统的扩展性，要会调试程序，于是吧主们就把我封了，我很不爽，就新开贴子跟他们撕逼对骂--我从来不是一个重身份的人，我骂人会很脏，所以如果看到这个贴子觉得我很厉害那么你瞎眼了，我就是一个不喜欢就说，谁喷我一脸我喷谁一身的性格，现在的结果就是Java吧的吧主每隔10天就来封我一次-哈哈哈哈哈比闹钟都要准，所以三个月过去了，我带出来很多CSS和JS的学员，然而Java的学员并没有多少。所以如果有人去Java吧替我骂一下那些XX吧主并且截图给我看，我会很开心很开心很开心，说不定就会给你们开小灶哈哈哈哈。）&lt;br&gt;&lt;br&gt;之所以说这些，一方面是400多的赞让我觉得有点羞愧，另一方面也是想强调一个概念，学后端，学会语法只是开始而已，最后一个就是我是一个小人，谁欺负我我就想欺负回去。&lt;br&gt;&lt;br&gt;我想想该怎么描述后端的工作。后端跟前端是截然不同的，之前讲过。前端是Gank，后端是大后期，要等到16级以后才能V5起来，而且我非常不推荐前端去学后端（所谓的全栈工程师完全是扯，我有时间会写一下，为什么不要去做一个全栈工程师）。后端要积累到足够多的项目经验，才能够成为一个靠谱的后端工程师。我觉得。我来举一个跟着我线下半年的小培宇的例子就能简单说明一下后端的工作。&lt;br&gt;&lt;br&gt;小培宇是第一个来到我大修院面试（嗯，最初我是给他们发工资然后带他们学习的）的人，跟我讲他是考研失败，差了几分，然后也做过点项目，我随便问了几句就知道了他的状态：人挺聪明的，但是在学校肯定玩的疯，所以问点排序算法还是能够答的出来，数据结构也懂一点儿，LinkedList和ArrayList删除数据谁更快也能答的挺靠谱的，但是绝对绝对没写过一行工程代码。&lt;br&gt;&lt;br&gt;他打动我的那句话就是：不在乎工资多少就想多学点东西。很好，我默默的点个赞，因为我本身就想把自己这几年积累的经验和知识和走过的坑整理出来，告诉互联网的新人，所以也不抵触带新人,坦白说，愿意像我这样带新人的公司，几乎没有，带新人真不是一般的累。幸好我之前在各种公司中都带过各种新人，好的坏的都带过，所以还算是熟悉。&lt;br&gt;&lt;br&gt;于是我给培宇精心设计了他的学习曲线，这也是我大IT修真院的核心观点：&lt;br&gt;1.先搭建基础环境（Maven，SVN，Eclipse，jetty,SecureCRT,Linux，Mysql）&lt;br&gt;2.做简单的CRUD（DAO-自己封装的数据层，junit,Log4j,Rest,Spring,Spring MVC,Json,JsonTaglib）&lt;br&gt;3.做一个相对复杂的系统DB设计，接口设计，项目部署，错误提示，Bug查找，怎么打系统日志。&lt;br&gt;4.做了一个微信相关的项目，了解微信的API，交互方式，Cookie，拦截器，AOP，登录系统的设计，命名规范等。&lt;br&gt;5.拆分Service，将Home和Service分开，使用RMI调用，实现各个层次之间都可以完成分布式的部署，使用Tuscany（真心喜欢Tuscany）完成SCA。&lt;br&gt;6.使用MongoDB完成地理位置的搜索，短信，图片上传，云存储，使用Tiles来配置页面模板。&lt;br&gt;&lt;br&gt;这些内容他花了将近三个月的时间。对他来说已经是学会了很多东西了，这三个月是几乎没日没夜的学出来的，要知道他之前压根就不知道什么是Spring，生成Json和套JSP的区别我骂了他好几次他才弄明白，经常会遇到一些Maven或者是Tuscany的报错不知道该怎么解决，数据库字段的规范和接口规范常常被我黑的体无完肤。很多东西都只是知道个皮毛而已，你们自己说说，学会Java语法算什么？&lt;br&gt;&lt;br&gt;这还是有我来带，有我来教，有我给他定制合适的项目教给他去做，如果没有这些，你们自己学，学会我说的这些东西要多久？&lt;br&gt;别的不说，学会怎么打日志，怎么根据线上的报错去找错就不是一个月两个月能解决的。做为一个工程师，应该明白，很多时候要学会正确的路怎么走，还必须要知道错误的路是走不通的。正确的路大概就那么几条，错误的路呢？&lt;br&gt;&lt;br&gt;为什么很多时候我看到错误日志就会明白是什么地方报错了，是因为我之前花了无数的心血和心力在查找这些错误上，所谓的经验就是这样，看的多了，一眼就知道大概什么地方报错了，然后随便百度下，就能找到解决方案，跟着去尝试倒底行或者是不行。这些是看书，或者是看视频能教会你的么？&lt;br&gt;&lt;br&gt;到现在为止培宇已经跟了我快半年了，还是被我骂的狗血喷头，别的不说，就是接口的Wiki文档和代码保持一致，他都会经常犯错---这跟Java语法有什么关系，然而不经过一个好的训练，想做的很好，很不容易。&lt;br&gt;&lt;br&gt;其实他接下来要学的东西更多。Memcache或者是Redis，ActiveMQ或者是RabbitMQ或者是QPid，Mybatis或者是SpringJDBC，Struts或者是SpringMVC，我告诉他的只是一个我们在项目中经过实践的，认为最合适的架构体系，然而他并不知道是怎么选择的。他必须要把这些相关的选择都有所了解，然后才能成为一个架构师。这个时间，如果一直跟着我，我觉得应该是在一年到两年左右。&lt;br&gt;&lt;br&gt;这是一个横向扩展的内容，在这个时候我还没有要求他去看一些深层的东西。只是需要他停留在会用的状态就可以。在会用这些技术之后，再去了解一些自己喜欢的技术的细节，不成为一个只会使用工具的码农，所以培宇问我还需要多久才能达到我的水平的时候，我其实并不想打击他。我也是很刻苦努力的人啊，曾经无数个日夜也是默默的去一行一行代码去用最笨的方法调错，并没有人告诉我怎么样是正确的只有靠一个又一个的项目总结出来的经验。&lt;br&gt;&lt;br&gt;而且我还会一些Drools，CRM，Lucene等等一些和架构师关系不大的事儿偏算法一些的东西，毕竟当年也学过点数据挖掘机器学习之类的内容。&lt;br&gt;&lt;br&gt;就算是学会这些了，对于一个后端工程师来说就够了么？不不不，还需要学习JVM优化，监控，部署流程，发布流程，项目进度管理，代码重构等等等等。&lt;br&gt;&lt;br&gt;所以，你们自己算算，这些东西如果都学会，一个Java工程师要多久才能成为架构师？&lt;br&gt;&lt;br&gt;然而我还是对带培宇很有信心，首先他相信我，他愿意学，跟我当年一样，不怕苦不怕累，人也够聪明，做事也有责任心，其次我知道他应该怎么走这条路，先做什么，再做什么，哪些该花时间和精力，哪些不该花。&lt;br&gt;&lt;br&gt;我希望他能够在一年之内就成为一个架构师。就如他在三个月和六个月之间独立做项目已经不成问题了一样（记着，我说的是独立做项目，自己设计DB设计接口设计架构完成需要的功能，从设计到实现完全自己来）。&lt;br&gt;&lt;br&gt;我也希望我能够帮助很多和培宇一样，有实力有能力只是没有遇到我的那些人，这也是我为什么在知乎发贴的原因，IT技术的培训，哪些培训机构能做到这一点？&lt;br&gt;&lt;br&gt;&lt;br&gt;这个真实的小故事，就是想跟大家提前说清楚，我对后端的要求有多高，这也是后端特别好玩的地方。你必须要会很多种框架，有足够宽广的视野，还需要有足够多的项目经验（做金融和做地产是两个完全不同的概念），还需要懂项目开发流程以及快速定位线上问题的能力。&lt;br&gt;&lt;br&gt;这些，就是我说的后端的主要工作内容了，这也是为嘛我说到后端的时候，大部分就是在指Java，而我说Java的时候，基本上是只指后端，根本就不是指Java的语法。更不是说是Android。&lt;br&gt;&lt;br&gt;现在明白为什么后端是大后期了么， 为什么不建议前端学后端了么。后端要懂的东西，太多了。&lt;br&gt;言归正传，我来讲一下后端工程师的相关内容。&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;大部分的后端工程师都停留在功能实现的层面上。这是现在国内二流或者是三流的公司的现状，甚至是在某些一流的公司。很多时候都是架构师出了架构设计，更多的外包公司根本就是有DBA来做设计，然后后端程序员从JS到CSS到Java全写，完全就是一个通道，所有的复杂逻辑全部交给DB来做，这也是几年前DBA很受重视的原因。&lt;br&gt;&lt;br&gt;所以你能看到成千上万行的存储过程（存储过程，视图，事务，外键 这些东西我真心希望永远不要在Mysql里出现），这就是外包公司中最常见的架构体系。来个SSH，Over。&lt;br&gt;&lt;br&gt;好一点的会个WebService，用过ActiveMQ，也用过Redis，甚至还会用过Dubbo。然而大多数情况也根本不了解为什么这么用。&lt;br&gt;&lt;br&gt;很多人写了两年或者三年代码都没做过独立的DB设计，不知道什么是REST，不懂怎么做接口设计，也不知道怎么去定位问题。&lt;br&gt;&lt;br&gt;所以对于他们来说，拿到产品经理的需要，会有一个项目经理或者是Leader分配任务，跟着按步就班的把代码写完，跟前端调试完，QA测试不通过，加班改回来重新改，改完QA又没通过，再加班再改，QA终于通过了然后上线了突然发现另一个好的功能不能用了，跟着再接着改，在线上发布一次又一次。。眼睛熬的通红最终真的受不了了，休息几天换另一家公司涨个40%左右的薪水继续这样的日子。&lt;br&gt;&lt;br&gt;不不不。我带出来的后端程序员并不要这么做。所以，我带的后端程序员的工作方式是这样的。&lt;br&gt;&lt;br&gt;拿到产品需求-》后端程序员做接口设计，架构设计，DB设计-》拿出方案来做技术方案评审-》评审通过，开始预估时间-》每日更新自己的Task-》接口完成自测一百遍，每日部署到开发环境，随时集成-》CodeReview-》重构代码-》性能测试-》Demo通过-》发布到测试环境-》修正Bug-》重新发布-》发布到线上环境。&lt;br&gt;&lt;br&gt;这中间需要理解需求，需要拿出多个方案，需要跟前端配合，需要跟QA配合，需要跟运维配合。需要跟产品沟通，有时候还需要找UI。后端几乎是一个核心节点，而这个核心节点接起来了所有的人。&lt;br&gt;&lt;br&gt;我不知道我讲清楚没，很多时候我都发现我可能太久没做一个IT新人了，都忘记了新人们关心的问题或者是困惑是什么。&lt;br&gt;这就是我知道的，两种后端程序员的工作内容。你选哪一种？&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【IDE（Idea/Eclipse，Maven，jenkins,Nexus,Jetty,Shell，Host），源码管理（SVN/Git） ，WEB服务器(nginx,tomcat,Resin)】&lt;br&gt;基础【Http，REST，跨域，语法，Websocket,数据库，计算机网络，操作系统，算法，数据结构】&lt;br&gt;框架【Spring，AOP，Quartz，Json TagLib,tiles,activeMQ,memcache,redis,mybatis,log4j,junit等等等等等】&lt;br&gt;业务【金融，教育，医疗，汽车，房产等等等等各种行业】&lt;br&gt;第三方【微信，QQ等各种第三方登录，支付，IM，地图，语音，视频，图片】&lt;br&gt;&lt;br&gt;环境不说了，搭环境永远是后端人员比较头疼的事儿，所以才会有很多人想用简单方便的的语言来解决这些问题，比如说Python之类的。我还是喜欢Java，大概很多人觉得重，然而我喜欢，我觉得不是“重”，而是“正”。好像剑一样，王者之剑，路子很正。 &lt;br&gt;&lt;br&gt;基础知识太多了，正是我一直强调的，做后端，这些基础知识了解多少，其实就是决定了你以后能走多远。这些科班出身的计算机ER，会了这些，才有了一个平台，才可以站在这个平台之上去搭建更高层的建筑，如果根基不稳，你觉得你会对上层的知识理解透彻么？&lt;br&gt;&lt;br&gt;&lt;br&gt;框架是Java最有资格说自己是架构师的原因。无数的开源框架，选型，筛选，对比，填坑，优化，维护，寻找最适合的业务场景，很多时候很多公司的架构简直了（我不吐了，很多技术都在用然而每一种用法几乎都是错误用例的典范）。所以你想想，你大概要有多少框架要学要用？很多时候，你必须要想清楚，哪些是需要认真了解的，哪些是需要一笔带过的。&lt;br&gt;&lt;br&gt;业务对于后端人员来讲无比重要，不懂业务，就没有架构。这是我经常说的一句话，这个世界上不存在不懂业务的架构师（我不怕被打脸），一个架构师必须要深入了解业务体系，知道哪些是会变的，哪些是不会变的，哪些是重要的，哪些是不重要的，然后才能做出来适合某个应用场景的架构来。比如说，同样的表，几千万的量和几亿的量差别非常大，频繁读和频繁写的设计也完全不同。会有一些通用的架构思想和理念在里面，但是都是需要跟业务结合落地的。&lt;br&gt;&lt;br&gt;PS：很多金融证券行业的程序员，就是靠业务知识混饭吃的。对他们来说，对业务体系的了解要比在技术上的追求重要的多。&lt;br&gt;&lt;br&gt;第三方的东西和JS的内容相似，我不想多说了，而且 JAVA的第三方的东西更是多的离谱，坦白的说Drools这东西我就没彻底研究明白，虽然很喜欢。而像这种类似的东西，太多太多了。&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;对于后端人员的发展前景，我有两点想说的。&lt;br&gt;&lt;br&gt;A.无论是B/S还是C/S,无论是WEB还是原生，或者是智能硬件，后端都会屹立不倒。&lt;br&gt;B.随着后端架构体系的稳定和成熟，后端人员在性能上需要担心的问题不多（再加上大部分应用场景其实并不需要那么多的性能），所以更多的应该会关注于一个稳定的扩展性好的架构，以及快速实现能够复用的业务逻辑模块实现上。&lt;br&gt;&lt;br&gt;最近后端人员在价格上，其实有点偏低于前端人员的，就向我之前所说。两年的JS可能拿到20K。两年的Java想拿到这个，非常难。然而，五年的Java或者是七年的Java，拿到30~40K，不难。&lt;br&gt;&lt;br&gt;更高的，也不稀奇。&lt;br&gt;&lt;br&gt;&lt;br&gt;0~12个月：4K~10K&lt;br&gt;一年~三年：8K~20K&lt;br&gt;三年~五年：18K~30K&lt;br&gt;五年以上：30K~&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;Java初级工程师-Java中级工程师-架构师-技术经理-技术总监-CTO-CEO&lt;br&gt;&lt;br&gt;&lt;br&gt;后端的爆发力并不差，只要你给他时间，只要你愿意前进，后端的路线很深，深到你有时候会觉得自己还没来得及全部了解，就已经有无数的新人涌进来要替换你的位置了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;计算机网络，数据结构，数据库，操作系统，Java基础语法。&lt;br&gt;Java是入门门槛最高的一个，没有之一。（好吧，我虽然说的是后端，然而一直把Java等同于后端）&lt;br&gt;&lt;br&gt;当然，如果你的志向并不是一个架构师，只是像NodeJS和Python或者是PHP一样随便做点小项目，那么也可以说的得上是没有门槛，但是我说过我有偏见，所以可以直接把我无视掉。如果你觉得我说的哪点不对，你过来揍我啊。&lt;br&gt;&lt;br&gt;要跟我学Java，就必须把这些基础知识学好，我只带想成为架构师的人。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做后端工程师&lt;br&gt;&lt;br&gt;IT界：无&lt;br&gt;其他界：无&lt;br&gt;科班生：计算机专业的中等水平能力以上&lt;br&gt;&lt;br&gt;所以如果有各种培训学校告诉你零基础4个月20000块钱把你教出来做Java后端，然后你月薪上万，你就直接一锅盖盖他脸上吧。&lt;br&gt;&lt;br&gt;那么零基础的人想做后端，怎么样才能入门呢，我比较推荐的是先做前端，然后把自己的基础知识各种补，补回来，再去转后端--但是实际上，你做了前端，再想转后端，就太难了，因为你到时候就不太想放弃自己一年或两年就可以轻松拿到的高薪，去做一个苦逼的后端了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;后端的职业限制有很多，第一个职业限制就是不去做独立的项目，不做DB设计，不做接口设计。&lt;br&gt;第二个职业限制就是视野不开阔，不知道有什么样的开源软件可以用。&lt;br&gt;第三个职业限制就是不重视线上环境，不知道如何写日报，也不知道如何快速定位。我不得不说我带过的兄弟，有一次解决线上问题的时候快把我气疯了，他们在那里猜测问题出现的原因，跟玩福尔摩斯一样，不打日志不看日志，根据现象倒推结果，直接盲改代码再扔到线上看看有没有解决问题---那是最后逼不得已的办法好么，在此之前能不能安静的把日志打出来，确认一下到底是哪里出错了？&lt;br&gt;第四个职业限制就是不懂版本管理，不懂Bug修复流程，不懂开发流程。这些其实都是一整套的流程体系（等我心情好了，有人把Java贴吧吧主骂的狗血喷头了，我大概也会写出来）&lt;br&gt;&lt;br&gt;大部分后端的人员都会抱怨自己不会写前端代码，不会写Android或者是IOS，不能自己独立完成项目，所以他们才倾向于自己做一个全栈工程师，做一个自己喜欢做的东西。&lt;br&gt;这也是后端人员会经常觉得不爽的地方，自己写的东西完全感受不到，而且一旦出问题很多时候都是大问题，解决起来很麻烦，经常不敢改代码，因为看不懂前人的东西。&lt;br&gt;&lt;br&gt;有时候后端人员会比较木，虽然很各种职业都交流，但是多数都会觉得自己很NB其他人都很SB。&lt;br&gt;这也是后端人员比较大的问题，往上走的话也容易遇到各种瓶颈，做技术的，做到CTO，再去做CEO，其实很难的。&lt;br&gt;&lt;br&gt;而且，等你走到足够高的高度，你会发现，一个七年工作经验的正常发展的后端工程师，一定会有一个七年工作经验的产品或者是运营，在薪水和职业上秒杀他。这也是做技术的最大的悲剧。&lt;br&gt;&lt;br&gt;不过大部分的后端工程师都比大部分的产品和运营人员薪水高，这也是这个行业的特征之一，所谓高不成低不就，小富即安，就是这样的。&lt;br&gt;&lt;br&gt;如果你是一个有理想的后端工程师，我建议你多关注一些敏捷开发，多关注一些项目管理，学会带着自己的兄弟们一起做事儿。再不然，就是在技术这条路上一直走到黑。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;基础知识不要来找我，我不教。随便去其他的学校补基础也可以。想要提高或者是想要成为架构师，就来找我。&lt;br&gt;&lt;br&gt;我在说培宇的时候其实已经讲清楚了我是怎么带人的，但是在线上做这些，确实有难度，而我又不想教一些虚头巴脑的东西害人害已，所以我还在想办法解决怎么样在线上把后端工程师带好的问题。&lt;br&gt;&lt;br&gt;如果看到这里觉得我说的有道理，一定要称赞我，催促我，还有帮我宣扬大修真院的思想和做事风格，让我觉得这个事情有意义，值得做。&lt;br&gt;&lt;br&gt;想做好，真的挺不容易的。所以，能转就转，能收藏就收藏，能推荐就推荐。我想我应该能想到一个好的办法，来帮助后端工程师，把成长的时间从五年到七年，缩短到一年到三年，至少在线下，我是绝对有信心的，这种信心来自于我之前这么做过。以及我正在做。&lt;br&gt;&lt;br&gt;你们可以随时找培宇聊聊，看看他这些日子倒底是怎么被我骂的狗血喷头然后开心快乐的活着的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;六 DBA &lt;br&gt;=============我是被这几天加群的人气死的分界================================&lt;br&gt;&lt;br&gt;首先说，我对DBA的了解并不专业，也不够多，而且对这个职业也有偏见。所以，我只能把我感受到的，我会的讲出来，然后如果说你们觉得我说的不对，要么自己开贴回答来打我的脸，我虚心学习，要么就直接笑笑走开，表在评论里说三道四，最烦这个。&lt;br&gt;&lt;br&gt;七年或者八年或者很早之前，DBA是非常吃香的职业。讲这个，大概要从系统的性能瓶颈说起。&lt;br&gt;很早之前，互联网刚开始的时候，算是蛮荒时代。那时候大家写代码还没有规范，能把功能做出来就不错了，大家拼的是什么呢，Sql的性能。基本上就是没有中间层，也不会分什么服务层和Web层，很多时候SQL都写到页面上。&lt;br&gt;&lt;br&gt;然后Sql呢，又属于那种外键，视图，存储过程的天下。这就导致了出现一个问题。大部分的功能都是通过DB来实现的，也就是说，什么计算啊，分组啊，排序啊，筛选啊，全是靠DB来做。&lt;br&gt;小功能还没问题，功能一多，问题就出来了，一个Sql语句执行了半个小时没做完，然后整个系统崩溃掉了。&lt;br&gt;&lt;br&gt;那么，怎么解决呢，解决的方案就是。。。。我其实很难理解这种思考方式。。。。 就是找一些人，对DB特别熟悉，他的职责就是审核所有程序员的Sql语句，去找出来这些Sql哪些用到索引了，哪些没用，能不能执行，怎么优化，以及监控线上的慢Sql。一个公司能养得起DBA的，很NB了。很贵的！&lt;br&gt;&lt;br&gt;所以这是那个时候的DBA，但是，很快大家发现有不同的方式了，这种方式就是，我靠，原来我可以用分库分表，我可以做读写分离，我能做主从。于是对于DBA的依赖又重了一些，再加上数据的安全和备份，所以DBA的作用已经有点偏移，然而最关键的还是系统架构的发展变化了。分布式的概念慢慢的起来了，大家明白了一件事儿：机器不够，并不是说把服务器升级成小型机就能搞定了，而是应该用更多的机器来做，因为便宜，而且更简单。所以后台的系统架构慢慢的演化出来很多不同的层。WEB层，服务层，缓存层，DB层。对于缓存的使用越来越重要，由此而变化的观点就是数据分成了缓存和持久两种结果，DB慢慢的变成了持久层-也就是说，只是要把数据持久化，并不希望它去承载用户的压力，缓存主要用来扛并发，不需要做持久。这是一个很关键的点，也是决定DBA命运的转折点。&lt;br&gt;&lt;br&gt;当然现在还看不出来（像MongoDB，Cassandra，这些，又是另外一种不同的技术走向，包括Mysql也在不断的想要提升自己的性能），所以这些东西我们先抛到一边不谈。只说这中间发生了一个变化，对于后端人员来说，对数据库访问的变的严格起来了。尽量单表操作，不允许复杂查询，设计架构的时候必须考虑缓存，甚至我们在白社会的时候还设计了一套通用的DB访问机制--虽然是七年前的设计然而现在一直都觉得很赞，只是再也没有如我在搜狐的时候那群人做这些事了-反正我见识少，一直在小公司混，也不怕你们嘲笑我见识少。&lt;br&gt;&lt;br&gt;这样就导致DBA的一个很重要的工作职责，失去意义：就是查找慢Sql，因为我们在系统架构层已经决定了不再这么使用DB。这样使得Oracle什么的也慢慢的失去了价值-我知道我说的每一句话都有可能会引起争论，所以我不得不再次强调一次，纯属个人的脑残关点，不喜欢的话，要么认真的回复来打我的脸教我做人我认真学习，要么就是滚远点表理我。 包括建表，去除外键，去除事务，去掉视图等等等，一瞬间，DB的使用简单多了。&lt;br&gt;&lt;br&gt;那么，DBA还能做什么呢？&lt;br&gt;对于我现在的理解来说，DBA的职责慢慢变成了数据备份和安全策略--然而这部分又跟运维的工作有了冲突，所以在某种程度上来讲，我都会在五十人左右的公司把DBA安排到运维部分，跟运维的兄弟们做基友。可是现在云服务器也变的越来越好用了，这里也推荐一下好友的金山云和Ucloud。阿里云跟我并没有神马认识的人，所以不推。&lt;br&gt;&lt;br&gt;DBA除了之前提到的主从，读写，数据备份，权限控制，分库等等，还应该再扩展视野，把MongoDB，Redis，memcache，elasitcSearch，hadoop等等这些数据全部管起来。我觉得，更像是一个运维的分支了。&lt;br&gt;&lt;br&gt;这就是我目前认可的DBA的价值和意义，已经从之前的性能优化部分转移到了数据备份和安全。&lt;br&gt;毕竟，性能，架构，和优化这些东西，是离不开业务系统的。&lt;br&gt;&lt;br&gt;那么，接下来，和之前一样，继续介绍一下DBA的工作内容。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;  如果你做了一个DBA，基本上会遇到两种情况。一种是你的后端工程师懂架构，知道怎么合便使用DB，知道如何防止穿透DB，那么恭喜你，你只是需要当一个DB技术兜底的顾问就好，基本上没什么活可以做，做个监控，写个统计就好了。你可以花时间在MongoDB了，Hadoop了这些，随便玩玩儿。再按照我之前说的，做好数据备份。如果需求变动比较大，往往会牵涉到一些线上数据的更改，那么就在发布的时候安静的等着，等着他们出问题。。。。如果不出问题就可以回家睡觉了。&lt;br&gt;&lt;br&gt;  另一种情况就是我刚刚提到的，大部分程序还是靠SQl，然后有时候DBA还需要写几万行的存储过程，那么你的主要职责还是优化Sql，优化Sql，永远不停的优化SQL。&lt;br&gt;&lt;br&gt;  嗯。就这样。&lt;br&gt;&lt;br&gt;  还有就是多花点时间把MongoDB和hadoop这些都维护起来，或者简单说，只要跟数据安全，备份相关的东西，都维护起来。&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【Linux，Mysql，Oracle，MongoDB，Hadoop】&lt;br&gt;工具【各种DB的版本，工具，备份，日志等】&lt;br&gt;&lt;br&gt;这个说是环境已经有点勉强了，毕竟是一些吃饭的家伙。就是各种DB，各种维护什么的。&lt;br&gt;工具也是相关的内容，再强调一下对版本的熟悉程度。&lt;br&gt;&lt;br&gt;马丹我感觉我没什么可说的了。因为刚刚又被 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//tieba.baidu.com/p/4136798230&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;我就静静的发图～_java吧&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这个贴子恶心到了。我被Java吧封了，然后他们还@我。我要赶紧写完然后想办法去跟他们对骂去。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;DBA的发展前景我说不好。一些简单的工作。运维也是慢慢学会了。包括薪水，这个是我比较没把握的。之前的薪水都是有迹可寻的，DBA的薪水我接触的比较少，实在是没什么底气。&lt;br&gt;&lt;br&gt;&lt;br&gt;1年~5年：8K~25K&lt;br&gt;5年以上：20K~40K&lt;br&gt;（我好心虚。。我只给一个DBA开过工资）&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;也不知道有啥成长路径，感觉这个职业的物种越来越稀少了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;DBA的入门门槛也是比较高的，而且，很少于有刚工始就是做DBA的，大部分都是工程师转的，所以呢，至少要两到三年左右的时间才有可能做DBA，才能负责一些相对负责DB的事情。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做DBA&lt;br&gt;&lt;br&gt;IT界：后端工程师，运维工程师&lt;br&gt;其他界：无&lt;br&gt;&lt;br&gt;其他行业的想转DBA，刚刚也说过了，不合适，只能先写代码，再慢慢的转。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;这个职业最大的限制大概就是。。很容易无事可做，前面有后台架构师蚕食，后面有运维工程师侵入，中小公司都不太会设置这个岗位，所以有的时候会比较尴尬，大概还有一些外包公司，或者是传统的IT企业，会是由DBA去设计表，去理清业务还有一些岗位，其他的都不太好。&lt;br&gt;&lt;br&gt;所以对于其他的各种持久化数据的备份和优化，特别是对一些正在使用的框架，又不够成熟的东西，更容易找到自己的位置。如果你要做DBA的话，就记着，跟持久层相关的优化，数据安全，备份都要去了解--顺便再学点运维的东西&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;基本上，DBA可以由运维工程师和后台架构师去转，也会有一些数据库方面的认证之类的的过程。这个岗位啊，跟其他的岗位真心有点不一样，很少有刚毕业或者刚入行的人就要去做DBA的--你也做不了亲，跟数据相关的东西，没个三年五年的经验，真的很难做，而且有些技术细节，是必须要了解的比较多的。&lt;br&gt;&lt;br&gt;PS：刚刚想到了，云服务器里是DBA的一个好去处，其实这里跟大数据也有一些相关的。这么说的话，DBA的职业需求度跟云服务器公司的发展是有比较密切的关系。但是总之，不太可能变成一个标配了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;七 运维 &lt;br&gt;=============我是被知乎删除了答案的分界线================================&lt;br&gt;&lt;br&gt;先说点的别的，早上发现知乎登录不了，提示说我的账户异常，然后发了封邮件，账户能登了。&lt;br&gt;然后发现答案被删，找不到了。&lt;br&gt;&lt;br&gt;伤心难过了七秒钟，然后我一直都没有备份的习惯，在修真院的群里喊了半天，终于有一位小兄弟出来了，给了我一份保存的文档。&lt;br&gt;&lt;br&gt;不然还真的是不想再写下去了。以及，其他的答案也让我很无语，特别是居然并不知道CSS和JS可以是两个职位，实在忍不下去了，我会在后续讲敏捷开发的时候再重新提一下软件开发的全过程，来告诉你们为什么CSS和JS要分开，那个才是我执行敏捷开发落地七年的干货，当然，时间不定，只是赞越多，分享越多，我觉得自己的答案越有价值，心情就会好，然后知道修真院的人也会越多。&lt;br&gt;&lt;br&gt;我可能会出一个系列，这个只是第一个，来讲一下互联网的各个职业发展，第二个，讲敏捷开发，第三个，讲应该怎么样对IT技术人员的团队管理和绩效考核，第四个，讲如何做自己的职业规划以及如何找到一份更好的工作或者是怎么判断一个公司靠不靠谱，第五个，大概会聊一下创业公司怎么做，以及如何用MVP的方式去创业。&lt;br&gt;&lt;br&gt;这些如果你们都看到了，我讲出来了，也差不多是我这八年中经历和感受到的所有了，至少会对互联网的各个方面都有了一个全面的认识。&lt;br&gt;&lt;br&gt;这里面不可避免的会有对修真院的介绍，但是我能确保的是，每一篇都是干货，只不过不保证客观，也不保证有用。所以，让赞和分享更多一些好么。&lt;br&gt;&lt;br&gt;&lt;br&gt;言归正传，讲一下运维，这是一个很神奇的行业，一个在渐渐蚕食其他各种职业的职业，一个本来不是编程但是现在却编程越来越多的职业，你要问为什么?&lt;br&gt;&lt;br&gt;一个字：云&lt;br&gt;&lt;br&gt;说到运维，就不得不提起来服务器，以前呢，服务器很贵，带宽也很贵，机房也贵，电源也贵，反正啥都贵，而且还不稳定，那个时候运维工程师的大部分技能还是在硬件上，或者是说硬件是必不可缺少的技能，所以守着机房也是运维工程师比较常见的事儿。&lt;br&gt;&lt;br&gt;而且有的时候还会兼着网管，因此，大部分的运维工作就是装个系统，搭些内部服务软件，如邮件，Wiki，Jenkins，VPN等等等。很多的时候还要会布线，会路由器，会交换机，会做资产盘查，把网管的工作也做了。&lt;br&gt;&lt;br&gt;当然线上的正常发布也少不了，规范的点的公司，会分成三套或者是四套环境（我是不太能接受四套环境），就是Dev，Test，Online（三个环境的叫法会有不同，我现在越来越喜欢这种叫法），开发环境就是给开发人员自己瞎折腾用，运维只需要把机器安装好，IP分配好就行了，开发过程中你们自己瞎折腾，每天部署多少次都可以--细节请等我讲敏捷开发的时候再说。测试环境就会严谨一些，正常情况下每天只发布一次，太频繁QA会杀人的。线上环境更严格，一般来说不允许频繁上线，所以只能在周二或者是周四发布，一周两次，对于WEB来说，其实是足够的（但是很搞乱的是，很多公司是周一定需求，周二开发，周三测试，周四上线，周五改Bug，这些都会在讲敏捷开发的时候提到）。&lt;br&gt;&lt;br&gt;所以测试环境和线上的发布都是运维来做，因为有一个最简单的真理：只要你把权限扔给工程师了，他就会偷偷重启服务以及偷偷改数据以及一不小心删掉某个文件，或者是清空所有数据。&lt;br&gt;&lt;br&gt;而且一定会被你抓到，不要问我为什么，我要是有线上服务器的器权限，我也经常干这种事儿。。。。这比偷情的感觉要好多了，一个人偷偷摸的瞒着所有人把Bug改掉。。&lt;br&gt;&lt;br&gt;&lt;br&gt;这个时候运维还是运维工程师，直到虚拟化技术疯起来，直接生成了阿里云，金山云（修真院的重要合作伙伴），Ucloud等这些改变了运维工程师命运走向的公司。&lt;br&gt;&lt;br&gt;云时代来临了。。。视频云，IM云，图片云，APP云等等各种跟业务相关的云服务也做起来了，确切的说短信，邮件也是各种云服务。&lt;br&gt;那么运维工程师的变成两极分化。一个是，云服务商的运维工程师越来越重要了，一些大的公司也在搭建很NB的运维自动化系统。另一个是，非云服务商或者是非大公司的运维工作变简单了，再也不用去机房换硬盘了。。反而是要熟悉和了解各种云服务器的特性。&lt;br&gt;&lt;br&gt;所以，当我们现在说到运维工程师的时候，其实是分成两个阶段的，一个是传统的运维工程师做的东西，一个是现在云时代运维工程师做的内容，如果你现在想做运维，你恰恰是处在这个变革中间，我说不好未来的走向，但是这是一脉相传的，所以并不用担心运维中技术体系的中断。&lt;br&gt;&lt;br&gt;这就是对运维的一个简单的介绍，哦对了。运维是一个公司里非常重要的岗位，刚刚还忘了说到了数据备份和灾备和监控。如果你们公司有值班手机，一定是运维同学手里拿着。24小时不准关机。&lt;br&gt;&lt;br&gt;无论你洗澡，上厕所，还是吃饭，或者是逛街，还是跟妹子恩爱（天地良心，我没见过一个妹子做运维，听都没听过），只要你收到报警，你就必须第一时间远程连接到服务器，然后通知相应的工程师，立刻解决问题，或者 是直接滚蛋。&lt;br&gt;&lt;br&gt;通宵熬夜发版本更是正常的事儿。你要问为什么会通宵，呵呵。&lt;br&gt;发了一次版本，上线，发现不正常，于是回滚，或者是直接在线上Bug。于是运维同学就等着，老婆催也没用。然后过了两个小时，大后期后端同学说好了，可以发布了，于是执行脚本，然后又发现出了问题，接着回滚或者是在线上改。。。&lt;br&gt;&lt;br&gt;你要问不是有测试环境么，不是有QA么，我就呵呵一笑。我不知道我说的关于运维的介绍是多了还是少了。反正，这个答案只是一个初稿，如果点赞过5000（感觉是不太现实的），我就再整理一版。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;运维的工作大概分成几个部分，我对于修真院学习运维的少年们都这么说，大概是：&lt;br&gt;&lt;br&gt;A。基础环境的搭建和常用软件的安装和配置（兼网管的还有各种程控机）,常用软件指的是SVN，Git，邮箱这种，更细节的内容请参考修真院对于运维职业的介绍。&lt;br&gt;&lt;br&gt;B。日常的发布和维护，如刚刚讲到的一样，测试环境和线上环境的发布和记录，原则上，对线上所有的变更都应该有记录。&lt;br&gt;&lt;br&gt;C。数据的备份和服务的监控&amp;amp;安全配置。各种数据，都要做好备份和回滚的手段，提前准备好各种紧急预案，服务的监制要做好。安全始终都是不怎么被重点考虑的问题，因为这个东西无底洞，你永远不知道做到什么程度算是比较安全了，所以大多数都是看着情况来。&lt;br&gt;&lt;br&gt;D。运维工具的编写。这一点在大的云服务器商里格外常见，大公司也是一样的。&lt;br&gt;&lt;br&gt;E。Hadoop相关的大数据体系架构的运维，确实有公司在用几百台机器做Hadoop，所以虽然不常见，我还是列出来吧。&lt;br&gt;&lt;br&gt;这些就是运维的基本工作内容了，然后如我之前所说，运维一般来说，大点的有两个，小点的就一个，再小的就是工程师兼着。&lt;br&gt;而且大部分都在使用云服务器了。所以普通的运维工程师的工作都可以标准化和简单了。这里并没有提到性能优化相关的部分，实际上这也是运维工作中比较常见的内容。特别是在出现问题的时候，运维永远是一个在不出问题可能就被忽视，一旦出问题就会被痛骂的。。。职业。&lt;br&gt;&lt;br&gt;之前有句话说的好，线上不出故障，是不现实的。现实的做法是，出了故障之后，多久能快速恢复。&lt;br&gt;我对这个很认可，原话应该是出自一家云服务器公司还是。。我不记得了。&lt;br&gt;&lt;br&gt;但是这里不得不推荐一下 【猎聘网的技术总监 &lt;a href=&quot;http://www.zhihu.com/people/liu-zhong-bing&quot; class=&quot;internal&quot;&gt;刘中兵&lt;/a&gt;】，我的老同事和好基友，前段时间刚刚在一个神马神马会（我靠，我只知道是一个很厉害的会）上分享了猎聘在自动化运维上技术积累，如果PPT能够公开的话，回头我会把它也放到运维的体系里。&lt;br&gt;&lt;br&gt;当然最好的结识这些技术大牛的方式就是加入修真院，显示自己的实力之后，让修真院来帮你牵针引线。&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【Linux，Mysql，Oracle，MongoDB，Hadoop，nginx,apache,F5,lvs,vpn,iptable，svn,git,memcache,redis】&lt;br&gt;工具【linux 常用工具，Mysql常用工具，Jenkins，zabbix,nagios】&lt;br&gt;自动化运维【openstack,docker,ansible】&lt;br&gt;语言【shell,python】&lt;br&gt;&lt;br&gt;运维的技术体系也很多，基本上是所有的工具都想要你会用，我会慢慢的整理出来一套运维体系的技术架构，当然不只包括运维，包括我说的这些所有偏技术的职业。&lt;br&gt;所以，如果觉得我写的还不错，还算靠谱，就关注我，关注群，关注微信公众号。&lt;br&gt;如果觉得我是在扯淡，直接评论里骂我就好了。&lt;br&gt;&lt;br&gt;&lt;br&gt;这里说到的其实并不算全，确切的说，做为一个运维工程师，严谨的性格是绝对少不了的，因为线上的操作全部由你来执行，你必须要心细，要严谨，如果做不到，就别考虑了。&lt;br&gt;真出了事，压力又把你压死。想想最近几年出现的运维事故吧。。。&lt;br&gt;&lt;br&gt;还有就是必须对Linux系统的底层了解的深入一些。如果你想做一些高级运维的话。Python和Shell脚本都是必不可少的，最常见的运维必备语言。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;写的有点不耐烦了，马丹如果不是为了宣传大修真院，我才不要做这种丹藤的事儿。我去勾搭小姑娘多好。&lt;br&gt;运维和前端其实有点想像，都是属于柳暗花明又一村的。&lt;br&gt;&lt;br&gt;本来运维的工作要被后端工程师蚕食了（后端工程师真是一个可怕的职业，可以这么说，没有后端工程师做不了的。。。包括产品，市场和运营）&lt;br&gt;&lt;br&gt;然而随着云的发展， 运维工程师简直是有了新生。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1年~3年：6K~20K&lt;br&gt;3年以上：28K~40K&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;网管-初级运维工程师-中级运维工程师-高级运维工程师&lt;br&gt;&lt;br&gt;&lt;br&gt;运维做到这个级别，已经到头了。很少有运维的同事能做到技术叫监的级别的。所以，对于资质一般的你来说，选择了做运维，就代表着天花板很近，但是对于大多数人来说，已经可以了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;OP的门槛其实并没有太高，经常玩玩Linux会好一些，但是要学的东西，确实挺多的。处理线上故障，也是一个经验积累的过程，所以说呢，基本上算是0门槛，谁都可以考虑做，只是要看你喜欢，或者是不喜欢，进度快和慢的问题而已。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做运维&lt;br&gt;&lt;br&gt;IT界：后端工程师，网管&lt;br&gt;其他界：All&lt;br&gt;&lt;br&gt;刚刚介绍过了，门槛不太高，所以比较容易一些，而且，可以考虑做一段时间网管。半年或一年之后转运维，网管的薪水比较低。3000或者是5000已经到顶了。&lt;br&gt;&lt;br&gt;但是转到运维，就不一样了，简直是新生。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;运维的大部分事情其实都是跟业务无关的。这在之前介绍CSS的时候说到的，两个不需要懂业务逻辑的职业。&lt;br&gt;曾经有过运维工程师觉得工程师写的Sql不对帮他改了。。。然后被我狠狠的骂了一顿。这表示着：运维工程师必须按工程师所写的步骤去执行，不允许有任何的差错，如果出错了，如果没在测试环境跑通，或者发现有问题可以跟后端工程师沟通，但是，不可以改他们的东西。&lt;br&gt;&lt;br&gt;这样责任和权利分开。所以运维工程师能够相对有更多的时间去研究技术，然而坏处就是对一个行业了解的会比较少。&lt;br&gt;&lt;br&gt;所以这个职业比较大的问题就是，想要再转行成其他的职业，已经很难了，只能一条路走到黑。嗯。比较难。&lt;br&gt;&lt;br&gt;天花板和CSS一样，能看得到，但是！已经很适合了，薪水毕竟不算低呢。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;当然是修真院了，第一个。&lt;br&gt;然后还有一些其他的运维培训，我不太了解，运维这个其实是几种职业培训里相对来说比较简单的。因为大部分都是跟业务关系不大，是可以培养出来的。&lt;br&gt;&lt;br&gt;自己找资料的话，只能根据技术的关键字去找了，还好大部分都不算特别难，等遇到难题的时候，你也一定是工作了不少，然后会遇到一些技术上大牛的运维。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;八  QA &lt;br&gt;=============我是被小郭惹烦了的分界线================================&lt;br&gt;&lt;br&gt;“QA最好的出路就是产品经理”。这是我对QA最好的认知。&lt;br&gt;我知道这里有无数反对的声音，我说的每一句话大概都会有认同和不认同的人，所以如果看到这句话不喜欢，就表再继续看了。&lt;br&gt;&lt;br&gt;QA的这个职位，大致分成两个流派，一个是功能测试，一个是性能测试。功能测试就是指的是各种点点点点。然后看看功能和数据有没有问题。什么浏览器，什么版本，什么情况，能否复现。&lt;br&gt;&lt;br&gt;性能测试就是指：用Jemter，LoadRunner等做压测，测跨后端人员的信心。&lt;br&gt;&lt;br&gt;基本上就是这两种，很少有专门针对安全的层次去做测试的。那么问题就来了，工程师和QA之间，倒底谁该做功能测试，谁该做性能测试？&lt;br&gt;&lt;br&gt;我姐告诉我说：工程师才应该做性能测试，因为只有他们才最应该知道自己开发的系统性能瓶颈在什么地方。&lt;br&gt;然后也是因为这句话，我举一反三的瞬间懂了什么才是一个工程师，并且在不断的践行者这个理念：&lt;br&gt;如果你是一个后端工程师，你必须对服务器的线上数据了如指掌，有多少张表，在哪台机器上，分了几个库，一个表里有多少条数据，数据的分布是什么样的，起了多少台Service，占用多大的内存，高峰期的TPS有多少，CPU的负载怎么样，页面总响应速度有多少，一个请求调用了几个方法，每个方法执行时间是多少，是否加载了缓存，从缓存里加载的数据是多少个，大概多少MS，访问一个数据库需要多久。&lt;br&gt;&lt;br&gt;你做不到这一点，你就没办法做好性能优化。所以，QA很难做到这些，也完全没有必要做到这些-实际上我们的团队是没有QA的。工程师负责所有的问题。&lt;br&gt;&lt;br&gt;&lt;br&gt;前端也是一样的，做了一个App，耗电量，带宽，内存，兼容性，都是前端应该关心的问题。&lt;br&gt;&lt;br&gt;所以我在这里给出的一个明确答案就是：性能测试，开发人员做，功能测试，QA做。&lt;br&gt;&lt;br&gt;但是这里的功能测试，并不是指的是普通的功能测试。实际上，开发人员应该自测一百遍再提交到测试环境（我在讲到敏捷开发的话，会再次提到整个开发流程是怎么样的，以我在几家公司实施的经验来看，这套敏捷开发流程，对于很多公司梳理内部结构都会有帮助。）&lt;br&gt;&lt;br&gt;&lt;br&gt;QA做的应该是自动化的回归测试，边界条件测试，极限条件测试等种种很难测试得到的问题。&lt;br&gt;对了，再解释一下为什么要有QA，以及为什么Bug总是测不完。&lt;br&gt;&lt;br&gt;因为在我根本记不清的一篇文章里说到，哪怕是最简单的几个功能组合，想无穷穷举测完都很困难--马丹，原话我记不住了。&lt;br&gt;&lt;br&gt;&lt;br&gt;所以这就是给无数擅长性能测试的QA判了死刑，你之所以能做性能测试，是因为你们的开发模式和流程不对--别看我，我就是喜欢这么说，一点都不委婉。爱听听，不听拉倒。&lt;br&gt;&lt;br&gt;但是QA真的不是一个很简单的活儿，可以这么说吧。QA几乎是所有职业中，最熟悉系统的人-甚至包括设计它出来，开发它出来的产品经理和各种工程师！&lt;br&gt;&lt;br&gt;很多时候QA做的事情都是非常单调的，但是又必须有责任心的，拿我之前的话说，QA就是最后一道关口。&lt;br&gt;&lt;br&gt;所以，如果你想成为一个PM，你可以考虑先做QA，当然，前提是你必须遇到一个愿意给你机会做产品的好老大-比如说我。&lt;br&gt;&lt;br&gt;So，接下来就开始来闲扯一下QA了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;QA需要了解需求，很多公司会要求QA写测试用例，我觉得是扯淡。完全是在浪费时间。&lt;br&gt;通常开发三周，QA测试的时间只有一周到一周半。还有关于提前写测试用例的，都不靠谱。&lt;br&gt;&lt;br&gt;但是总之，了解需求，就算是不写也要自己知道自己测，这是QA的必备职责。&lt;br&gt;&lt;br&gt;跟着就是等开发人员开发，这个时候也会有一些奇葩公司，要求QA提前界入的，理由是加快上线周期。之前还有说过完成一个Story就要测试完整的，我也不想吐槽了。总之，如果你真的遇到了这样的公司，你的工作就是测试，然后跟开发人员说不对。然后开发人员说改好了，然后再测。然后你大喊一声，好毛线啊。然后开发人员说，稍等，我先梳个头。然后再告诉你好了。然后你再说，好毛线啊。然后开发人说。。。这次真的好了，于是你测了一下，真的好了，开发人员很Nice的说：完美！你也很开心，但是没过几秒钟，你就会喊：什么鬼，之前的功能是好的，为什么又改回去了？&lt;br&gt;&lt;br&gt;如果你呢。遇到好点的流程。会在上QA之前，打版本（我始终无法理解不打版本是什么流程），会Demo，那么你可以有一个安心的测试环境了。&lt;br&gt;&lt;br&gt;这个时候稍微正常点的工作，就是测试，然后把Bug录入到Jira，禅道，或者Bugzilla等各种专用的Bug管理工具。&lt;br&gt;&lt;br&gt;跟着就是追踪bug(如果你们公司有Bug处理流程的话)，如果有晨会就在晨会上说明，如果有周会，就在周会上统计。&lt;br&gt;大部分的QA都比较羞涩，并不太敢提Bug，并不太敢说哪个程序员的代码写的有问题。毕竟，这是唯一一个必须要当面揭短的职业，哈哈哈哈。&lt;br&gt;&lt;br&gt;&lt;br&gt;基本上到这里QA的任务就没了。等着发布上线就好了。实际情况上发布上线的时候QA要等着程序员改代码，验证。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;流程【Bug修复流程，版本发布流程】&lt;br&gt;工具【禅道，BugZilla，Jira,Excel表格来统计Bug数，自动化测试】&lt;br&gt;性格【严谨，耐心】&lt;br&gt;&lt;br&gt;&lt;br&gt;QA里经常会嘲笑自己是技术Team里最没技术的一个。如果说你是一个标准的QA的话，真的不用去特地研究一些压测工具的。&lt;br&gt;&lt;br&gt;不过也确实可以了解一下，Jmeter怎么用，TPS是什么概念，90%线是什么意思，PostGet什么的。&lt;br&gt;&lt;br&gt;自动化测试工具是我一直都强烈推荐的，无论是神马办法，只要你能做到哪怕只有一部分自动化的测试，你做回归测试就很容易了。相信我，回归测试在每一个版本发布都是需要的。只不过有的时候，只是需要跑一下脚本就好了。有问题再详细测一下。&lt;br&gt;&lt;br&gt;严谨和耐性是非常非常难得的，也是QA最重要的能力。&lt;br&gt;当然也包括需求的理解能力啦。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;QA的发展前景。。真的不算好，跟网管一样，如果说并不能转产品的话，20K基本上就封顶了，就算是有公司，愿意出30K让你们做性能测试，也是到天花板了。&lt;br&gt;&lt;br&gt;&lt;br&gt;1年~2年：4K~15K&lt;br&gt;2年以上：12K~20K&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;测试工程师-测试组Leader-PM&lt;br&gt;&lt;br&gt;&lt;br&gt;如果能转到PM，真的就很赞了，我推荐的时间应该是在半年到一年左右就开始转。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;QA并没有什么门槛，一般来说，是妹子比较多。汉子比较少，是汉子的，也多数是做点性能测试相关的。但是请相信我，这绝对不是一个好的天赋加点方式，就算是性能测试做的再6又怎么样？&lt;br&gt;&lt;br&gt;所以稍微懂一点Bug修复流程就好啦。勇敢的去做QA吧。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做运维&lt;br&gt;&lt;br&gt;IT界：all&lt;br&gt;其他界：all&lt;br&gt;&lt;br&gt;&lt;br&gt;虽然是IT界的All都可以转QA，但是说实话，我没有看到过一个从其他职业转到QA的。。&lt;br&gt;也许除了运维。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;职业限制也说过啦。总有重复的使用技能的厌倦感，毕竟这些技术水平都不需要太多。理解能力好一些，严谨一些就能做。&lt;br&gt;&lt;br&gt;说的直接点，从事五年的QA和从事一年的QA，本质上并没有什么差别啊。&lt;br&gt;但是好处就是，如果你有心，你会对系统特别特别的了解，这对于你转行做PM，是一个非常非常大的优势。再强调一遍，并不推荐QA转走技术路线。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;修真院并不提供QA的培训，暂时并没有，以后大概会讲一下Bug处理流程和敏捷开发流程。&lt;br&gt;所以，我也不知道哪里有QA的成长机会，一般都是在公司。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;九 算法工程师 &lt;br&gt;=============我是伤透了心的分界线================================&lt;br&gt;&lt;br&gt;“真正NB的程序员都是写算法的”-----我自己瞎编的。&lt;br&gt;算法工程师其实是一个很虚的概念，但是在大数据忽悠了人这么多年以后，慢慢的也开始吃香起来了。很多经典的算法都是十年前，二十年前的，在算法本质上，诸多数学家或者是IT学者没有做过太多的改进，大家的统一的结论就是：先拿到最应用，然后改进一点是一点。&lt;br&gt;&lt;br&gt;可是即便是算法很多时候不完善，也已经暴发出了强大的战斗力。&lt;br&gt;&lt;br&gt;那么什么是算法呢，什么是算法工程师呢？简单来说，算法就是瞎扯淡想的，从各种自然现象映射到计算机上去的。什么爬山算法，模拟退火。。种种种种，反正就是解决问题啦。算法工程师就是吃饱了没事干，调个参数，训练个模型玩玩的闲人。&lt;br&gt;&lt;br&gt;一般来说。说到底，还是在机器学习和数据挖掘中最常见的几种东西，首先就是分类。分类算法是最常见的。分类一般会用来匹配，比如说，上周刚刚有朋友来问我怎么做穿衣搭配种的一套方案可以快速推给其他同类用户的设计。那么首先就要收集用户的信息，设定特征值，然后训练分类模型等等。最常见的就是新闻的分类，如我之前做过的财经新闻分类，把2000多家上市公司相关的新闻自动分到所属行业。&lt;br&gt;&lt;br&gt;分类完之后就是聚类，聚类用的其实不多啦，算是用的比较少的。我了解到的使用聚类算法的并不太多。&lt;br&gt;&lt;br&gt;实体识别是一个核心的技术。在新闻的领域用的是比较多的，确切的说，在文本领域用的都比较多。人名，地名，股票，时间 等等都是实体识别的一部分。&lt;br&gt;&lt;br&gt;关系抽取是一个相对来讲比较靠上的应用。事件识也是一样，我们曾经做过上市公司高管变动的东西。也看不出有太大的价值。&lt;br&gt;&lt;br&gt;协同推荐是在三四年前，还是五六年前的时候比较靠谱的，那个时候个性化推荐刚出来，各种相关商品，书籍，还有个性化阅读，音乐等等等等。然而也并没有爆发出什么好的应用来。&lt;br&gt;&lt;br&gt;豆瓣和亚马逊据说推荐的还不错，我没仔细对比过。&lt;br&gt;&lt;br&gt;简来说，常用的算法，指的就是这些。而算法工程师呢？并不是去研究算法。真的。&lt;br&gt;算法工程师只是拿别人的算法：有的是自己实现，有的是直接拿开源软件来用，跑语料，找特征，调参数，优化修改而已。&lt;br&gt;&lt;br&gt;在我还年少无知的时候，对算法这个很东西痴迷，后来就渐渐明白了，算法是那些博士要做的。博士只负责来做算法。在公司呢。大部分都是要接近业务的，而且说实话，算法之间的差别，并不大。很多时候都是减轻人工负担，提供决策支持，更简单的更有效的可能就是关键词过滤。&lt;br&gt;&lt;br&gt;嗯。还有很多算法工程师，做到最后，只能跑个Demo，连个像样的工程代码都写不出来。经常是一个月调出一个模型，然后再优化一两个月，然后再优化一两个月，准确率可能都提高不了一个点。&lt;br&gt;&lt;br&gt;所以这其实是一个跟业务结合特别密切的岗位，很多时候的先难知识都比较有用。而且也是个很难见到效果的岗位，需要太多语料的配合了。&lt;br&gt;&lt;br&gt;&lt;br&gt;好的吧。大概就是这么多。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;算法工程师的工作内容，大部分时间都是在调优。就是调各种参数和语料，寻找特征，验证结果，排除噪音。&lt;br&gt;也会和Hadoop神马的打一些交道，mahout神马的，我那个时候还在用JavaML。现在并不知道有没有什么更好用的工具了。&lt;br&gt;&lt;br&gt;有的时候还要自己去标注语料---当然大部分人都不爱做这个事儿，会找漂亮的小编辑去做。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;基础【机器学习，数据挖掘】&lt;br&gt;工具【Mahout，JavaML等其他的算法工具集】&lt;br&gt;&lt;br&gt;&lt;br&gt;这是一个技术含量很高很高的职业。。。。特别是对不懂这个行业的人来说。&lt;br&gt;虽然有时候大部分做的东西也就那么回事儿，但是对于最基本的SVM算法，隐马模型，最大熵等还是有比较高的要求的。毕竟，懂还是不懂，差别挺大的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;我对算法工程师的薪资并不太了解，只是知道不会比较架构师的薪水低。这个职业的人数比较少，最少也是需要硕士以上（硕士需要学的东西和写的论文真不是盖的，并不排除有很多都是抄的），所以很难给出一个精准的数据。&lt;br&gt;&lt;br&gt;&lt;br&gt;1年~3年：10K~25K&lt;br&gt;3年以上：20K~40K&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;嗯。门槛最高的一个。最低也是要硕士，基本上都是博士在做。&lt;br&gt;大部分都是有一个博士震楼，然后一帮硕士帮着写具体的代码。&lt;br&gt;&lt;br&gt;所以入门的门槛极高。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做算法工程师&lt;br&gt;&lt;br&gt;IT界：计算机算法相关的硕士或博士&lt;br&gt;其他界：无&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;怎么说呢。算法工程师很少会写工程代码，所以写代码的能力基本上等于零。这个是一个瓶颈。另外，很少有机会能让你研究算法，只能去不断的跟业务数据去死磕。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;说不上来怎么成长，学这东西只能是跟着学校走。自学可能性太低了。成长的路径也就是去一些大数据的公司--放心，只要是大数据的公司，基本上都是会考虑算法的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;十 搜索工程师 &lt;br&gt;=============人啊，就是这样一波又一波分界线================================&lt;br&gt;&lt;br&gt;这儿说的搜索工程师是偏Java的。并不是百度，Google这种大型的搜索，而是指一般的网站常用的搜索工程师。&lt;br&gt;&lt;br&gt;搜索工程师的主要工作流程就是抓取，解析，去重，处理，索引，查询。每个环节都有比较强的算法要求。我自己比较喜欢不区分搜索和应用组，一直觉得这两个组的人技能是相通的，能做架构的，算法也不问题。只能写模块代码的，也可以写搜索的项目。&lt;br&gt;&lt;br&gt;但是实际上搜索还是值得拿出一个单独的领域的。每个领域都有比较深的知识点，因此单独拿出一个搜索工程师的概念也并不算错。特别是NoSQL DB兴起之后，我还是比较起Search+NoSqlDB的架构。&lt;br&gt;&lt;br&gt;搜索工程师算是属于偏高级别的了，一般来说也是要求硕士以上。最早的时候能做搜索的都挺厉害的，后来有一段时间之后，开源框架越来越成熟，搜索工程师也变成了一个门槛低的行业，直到NoSql DB的兴起，搜索并不是局限于是来做前端模糊搜索了，反而成了系统架构的一种方式，同样是可以在做分布式，做分层，分负载均衡，性能比单纯用DB好太多，也解析了Cache的问题。特别是Solr和ElasticSearch的出现。&lt;br&gt;&lt;br&gt;或者这么说吧。以前的搜索有很大一部分都是为了前端的索引查询，只是满足于搜索一个功能的需要。后来慢慢演变出来了很多不同的需求，其中一个比较关键的词就叫做Facet。&lt;br&gt;&lt;br&gt;某种程度上来讲,Facet才给搜索带来了新生，慢慢的才发现，原来并不是我在搜索框中才叫搜索。&lt;br&gt;原来电商的分类搜索也是搜索，原来很多列表也可以用搜索来做。&lt;br&gt;&lt;br&gt;这个又刚刚解决了Mysql的问题，各种NoSqlDB做这种索引的东西实在又有点有心无力。所以搜索才能慢慢演变成一种架构方式。&lt;br&gt;&lt;br&gt;嗯。至少在我这里一直是要不断的去尝试一下。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;所以搜索现在其实分成两种。&lt;br&gt;&lt;br&gt;一种是传统的搜索。包括：&lt;br&gt;A。抓取 &lt;br&gt;B。解析&lt;br&gt;C。去重&lt;br&gt;D。处理&lt;br&gt;E。索引&lt;br&gt;F。查询&lt;br&gt;&lt;br&gt;另一种是做为架构的搜索。并不包括之前的抓取解析去重，只有索引和查询。&lt;br&gt;A。索引&lt;br&gt;B。查询&lt;br&gt;&lt;br&gt;&lt;br&gt;从传统的搜索来讲。先说 A 抓取。&lt;br&gt;&lt;br&gt;抓取最需要解决的问题就是抓取的优先级，理论上来讲，对一个网站上的访问，不能过超过2秒一次的频率，这个并不会给别人网站带来压力，被称为是友好的访问--表问我怎么知道这些的，我也不记得了，反正并不严谨。&lt;br&gt;&lt;br&gt;因此你需要有一个很好的机制来给Url打分，判断哪些抓过了。哪些没抓。这就是所谓的蜘蛛，也叫爬虫。但是实际上我被这个名字误导好久，真心是丹藤。只是发一个网络请求而已，根本没有到对方网站去，马丹刚开始想出这个名字的人抽象的能力简直弱爆了。我一开始就在幻像各种程序写成的小虫子会在对方网络上跑。打野的最后才明白原来这些虫子都不出门，只是在家吐口水而已。&lt;br&gt;&lt;br&gt;B 解析&lt;br&gt;解析并不是一件容易的事儿。解析要做的就是把网页的文本内容和其他没用的信息去掉。知道什么是标题，什么是作者，什么是时间，或者是其他特定的需要。一般来说，都是有两种方式。一种是配模板，不同的网站我有不同的模板。对方网站改版我也改。这种方式最精准。但是很愁人。&lt;br&gt;所以另一种方式，自动解析，用算法或者是规则等自动解析内容的东西层出不穷。我到现在为止都觉得一切都是扯淡。寻找最大正文本块再反向解析是最科学的。&lt;br&gt;&lt;br&gt;之前还听到过说，模板的自动生成。抓下来一个网站的数据，然后从上千个网页中自动解析网页解析。这个我挺感兴趣的，但是一直没试过。&lt;br&gt;&lt;br&gt;总之，如果只是抓一个网站上的数据（比如说抓取百度的搜索结果哈哈哈哈）。用Python的Scrapy这种神器，几分钟搞定还是没问题的。&lt;br&gt;&lt;br&gt;C。去重。&lt;br&gt;去重是一个很好玩的事儿。不去重不行。因为国内的风气就是这样。你抄我，我抄你。而且。为了怕被大家发现是抄袭，还会手动的增加一段，删除一段。做为一个智能的去重系统，你就必须把这些问题都解决掉。&lt;br&gt;&lt;br&gt;而且，随着时间的积累，你甚至有可能去做全量的去重（虽然我一直理解不了，为什么要做全量）。六七年前我知道的最好的算法就是SpotSig。嗯。一个很机智的算法。&lt;br&gt;&lt;br&gt;D。处理。&lt;br&gt;这里的处理多了去了。所有的跟NLP相关的东西都可以放到这里。包括分词，词性识别，实体识别，关系抽取，事件识别，分类，聚类，热点等等等等等。&lt;br&gt;&lt;br&gt;而且对于实时性的要求比较高。一篇新闻从别的网站发布，到我们的搜索系统，最快的可能就30秒或者是1两分钟--全部都是30秒不可能，因为抓取受限，只能说，最快的能看到这种新的数据。&lt;br&gt;&lt;br&gt;E。索引。&lt;br&gt;索引是比较简单的。主要牵涉到的就是怎么做实时索引。大概是在内存里做两个索引，然后文件有一个索引，跟着来回倒腾。。具体算法我不记得了，也是一个很机智的策略，在Bob中使用的。&lt;br&gt;如果有Facet的话，也要考虑一下Facet的设置。&lt;br&gt;&lt;br&gt;F。查询。&lt;br&gt;查询里主要是分词，并不牵涉到句法分析。还有一个高亮算法，以及Facet的查询。相对简单一些。不过如果是分布式的搜索就会麻烦一些，又会出现如何分片的问题。是垂直分，还是按时间分？不同的业务有不同的选择。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【Linux】&lt;br&gt;框架【Luence,Slor,ElasticSearch,Cassandra,MongoDB】&lt;br&gt;算法【倒排索引，权重计算公式，去重算法，Facet搜索的原理，高亮算法，实时索引】&lt;br&gt;&lt;br&gt;嗯。算法偏多。跟NLP的算法又有很大的不一样。比那些分类聚类的难度要低一些，又比做项目和工程应用要再高一些。有点儿不上不下的感觉。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;现在来看的话，搜索工程师的作用越来越大，某种程度上和后台工程师是重合了，之前说到过拿搜的Facet来做架构。&lt;br&gt;&lt;br&gt;1年~3年：10K~20K&lt;br&gt;3年以上：15K~35K&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;搜索工程师-搜索组leader&lt;br&gt;&lt;br&gt;&lt;br&gt;在我印象中，很少有做搜索的能够做CTO或者是架构师的，这跟搜索工程师以前的工作职责是有很大关系的，拿搜索工程师跟Application工程师做对比就能看得出来。&lt;br&gt;&lt;br&gt;一个偏算法，偏调优，一个是偏项目，偏工程。偏工程的更需要视角全面，在某一个领域上没有搜索工程师研究的深入，但是整体的大局观会好一些。搜索工程师需要的则是深度。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;有过两到三年Java工程师经验的人，或者是硕士毕业的，或者是数学比较好的，或者做过NLP的.这就是搜索工程师的门槛.&lt;br&gt;如果你对数据结构,对算法不了解,做个搜索工程师挺没意思的.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做搜索工程师&lt;br&gt;&lt;br&gt;IT界：后端工程师中有两年经验,或者是硕士,或者是NLP&lt;br&gt;其他界：无&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;搜索的职业限制就是他很少去做工程化的代码,对于业务逻辑的理解跟工程化的工程师还是差一些.可以选用的框架也比较少.&lt;br&gt;所以到了搜索组的leader之后,再往上走有点难.会遇到大数据的部门,跟他们比, 搜索工程师又不太懂文本分类等算法,跟项目的工程师比,在代码重构,项目规范上又会差一些.&lt;br&gt;&lt;br&gt;这个就是搜索工程师的职业限制.不过,这三者之间也在不断的融合.有些工程出身的,不太了解搜索算法,只是拿来做架构体系来用,也已经够了.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;并不知道去哪里学,等修真院有了搜索工程师的职业以后,修真院一定是一个好的学习搜索的地方.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;十一 大数据工程师 &lt;br&gt;=============被某人气到了，以后再也不爱她了 ================================&lt;br&gt;&lt;br&gt;其实一直都不太喜欢大数据工程师这个说法，总觉得有种多此一举的感觉。不过实际上呢，确实也会有这么一种岗位，一般来说，公司里大概会有个6~7人的小团队，或者是10个，都无所谓了。&lt;br&gt;&lt;br&gt;在五六年前的时候，Hadoop的家族还不太多，大数据工程师其实并没有太多事情可以干，基础环境搭起来，然后能够部署，能够跑起来就可以了。Hadoop是要在上百台PC上跑才有显示出来优势，然而很多公司只有几台机器也是一样喜欢玩。&lt;br&gt;&lt;br&gt;后来大数据的家族就突然间多了起来。最主要的就是Spark，Storm，Mahout，Pig，Hive这些框架，以及配套的日志系统Kafa和消息队列，搜索，NoSqlDB和ZooKeeper等。&lt;br&gt;Spark，Storm，Mahout，Pig，Hive，Hadoop都算是大数据专用的框架（包括NLP了），其他的都是别的系统架构中也会使用的。&lt;br&gt;&lt;br&gt;嗯。那么，什么叫大数据呢？马丹我忘记了这是给IT新人介绍的。简单来讲，大数据就是指数据非常多非常多非常多，多到一台机器放不下，要用上百台机器存储。而我们又常常需要从这些非常多的数据中找出来一些有价值的内容，所以就需要对运营的指标有要求，这也是MapReduce产生的原因，当解决了离线数据的时候，很多人又想问我能否做一些在线数据的实时处理。这就有了Storm。再加上其他的NLP模块，大数据就变成了这么一坨怪东西。&lt;br&gt;&lt;br&gt;记着，大数据只在几百台机器的时候才有用处，其他的都是小打小闹，也是Hadoop一直被称为笨重的原因。你要说，几十台，甚至是十几台能不能用，也可以。只是并没有把他的价值发挥的更好。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;工作内容在前期会比较多一些，基础搭建还是一个挺讲究的事儿。系统搭建好之后呢，大概是两种，一种是向大数据部门提交任务，跑一圈给你。一种是持续的文本信息处理中增加新的处理模块，像我之前说的增加个分类啦，实体识别神马的。&lt;br&gt;&lt;br&gt;好吧第一种其实我也不记得是从哪得来的印象了，我是没有见到过的。架构稳定了之后，大数据部门的工作并不太多，常常会和算法工程师混到一起来。&lt;br&gt;&lt;br&gt;其他的应该就是大数据周边产品的开发工作了。再去解决一些Bug什么的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【Linux】&lt;br&gt;框架【Hadoo,spark,storm,pig,hive,mahout,zookeeper 】&lt;br&gt;算法【mapreduce,hdfs,zookeeper】&lt;br&gt;&lt;br&gt;嗯。这些框架的原理和实现都要了解的比较清楚。这才算是一个合格的大数据工程师。&lt;br&gt;只会使用这些东西的人，终究还是菜鸟而已。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;不知道。看不清楚。从某种程度来说，并不觉得对这些东西的人很NB，但是总会有一些公司人为的把这些东西加上去。所以应该说现在还处于比较混乱的地位。一般人要学的话，也确实是有一些门槛，所以，也确实是属于偏高薪的职业。&lt;br&gt;&lt;br&gt;1年~3年：10K~20K&lt;br&gt;3年以上：15K~35K&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;&lt;br&gt;说不上来，大数据这个部门以后还会不会存在都不一定。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;入门的门槛算是比较高的吧。比不上NLP，跟搜索比较类似，主要就是五六个框架的原理问题。&lt;br&gt;全熟悉下来，也就是两三个月或者是半年左右的样子。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做大数据&lt;br&gt;&lt;br&gt;IT界：后端工程师中有两年经验,或者是硕士,或者是NLP&lt;br&gt;其他界：无&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;想想该怎么说，熟悉了这些架构之后，也并没有什么东西可以做。&lt;br&gt;跟NLP相比呢，在算法的深度上比不过。跟原来的搜索工程师比较相似，但是现在搜索和NoSqlDB也成为了现在系统架构的主要场景，所以在工程方面也会偏差很多。&lt;br&gt;&lt;br&gt;所以有点不伦不类，高不成低不就的样子。要说以后会不会发展的很好，或者说会不会是这个职业的空缺很大，我并不知道。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;不知道。有一些培训在做这个，但是，也只能说讲讲算法的东西。这个还是需要使用场景的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;十二 Android工程师 &lt;br&gt;=============我原谅某人了我还是爱她的================================&lt;br&gt;&lt;br&gt;Android工程师在两年前是最疯狂的时候。一个五年的Java工程师的薪水，比不上一个三年的Android.一方面是苹果这种高端的装逼工程师成了很多人不想去学IOS的门槛，一方面是Android的应用使用人数实在是太多了。&lt;br&gt;&lt;br&gt;在三年前和四年前，个人开发者还很多的时候，经常盛传一个人开发了几个Android小应用。一年收成过三百万或者是一千万的事儿。这事是真的还是假的我不知道，我身边还没有遇到过这种人，至少都是听别人讲的，也许是有人挣了钱并不会告诉我们。&lt;br&gt;&lt;br&gt;反正，现在啊。这种可能性越来越少了。所以Android工程师整体来讲呢。属于高潮过后的喘息，慢慢平稳。不算高也不算少。另外，也是受H5的影响，现在有两种应用会使用H5，一种是做的特别简陋。低制烂造的，一种是懒得频繁发布版本，经常需要动态替换内容的。&lt;br&gt;&lt;br&gt;前者是特殊产物，慢慢会被终结掉。后者呢，是正常的需求，以后的发展空间会越来越大。所以，Android也是会受到JS的侵蚀。记着我之前说的。前端工程师一定要Android，IOS，JS全通，然后主精一种。&lt;br&gt;&lt;br&gt;还有，Android的兼容性是最烦的了。碎片化很严重，版本，机型都是有问题的。特别是哪家公司的老板用的什么机型，这款机型的适配就必须做的很好。否则。。。&lt;br&gt;&lt;br&gt;以及Android是用Java开发，资料神马的都是比较全的，上手也比较容易。不过。Android做的事儿，和Java后端做的事儿，几乎没有任何关联。所以，当说Android。就是Android。当说Java。就是指后台架构。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;Android工程师的日常就是听产品经理讲需求，跟后端定接口，听QA反馈哪款机器不兼容，闹着申请各种测试机，以及悲催的用Android做IOS的控件。&lt;br&gt;&lt;br&gt;马丹我其实并没什么东西可以了，一瞬间不知道该对这个职业说些神马。嗯。想起来了。WEB端几乎都是要学会自己切图的，Android往往会要求UI切图，原因是啥我不知道，大概是Android程序员都认为自己是程序员？而CSS工程师往往不会被当成人看？&lt;br&gt;&lt;br&gt;还有还有，想起来了。各种闪退的修复，以及各种性能的调优，这些都是Android工程师的日志。&lt;br&gt;崩溃啊，慢啊。开了会就没电啊，如果是要做到跟视频音频相关的东西更悲剧。Android和IOS之间还需要做一些转码。&lt;br&gt;&lt;br&gt;别的似乎也没了。嗯。我又想起来了。&lt;br&gt;Android其实是对地图，支付，IM，第三方登录，短信，统计，音视频，文件，照片等等要求比较多的。业务上其实一般并不会有太多的内容。也很少会要求一些动画效果。再加一些手势密码。&lt;br&gt;&lt;br&gt;还有 各种奇葩的问题。比如说Android的65536的问题。曾经折磨了一家公司半年多。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【Android Studio，Maven,Gradle】&lt;br&gt;基础【数据结构，Java，计算机网络】&lt;br&gt;组件【IM，地图，支付，拍照，视频，音频，统计，分享，手势密码】&lt;br&gt;&lt;br&gt;做的好的会对控件做一些自适应的改动。会把网络请求也封装一下。处理好本地缓存，处理好内存的占用。&lt;br&gt;另外，接口的制订是比较重要的，而且，果断的使用Rest吧。表再使用一些过时又无聊的接口风格了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;单纯纯Android的话，我觉得发展前景不算大。如我之前所说的一样，差不多两到三年就已经够用了。五年的Android并不见得比三年的Android强太多，或者站在公司的角度上来说，两到三年的Android基本上就够用了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;0年~1年：6K~10K&lt;br&gt;1年~3年：8K~30K&lt;br&gt;3年~      ：20K~&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;Android工程师-&amp;gt;Android Leader-》前端Leader-》&lt;br&gt;&lt;br&gt;&lt;br&gt;很少有Android工程师能够做到技术总监的。所以还是早做准备，Android，IOS和JS通吃吧。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;门槛比较低了。比JS稍稍高一点儿，但也差别不大。主要是因为Android是纯客户端，要做就必须什么都懂。但是JS就不太一样了，有的时候要求不高也能做事儿。&lt;br&gt;&lt;br&gt;这就是Android比JS的门槛高一点的原因。简单来讲的话，最好是懂Java语法，然后是懂Http请求的含义，然后懂点儿MVC的概念，就可以了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做Android&lt;br&gt;&lt;br&gt;IT界：都可以。哪怕你是产品，运维或者是QA&lt;br&gt;其他界：都可以，只要你有点儿基础。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;偏客户端的职业怎么说呢，做的时间长了，公司对你的要求其实并没有那么高了。这个是Android工程师有点儿不太好的地方。靠。现在已经快两点了。我有点神智不清了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;做Android培训的挺多的，基本上是四个月1万6的价格。&lt;br&gt;所以，为嘛不考虑修真院的线上免费教学呢？&lt;br&gt;&lt;br&gt;我对于看视频一直都不看好啊。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;十三  IOS工程师 &lt;br&gt;=============我好困啊我好困啊我好困啊================================&lt;br&gt;&lt;br&gt;什么是IOS工程师？培训4个月，薪水10K的工程师，这就是IOS工程师。&lt;br&gt;虽然有一点夸张，但是也确实存在，只是那个666的人不太可能会是你而已。&lt;br&gt;&lt;br&gt;IOS之前是用ObjectC开发，现在又推出来了Swift。至少从目前来看，Swift并未成为主流和开发IOS语言。所以现在要学的IOS的话，还是会以OC为主。&lt;br&gt;&lt;br&gt;从难度上来讲，IOS比Android要简单一些，Android要兼容N多机型，系统底层的API也没有封装的很好，IOS的编译器偶尔会出点问题，但是总体来讲还是比较简单的。&lt;br&gt;&lt;br&gt;只是IOS对UI的要求会比较高一些。做出的效果也会炫很多。&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;IOS工程师的工作内容真的挺简单的，听需求，定接口。做个适配，抛弃一下iphone4。&lt;br&gt;还有啥。。&lt;br&gt;&lt;br&gt;马丹，以我为数不多的IOS知识来讲，真的不知道还有啥了。&lt;br&gt;我知道的比较复杂的系统也是各种背景高斯模糊，各种渐变，各种图片滤镜处理，其他并没有什么。&lt;br&gt;&lt;br&gt;支付，地图，统计这些东西。 嗯。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;环境【Xcode】&lt;br&gt;基础【数据结构，Object，计算机网络】&lt;br&gt;组件【IM，地图，支付，拍照，视频，音频，统计，分享，手势密码】&lt;br&gt;&lt;br&gt;&lt;br&gt;有崩的地方注意一下就好。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;IOS是属于高端的项目必备的，因为IOS的使用者比Android的还要多一些。很多人都在解释为什么自己不用IOS，最被认可的答案就是：穷。&lt;br&gt;&lt;br&gt;所以IOS的发展前景怎么样？我不知道。但是在五年之内，IOS的发展不会有问题。&lt;br&gt;&lt;br&gt;0年~1年：6K~10K&lt;br&gt;1年~3年：8K~30K&lt;br&gt;3年~ ：20K~&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;IOS工程师-&amp;gt;IOS Leader-》前端Leader-》&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;IOS的门槛比Android稍稍低点儿。毕竟不用做兼容真的是一件很Happy的事儿。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做Android&lt;br&gt;&lt;br&gt;IT界：都可以。哪怕你是产品，运维或者是QA&lt;br&gt;其他界：都可以，只要你有点儿基础。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;偏客户端的职业怎么说呢，做的时间长了，公司对你的要求其实并没有那么高了。这个是IOS&lt;br&gt;工程师有点儿不太好的地方。靠。现在已经快两点了。我有点神智不清了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;做IOS培训的挺多的，基本上是四个月1万6的价格。&lt;br&gt;所以，为嘛不考虑修真院的线上免费教学呢？&lt;br&gt;&lt;br&gt;我对于看视频一直都不看好啊。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;十四 运营 &lt;br&gt;=============岁月没有假期|前行不需周末|再远的星空|也比不过内心的宁静===============================&lt;br&gt;&lt;br&gt;运营，产品，技术是创业Team的三大主心骨，这从侧面也显示出来了运营同学的重要性。而且，在收入上，运营也是产品和技术远远无法比拟的。你想想。技术人员做了七年，积累的是神马？一堆破代码，一身颈椎病。产品人员做了七年，积累的是神马？一堆破原型，一身铁布衫。而运营人员呢？做了七年之后，产品再烂，技术再烂，身边的渠道啊，人脉啊，行业的内幕啊这才是最有价值的。毕竟，什么事情能离开了人？&lt;br&gt;&lt;br&gt;&lt;br&gt;不过运营也不好做，因为很多脑残的公司都有这样的逻辑，通过一个脑残的想法拉来一个活不过三集的替死鬼产品经理，折腾了老实巴交的技术人员半年多弄出了一个不伦不类的破系统，一切就绪，就差一个NB的运营了。&lt;br&gt;&lt;br&gt;如果运营做的不好，就是运营的错，如果运营做的很好，但是用户还是不喜欢，那就是产品的错，如果用户喜欢了，但是用不了系统总是闪退和504，那就是技术的错。总之，产品技术运营都有错，唯一没错的就是老板自己。呃。不对，老板的错就是太信任手下这些人了。&lt;br&gt;&lt;br&gt;&lt;br&gt;运营这个概念呢。在互联网上怎么兴起来的，说不上来，很多传统互联网公司在转行的时候，经常会不清这些概念，我遇到过好几家公司，都以为做个网站，找个CTO就行了。CTO下面管着产品，管着技术，管着运营---不对，你太天真了，他们会以为产品运营都是技术做的。&lt;br&gt;&lt;br&gt;不过他们对如何能保障公司正常运转还是有了解的。所以对运营还是有一些模糊的概念，但是，马丹，就算是我也对运营只有一些不清楚的理解而已，他们能理解多深刻呢？简单说，产品决定做什么，技术来把它做出来，市场来把它推出去，运营来把它用起来。&lt;br&gt;&lt;br&gt;嗯。我本来计划写一点市场相关的东西，后来想想，自己也实在分不清市场和运营究竟该怎么分。什么活动，策划，执行，渠道，品牌，内容，数据分析。并不能向技术一样分的这么清楚。&lt;br&gt;&lt;br&gt;所以就把市场和运营混在一起了。对于你们这些新入行的人来说，基本上是老板让做什么，就做什么呗。只是不管怎么说，运营是一个非常非常有前景的，在之前的介绍里，我想你们都看到了，有很多职业不适合做CTO，而后端是做CTO的最佳人选。然而，也大多数要止步于此，很多时候，我们要是奔着CEO的话，你会发现，排名第一的是产品，排名第二是的是运营，排名第三的。。没有了。&lt;br&gt;&lt;br&gt;而且，很多时候产品和运营是分不开的，也是要经常勾搭在一起的。当然，产品和技术也分不开。技术面向产品，产品和运营沟通，运营收集用户反馈，交由产品设计，然后技术开发。嗯。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1 工作内容：&lt;br&gt;&lt;br&gt;我之前给我们家超乖简单的介绍过，运营可以从几个大方面来分一下。&lt;br&gt;&lt;br&gt;1.推广运营：这里包括各种论坛，知乎，贴吧，自媒体，大号，微博，SEO，导流等等所有的手段，简单说就是用很多种方式来扩大自己网站或者是WEB的知名度，也有可能是策划一场 活动，去人民大会堂办个结业典礼，也有可能是找某个漂亮明星做阵，来做一出秀，也有可能是找很多行业资源一起来打造个什么百家蛋糕店对修真院弟子免单之类的东西。&lt;br&gt;&lt;br&gt;2.内容运营：推广的话，肯定要有什么东西才会推，刚刚提到的很多内容，有很多都是要靠内容的。以前是软文，现在的方式比较多了。什么易企秀，秀米之类的H5制作，但是绝大多数都是以H5为主，大部分都是线上传播，形成热点，靠成口碑效应，一般来说，三天五天之内是传播的最佳时间，过了三天或者是五天，热度就会直线下降。&lt;br&gt;&lt;br&gt;这也是内容团队需要不断的生产内容的原因。并没有一招鲜吃遍天的说法。这篇文章同样，在最初的一个星期之内，瞬间挤进来1000人，现在呢，每天稳定在4~5个人左右。&lt;br&gt;&lt;br&gt;3.系统运营：系统运营并不仅仅是包括给出一个后台。开个账户，找回个密码，查一下用户的数据是否异常等。有的时候还包括你的系统的核心设置。比如说，要不要有VIP，VIP应该有什么特权，多长时间合适，能谈到多少合作伙伴，应该分几个级别。这些跟产品要做的事情比较接近了，只是这些都是要根据用户的表现不断的反馈来调整的。别的不说。现在大修真院就有好几个QQ群。这些QQ群怎么设计，怎么管理，本身也是运营工作中的一种。&lt;br&gt;&lt;br&gt;4.数据分析：这个其实是运营中最有技术含量的一种，也是让运营这个岗位比产品接地气的原因。运营人员是最接近用户的，也是最了解用户行为的，在大数据的时代，对用户行为的分析真的不是一丁半点的重要-虽然在某种程度上，你一点不分析也可以，反正都没有人用。&lt;br&gt;&lt;br&gt;数据分析包括很多，用户的留存率，日活，月活，召回率，转换率，跳出率，PV,UV，男女，职业，地域，年龄，浏览时长，页面热点，浏览路径，高峰低谷。这些数据运营人员要头脑清晰，把这些数学全部整合在一起，结合自己对业务的了解，然后制订定出后续的计划，看看是需要提高召回率，还是需要提高转换率，看看系统的主要用户属性，借此去寻找更多的用户。&lt;br&gt;&lt;br&gt;嗯。很有意思。&lt;br&gt;所以运营的工作，有的时候是需要你去申请一个百度认证，提交各种资料，有的时候是需要你去找一些合作伙伴，商量换个广告位，有的时候是需要你去谈几个合作商家，签几个战略协议，有的时候是需要你去策划一场活动，挨个去跟活动参与者去谈，有的时候是要去刷脸，请朋友来帮你站台，有的时候是需要你坐下来，写一篇色情幽默的文章，更多的时候要收集用户的反馈，帮助他们解答为什么你们的网站注册不了，短信验证码收不到等一系列问题，后台加个V，换个广告，最重要的是每周或者是每月出个报表，来给大家汇报一下当前的用户情况，给领导层做决策使用--虽然我一直都觉得完全是在扯淡，再好的数据都比不上真实的了解这个行业，数据只能是辅以支持，二手数据的价值并不是没有，只是很容易让人跑偏，就好像我今天刚好看到的说Facebook几年没改版，是因为在小范围内改版发现用户的活跃度下降--真心觉得蛋疼。FaceBook最终的价值并不应该仅仅是在页面上，这些会有影响，但是绝对不应该是一个决策的关键性因素。&lt;br&gt;&lt;br&gt;然而做运营最重要的一点就是，不要去询问用户，而是去观察用户。对于这点我是非常认可的。&lt;br&gt;&lt;br&gt;&lt;br&gt;2 需要技能：&lt;br&gt;&lt;br&gt;行业知识【各种行业知识，必须要懂行业，像推广，渠道，活动，SEO这些都需要了解一些】&lt;br&gt;人脉【各种刷人脸，凑热闹，换资源】&lt;br&gt;文笔【文笔太差就找个小妹妹，风趣幽默点，否则没人看】&lt;br&gt;数据分析【看数据，写各种各样的PPT，然后做决策】&lt;br&gt;&lt;br&gt;&lt;br&gt;还有就是，跟产品和技术搞好关系。运营的职位其实是天生比产品和技术高一层，也正是因为这样，才会经常招产品和技术骂，哈哈哈哈哈哈哈。特别是当一部分需要从运营这边传递到产品里的时候。&lt;br&gt;&lt;br&gt;如果你绕过了产品，直接用所谓的运营驱动去做开发，那更完蛋了。&lt;br&gt;&lt;br&gt;&lt;br&gt;3 发展前景&lt;br&gt;&lt;br&gt;绝对好。无论技术发展到什么程度，无论产品变换多少次风格，运营的核心理念都不会变，积累的人脉不会变。运营，可以做100年。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;0年~1年：6K~10K&lt;br&gt;1年~3年：8K~20K&lt;br&gt;3年~ ：20K~（百万年薪级别的运营多的是。）&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;成长路径：&lt;br&gt;&lt;br&gt;运营专员-》部门经理-》运营总监-》CEO&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.入门门槛&lt;br&gt;&lt;br&gt;这个说要门槛，有点谈不上。毕竟有深有浅，情商要高是必须的，其他的只能说有了更好。&lt;br&gt;好的吧，就算是情商低也可以去做编辑，每天只是对着后台系统一阵改。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;5.哪些行业适合做运营&lt;br&gt;&lt;br&gt;IT界：都可以。哪怕你是产品，运维或者是QA&lt;br&gt;其他界：都可以，只要你有点儿基础。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;6.职业限制&lt;br&gt;&lt;br&gt;我想想，运营人员常常会受限于资源，也常常会迷失在数据里，很多运营的人，其实是做不到那么 高的职位的，对于他们来说，自己的行业积累和人脉积累没什么用处，因为只有你本身有价值，你才能跟别人互相交换。所以有的时候会高不成低不就，退回去做产品和技术，又缺少专业技能，也是一场 人间悲剧。&lt;br&gt;&lt;br&gt;这大概也是运营这个岗位的职业限制吧，缺少干货，心里容易没底气。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;7.去哪里学，怎么成长&lt;br&gt;&lt;br&gt;有没有公司或者是机构做运营？我其实并不知道的。修真院还有一个项目叫做草船云，是帮助传统公司和创业公司做技术孵化服务，能够提供产品和技术的支持，但是运营这部分不太敢碰，嗯。所以运营的最快成长方式，还是从一个岗位切入手，传帮带。&lt;br&gt;&lt;br&gt;数据分析神马的还好，我会在接下来的修真院系列中写一些运营相关的基础名词（所以快关注我的收藏夹），能有一些入门的术语。其他的呢，大概只能是见多识广才能做。&lt;br&gt;嗯。我可以在修真院尝试一下，看看能否有一些运营简单的培训，只是太浅了，并不能像技术一样，板上钉钉的保证，只要你听话，认真，努力，就能成为一个初级工程师。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注14：收尾了~么有了~累死了~这些都不是一天写的，所以有时候心情好写的多，有时候心情差，写的少。我打算过几天再整理一下~~尽可能的风格，结构都一样。&lt;br&gt;&lt;br&gt;备注13：马丹，实在不知道怎么写了。&lt;br&gt;&lt;br&gt;备注12：好烦燥啊好烦燥。&lt;br&gt;&lt;br&gt;备注11：没什么。赶紧写完&lt;br&gt;&lt;br&gt;&lt;br&gt;备注10:嗯.越来越不想写了.因为没多少人看了.&lt;br&gt;&lt;br&gt;&lt;br&gt;备注9：今天又不开心。算法工程师也好久没接触了，也写的磕磕跘跘的水份比较多，其实我能写的更好的，只是被最近知乎上的一些人恶心到了，也提不起来精神去做这个事了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注8：不开心。我是一个容易抽风的人，到了一个临界点我就会毁掉我自己辛苦做好的一切。所以，如果觉得有用但是又没备份，就赶紧下手吧。我写贴子都不备份的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注7：今天啊。写的运维有点儿神智不清了。写东西都不是件容易的事儿，而且写的时间长了，很容易发现自己思路走偏，变成套模板了。所以这个答案我想，还是要找时间再整理一下的。把硬广稍稍软一下，把内容编排的更合理一些，把图做的更好一些。。就这样，大家晚安~&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注6：这个DBA写的我真的是比较纠结，有太多很容易引起争议的内容（其他的内容也会引起争论啦然而我不在乎，因为我有了我确定的答案）。所以这个是我比较希望的有其他人能够补充的。&lt;br&gt;简单说，就是三个阶段，最早的DBA是处理优化的SQL，后来变成了数据的安全和备份，再往后就是集中到专业的云服务器公司，提供更专业的底层服务--这个看起来才是DBA最佳的归宿。&lt;br&gt;&lt;br&gt;下次更新时间大概会在两三天之后。毕竟我还要回贴吧骂街。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注5：今天本来没打算上来看知乎的。因为瞬间从知乎来到了群有近600人，折腾了我一天。&lt;br&gt;             本来想回去睡觉了，然后呢，发现有几个人在评论里举报说我是广告。&lt;br&gt;&lt;br&gt;            我就想说一句话，是广告没错，但是谁能觉得我说的没问题，就请过来补充交流，我向你学习。然而如果是没事找事，纯属蛋疼，不好意思。我不是一个文明的人，我骂人句句带脏字。&lt;br&gt;&lt;br&gt;             以及，本文的内容之所以加上广告，正是以实例来证明文中所举的例子是真实发生的事情。&lt;br&gt;&lt;br&gt;             还有，加了群的小伙伴们请认真看群公告。&lt;br&gt;&lt;br&gt;              有些是我懂的，有些是我不懂的，我懂的我会说，我不懂的我就乱说。如果你们觉得你们的答案比我写的好，比我了解的多，比我更专业。欢迎你们去再回答好么。&lt;br&gt;              本答案中的所有观点都带有偏见，等下我就编辑到开篇，我不负责，也一定不客观。&lt;br&gt;              就这样，睡觉去了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注5:正准备继续编辑贴子呢，然后发现了中兵大人也在回贴。中兵大人是猎聘网的技术总监，也是修真院的客卿长老，在Erlang和自动化运维部署方面都很犀利，出过好几本书。所以也顺便给猎聘做个广告，猎聘是我知道的猎头聚集地最多的地方，职位也挺多的，如果说有个几年的工作经验，其实就可以去猎聘上试试啦。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注4：其实我不太清楚，写的这些东西你们能否看得懂。毕竟我和一个IT新人的差距还是挺大的，我也经常说，最好的就是师兄带师弟。如果你们有觉得我没说清楚的，评论里多说几句，给我一些反馈。我可以保证我一定不会百分之百的听，哈哈哈哈哈。但是我会听，然后找到我自己觉得有道理的，改进一下。&lt;br&gt;&lt;br&gt;&lt;br&gt;备注3：我每写一段，就会加一段备注，我得很认真的告诉你们，我说的每一句话，都是我从业近十年以来的心得和体会。而且绝对不会为我的态度负责，还有，加入IT修真院的小伙伴要记着，IT修真院跟其他的培训结构截然不同，不要进去喊老师，老师不够凶残。还有，我并不是一个好脾气的人，而且也丝毫不讲风度，可以随时随地跟任何一个人对喷，也特别喜欢这样。&lt;br&gt;&lt;br&gt;写这么多，一方面是希望大家知道修真院的正确学习方式，表再看视频然后感觉懂了结果一行代码都写不出来了，另一方面，也确实想给愿意转行的人提供一个参考。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注2：好了。让我休息，休息一下。一天能写两个对我来说已经很不容易了。所以，再多点赞，再多点感谢，再多点人加群，再多点认同给我--我还是一天只能写两个，哈哈哈哈，不过我会感谢你，大概因为你这么做，可以让更多的人知道。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;备注1：未完待续，一直在开会。让我歇会儿。先把广告打上。&lt;br&gt;PS：求助 为毛我不能给字体加黑，看起来好麻烦。&lt;br&gt;&lt;br&gt;另外也推荐大家关注一下我的收藏 &lt;a href=&quot;http://www.zhihu.com/collection/77083735&quot; class=&quot;internal&quot;&gt;IT修真院系列 - 收藏夹&lt;/a&gt;&lt;br&gt;接下来的贴子，我要写的话，还是会收藏到这个系列里。&lt;br&gt;&lt;br&gt;&lt;br&gt;第一篇对IT职业做了一个相对深入的介绍，给了想从事互联网职业的人一个了解各个职业的机会，已经有4000+赞了，我想是真的帮助到了很多人。 &lt;a href=&quot;https://www.zhihu.com/question/36991788/answer/69902291?group_id=685282044187512832#comment-120731263&quot; class=&quot;internal&quot;&gt;IT行业都有哪些职位，初学者（0基础，新人）该如何选择，才能够快速进入这个行业？ - xdyl 的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;第二篇是对敏捷开发和项目管理做了一介绍，这篇贴子还没写完，其实它的价值远远大于第一篇走马观花的介绍。只是大家还没有到能够理解敏捷开发的时候，所以我想了很久，决定暂时不写了。&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/39757751/answer/82927612?group_id=685376196313116672&quot; class=&quot;internal&quot;&gt;互联网公司的“敏捷开发”流程是怎么样的，每个职位的角色和分工是什么？ - xdyl 的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;这是第三篇，写这个贴子的动机是因为，在修真院有不少人在问，我要学到什么程度才能找到工作，我是零基础啊，有没有视频和教程可以教我。&lt;a href=&quot;https://www.zhihu.com/question/40662462/answer/87649925?group_id=688073935970893824#comment-122073494&quot; class=&quot;internal&quot;&gt;有哪些IT初学者（新人）成长为技术大牛的真实经历？ - xdyl 的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;北京葡萄藤.IT修真院 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jnshu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 | IT修真院&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;===============================&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;免费，快速，高效的帮助IT新人入门，做一个“正直，善良，纯洁”的程序员。&lt;/b&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;加QQ群：&lt;/b&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;1群2000人 &lt;/b&gt;185354188（已满）&lt;/b&gt;&lt;br&gt;&lt;b&gt;2群 1000人 &lt;b&gt;&lt;b&gt;424031650 (已满)&lt;/b&gt;&lt;/b&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;3群 500人 493806441（已满）&lt;/b&gt;&lt;br&gt;&lt;b&gt;4群 500人 580626624 （已满）&lt;/b&gt;&lt;br&gt;&lt;b&gt;5群 500人 604640559 （招募中）&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;&lt;b&gt;微信公众号：&lt;/b&gt;&lt;/b&gt;葡萄藤IT技能树&lt;/b&gt;&lt;br&gt;&lt;b&gt;IT修真院系列&lt;/b&gt; ： &lt;a href=&quot;http://www.zhihu.com/collection/77083735&quot; class=&quot;internal&quot;&gt;IT修真院系列 - 收藏夹&lt;/a&gt;&lt;br&gt;&lt;b&gt;专栏&lt;/b&gt;：&lt;a href=&quot;https://zhuanlan.zhihu.com/jnshu&quot; class=&quot;internal&quot;&gt;IT修真院 - 知乎专栏&lt;/a&gt; 各种IT行业的真实小故事</textarea>


<div class="zh-summary summary clearfix">

【本人性格不好，被惹到了必然句句带脏字，所以评论中如果有不开眼的，请慎重。另外，这篇回答从头到尾都是我自己的个人偏见，绝对不客观，也绝对不会为本答案负责。所以，有自己正常思维的请不要再看下去了。最后，这篇文章在最后会指向硬广，来佐证文中实…

<a href="/question/36991788/answer/69902291" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-10-29" target="_blank" href="/question/36991788/answer/69902291">编辑于 2016-12-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7003727"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>910 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="6" data-type="Answer">
<link itemprop="url" href="/question/20790576/answer/32602154">
<meta itemprop="answer-id" content="8426975" />
<meta itemprop="answer-url-token" content="32602154" />
<meta itemprop="answerCount" content="26" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20790576" target="_blank" data-id="496709" data-za-element-name="Title">
大公司里怎样开发和部署前端代码？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20790576/answer/32602154">
<!-- <meta itemprop="answer-id" content="8426975">
<meta itemprop="answer-url-token" content="32602154"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>5203</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">5203</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$fouber"
target="_blank" href="/people/fouber"
>张云龙</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/fouber#hilightbadge" target="_blank">前端开发、JavaScript话题优秀回答者</a></span>



<span title="全民直播CTO" class="bio">
全民直播CTO
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="5203" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">5203</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="496709" data-action="/answer/content" data-author-name="张云龙" data-entry-url="/question/20790576/answer/32602154">

<textarea hidden class="content">没人邀请，看到这个问题不错，路过怒答。（多图预警）&lt;br&gt;&lt;br&gt;前百度工程师，曾负责百度 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//fis.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端集成解决方案&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 的核心设计与开发工作。我现在称这个领域为【前端工程】。没错，这是我最爱唠叨的问题域。&lt;br&gt;&lt;br&gt;这是一个非常有趣的 &lt;u&gt;&lt;b&gt;非主流前端领域&lt;/b&gt;&lt;/u&gt;，这个领域要探索的是如何用工程手段解决前端开发和部署优化的综合问题，入行到现在一直在学习和实践中。&lt;br&gt;&lt;br&gt;在我的印象中，facebook是这个领域的鼻祖，有兴趣、有梯子的同学可以去看看facebook的页面源代码，体会一下什么叫工程化。&lt;br&gt;&lt;br&gt;接下来，我想从原理展开讲述，多图，较长，希望能有耐心看完。&lt;br&gt;&lt;br&gt;&lt;br&gt;---------------------------- 我是一条分割线 ----------------------------&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/07c2bdef6ccef3ada425d61e3062dd09_b.jpg&quot; data-rawwidth=&quot;389&quot; data-rawheight=&quot;238&quot; class=&quot;content_image&quot; width=&quot;389&quot;&gt;&lt;br&gt;&lt;br&gt;让我们返璞归真，从原始的前端开发讲起。上图是一个“可爱”的index.html页面和它的样式文件a.css，用文本编辑器写代码，无需编译，本地预览，确认OK，丢到服务器，等待用户访问。前端就是这么简单，好好玩啊，门槛好低啊，分分钟学会有木有！&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/d53b504bbc9f1887eddf06d90545b870_b.jpg&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;98&quot; class=&quot;content_image&quot; width=&quot;400&quot;&gt;&lt;br&gt;&lt;br&gt;然后我们访问页面，看到效果，再查看一下网络请求，200！不错，太™完美了！那么，研发完成。。。。了么？&lt;br&gt;&lt;br&gt;等等，这还没完呢！对于大公司来说，那些变态的访问量和性能指标，将会让前端一点也不“好玩”。&lt;br&gt;&lt;br&gt;看看那个a.css的请求吧，如果每次用户访问页面都要加载，是不是很影响性能，很浪费带宽啊，我们希望最好这样：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/6a611755a5648ca252211cec85a31ac4_b.jpg&quot; data-rawwidth=&quot;401&quot; data-rawheight=&quot;98&quot; class=&quot;content_image&quot; width=&quot;401&quot;&gt;&lt;br&gt;利用304，让浏览器使用本地缓存。但，这样也就够了吗？不成！304叫协商缓存，这玩意还是要和服务器通信一次，我们的优化级别是变态级，所以必须彻底灭掉这个请求，变成这样：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/fd74ab2bf02d79dd7af1336b4c8f180e_b.jpg&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;98&quot; class=&quot;content_image&quot; width=&quot;400&quot;&gt;&lt;br&gt;强制浏览器使用本地缓存（cache-control/expires），不要和服务器通信。好了，请求方面的优化已经达到变态级别，那问题来了：你都不让浏览器发资源请求了，这缓存咋更新？&lt;br&gt;&lt;br&gt;很好，相信有人想到了办法：&lt;b&gt;&lt;u&gt;通过更新页面中引用的资源路径，让浏览器主动放弃缓存，加载新资源&lt;/u&gt;&lt;/b&gt;。好像这样：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/8a8676e933478d1a73777d84a5de55f5_b.jpg&quot; data-rawwidth=&quot;304&quot; data-rawheight=&quot;110&quot; class=&quot;content_image&quot; width=&quot;304&quot;&gt;&lt;br&gt;下次上线，把链接地址改成新的版本，就更新资源了不是。OK，问题解决了么？！当然没有！大公司的变态又来了，思考这种情况：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/4681f7131e777dc885bf66000580ca40_b.jpg&quot; data-rawwidth=&quot;579&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;579&quot; data-original=&quot;https://pic1.zhimg.com/4681f7131e777dc885bf66000580ca40_r.jpg&quot;&gt;&lt;br&gt;页面引用了3个css，而某次上线只改了其中的a.css，如果所有链接都更新版本，就会导致b.css，c.css的缓存也失效，那岂不是又有浪费了？！&lt;br&gt;&lt;br&gt;重新开启变态模式，我们不难发现，要解决这种问题，必须让url的修改与文件内容关联，也就是说，只有文件内容变化，才会导致相应url的变更，从而实现文件级别的精确缓存控制。&lt;br&gt;&lt;br&gt;什么东西与文件内容相关呢？我们会很自然的联想到利用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/view/10961371.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;数据摘要要算法&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 对文件求摘要信息，摘要信息与文件内容一一对应，就有了一种可以精确到单个文件粒度的缓存控制依据了。好了，我们把url改成带摘要信息的：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/5276595f41d6276e21e5bc1d25741680_b.jpg&quot; data-rawwidth=&quot;588&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;588&quot; data-original=&quot;https://pic1.zhimg.com/5276595f41d6276e21e5bc1d25741680_r.jpg&quot;&gt;&lt;br&gt;这回再有文件修改，就只更新那个文件对应的url了，想到这里貌似很完美了。你觉得这就够了么？大公司告诉你：图样图森破！&lt;br&gt;&lt;br&gt;唉~~~~，让我喘口气&lt;br&gt;&lt;br&gt;现代互联网企业，为了进一步提升网站性能，会把静态资源和动态网页分集群部署，静态资源会被部署到CDN节点上，网页中引用的资源也会变成对应的部署路径：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0866cb58bcf349642d57a06b162e0d91_b.jpg&quot; data-rawwidth=&quot;574&quot; data-rawheight=&quot;259&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;574&quot; data-original=&quot;https://pic2.zhimg.com/0866cb58bcf349642d57a06b162e0d91_r.jpg&quot;&gt;&lt;br&gt;好了，当我要更新静态资源的时候，同时也会更新html中的引用吧，就好像这样：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/16d6d6c32e52ef1d1a835fb2ed15f864_b.jpg&quot; data-rawwidth=&quot;574&quot; data-rawheight=&quot;456&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;574&quot; data-original=&quot;https://pic1.zhimg.com/16d6d6c32e52ef1d1a835fb2ed15f864_r.jpg&quot;&gt;&lt;br&gt;这次发布，同时改了页面结构和样式，也更新了静态资源对应的url地址，现在要发布代码上线，亲爱的前端研发同学，你来告诉我，咱们是先上线页面，还是先上线静态资源？&lt;br&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;&lt;u&gt;先部署页面，再部署资源&lt;/u&gt;&lt;/b&gt;：在二者部署的时间间隔内，如果有用户访问页面，就会在新的页面结构中加载旧的资源，并且把这个旧版本的资源当做新版本缓存起来，其结果就是：用户访问到了一个样式错乱的页面，除非手动刷新，否则在资源缓存过期之前，页面会一直执行错误。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;u&gt;先部署资源，再部署页面&lt;/u&gt;&lt;/b&gt;：在部署时间间隔之内，有旧版本资源本地缓存的用户访问网站，由于请求的页面是旧版本的，资源引用没有改变，浏览器将直接使用本地缓存，这种情况下页面展现正常；但没有本地缓存或者缓存过期的用户访问网站，就会出现旧版本页面加载新版本资源的情况，导致页面执行错误，但当页面完成部署，这部分用户再次访问页面又会恢复正常了。&lt;/li&gt;&lt;/ol&gt;好的，上面一坨分析想说的就是：先部署谁都不成！都会导致部署过程中发生页面错乱的问题。所以，访问量不大的项目，可以让研发同学苦逼一把，等到半夜偷偷上线，先上静态资源，再部署页面，看起来问题少一些。&lt;br&gt;&lt;br&gt;但是，大公司超变态，没有这样的“绝对低峰期”，只有“相对低峰期”。So，为了稳定的服务，还得继续追求极致啊！&lt;br&gt;&lt;br&gt;这个奇葩问题，起源于资源的 &lt;u&gt;&lt;b&gt;覆盖式发布&lt;/b&gt;&lt;/u&gt;，用 待发布资源 覆盖 已发布资源，就有这种问题。解决它也好办，就是实现 &lt;u&gt;&lt;b&gt;非覆盖式发布&lt;/b&gt;&lt;/u&gt;。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/9b3a9df114d14a14130a70abf5733837_b.jpg&quot; data-rawwidth=&quot;631&quot; data-rawheight=&quot;456&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;631&quot; data-original=&quot;https://pic4.zhimg.com/9b3a9df114d14a14130a70abf5733837_r.jpg&quot;&gt;&lt;br&gt;看上图，用文件的摘要信息来对资源文件进行重命名，把摘要信息放到资源文件发布路径中，这样，内容有修改的资源就变成了一个新的文件发布到线上，不会覆盖已有的资源文件。上线过程中，先全量部署静态资源，再灰度部署页面，整个问题就比较完美的解决了。&lt;br&gt;&lt;br&gt;所以，大公司的静态资源优化方案，基本上要实现这么几个东西：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;配置超长时间的本地缓存                 —— 节省带宽，提高性能&lt;br&gt;&lt;/li&gt;&lt;li&gt;采用内容摘要作为缓存更新依据      —— 精确的缓存控制&lt;br&gt;&lt;/li&gt;&lt;li&gt;静态资源CDN部署                           —— 优化网络请求&lt;br&gt;&lt;/li&gt;&lt;li&gt;更资源发布路径实现非覆盖式发布  —— 平滑升级&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;br&gt;全套做下来，就是相对比较完整的静态资源缓存控制方案了，而且，还要注意的是，静态资源的缓存控制要求在&lt;b&gt;&lt;u&gt;前端所有静态资源加载的位置都要做这样的处理&lt;/u&gt;&lt;/b&gt;。是的，所有！什么js、css自不必说，还要包括js、css文件中引用的资源路径，由于涉及到摘要信息，引用资源的摘要信息也会引起引用文件本身的内容改变，从而形成级联的摘要变化，大概示意图就是：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/edf10bb428d39d721e36760a86d2641e_b.jpg&quot; data-rawwidth=&quot;709&quot; data-rawheight=&quot;371&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;709&quot; data-original=&quot;https://pic3.zhimg.com/edf10bb428d39d721e36760a86d2641e_r.jpg&quot;&gt;&lt;br&gt;好了，目前我们快速的学习了一下前端工程中关于静态资源缓存要面临的优化和部署问题，新的问题又来了：这™让工程师怎么写码啊！！！&lt;br&gt;&lt;br&gt;要解释优化与工程的结合处理思路，又会扯出一堆有关模块化开发、资源加载、请求合并、前端框架等等的工程问题，以上只是开了个头，解决方案才是精髓，但要说的太多太多，有空再慢慢展开吧。或者大家可以去我的blog看其中的一些拆解：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/blog&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fouber/blog · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;总之，前端性能优化绝逼是一个工程问题！&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;以上不是我YY的，可以观察 百度 或者 facebook 的页面以及静态资源源代码，查看它们的资源引用路径处理，以及网络请中静态资源的缓存控制部分。再次赞叹facebook的前端工程建设水平，跪舔了。&lt;br&gt;&lt;br&gt;建议前端工程师多多关注前端工程领域，也许有人会觉得自己的产品很小，不用这么变态，但很有可能说不定某天你就需要做出这样的改变了。而且，如果我们能把事情做得更极致，为什么不去做呢？&lt;br&gt;&lt;br&gt;另外，也不要觉得这些是运维或者后端工程师要解决的问题。如果由其他角色来解决，&lt;u&gt;&lt;b&gt;大家总是把自己不关心的问题丢给别人&lt;/b&gt;&lt;/u&gt;，那么前端工程师的开发过程将受到极大的限制，这种情况甚至在某些大公司都不少见！&lt;br&gt;&lt;br&gt;妈妈，我再也不玩前端了。。。。5555&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;========================[ 10.29更新 ]========================&lt;br&gt;这里更新一下：&lt;br&gt;&lt;br&gt;在评论中， &lt;a data-hash=&quot;4b1a0d3f97fddca9ed6fc820a7be261c&quot; href=&quot;//www.zhihu.com/people/4b1a0d3f97fddca9ed6fc820a7be261c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@陈钢&quot; data-tip=&quot;p$b$4b1a0d3f97fddca9ed6fc820a7be261c&quot; data-hovercard=&quot;p$b$4b1a0d3f97fddca9ed6fc820a7be261c&quot;&gt;@陈钢&lt;/a&gt;&lt;a data-hash=&quot;1824717da821307ac1151a15299666ed&quot; href=&quot;//www.zhihu.com/people/1824717da821307ac1151a15299666ed&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@fleuria&quot; data-tip=&quot;p$b$1824717da821307ac1151a15299666ed&quot; data-hovercard=&quot;p$b$1824717da821307ac1151a15299666ed&quot;&gt;@fleuria&lt;/a&gt; @林翔 提到了rails，刚刚去看了一下，确实是完成了以上所说的优化细节，对整个静态资源的管理上的思考于本答案描述的一致。很遗憾我直到今天（2014-10-29）才了解到rails中的assets pipeline。这里向以上3位同学道歉，原谅我的无知。&lt;br&gt;&lt;br&gt;不过整篇回答没有讲解到具体的解决方案实现思路，只是介绍了前端在工程化方向的思考，答案本身是可用的，了解rails的人也可以把此答案当做是对rails中assets pipeline设计原理的分析。&lt;br&gt;&lt;br&gt;rails通过把静态资源变成erb模板文件，然后加入&amp;lt;%= asset_path 'image.png' %&amp;gt;，上线前预编译完成处理，不得不承认，fis的实现思路跟这个几乎完全一样，但我们当初确实不知道有rails的这套方案存在。&lt;br&gt;&lt;br&gt;相关资料：英文版：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//guides.rubyonrails.org/asset_pipeline.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Asset Pipeline&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，中文版：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//guides.ruby-china.org/asset_pipeline.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Asset Pipeline&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;========================[ 10.31更新 ]========================&lt;br&gt;用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//fis.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;F.I.S&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 包装了一个小工具，完整实现整个回答所说的最佳部署方案，并提供了源码对照，可以感受一下项目源码和部署代码的对照。&lt;br&gt;源码项目：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/static-resource-digest-project&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fouber/static-resource-digest-project · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;部署项目：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/static-resource-digest-project-release&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fouber/static-resource-digest-project-release · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;部署项目可以理解为线上发布后的结果，可以在部署项目里查看所有资源引用的md5化处理。&lt;br&gt;&lt;br&gt;这个示例也可以用于和assets pipeline做比较。fis没有assets的目录规范约束，而且可以以独立工具的方式组合各种前端开发语言（coffee、less、sass/scss、stylus、markdown、jade、ejs、handlebars等等你能想到的），并与其他后端开发语言结合。&lt;br&gt;&lt;br&gt;assets pipeline的设计思想值得独立成工具用于前端工程，fis就当做这样的一个选择吧。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic2.zhimg.com/07c2bdef6ccef3ada425d61e3062dd09_200x112.jpg" data-rawwidth="389" data-rawheight="238" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic2.zhimg.com/07c2bdef6ccef3ada425d61e3062dd09_r.jpg">
没人邀请，看到这个问题不错，路过怒答。（多图预警） 前百度工程师，曾负责百度 <a href="//link.zhihu.com/?target=http%3A//fis.baidu.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">前端集成解决方案<i class="icon-external"></i></a> 的核心设计与开发工作。我现在称这个领域为【前端工程】。没错，这是我最爱唠叨的问题域。 这是一个非常有趣的 <u><b>非主流前端领域</b></u>，这个领域要探索的是如何用…

<a href="/question/20790576/answer/32602154" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-10-29" target="_blank" href="/question/20790576/answer/32602154">编辑于 2014-10-31</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-496709"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>280 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="7" data-type="Answer">
<link itemprop="url" href="/question/19834302/answer/13108148">
<meta itemprop="answer-id" content="362466" />
<meta itemprop="answer-url-token" content="13108148" />
<meta itemprop="answerCount" content="90" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/19834302" target="_blank" data-id="113639" data-za-element-name="Title">
零基础的前端开发初学者应如何系统地学习？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/19834302/answer/13108148">
<!-- <meta itemprop="answer-id" content="362466">
<meta itemprop="answer-url-token" content="13108148"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>4760</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">4760</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$kingzs70"
target="_blank" href="/people/kingzs70"
>张帅</a></span><span title="大前端 ~ 叫我张大帅也可以，只要你喜欢" class="bio">
大前端 ~ 叫我张大帅也可以，只要你喜欢
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="4760" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">4760</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="113639" data-action="/answer/content" data-author-name="张帅" data-entry-url="/question/19834302/answer/13108148">

<textarea hidden class="content">&lt;i&gt;（前端变化太快，以下内容我会不定期更新，第三方网站请不要转载，如果实在想转载，请只转载摘要，并保留原文链接，谢谢）&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;网站开发开发大致分为前端和后端，前端主要负责实现视觉和交互效果，以及与服务器通信，完成业务逻辑。其核心价值在于对用户体验的追求。可以按如下思路学习系统学习：&lt;br&gt;&lt;br&gt;&lt;b&gt;基础知识&lt;/b&gt;：&lt;br&gt;1. html + css 这部分建议在 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3school 在线教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 上学习，边学边练，每章后还有小测试。 之后可以模仿一些网站做些页面。&lt;br&gt; 2. javascript 要学的内容实在很多，如果没有其他编程语言的基础的话，学起来可能要费些力，还是建议先在 w3school上学习。之后建议马上看《javascript语言精粹》，js是一门很混乱的语言，这本书能够帮助你区分哪些是语言的精华，哪些是糟粕，对于语言精华，应该深入学习。糟粕部分能看懂别人写的代码就行，自己就不用尝试了。&lt;br&gt;&lt;br&gt;&lt;i&gt;对于习惯看视频学习的同学，以上内容也可以在 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;慕课网-国内最大的IT技能学习平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 上学习。虽然我没用过，但好几位同学推荐过了，大概看了下，内容还不错。&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;进阶&lt;/b&gt;：&lt;br&gt;有了以上基础，就可以进行一般的静态网页设计，不过对于复杂的页面还需要进一步学习。&lt;br&gt;&lt;br&gt;1. css。截至今日（2015.12.08），天猫、淘宝、支付宝都已停止对ie6,7的支持，未来相信大多数网站都会停止对ie6，7的支持，ie8的市场份额也不像两年前那么高了（天猫即将停止对IE8的支持，2016.12.13），webkit内核已成为市场主流。对于css的学习，我推荐分三块：“基础概念”，“css2.1规范”，“css3规范”。必看 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;精通CSS（第2版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，看完这本书你应该对：盒子模型，流动，block，inline，层叠，样式优先级，等概念非常了解了。这本确实有些年头了，但基础概念部分讲述非常清晰，可以称之为经典。ie6，7相关的内容可以不看。css3的部分可以参考：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/10482084/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3实用指南 (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。这本书同样有些老，只是最新出版的书中没发现有特别好的。&lt;br&gt;&lt;br&gt;2. javascript。上面提到内容还不足以让你胜任js编程。在有了基础之后，进一步学习内容包括：&lt;br&gt;&lt;br&gt;a) 框架。推荐 zepto，简单易用，在w3school简单学习js后，直接上手 zepto 即可完成一些简单的项目。zepto 源码简单清晰，也适合新手阅读。补充： 可以使用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;codecademy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 学习 javascript，zepto，用户体验真的很好（感谢 &lt;a href=&quot;http://www.zhihu.com/people/tonyouyang&quot; class=&quot;internal&quot;&gt;TonyOuyang&lt;/a&gt; ）。最近比较热门的框架是React, VUE, Angular这些, 根据需要稍作了解即可。随着ie浏览器市场份额的下降，以及移动端的发展，标准原生js已经可以在实际项目中使用（目前还需要借助es5shim、babel等），重点还是ES5, ES6, ES7。&lt;br&gt;&lt;br&gt;b) javascript 语言范式 。这个名字可能并不恰当，只是我找不到可以描述“面向对象”，“函数式”这个两个概念的概念。javascript不完全是一个面向对象的语言，它的很多设计理念都有函数编程语言的影子，甚至说如果你不用面向对象，完全可以把它理解成一门函数式编程语言。javascript的很多语言特性，都是因为他具有函数式语言的特点才存在的。这部分推荐先学习面向对象的基本理论，对封装，继承，多态等概念要理解，维基百科，百度百科会是你的帮手，另外推荐《object oriented javascript》，应该有中文版。对与函数式编程可以参考这篇文章：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/cn/web/1006_qiujt_jsfunctional/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript 中的函数式编程实践&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;c) javascript 语言内部机制。必须弄清如下概念：js中变量的作用域，变量传递方式，函数的定义环境与执行环境，闭包，函数的四种调用方式（一般函数，对象的方法，apply，call），以及四种调用方式下，‘this'指向的是谁。这部分内容你会在《javascript语言精粹》中详细了解。&lt;br&gt;&lt;br&gt;d) dom编程，这个web前端工程师的核心技能之一。必读《dom编程艺术》，另外《高性能javascript》这本书中关于dom编程的部分讲的也很好。&lt;br&gt;&lt;br&gt;e) ajax编程，这是另一核心技术。ajax建议在网上查些资料，了解这个概念的来龙去脉，百度百科，维基百科上的内容就足够了。真正编程是很容易的，如今几乎所有框架都对ajax有良好的封装，编程并不复杂。另外，ajax未来几年会被 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//fetch.spec.whatwg.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fetch Standard&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 取代，也需要了解。另外关于xhr2，cors（跨站资源共享），formData文件上传，也需要了解。&lt;br&gt;&lt;br&gt;f) es5, es6。现在开发js大部分基于es5的，ie8以下通过es5-shim。但利用一些工具，现在已经可以直接写es6代码了，尤其在reactjs，nodejs类型的项目中。对于从es5，es6每个阶段js发生了哪些变化都需要系统学习，学习顺序建议是 JavaScript基础 -&amp;gt; es5 -&amp;gt; es6，越靠前的越重要。一些参考链接：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//kangax.github.io/compat-table/es5/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 5 compatibility table&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 6入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.zhangxinxu.com/wordpress/tag/es5/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ES5 «  张鑫旭&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;3. html5。需要了解html都提供了哪些api，然后项目中用起来。这部分没有什么难理解的，关键在于能用html5解决业务问题，以及不支持html5的浏览器的降级方案。这部分体现了前端的一个思想：面向未来编程，尽早将新技术引入业务中来，而不是过分考虑兼容性问题，进而导致面向过去编程。&lt;br&gt;&lt;br&gt;&lt;b&gt;再进一阶 · 代码层面&lt;/b&gt;：&lt;br&gt;有了以上知识，对于大多数小型网站，你应该已经可以写出能够工作的代码了。但要想成为更专业的前端，你还需继续努力。更高的要求大概还有四方面：1易维护，2可测试，3高性能，4低流量（移动端）。&lt;br&gt;1. 易维护。对于页面你该理解‘样式’，‘数据’，‘行为’三者分离，对应的当然就是css,html,js。对于js代码，你最好了解设计模式，重构，MVC等内容。&lt;br&gt;2. 可测性。就是保证你的代码能沟通单元测试100%覆盖到所有分支&lt;br&gt;3. 高性能。必读《高性能javascript》&lt;br&gt;4. 低流量。移动端关注比较多，PC端现在可以不用太关注了&lt;br&gt;&lt;br&gt;&lt;b&gt;再进一阶 · 工程层面&lt;/b&gt;：&lt;br&gt;前端项目同样面临软件生命周期的各个环节，首先是代码管理，你必须学会使用svn和git。其次是代码的构建，如今前端代码构建已经不是简单的压缩一下了，需要进行依赖管理、模块合并、各种编译，必须要学会使用grunt、gulp、webpack、rollup等前端构建工具，以及前端模块管理的方式，amd，cmd，es6 module 等等。&lt;br&gt;&lt;br&gt;&lt;b&gt;然后呢？&lt;/b&gt;&lt;br&gt;以上内容只是简单说了前端学习的顺序。前端工程师应该有的知识结构请参考这里：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/JacksonTian/fks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JacksonTian/fks · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;补充&lt;/b&gt;：&lt;br&gt;对于前段开发，基本内容就这些了，可以根据自己的兴趣爱好选择性学习以下内容。&lt;br&gt;1. 交互设计。大公司依然有专业人士搞这些，不过不懂交互的前端一定不是好前端。推荐《简约至上》。&lt;br&gt;2. 后端。应该说前段工程师必须至少了解一门后端语言，不过如果爱好也可深入学习，入手难度比较低的应该是php了。这部分由可分为基于页面，基于框架两种。大型项目都是基于框架开发的，建议至少了解一个MVC框架，比如php的ci, yii, yaf 等，好还框架的设计思想都大同小异。如今NodeJs在大公司已经得到普遍的使用，推荐大家使用在Node上使用Koa框架做一些后端服务的开发。&lt;br&gt;3. Android和ios开发。时至今日，前端的工作领域已经非常广泛，native的界面开发本质上也是前端开发，个大公司都面临着Native环境和web环境页面同时维护的问题，如果能够在技术上得到统一，将会有巨大的价值。对于学有余力的同学，应该了解Native开发的基本流程，至少了解到界面构建的技术。&lt;br&gt;4. 如果你能够认真看到这里，说明你对前端有真爱，最后说一个编程习惯的问题，绝对是保你工作平安，少出故障。代码提交前必须做的三个事情：A. git diff（svn diff）,检查所有变更；B. 跑一边单元测试；C. 手动运行一遍所有demo.&lt;br&gt;&lt;br&gt;&lt;b&gt;如果你以上内容你都已掌握，想加入一个牛B的前端团队，可以私信我。坐标：杭州·天猫·前端&lt;/b&gt;&lt;br&gt;&lt;br&gt;（以上内容最初发布于2012年上半年，已经更新过几次了，我会持续维护，希望对后来人有帮助。加油、共勉！最后更新时间：2016-12-13 13:30）</textarea>


<div class="zh-summary summary clearfix">

<i>（前端变化太快，以下内容我会不定期更新，第三方网站请不要转载，如果实在想转载，请只转载摘要，并保留原文链接，谢谢）</i> 网站开发开发大致分为前端和后端，前端主要负责实现视觉和交互效果，以及与服务器通信，完成业务逻辑。其核心价值在于对用户体验的…

<a href="/question/19834302/answer/13108148" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2011-08-30" target="_blank" href="/question/19834302/answer/13108148">编辑于 2016-12-13</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-113639"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>267 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic4.zhimg.com/b9f13b6cf_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="8" data-type="Answer">
<link itemprop="url" href="/question/20246142/answer/14470387">
<meta itemprop="answer-id" content="909219" />
<meta itemprop="answer-url-token" content="14470387" />
<meta itemprop="answerCount" content="12" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20246142" target="_blank" data-id="278588" data-za-element-name="Title">
知乎上前端开发领域有哪些值得推荐的问答？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20246142/answer/14470387">
<!-- <meta itemprop="answer-id" content="909219">
<meta itemprop="answer-url-token" content="14470387"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>4601</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">4601</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$deng-chen-hua"
target="_blank" href="/people/deng-chen-hua"
>邓陈华</a></span><span title="搞基不寂寞，https://github.com/SunLn" class="bio">
搞基不寂寞，<a href="//link.zhihu.com/?target=https%3A//github.com/SunLn" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/SunLn</span><span class="invisible"></span><i class="icon-external"></i></a>
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="4601" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">4601</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="278588" data-action="/answer/content" data-author-name="邓陈华" data-entry-url="/question/20246142/answer/14470387">

<textarea hidden class="content">自问自答。自己在知乎上收集了不少前端开发领域的问答，收获不小，但结构比较凌乱，整理了下，头绪也清楚了些。希望对大家也有用处，同时感谢这些问答的作者。&lt;br&gt;===&lt;br&gt;非常感谢 &lt;a data-hash=&quot;b4a17dfeac9418e66b950681819af654&quot; href=&quot;//www.zhihu.com/people/b4a17dfeac9418e66b950681819af654&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@何沁&quot; data-hovercard=&quot;p$b$b4a17dfeac9418e66b950681819af654&quot;&gt;@何沁&lt;/a&gt;童鞋的重新排版。&lt;br&gt;===&lt;br&gt;更新于2015年3月8日。&lt;br&gt;另外，整理了一下个人的chrome收藏夹，对前端有兴趣的童鞋可以关注，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/SunLn/SunLn-F2E-Bookmarks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SunLn的前端收藏夹&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;===&lt;br&gt;&lt;br&gt;前端资源：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19651401&quot;&gt;关于 Javascript 学习，有哪些好的博客或者网站推荐？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19951193&quot;&gt;有哪些不错的前端开发博客？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20101975&quot;&gt;前端业内有哪些交流氛围比较好群/论坛/社区？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19671522&quot;&gt;想深入了解一下 jQuery 的源码，但是觉得学习曲线有点陡峭，有没什么好的方法或者学习资源推荐？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端大牛：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19889770&quot;&gt;知乎上有哪些 JavaScript 高手？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19701162&quot;&gt;国内有哪些前端开发牛人？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19588901&quot; class=&quot;internal&quot;&gt;中文圈，谁是最好的 JavaScript 程序员？ - 编程&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端书籍：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19809484&quot; class=&quot;internal&quot;&gt;有哪些关于前端开发技术（HTML、CSS 和 JavaScript 等）的值得推荐的书籍？ - 书籍推荐&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19742348&quot; class=&quot;internal&quot;&gt;关于 CSS 设计，有什么书比较好？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;技术细节：&lt;/p&gt;&lt;p&gt;　JavaScript 方面&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20348948&quot;&gt;JavaScript 中应该用 &quot;==&quot; 还是 &quot;===&quot;？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20377595&quot; class=&quot;internal&quot;&gt;JavaScript 中，num = num || 1 这种写法有哪些优缺点？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19653241&quot; class=&quot;internal&quot;&gt;使用 Node.js 的优势和劣势都有哪些？ - Web 开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20342350&quot; class=&quot;internal&quot;&gt;LABjs、RequireJS、SeaJS 哪个最好用？为什么？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20322273&quot;&gt;一个 ul 里有若干 li，点击 li 时能方便地知道这是 ul 中的第几个 li 吗？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19920225&quot;&gt;怎样在各个浏览器下使用 JavaScript 或者 CSS 控制去除 input 和 button 的虚线？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20298345&quot;&gt;JavaScript 语句后应该加分号么？ - 编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19776649&quot;&gt;GitHub 为什么讨人喜欢？ - 开源社区&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20293486&quot;&gt;A &amp;amp;&amp;amp; B || C 的效率比 A ? B : C 更高吗？ - 编程&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20260762&quot;&gt;有哪些 JS 调试技巧？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19554716&quot;&gt;JavaScript 里的闭包是什么？应用场景有哪些？ - 编程语言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19966545&quot;&gt;JavaScript 中 undefined 与 undeclared 之间的区别是什么？ - 编程语言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20127472&quot;&gt;JavaScript中圆括号() 和 方括号[] 的特殊用法疑问？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20227463&quot;&gt;国内有哪些靠谱的 Javascript 库 CDN可用？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19717671&quot;&gt;为什么很多网站在 JavaScript 脚本中都用简单的字母表示变量？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;　HTML 方面&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19718085&quot;&gt;.htm 与 .html 两种文件格式（扩展名）的区别在哪里？ - HTML&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19895400#&quot;&gt;实现单行文字两端对齐时，使用 &amp;amp;nbsp; 当作空格和使用 white-space: pre 的原生空格有什么区别？哪个更好一些？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20168819&quot;&gt;为什么不能在 EDM 模版中使用 DIV ？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19895400&quot;&gt;实现单行文字两端对齐时，使用 &amp;amp;nbsp; 当作空格和使用 white-space: pre 的原生空格有什么区别？哪个更好一些？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;　CSS 方面&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19748433&quot;&gt;命名 CSS 的类或 id 时单词间如何连接？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19823139&quot;&gt;如何解决外边距叠加的问题？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19588854&quot;&gt;在 CSS 中，用 float 和 position 的区别是什么？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20227599&quot;&gt;你如何理解 HTML5 的 section？会在什么场景使用？为什么这些场景使用 section 而不是 div？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/28433480&quot; class=&quot;internal&quot;&gt;大家对于块级格式化上下文BFC都有哪些疑问?大家的理解又是怎样的？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19977292&quot;&gt;有一 li 元素其中有中文和英文，怎么分别设置他们的字体样式呢？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20086234&quot;&gt;CSS 中 block-level boxes、containing block、block formatting context 三者之间的区别和联系是怎样的？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19736007&quot; class=&quot;internal&quot;&gt;怎样可以很好地保证网页的浏览器兼容性？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端工具：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19606319&quot;&gt;写 JavaScript 时IDE 或编辑器的选择有哪些好的推荐？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19998255&quot;&gt;Notepad++ 有哪些适用于前端开发的插件？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19587831&quot;&gt;用 Dreamweaver 写 CSS 代码很有效率，但为什么还有很多人喜欢用 Notepad++ 之类的工具？ - HTML&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19561454&quot;&gt;你觉得在前端开发中值得推荐的常用工具有哪些？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20241338&quot;&gt;前端工程师都有用哪些比较靠谱的小工具？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19990596&quot;&gt;有哪些工具可以将 CSS 文件中的属性按照一定的顺序进行排列？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19612973&quot; class=&quot;internal&quot;&gt;有哪些比较好 CSS 简写（压缩）工具？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19821825&quot; class=&quot;internal&quot;&gt;什么是 Twitter Bootstrap？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Angular：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/21151483&quot; class=&quot;internal&quot;&gt;AngularJS 有没有缺点？MVVM 框架中有比它更好的吗？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/21871888&quot; class=&quot;internal&quot;&gt;移动网站用backbone还是angular? - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/27601964&quot; class=&quot;internal&quot;&gt;如何看2015年1月Peter-Paul Koch对Angular的看法？ - 程序员&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/21497720&quot; class=&quot;internal&quot;&gt;关于 AngularJS 框架的使用有哪些经验值得分享？ - 知乎&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/28563233&quot; class=&quot;internal&quot;&gt;如何看待Google和Microsoft在Angular JS 2 和 TypeScript上的合作？ - AngularJS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/22079371&quot; class=&quot;internal&quot;&gt;AngularJS 于前端开发有什么作用，对比其它框架有何优点？ - AngularJS&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端学习：&lt;/p&gt;&lt;p&gt;　入门&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19753196&quot;&gt;若想学 HTML，应从哪里入手？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19637373&quot;&gt;零基础开始学 Web 前端开发，有什么建议吗？ - Web 开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19834302&quot; class=&quot;internal&quot;&gt;零基础的网站开发初学者应如何系统地学习？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19862294&quot; class=&quot;internal&quot;&gt;如何帮助前端新人入门和提高？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19713563&quot; class=&quot;internal&quot;&gt;如何循序渐进有效学习 JavaScript？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19653139&quot;&gt;面对变化莫测的 CSS，我该怎么办？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19660847&quot;&gt;非计算机专业，半路出家，以前做 UI ，现在想改前端，学习 JS 过程中遇到瓶颈了，如何突破？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19588629&quot; class=&quot;internal&quot;&gt;一名合格的前端工程师的知识结构是怎样的？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20780364&quot; class=&quot;internal&quot;&gt;你是如何成为前端工程师的？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19838787&quot; class=&quot;internal&quot;&gt;想成为前端工程师，那么在大学期间应该如何规划？ - 职业规划&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20391668&quot; class=&quot;internal&quot;&gt;前端工程师应该对 HTTP 了解到什么程度？从哪些途径去熟悉更好？ - 前端开发&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;　高级&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19554845&quot;&gt;怎样成长为一个优秀的 Web 前端开发工程师？ - 前端工程师&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20193711&quot;&gt;w3.org 结构复杂，信息量大，新人从哪里入手比较好？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19657253&quot;&gt;怎么样才算是精通 JavaScript？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/27085552&quot; class=&quot;internal&quot;&gt;前端妹子跟我抱怨她们的页面加载很慢的时候，如何在她面前优雅地装逼？ - 信息技术（IT）&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/22146521&quot; class=&quot;internal&quot;&gt;前端大牛们都学过哪些东西？ - 调查类问题&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端就业：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19723850&quot;&gt;好的 Web 前端年薪会有多少？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19886046&quot; class=&quot;internal&quot;&gt;Web 前端开发岗位，该选择百度还是腾讯？ - 招聘&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20084964&quot;&gt;淘宝 UED 前端、腾讯脚本开发、豆瓣前端开发，应该如何在这几个工作之间选择？ - 淘宝网&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/23567316&quot; class=&quot;internal&quot;&gt;前端实习offer选择：百度FEX 或 阿里ICBU ？ - 职业规划&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20099712&quot;&gt;淘宝 UED 前端团队究竟好不好？值得去吗？ - 淘宝网&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/22933704&quot; class=&quot;internal&quot;&gt;天猫的前端工程师和团队在行业内处于什么水平？ - 淘宝网&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20149600&quot;&gt;只专注于 JavaScript，好就业吗？有发展前景吗？ - 前端工程师&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/28044664&quot; class=&quot;internal&quot;&gt;月薪10-12k的前端人员应该具备怎样一种技术水平？ - 前端开发&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/23036724&quot; class=&quot;internal&quot;&gt;你怎么看我在豌豆荚公司的前端面试过程？ - 互联网&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20989310&quot; class=&quot;internal&quot;&gt;前端工程师有哪些靠谱的求职途径？ - IT 求职&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20888075/answer/40612027&quot; class=&quot;internal&quot;&gt;国内的前端团队分布和前景是怎样的？ - 徐飞的回答&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端招聘：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19568008&quot;&gt;如何面试前端工程师？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19923687&quot;&gt;为什么前端工程师很难找？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19651775&quot;&gt;如何才能招聘到好的 web 前端人才？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19841848&quot;&gt;有哪些经典的 Web 前端或者 JavaScript 面试笔试题？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19747496&quot;&gt;JavaScript 怎样高效拼接字符串？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19770923&quot;&gt;大公司面试前端开发类的职位时，更看重的是什么？ - 前端工程师&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/26188893&quot; class=&quot;internal&quot;&gt;国内大型互联网公司（如BAT）对于web前端开发方向校招都考些什么？ - 招聘&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;前端漫谈：&lt;br&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19589966&quot;&gt;前端工程师的价值体现在哪里？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19580161&quot;&gt;Web 前端工程师这一职业在未来行业需求和发展怎样？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19927065&quot;&gt;如何改善国内前端开发行业的尴尬地位？ - 前端工程师&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19969737&quot;&gt;一些人瞧不起 jQuery 的理由是什么？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19598890&quot;&gt;Java 和 JavaScript 是雷锋和雷峰塔的区别，这一说法是怎么来的？ - X 的出处&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19911595&quot; class=&quot;internal&quot;&gt;Web 前端和后端工程师的具体职责分别是怎样的？ - 程序员&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19858246&quot;&gt;前端工程师和网页重构工程师二者有什么区别和联系？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19769761&quot;&gt;做前端开发必需要掌握切图技能吗？ - 前端工程师&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20374574&quot;&gt;HTML5 标准分裂会有什么影响？ - 万维网联盟（W3C）&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20322923&quot;&gt;jQuery 宣布在未来的版本将不支持 IE6/7/8 是否明智？ - Internet Explorer&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19913979&quot; class=&quot;internal&quot;&gt;Java 和 JavaScript 是什么关系？ - 编程语言&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/19823925&quot; class=&quot;internal&quot;&gt;国内有人或者公司用 LESS 写过 CSS 吗？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/20365599&quot; class=&quot;internal&quot;&gt;前端工程师，如何更顺畅的和后端工程师合作？ - 程序员&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20099586&quot;&gt;为什么很多国内公司不使用 jQuery 等开源 JS 框架（库），而选择自己开发 JavaScript 框架？ - 移动前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20292563&quot;&gt;Douglas Crockford 的《JavaScript 语言精粹》中有哪些观点是有争议的？ - JavaScript&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/20249919&quot;&gt;为什么有人说前端开发水很深，工作量有时比后台还多？ - 前端工程师&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class=&quot;internal&quot; href=&quot;http://www.zhihu.com/question/19901542&quot;&gt;如何用通俗易懂的语言解释脚本（script）是什么？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/28207685&quot; class=&quot;internal&quot;&gt;Web 前后端分离的意义大吗？ - 前端开发&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/28373692&quot; class=&quot;internal&quot;&gt;前端 Leader 是如何带领团队和建设团队文化的？ - 前端开发&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/26226720&quot; class=&quot;internal&quot;&gt;为什么前端不能一直做？难道要转行？？ - 计算机&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.zhihu.com/question/26295825&quot; class=&quot;internal&quot;&gt;作为一个前端工程师，是往node方面转，还是往HTML5方面转？ - 前端开发&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;PS，打个小广告，推广一下个人微信公众号：sunln_404 ，扯淡前端、理财、旅游、生活、运动的个人小角落，时常宕机并404……欢迎关注。</textarea>


<div class="zh-summary summary clearfix">

自问自答。自己在知乎上收集了不少前端开发领域的问答，收获不小，但结构比较凌乱，整理了下，头绪也清楚了些。希望对大家也有用处，同时感谢这些问答的作者。 === 非常感谢 <a data-hash="b4a17dfeac9418e66b950681819af654" href="//www.zhihu.com/people/b4a17dfeac9418e66b950681819af654" class="member_mention" data-editable="true" data-title="@何沁" data-hovercard="p$b$b4a17dfeac9418e66b950681819af654">@何沁</a>童鞋的重新排版。 === 更新于2015年3月8日。 另外，整理了一下个人的chrome…

<a href="/question/20246142/answer/14470387" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2012-05-19" target="_blank" href="/question/20246142/answer/14470387">编辑于 2015-03-09</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-278588"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>86 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="9" data-type="Answer">
<link itemprop="url" href="/question/36426051/answer/82579790">
<meta itemprop="answer-id" content="28461755" />
<meta itemprop="answer-url-token" content="82579790" />
<meta itemprop="answerCount" content="281" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/36426051" target="_blank" data-id="6777532" data-za-element-name="Title">
有哪些老鸟程序员知道而新手不知道的小技巧？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/36426051/answer/82579790">
<!-- <meta itemprop="answer-id" content="28461755">
<meta itemprop="answer-url-token" content="82579790"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>4100</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">4100</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$smbt"
target="_blank" href="/people/smbt"
>司马奔腾</a></span><span title="做游戏的德鲁伊" class="bio">
做游戏的德鲁伊
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="4100" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">4100</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6777532" data-action="/answer/content" data-author-name="司马奔腾" data-entry-url="/question/36426051/answer/82579790">

<textarea hidden class="content">1. 程序不等于数据结构加算法，而等于搜索引擎加英语。&lt;br&gt;2. 技术群是萌新的搜索引擎，同时也是老鸟的效率陷阱。很奇怪，喜爱社交的手艺人技术总是不咋地。&lt;br&gt;3. 遇到匪夷所思的Bug时，不要信邪，错误一定出在你自己身上。要坚信，引擎、类库以及语言本身，就像你的女友或老婆一样，永远正确。同样，所谓“运行效率低”也是一样。&lt;br&gt;4. 推荐一本技术书：《逻辑学导论》。&lt;br&gt;5. 魅力低的人能力总是被低估，团队中不善言辞以及长得丑的人值得留意。反之也成立，“你长得真好看”，“你给人的感觉很不错”，可以作为“你丫技术真烂”的委婉说辞。&lt;br&gt;6. 同事骂策划或产品傻逼，自己跟着骂骂就得了，千万别真的那么想，否则会降低你的可合作性。可合作性是项很重要的能力。&lt;br&gt;7. 《设计模式》、《人月神话》、《人件》、《我的编程感悟》等业内知名度很高的书，其实没什么卵用，但依然推荐阅读，可以用来和同行聊天时装逼。尤其是和写Java的程序员聊设计模式，能把人给唬跪了。但不要和用C系列语言的程序员聊这个。&lt;br&gt;8. 自动识别是IDE的标配，因此匈牙利命名法除了降低编码效率之外没什么别的好处。除非你用记事本敲代码，你长得真好看，你牛逼。&lt;br&gt;9. iOS开发真的是……非常简单，连初中小孩都学得会。招人难只不过因为Mac电脑普及率低。推荐给不明前途的新人。&lt;br&gt;10. 新人如果面试iOS，记得花一小时把斯坦福大学的某节有关MVC的公开课看明白，面试时候使劲讲。对面主程草包一点的话，没准会觉得醍醐灌顶，终于找到了之前遇到的一些奇葩问题的根源。&lt;br&gt;11. 有一种傻逼，总是嫌弃别人造的轮子不够圆，非要自己亲手造个方轮子。这种傻逼到处都是。以现成的类库坑多为由不用，非要自己写，不过是避开了现有的坑，转而亲手挖坑亲自跳。&lt;br&gt;12. H5真的没什么前途，那概念是用来忽悠傻钱的，始作俑者是李开复大大。新人可别被坑了。&lt;br&gt;13. cocos真是好啊！大家都快去用！Unity真垃圾！一大堆坑而且闭源没法改！千万别用！做游戏的都快去用cocos去！触控靠谱！cocos大法好！都别用Unity嗯。都别用才好。&lt;br&gt;14. 翻译官方文档是通向“业界大拿”的捷径。&lt;br&gt;15. 以极客自居的，多为极品。&lt;br&gt;16. 语言之间的隔阂，不过是要花一周熟悉下语法。勤奋点三天就够了。技术是技术，语言是语言，一门技术可以跨多门语言，程序员以技术分，而非以语言分。只有外行和新人才混为一谈。当然有不少写了多年程序依然停留在语法层面的老新人也分不清这个。</textarea>


<div class="zh-summary summary clearfix">

1. 程序不等于数据结构加算法，而等于搜索引擎加英语。 2. 技术群是萌新的搜索引擎，同时也是老鸟的效率陷阱。很奇怪，喜爱社交的手艺人技术总是不咋地。 3. 遇到匪夷所思的Bug时，不要信邪，错误一定出在你自己身上。要坚信，引擎、类库以及语言本身，就像…

<a href="/question/36426051/answer/82579790" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/36426051/answer/82579790">发布于 2016-01-21</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6777532"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>264 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="2">
<meta name="disableCopyAvatar" content="https://pic3.zhimg.com/ca2157b2ffcf37287a07a7052243976a_s.jpg">

<span class="zg-bull">&bull;</span>


<a href="/copyright/apply?answer=82579790" target="_blank" class="meta-item copyright">申请转载</a>



<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="10" data-type="Answer">
<link itemprop="url" href="/question/41460230/answer/91062910">
<meta itemprop="answer-id" content="31862625" />
<meta itemprop="answer-url-token" content="91062910" />
<meta itemprop="answerCount" content="741" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/41460230" target="_blank" data-id="8791398" data-za-element-name="Title">
如何评价应届生前端人员月薪要3.3k到13k后，该公司CEO的评价？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/41460230/answer/91062910">
<!-- <meta itemprop="answer-id" content="31862625">
<meta itemprop="answer-url-token" content="91062910"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>4071</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">4071</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$fei-xiang-de-mao-miao"
target="_blank" href="/people/fei-xiang-de-mao-miao"
>飞翔的猫miao</a></span><span title="常常幻想的程序猿" class="bio">
常常幻想的程序猿
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="4071" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">4071</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="8791398" data-action="/answer/content" data-author-name="飞翔的猫miao" data-entry-url="/question/41460230/answer/91062910">

<textarea hidden class="content">文中的姑娘是我学妹，先征求她意见，同意的话，我更新详细过程。&lt;br&gt;&lt;br&gt;&lt;b&gt;最后的更新&lt;/b&gt;&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;&lt;b&gt;贵&quot;CEO&quot;已经通过微信亲自向学妹道歉，出于隐私的考虑，过程就不po出来了。这件事情就算结束了，也算是给了当事人(学妹)和所有关心此事的人一个交代。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;最后很感谢所有在关注这件事情和支持我们的人，真的非常谢谢！祝各位学习工作事业都顺心， 不会遇到这种糟心的事情~&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;更新线&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;虽然已经接受道歉，不应该再追着不放，看完道歉微博下的评论，简直是忍不住再出来吐槽啊啊啊啊.......&lt;br&gt;&lt;br&gt;补充另一位同学关于道歉微博下&lt;b&gt;&quot;蛇鼠一窝&quot;&lt;/b&gt;的分析：&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/41460230/answer/91238824&quot; class=&quot;internal&quot;&gt;如何评价应届生前端人员月薪要3.3k到13k后，该公司CEO的评价？ - 廖祜秋的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;按照这位答主的回答：&lt;a href=&quot;https://www.zhihu.com/question/41460230/answer/91210106?from=profile_answer_card&quot; class=&quot;internal&quot;&gt;如何评价应届生前端人员月薪要3.3k到13k后，该公司CEO的评价？ - 知乎用户的回答&lt;/a&gt;&lt;br&gt;去看了一下道歉微博下面的评论，这一通水军找的啊，僵尸号成片成片的，忍不住再来吐槽一次。下面的几张截图里的微博号，感兴趣可以去看看。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/2d0c6995c572f19eb798b7f19016af72_b.png&quot; data-rawwidth=&quot;1202&quot; data-rawheight=&quot;802&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1202&quot; data-original=&quot;https://pic3.zhimg.com/2d0c6995c572f19eb798b7f19016af72_r.png&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/80b515cc6f8121d1046b90375e815b47_b.png&quot; data-rawwidth=&quot;1204&quot; data-rawheight=&quot;766&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1204&quot; data-original=&quot;https://pic4.zhimg.com/80b515cc6f8121d1046b90375e815b47_r.png&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/895508f3df4f55cea860ac17bff7fad1_b.png&quot; data-rawwidth=&quot;1202&quot; data-rawheight=&quot;1230&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1202&quot; data-original=&quot;https://pic2.zhimg.com/895508f3df4f55cea860ac17bff7fad1_r.png&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/34313ac985fd266506a0a3d15e605f66_b.png&quot; data-rawwidth=&quot;1214&quot; data-rawheight=&quot;1310&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1214&quot; data-original=&quot;https://pic3.zhimg.com/34313ac985fd266506a0a3d15e605f66_r.png&quot;&gt;&lt;br&gt;还有就是贵司的员工和以及ARTAND的艺术家们玩得也是挺开心的哈。&lt;br&gt;&lt;br&gt;对此，我只想说，&lt;b&gt;你们啊，怎么开心怎么玩，反正我们也不瞎&lt;/b&gt;。&lt;br&gt;&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;听闻po主在微博上道歉贴下水军删帖，先去围观一阵.......&lt;br&gt;&lt;br&gt;更新&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;某&quot;CEO&quot;出面道歉了，微博传送门：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/1450393263/DmGXOE0Ge%3Ftype%3Dcomment%23_rnd1458211793691&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;分享图片 来自刘强&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;借用一句话：&lt;b&gt;知道出来道歉，说明还可以抢救一下。&lt;/b&gt;&lt;br&gt;&lt;br&gt;补充一句:  迄今为止，学妹个人没有收到任何关于道歉的电话。&lt;br&gt;&lt;br&gt;&lt;b&gt;关于是不是恶意无下限的营销方式，公道自在人心。如果他愿意用这种背负骂名的方式来营销，那就随他去吧。&lt;/b&gt;&lt;br&gt;&lt;br&gt;这又是分割线&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;贵&quot;CEO&quot;又把早晨说要po清楚的微博删了.......醉了，坐等博主po真相的人还是散了吧......&lt;br&gt;微博传送门： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/liuqiang%3Fprofile_ftype%3D1%26is_all%3D1%23_0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;刘强的微博_微博&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;抱歉大家的评论就不一一回复了，苦逼研究生狗还在做实验.......&lt;br&gt;&lt;br&gt;最新动态&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;1. 某&quot;CEO&quot;已经删除了微博，昨天还在微博下很“理直气壮”地回复别人不会删除（抱歉当时保留这话的截图），试问你当时的勇气呢？&lt;br&gt;原链接：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/1450393263/Dmz3V4yu5%3Ftype%3Dcomment%23_rnd1458145317624&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sina Visitor System&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;2. 学妹对&quot;CEO&quot;通过室友联系她的态度：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/54c9d50b468bf5ff53fa98ebcf7282ec_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;1280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic1.zhimg.com/54c9d50b468bf5ff53fa98ebcf7282ec_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;补充当时的骂人截图如下&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/267840d5630decb497047f462be55e2f_b.jpg&quot; data-rawwidth=&quot;719&quot; data-rawheight=&quot;1280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;719&quot; data-original=&quot;https://pic4.zhimg.com/267840d5630decb497047f462be55e2f_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;好，我来更新了，这是分割线。&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;首先强调两点&lt;br&gt;&lt;b&gt;1. 3.3 K这个标准完全是某&quot;CEO&quot;自己YY的，谁TM会提3.3K这种在北京就够住下水道的标准啊。&lt;/b&gt;&lt;br&gt;&lt;b&gt;2. 先不管薪资问题，在骂人这个事情上，根本不配在自己名字边上挂个CEO这个词，简直是对这个职位的侮辱。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;事情经过如下：&lt;br&gt;前天学妹到该公司面试，面完之后昨天该公司的HR打电话说很愿意让学妹过去工作，然后&lt;b&gt;毕业之前实习工资每天100，&lt;/b&gt;学妹也没说什么，就是问了问毕业之后的工资应该多少，然后HR说毕业之后的工资需要在6月份实习之后才能再谈（这不应该是&quot;明码标价&quot;，事先说好的么）。之后学妹表示需要再考虑一下。&lt;br&gt;&lt;br&gt;然后在昨天，该公司的HR又给学妹打电话询问情况，学妹表示&lt;b&gt;实习工资有些低，而且想知道入职以后的正式工资&lt;/b&gt;。HR说他们的工资标准是&lt;b&gt;发13个月，但是最后一个月不一定发&lt;/b&gt;(这就是发13个月的意思？？？)。学妹最早在申请表上填的薪资意愿大约&lt;b&gt;12K，&lt;/b&gt;然后学妹表示其他挺多公司都发15个月的，这里发13个月，想要商量工资为&lt;b&gt;13K, &lt;/b&gt;然后HR表示需要和其他同事商量一下。&lt;br&gt;&lt;br&gt;之后不久HR又打电话过来，说之前他们说错了，实习工资是150一天，不是100一天，问愿不愿意来，&lt;b&gt;老板说工资薪水什么&lt;/b&gt;的没问题。然后学妹考虑一下，表示手边有其他的offer，然后现在比较倾向于其他的offer。HR表示这挺正常的，说那好吧，然后还客气地客套了几句，和和气气挂了电话。&lt;br&gt;&lt;br&gt;到目前为止，一切是不是很正常？这尼玛不是找工作中正常流程么？&lt;br&gt;&lt;br&gt;然后，然后，学妹就发现该&quot;CEO&quot;在微博上骂她了。卧槽，这都是什么和什么啊？什么时候和你要过3.3K了？怎么就叫坐地起价了？怎么就让你说出“能滚多远算多远”这种话来还请“CEO”出来给说道说道。&lt;br&gt;&lt;br&gt;诚然，在传话过程中，可能会有HR表达意思的问题&lt;b&gt;，但是作为一个&quot;CEO&quot;，抛开薪资来说，公开在微博上辱骂求职者，就这一点就不配做&quot;CEO&quot;。我无法想象这样的人能带出什么样的团队，能给下面工作的人传输什么价值观。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;所以，既然你删除微博，就是你知道这种事情不合适，如果你还是一个大度的&quot;CEO&quot;，那站出来道歉。否则，一旦“名声”在外，就别再想舒舒服服地找应聘者了。&lt;/b&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/2d0c6995c572f19eb798b7f19016af72_200x112.png" data-rawwidth="1202" data-rawheight="802" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/2d0c6995c572f19eb798b7f19016af72_r.png">
文中的姑娘是我学妹，先征求她意见，同意的话，我更新详细过程。 <b>最后的更新</b> -------------------------------------------------------------------------------------------- <b>贵"CEO"已经通过微信亲自向学妹道歉，出于隐私的考虑，过程就不po出来了。这件…</b>

<a href="/question/41460230/answer/91062910" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-03-17" target="_blank" href="/question/41460230/answer/91062910">编辑于 2016-03-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-8791398"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>392 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="11" data-type="Answer">
<link itemprop="url" href="/question/19728465/answer/63865048">
<meta itemprop="answer-id" content="20960863" />
<meta itemprop="answer-url-token" content="63865048" />
<meta itemprop="answerCount" content="75" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/19728465" target="_blank" data-id="71482" data-za-element-name="Title">
未来是 HTML 5 还是 Flash 的时代？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/19728465/answer/63865048">
<!-- <meta itemprop="answer-id" content="20960863">
<meta itemprop="answer-url-token" content="63865048"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3683</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3683</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$ma-jian-egret"
target="_blank" href="/people/ma-jian-egret"
>马鉴</a></span><span title="正在创业的天文爱好者" class="bio">
正在创业的天文爱好者
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3683" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3683</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="71482" data-action="/answer/content" data-author-name="马鉴" data-entry-url="/question/19728465/answer/63865048">

<textarea hidden class="content">我特别不喜欢挖坟，但是有3个原因看到这个问题不得不答：&lt;br&gt;1. 我曾经从事了15年的Flash和HTML相关工作，我经历过。这是鄙人的亲身经历，1999年开始接触Flash技术，2000年向Macromedia提交了Flash AS1的Math相关算法而成为beta tester，2003年是Macromedia Flash的dev volunteer, 2004年成为Macromedia在中国的第一个技术员工，2005年，Adobe并购Macromedia结束，进入Adobe做工程师，2008成为Flash Video与Flash Media Server的大客户技术经理，2009年成为Flash Platform Evangelist，2014年离开Adobe前，除了Flash，也参与了Adobe HTML5系列技术工具的相关工作。&lt;br&gt;2. 我现在是一家做HTML5技术公司白鹭引擎的技术合伙人，管理这家公司的研发团队，每天的工作都跟HTML5的Web技术相关。&lt;br&gt;3. 这个时间点回答这个问题貌似最好，因为一切答案正在浮出水面。&lt;br&gt;&lt;br&gt;好了，回到答题本身。&lt;br&gt;&lt;br&gt;&lt;p&gt;我本人对于Flash和HTML5两个技术领域的观点判断大致如下：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Flash已经走入软件生命周期的末期，但它仍颇具价值。&lt;/li&gt;&lt;li&gt;Flash不论当初多么辉煌，在它的生命周期里从未真正赢得移动领域。&lt;/li&gt;&lt;li&gt;HTML5已经重回轨道，未来取胜的关键则在移动领域。&lt;/li&gt;&lt;li&gt;虽然HTML5已经重回轨道，但要达到高度完善的技术普及状态，它必须进行几方面的突破。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;Flash已经走入软件生命周期的末期，是的，万物皆有始终，更何况Flash。1994年4月10日到今日，Flash已经有21岁。21岁对于一个人而言，正属风华绝代之年，但是在软件领域里，存活21年实在算的上是一个老家伙了。说到衰落，必然要提崛起。21年的过程中，Flash经历了三次成功高峰，分别是1999年的网络动画时代，2005年的Flash Video时代与2008年的Web Game时代。这三次互联网领域的高峰，全部都被Flash赶上（不得不说命好运也好），并且这三次成功，引领了Flash在生命周期中的一次又一次产品形态上的变化。&lt;/p&gt;&lt;br&gt;&lt;p&gt;Flash Animation的流行引领了Flash的第一次成功，1999年，借着第一波互联网.com的热潮，由于当时HTML技术功能上的羸弱，大量被人所称道的Banner，动画，MTV都是借助Flash创作而来，这些充满神奇的交互效果充斥了每个网站，Flash在网页动画创作领域开始快速崛起。我当时的雇主美国Macromedia公司旗下的Flash，Dreamweaver和Fireworks被国人亲切的叫做网页三剑客，当时我主要泡闪客帝国（前身是边城浪子的回声资讯）和蓝色理想这两个Flash开发者聚集的论坛。2004年，借助着前几年Flash所取得的成绩，Macromedia公司被Adobe公司以34亿美金收购。2005年，Flash有史以来最重要的版本之一Flash 8（codename:8 ball)登场，这一版本里集成了2个最重要的功能，其中一个功能引领了后来YouTube和优酷土豆视频网站的成功，就是Flash Player里集成了Sorenson Spark H.263(VP6)的视频解码功能，而另一个功能为以后Flash可以创作更精彩的Web Game埋下伏笔，就是Bitmap和Bitmapdata位图操作的实现。2008年，Flash又“幸运”的赶上了社交游戏的浪潮，随着Zynga和Facebook的大获成功，Flash在社交游戏的技术领域独领风骚，之后的Stage3D技术又让Flash彻底统治PC网页游戏领域。在Flash最为巅峰的这么多年内，任何其他类似的技术都没有在与Flash竞争上胜出，期间也出现过若干“Flash Killer”，包括Silverlight，JavaFX，Lazslo和Unity Player。作为胜出者Flash自然有他的缘由，就是独一无二高度统一的Flash Player，强大的内容设计开发工作流，多年积累而成的强大的社区生态。&lt;/p&gt;&lt;br&gt;&lt;p&gt;水满则溢，月盈而亏。Flash开始走下坡路业界都认为是从苹果乔布斯的那篇檄文而起。没错，那篇檄文是Flash开始走下坡路的开始，后续的一系列对Flash的不利消息又接踵而来，都给Flash造成了沉重的打击。我这里给各位总结一下Flash由盛转衰的几个重要事件。它们分别是：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;苹果iOS不支持Flash Player.&lt;/li&gt;&lt;li&gt;MACOSX系统不提供面向Flash Player的视频硬件解码能力调用。&lt;/li&gt;&lt;li&gt;Adobe Flash Player所建立的Open Screen Project(OSP)计划的推进不佳被终止。&lt;/li&gt;&lt;li&gt;Adobe宣布裁撤Flex团队，终止Flash Builder开发计划，并将Flex项目捐给Apache，这间接促成了Google AngularJS的大获成功，因为AngularJS的作者就是Flex的核心科学家。&lt;/li&gt;&lt;li&gt;Adobe不再开发Android系统的Flash Player后续版本。&lt;/li&gt;&lt;li&gt;Adobe宣布终止开发了80%的ActionScript4.0和AVM3.0项目。&lt;/li&gt;&lt;li&gt;Adobe终止了Stage3D的后续开发工作。&lt;/li&gt;&lt;li&gt;Adobe终止AIR SDK的ANE(Adobe Native Extension)和内置Webkit的开发维护。&lt;/li&gt;&lt;li&gt;Adobe裁撤整个中国研发中心，其中有很多工程师原属于Flash团队，其中包括Flash Player，Stage3D，CrossBridge(原Alchemy），骨骼动画以及Platform Evangelism。（很有趣，其中一部分工程师后来加入了Egret团队）&lt;/li&gt;&lt;li&gt;FireFox曾默认关闭Flash内容显示。（修正：Firefox是因为Flash的一个0-day漏洞默认关闭了Flash内容，在修复后，又重新开启。来源：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.zdnet.com/article/firefox-now-blocks-all-versions-of-flash-player-by-default/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;​Firefox now blocks all versions of Flash Player by default&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;Google Chrome停用NPAPI的支持，并关闭PPAPI Flash Player的硬件加速。&lt;/li&gt;&lt;li&gt;Google Chrome将Flash内容默认关闭。（修正：Google Chrome宣布将智能化选择性的关闭Flash内容的显示。来源：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.zdnet.com/article/amazon-ditches-flash-ads-amid-ad-industry-push-towards-html5-ads/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zdnet.com/article/amazo&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;n-ditches-flash-ads-amid-ad-industry-push-towards-html5-ads/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可以说是一系列的坏消息，如果合在一起看，那简直是坏的不能再坏的消息了，其中很多的决策来自于Adobe自己，这有充分的理由让我们相信，Flash这个平台型的技术已经进入了最后的生命周期。但Flash给Web进化带来了很多有价值的推动。&lt;/p&gt;&lt;br&gt;&lt;p&gt;首先，在Flash最为鼎盛的时期，来自Adobe的官方统计，全球有将近200万的Flash开发者，这个群体不同于其他语言的开发者，可以说他们是一个独特的开发者群体，我们可以理解他们才是真正的“Full Stack”工程师，会开发游戏，会制作动画，会创作富媒体应用，甚至很多人还兼修美术，烹饪和刺绣。从2010年Flash开始走下坡路，这些Flash开发者陆续转型，他们成为了后来众多应用和游戏公司的中坚力量，目前市场上大量的Unity，Cocos的手游开发者，Egret Engine社区里近一半的HTML5开发者，甚至是大量的AngularJS和JQueryMobile的开发者，都来自于原来的Flash社区。&lt;/p&gt;&lt;br&gt;&lt;p&gt;其次，Flash开发生态为HTML5标准的进化带来了大量有借鉴价值的范本模型。Adobe通过Flash Professional工具开放了JSFL扩展；支持了JQuery Mobile和WebGL的输出，甚至于矢量绘图的动画都支持CreateJS的导出；Adobe将全球最流行的骨骼动画项目之一DragonBones转给了Egret继续原生和HTML5版本的开发工作；Flex项目的主程成为了Google AngularJS的作者；曾经流行的Flash游戏框架Flixel的作者后来又参与创作了HTML5游戏框架Phaser；被Adobe捐助给Mozilla组织的AVM2虚拟机的源码间接驱动了IonMonkey，SpiderMonkey项目中GC的更新换代和Flash转换HTML5项目Shumway的流行；Adobe的ActionScript3.0的语法方式被Egret Engine团队在HTML5的引擎产品设计上所借鉴；Stage3D项目后续促成了Away3D和Minko等原Flash3D项目完美转型HTML5技术领域。还有很多HTML5相关的视频和音频项目在过去几年的发展中大量的融合了Flash相关的媒体库来提供更多的功能支持，当今大量的HTML5 Video Player都是从原来的Flash领域变换而来。这一切都是Flash技术带给当今HTML5领域的财富。现实是很多人并未看到这些，看到的是当Apple宣布iOS不支持Flash技术开始，有些所谓的“专家”和“专业媒体”将Flash营造成HTML5的头号死敌的话题博取业界的更多眼球，其实他们并不关心Flash和HTML5为Web领域真正带来了什么，也不关心谁赢谁输，他们唯一关心的就是自己的知名度和访问量。&lt;/p&gt;&lt;br&gt;&lt;p&gt;接下来说说第二个观点，Flash从未真正赢得过移动领域。在开始这段之前，推荐各位在知乎看看我回答的这篇帖子“iOS不支持Flash的真实原因是什么？”&lt;a href=&quot;http://www.zhihu.com/question/19609079/answer/60053891&quot; class=&quot;internal&quot;&gt;iOS 不支持 Flash 的真实原因是什么？ - 知乎用户的回答&lt;/a&gt;。下面则是更多事实可以证明Flash一路走来，赢得了PC，丢掉了移动市场：&lt;/p&gt;&lt;br&gt;&lt;p&gt;1.在2004年，Flash跟中国移动对接动画标准一事，当时Flash Lite进入中移动动画标准评测流程之前，已经有两家利用Flash Player 6 SDK泄露的源码而做了山寨Flash播放器的公司在跟中移动对接了，一家韩国公司，一家中国公司，而且接触中移动的时间已经不短。Macromedia虽然是Flash官方，但是最后一个进场，而且当时中移动已经初定一家山寨Flash的产品成为标准，称之为MFlash。虽然中移动知道Macromedia是Flash的官方，技术更强，也乐意重新在中移动定制的功能机上使用Flash Lite标准，但是由于Macromedia坚持要求中移动承诺植入FL的设备总数，并按照单台1美金收取授权费。因为中移动是大公司，多少人挤破头想和中移动合作，但是Macromedia这家美国公司偏偏坚持成为标准，每台设备要收1美金。结果可想而知，Flash第一次错过了中国最大的移动运营商，很不幸的是，主导Flash播放器收取设备授权费的这个美国人跟着Macromedia一同进了Adobe，还被提升成为全球业务的高级总监，不幸的事情再次发生就自然而然了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;2.Nokia当年太有钱了，这家公司带头支持了内置Flash Lite，也带头支付给Adobe了Flash的设备授权费用。这一行径使得Adobe坚持认为Flash在移动设备上能收取费用且必须收取费用，不论是任何厂商，都不例外。一刀切的收费策略也自然引发了当年很多大大小小手机厂商的不满，当然，这个Adobe CEO可能不知道，只有我们这些处在一线的员工才了解。但是这条线的决策当时由上面说到的那个美国人来负责时，KPI自然也是以能为公司贡献多少利润来衡量团队业绩的唯一标准。所以，只看眼前利益，不花大力气培养移动生态成了Flash错过移动市场的另一个主因。&lt;/p&gt;&lt;br&gt;&lt;p&gt;3.当年Adobe对于Flash播放器的源码访问已经到了无比严苛的地步，只有在美国注册且有实体研发的公司才能通过clean room的方式获取Flash Player的源代码进行移动设备的定制，其他硬件公司都必须通过引入Adobe授权的第三方Porting Partner的机制来获取定制后的Binary Build。这个流程简单描述就是，如果我是一家中国的手机公司，有植入Flash播放器的需求，而且愿意付费，那我要跟Adobe授权的一家Porting公司签协议，这家Porting公司注册在美国，研发在印度......印度，你懂的，然后印度人来中国找我，了解我的设备（&lt;i&gt;这里还有一个大问题，就是即使签署保密协议，但这家Porting Flash的公司必然知道我将来要发布到市场的新手机的所有硬件规格，妈蛋啊，我新手机保密还未上市就都让别人全知道了，有可能这家知道我的手机规格的公司还在为我的竞争对手做porting！虽然有了保密协议，好吧，就当是完全保密吧。&lt;/i&gt;），然后评估是否可以移植Flash，然后回印度在clean room里访问Flash源代码，进行移植。移植完成后，要把装有定制Flash Player Build的样机送回给美国Adobe进行认证和备案，符合一切QA认证流程后，告知我可以出货了。好吧，这个蛋疼的流程虽然我不知道当初是谁制定的，但是结果就是，我有款新上市的手机有植入Flash的计划，我要先把我的硬件信息全部公开给第三方进行评估，而且手机将来能否出货，要先等几个月的Porting和Certify的流程，还要先付给Adobe一笔预付款，最后可能手机上市日期因为种种原因流产了。。。这么死板不人性化的流程成为Flash错过移动市场的第三个主要原因。&lt;/p&gt;&lt;br&gt;&lt;p&gt;4.就是众所周知的苹果在iOS上屏蔽Flash的事件，虽然当年Adobe用了“We Love Flash, We Love Apple”极富煽情的公关方式来应对，但是然并卵，Flash错过了移动市场上的第一个大腿iOS。&lt;/p&gt;&lt;br&gt;&lt;p&gt;5.Adobe然后开始决定不再移动设备上花费大量的人力物力来维护和开发Flash播放器，所以接着又官方宣布了不再更新安卓版本的Flash Player的决定。转而鼓励开发者使用Adobe AIR的打包技术来将Flash内容打包为原生的解决方案，这个方案几乎成功的实现了Flash进入移动市场的目标，因为全球当时已经有数十万个iOS的app是通过Adobe AIR打包而成。但是突然，又发现了巨大的问题，那就是AIR SDK打包原生，要依赖Apple官方提供的原生系统扩展API，比如支付，GameCenter，文件访问等等。而Adobe AIR的ANE(Adobe Native Extension)则是一个黑盒，那就变成苹果只要升级系统或调整API，ANE如果不及时更新，所有AIR打包的原生app都被卡住，需要等待Adobe升级更新ANE包才可以继续保证app的正常运转。这一个无法逾越的深坑让大量的用AIR打包原生app的Flash开发者大倒苦水，对ANE的海量吐槽直接飞向Adobe总部。如果Adobe ANE团队及时关注产品反馈并及时更新，这一个跟XCode打包几乎一致的GCC/LLVM打包方案完全可以茁壮成长下去，可惜，Adobe又一次做了一个碉堡了的决策，将ANE美国研发团队裁撤，将工作转到印度班加罗尔做维护，又是印度，你又懂了。终于，Flash又一次错过机会。&lt;/p&gt;&lt;br&gt;&lt;p&gt;6.虽然黑莓当时内置了AIR，QNX的车载导航几乎都是Flash和AIR技术，但是市场太小了，一个倔强的浪头完全无法逆转整个形势了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;所以我们可以认定Flash即使在PC上有过三次辉煌，但是它并未真正的赢得过移动市场，用一首诗来形容它的移动之路就是“待到秋来九月八，我花开后百花杀。冲天香阵透长安，满城尽带黄金甲”。在移动设备如日中天的今天，Flash本有机会开启并引领富媒体Web在移动设备上的革命，但它并非赢家。&lt;/p&gt;&lt;br&gt;&lt;p&gt;再来看第三个观点，HTML5已经重回轨道，未来取胜的关键则在移动领域。为什么这么讲。PC发展落后于移动已经是事实。今天，人手至少一台智能手机，移动流量超越了PC流量。技术为业务服务，业务由市场导向。HTML5狭义上是超文本链接标记语言第5版，单从名字上并无神奇之处，但广义而言，HTML5代表了新一代的HTML,CSS和JavaScript技术的总和，它可以跨平台，这在屏幕尺寸和分辨率林林总总的移动设备上简直就是天生的优势（天生就是东宫太子），响应式设计，跨操作系统，而且随着硬件计算能力的飞速进化，浏览器内核或者VM对于脚本型技术的性能瓶颈也在被逐渐抹平，在不是特别关注性能的应用开发上这个缺点渐渐被忽略不计。网络资源加载的尴尬也随着移动网络的速度飙升和使用成本的大幅降低而不再成为关键性的制约因素。HTML5虽然经历了2012-2013年的重大技术低潮，一大波HTML5的技术先锋在这两年沉沙折戟，但是不妨碍它的跨平台，标准开放的技术本质，2014年后再次卷土重来。&lt;/p&gt;&lt;br&gt;&lt;p&gt;任何人都需要通过移动设备连接世界，获取信息。这个基于Touch的市场机遇远大于使用键盘鼠标的PC领域，每天若干的创新都在这里出现，内容层出不穷，且这个领域的内容呈现需要高度的跨平台，跨设备的适配性，HTML5这种开放性的Web技术成为这些创新的主要技术方案顺理成章，因为HTML的发展史就是一部互联网的发展史。&lt;/p&gt;&lt;br&gt;&lt;p&gt;PC浏览网络信息，仍然靠浏览器。但是移动设备浏览网络信息，app就是介质。微信，微博，手机助手，新闻客户端，所有Webview支持的app就可以很完美的采用HTML5技术。HTML5技术在移动设备上的用户场景原则上可以无限大，任何我们现在接触的app，都有使用HTML5进行制作开发的可能。突破浏览器对于HTML5的束缚是HTML5在移动设备上走向顶峰的必经之路。我经常跟人争论的一个话题就是，谁规定HTML5的标准化的执行和实现就一定要依赖于浏览器？用HTML5技术开发的内容，但是不用浏览器形态的方式去浏览，算不算是HTML5所涵盖的领域？&lt;/p&gt;&lt;br&gt;&lt;p&gt;另外，PC某些垂直领域在几年内仍然无法摒弃插件体系，尤其是页游市场。国内目前的页游市场是几百亿人民币的规模，而这个领域使用Flash Stage3D技术已经根深蒂固，从游戏创作的技术工作流程和性能要求上，HTML5的能力目前还无法达到那个高度，光从Flash Stage3D可以在PC调用DirectX和OpenGL，而HTML5只能调用WebGL这点来看就被完爆。而且Adobe Flash播放器已经在PC领域渗透超过10亿台终端，这个市场占有率还不能短时间内被取代，在Flash与HTML5的更新交替年代，与其等待PC市场漫长的自然更迭，HTML5为何不能从没有Flash的移动市场强势介入，成为跨平台富媒体内容的开发首选？&lt;/p&gt;&lt;br&gt;&lt;p&gt;最后一个观点是建立在第三个观点之上的，HTML5最广泛的被接纳与普及前，还要先解决以下几个关键问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;1.HTML5的标准化的能力推进需要更多参与制定厂商的通力协作，不要把商业的博弈及目标凌驾在标准化的普及之上，公心要大于私心，通力协作，才可能尽快实现更多具有前瞻创新技术标准草案的落地。HTML5规范虽然在2014年底终于定稿，但是这其中经历了太多的曲折，推进的过程中充满了各大浏览器厂商借助标准扩大行业话语权的暗战，目前，仍然有大量的创新标准无法在日新月异的移动领域市场快速被定案与普及。太多事实，给各位列举几个。CSS3的标准落地异常复杂，甚至于出现在开发者创建和声明CSS3新属性时，针对不同浏览器，一个属性要设定针对浏览器的众多前缀才能保证浏览器对它的支持，这么蛋疼的编写设定虽然是过渡方案，但是不得不说标准化落地过程中产生的各种额外代价都无形的转嫁给了开发者。另一个例子是关于WebGL，来源于&lt;a href=&quot;//link.zhihu.com/?target=http%3A//webglstats.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;webglstats.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的数据统计，移动设备对于WebGL的支持率已经上升到有史以来的最高，超过8成支持WebGL内容的访问，这无疑是可喜的状况。但是从另一方面的比较则看出WebGL的进化仍面临巨大挑战。首先是,WebGL1.0从2011年起到现在已经近4年多几乎没有过任何能力上的进化，这几年全部都是标准规范草案定义能力的推进普及，变革速度相比起微软的DX12和Kronos组织全新一代的Vulkan技术的进化速度相比，简直惨不忍睹。当未来PC和主机游戏，甚至手机原生游戏都更多的可以从下一代的DX和Vulkan技术中全面获益，获得飞一样的提升时，我们HTML5的开发者们仍旧在为越来越多的设备终于支持WebGL而沉浸其中。好比有钱人又买别墅了，我还在为今年终于工资涨了几百而欢欣雀跃一样讽刺。如果HTML5技术想大成，不仅标准化的普及要快，功能性的创新也同样要快。&lt;/p&gt;&lt;br&gt;&lt;p&gt;2.HTML5相关开源项目（包括DOM,JavaScript/TypeScript,CSS)在github上无疑是总数世界第一。但是另外一方面，HTML5仍然需要更为强大，更有工作效率的工作流。我们需要在HTML5领域内有能跟其他领域一样世界级的工作流方案，强大的引擎，高度可视化的创意工具，云与端的计算完美结合，这些都能更有效的保证我们的工作成果和工作过程越来越专业。各行各业最顶级的创意开发工具，目前来看，没有一个是专门为HTML5技术而生的。例如Visual Studio虽然也可以支持HTML5和JS开发，但是相比C++,C#在VS中的集成工作流，待遇显然就是一个不招待见的“干儿子”。我们Web前端开发已经习惯用各种script editor，配合浏览器的developer tools，再配以各种node上的testing,build和publish工具，最后再通过Phonegap或者Cordova类似的打包来完成工作，这就是我们HTML5开发者的工作流，且我们认为已经很好了。但是这是我们被习惯被教育后采用的工作方式，是因为业界本就没有针对HTML5更高效专业的工作流。我天天弯着腰犁田，换个牛车替我就感觉很满足了，殊不知世界上有插秧机这种更高效的工具一样。正在使用的不代表就是最好的，因为更好的我们没见过。HTML5技术领域的创新绝对不能忽略更高度更自动化的工作流，这是一个高度繁荣市场的终极需求，不是某个通过terminal和command就能搞定一台机器的极客需求。&lt;/p&gt;&lt;br&gt;&lt;p&gt;虽然HTML5看似已经成了移动市场上实现网络富媒体交互技术的好选择，但是HTML5的技术未来并不是想象中的那么乐观，前路依然任重而道远。&lt;/p&gt;</textarea>


<div class="zh-summary summary clearfix">

我特别不喜欢挖坟，但是有3个原因看到这个问题不得不答： 1. 我曾经从事了15年的Flash和HTML相关工作，我经历过。这是鄙人的亲身经历，1999年开始接触Flash技术，2000年向Macromedia提交了Flash AS1的Math相关算法而成为beta tester，2003年是Macromedia Fl…

<a href="/question/19728465/answer/63865048" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-16" target="_blank" href="/question/19728465/answer/63865048">编辑于 2015-09-17</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-71482"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>190 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="12" data-type="Answer">
<link itemprop="url" href="/question/20215561/answer/40316953">
<meta itemprop="answer-id" content="11518900" />
<meta itemprop="answer-url-token" content="40316953" />
<meta itemprop="answerCount" content="37" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20215561" target="_blank" data-id="266399" data-za-element-name="Title">
WebSocket 是什么原理？为什么可以实现持久连接？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20215561/answer/40316953">
<!-- <meta itemprop="answer-id" content="11518900">
<meta itemprop="answer-url-token" content="40316953"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3644</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3644</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$Ovear"
target="_blank" href="/people/Ovear"
>Ovear</a></span><span title="各种乱七八糟神马的。" class="bio">
各种乱七八糟神马的。
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3644" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3644</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="266399" data-action="/answer/content" data-author-name="Ovear" data-entry-url="/question/20215561/answer/40316953">

<textarea hidden class="content">额。。最高票答案没答到点子上，最后怎么跑到Nodejs上去了。。Websocket只是协议而已。。&lt;br&gt;我一个个来回答吧&lt;br&gt;&lt;br&gt;&lt;b&gt;一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）&lt;/b&gt;&lt;br&gt;首先HTTP有1.1和1.0之说，也就是所谓的keep-alive，把多个HTTP请求合并为一个，但是Websocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充可以通过这样一张图理解&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/6651f2f811ec133b0e6d7e6d0e194b4c_b.jpg&quot; data-rawwidth=&quot;374&quot; data-rawheight=&quot;133&quot; class=&quot;content_image&quot; width=&quot;374&quot;&gt;有交集，但是并不是全部。&lt;br&gt;另外Html5是指的一系列新的API，或者说新规范，新技术。Http协议本身只有1.0和1.1，而且跟Html本身没有直接关系。。&lt;br&gt;通俗来说，你可以用HTTP&lt;b&gt;协议&lt;/b&gt;传输非Html&lt;b&gt;数据&lt;/b&gt;，就是这样=。=&lt;br&gt;再简单来说，&lt;b&gt;层级不一样&lt;/b&gt;。&lt;br&gt;&lt;br&gt;&lt;b&gt;二、Websocket是什么样的协议，具体有什么优点&lt;/b&gt;&lt;br&gt;首先，Websocket是一个&lt;b&gt;持久化&lt;/b&gt;的协议，相对于HTTP这种&lt;b&gt;非持久&lt;/b&gt;的协议来说。&lt;br&gt;简单的举个例子吧，用目前应用比较广泛的PHP生命周期来解释。&lt;br&gt;1) HTTP的生命周期通过Request来界定，也就是一个Request 一个Response，那么&lt;b&gt;在&lt;/b&gt;HTTP1.0&lt;b&gt;中&lt;/b&gt;，这次HTTP请求就结束了。&lt;br&gt;在HTTP1.1中进行了改进，使得有一个keep-alive，也就是说，在一个HTTP连接中，可以发送多个Request，接收多个Response。&lt;br&gt;但是请记住 Request = Response ， 在HTTP中永远是这样，也就是说一个request只能有一个response。而且这个response也是&lt;b&gt;被动&lt;/b&gt;的，不能主动发起。&lt;br&gt;&lt;br&gt;&lt;b&gt;教练，你BB了这么多，跟Websocket有什么关系呢？&lt;/b&gt;&lt;br&gt;_(:з」∠)_好吧，我正准备说Websocket呢。。&lt;br&gt;首先Websocket是基于HTTP协议的，或者说&lt;b&gt;借用&lt;/b&gt;了HTTP的协议来完成一部分握手。&lt;br&gt;在握手阶段是一样的&lt;br&gt;-------以下涉及专业技术内容，不想看的可以跳过lol:，或者只看加黑内容--------&lt;br&gt;首先我们来看个典型的Websocket握手（借用Wikipedia的。。）&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;GET /chat HTTP/1.1
Host: server.example.com
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
Origin: http://example.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;熟悉HTTP的童鞋可能发现了，这段类似HTTP协议的握手请求中，多了几个东西。&lt;br&gt;我会顺便讲解下作用。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Upgrade: websocket
Connection: Upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这个就是Websocket的核心了，告诉Apache、Nginx等服务器：&lt;b&gt;注意啦，窝发起的是Websocket协议，快点帮我找到对应的助理处理~不是那个老土的HTTP。&lt;/b&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==
Sec-WebSocket-Protocol: chat, superchat
Sec-WebSocket-Version: 13
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;首先，Sec-WebSocket-Key 是一个Base64 encode的值，这个是浏览器随机生成的，告诉服务器：&lt;b&gt;泥煤，不要忽悠窝，我要验证尼是不是真的是Websocket助理。&lt;/b&gt;&lt;br&gt;然后，Sec_WebSocket-Protocol 是一个用户定义的字符串，用来区分同URL下，不同的服务所需要的协议。简单理解：&lt;b&gt;今晚我要服务A，别搞错啦~&lt;/b&gt;&lt;br&gt;最后，Sec-WebSocket-Version 是告诉服务器所使用的Websocket Draft（协议版本），在最初的时候，Websocket协议还在 Draft 阶段，各种奇奇怪怪的协议都有，而且还有很多期奇奇怪怪不同的东西，什么Firefox和Chrome用的不是一个版本之类的，当初Websocket协议太多可是一个大难题。。不过现在还好，已经定下来啦~大家都使用的一个东西~ 脱水：&lt;b&gt;服务员，我要的是13岁的噢→_→&lt;/b&gt;&lt;br&gt;&lt;br&gt;然后服务器会返回下列东西，表示已经接受到请求， 成功建立Websocket啦！&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP/1.1 101 Switching Protocols
Upgrade: websocket
Connection: Upgrade
Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
Sec-WebSocket-Protocol: chat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这里开始就是HTTP最后负责的区域了，告诉客户，我已经成功切换协议啦~&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Upgrade: websocket
Connection: Upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;依然是固定的，告诉客户端即将升级的是Websocket协议，而不是mozillasocket，lurnarsocket或者shitsocket。&lt;br&gt;然后，Sec-WebSocket-Accept 这个则是经过服务器确认，并且加密过后的 Sec-WebSocket-Key。服务器：&lt;b&gt;好啦好啦，知道啦，给你看我的ID CARD来证明行了吧。。&lt;/b&gt;&lt;br&gt;后面的，Sec-WebSocket-Protocol 则是表示最终使用的协议。&lt;br&gt;&lt;br&gt;至此，HTTP已经完成它所有工作了，接下来就是完全按照Websocket协议进行了。&lt;br&gt;具体的协议就不在这阐述了。&lt;br&gt;------------------技术解析部分完毕------------------&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/afe119b52e096016139edabc2dfa9661_b.jpg&quot; data-rawwidth=&quot;161&quot; data-rawheight=&quot;187&quot; class=&quot;content_image&quot; width=&quot;161&quot;&gt;你TMD又BBB了这么久，那到底Websocket有什么鬼用，http long poll，或者ajax轮询不都可以实现实时信息传递么。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/20110e661edb1e93755a99c1d826e264_b.jpg&quot; data-rawwidth=&quot;176&quot; data-rawheight=&quot;193&quot; class=&quot;content_image&quot; width=&quot;176&quot;&gt;&lt;br&gt;&lt;br&gt;好好好，年轻人，那我们来讲一讲Websocket有什么用。&lt;br&gt;来给你吃点胡（苏）萝（丹）卜（红）&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/31ddf0cfbeecef21568d85ca60b5f1ff_b.jpg&quot; data-rawwidth=&quot;53&quot; data-rawheight=&quot;65&quot; class=&quot;content_image&quot; width=&quot;53&quot;&gt;&lt;b&gt;三、Websocket的作用&lt;/b&gt;&lt;br&gt;在讲Websocket之前，我就顺带着讲下 long poll 和 ajax轮询 的原理。&lt;br&gt;首先是 ajax轮询 ，ajax轮询 的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。&lt;br&gt;场景再现：&lt;br&gt;客户端：啦啦啦，有没有新信息(Request)&lt;br&gt;服务端：没有（Response）&lt;br&gt;客户端：啦啦啦，有没有新信息(Request)&lt;br&gt;服务端：没有。。（Response）&lt;br&gt;客户端：啦啦啦，有没有新信息(Request)&lt;br&gt;服务端：你好烦啊，没有啊。。（Response）&lt;br&gt;客户端：啦啦啦，有没有新消息（Request）&lt;br&gt;服务端：好啦好啦，有啦给你。（Response）&lt;br&gt;客户端：啦啦啦，有没有新消息（Request）&lt;br&gt;服务端：。。。。。没。。。。没。。。没有（Response） ---- loop&lt;br&gt;&lt;br&gt;long poll &lt;br&gt;long poll 其实原理跟 ajax轮询 差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。&lt;br&gt;场景再现&lt;br&gt;客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request）&lt;br&gt;服务端：额。。   等待到有消息的时候。。来 给你（Response）&lt;br&gt;客户端：啦啦啦，有没有新信息，没有的话就等有了才返回给我吧（Request） -loop&lt;br&gt;&lt;br&gt;从上面可以看出其实这两种方式，都是在不断地建立HTTP连接，然后等待服务端处理，可以体现HTTP协议的另外一个特点，&lt;b&gt;被动性&lt;/b&gt;。&lt;br&gt;何为被动性呢，其实就是，服务端不能主动联系客户端，只能有客户端发起。&lt;br&gt;简单地说就是，服务器是一个很懒的冰箱（这是个梗）（不会、不能主动发起连接），但是上司有命令，如果有客户来，不管多么累都要好好接待。&lt;br&gt;&lt;br&gt;说完这个，我们再来说一说上面的缺陷（原谅我废话这么多吧OAQ）&lt;br&gt;从上面很容易看出来，不管怎么样，上面这两种都是非常消耗资源的。&lt;br&gt;ajax轮询 需要服务器有很快的处理速度和资源。（速度）&lt;br&gt;long poll 需要有很高的并发，也就是说同时接待客户的能力。（场地大小）&lt;br&gt;所以ajax轮询 和long poll 都有可能发生这种情况。&lt;br&gt;&lt;br&gt;&lt;b&gt;客户端：啦啦啦啦，有新信息么？&lt;/b&gt;&lt;br&gt;&lt;b&gt;服务端：月线正忙，请稍后再试（503 Server Unavailable）&lt;/b&gt;&lt;br&gt;&lt;b&gt;客户端：。。。。好吧，啦啦啦，有新信息么？&lt;/b&gt;&lt;br&gt;&lt;b&gt;服务端：月线正忙，请稍后再试（503 Server Unavailable）&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;客户端：&lt;/b&gt;&lt;img src=&quot;https://pic1.zhimg.com/7c0cf075c7ee4cc6cf52f4572a4c1c10_b.jpg&quot; data-rawwidth=&quot;143&quot; data-rawheight=&quot;50&quot; class=&quot;content_image&quot; width=&quot;143&quot;&gt;&lt;br&gt;&lt;b&gt;然后服务端在一旁忙的要死：冰箱，我要更多的冰箱！更多。。更多。。（我错了。。这又是梗。。）&lt;/b&gt;&lt;br&gt;&lt;br&gt;--------------------------&lt;br&gt;&lt;b&gt;言归正传，我们来说Websocket吧&lt;/b&gt;&lt;br&gt;通过上面这个例子，我们可以看出，这两种方式都不是最好的方式，需要很多资源。&lt;br&gt;一种需要更快的速度，一种需要更多的'电话'。这两种都会导致'电话'的需求越来越高。&lt;br&gt;哦对了，忘记说了HTTP还是一个无状态协议。（感谢评论区的各位指出OAQ）&lt;br&gt;通俗的说就是，服务器因为每天要接待太多客户了，是个&lt;b&gt;健忘鬼&lt;/b&gt;，你一挂电话，他就把你的东西全忘光了，把你的东西全丢掉了。你第二次还得再告诉服务器一遍。&lt;br&gt;&lt;br&gt;所以在这种情况下出现了，Websocket出现了。&lt;br&gt;他解决了HTTP的这几个难题。&lt;br&gt;首先，&lt;b&gt;被动性&lt;/b&gt;，当服务器完成协议升级后（HTTP-&amp;gt;Websocket），服务端就可以主动推送信息给客户端啦。&lt;br&gt;所以上面的情景可以做如下修改。&lt;br&gt;客户端：啦啦啦，我要建立Websocket协议，需要的服务：chat，Websocket协议版本：17（HTTP Request）&lt;br&gt;服务端：ok，确认，已升级为Websocket协议（HTTP Protocols Switched）&lt;br&gt;客户端：麻烦你有信息的时候推送给我噢。。&lt;br&gt;服务端：ok，有的时候会告诉你的。&lt;br&gt;服务端：balabalabalabala&lt;br&gt;服务端：balabalabalabala&lt;br&gt;服务端：哈哈哈哈哈啊哈哈哈哈&lt;br&gt;服务端：笑死我了哈哈哈哈哈哈哈&lt;br&gt;&lt;br&gt;就变成了这样，只需要经过&lt;b&gt;一次HTTP请求&lt;/b&gt;，就可以做到源源不断的信息传送了。（在程序设计中，这种设计叫做回调，即：你有信息了再来通知我，而不是我傻乎乎的每次跑来问你）&lt;br&gt;这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。&lt;br&gt;那么为什么他会解决服务器上消耗资源的问题呢？&lt;br&gt;其实我们所用的程序是要经过两层代理的，即&lt;b&gt;HTTP协议在Nginx等服务器的解析下&lt;/b&gt;，然后再传送给相应的&lt;b&gt;Handler（PHP等）&lt;/b&gt;来处理。&lt;br&gt;简单地说，我们有一个非常快速的接&lt;b&gt;线员（Nginx）&lt;/b&gt;，他负责把问题转交给相应的&lt;b&gt;客服（Handler）&lt;/b&gt;。&lt;br&gt;本身&lt;b&gt;接线员基本上速度是足够的&lt;/b&gt;，但是每次都卡在&lt;b&gt;客服（Handler）&lt;/b&gt;了，老有&lt;b&gt;客服&lt;/b&gt;处理速度太慢。，导致客服不够。&lt;br&gt;Websocket就解决了这样一个难题，建立后，可以直接跟接线员建立持&lt;b&gt;久连接&lt;/b&gt;，有信息的时候客服想办法通知接线员，然后&lt;b&gt;接线员&lt;/b&gt;在统一转交给客户。&lt;br&gt;这样就可以解决客服处理速度过慢的问题了。&lt;br&gt;&lt;br&gt;同时，在传统的方式上，要不断的建立，关闭HTTP协议，由于HTTP是非状态性的，每次都要&lt;b&gt;重新传输identity info（鉴别信息）&lt;/b&gt;，来告诉服务端你是谁。&lt;br&gt;虽然接线员很快速，但是每次都要听这么一堆，效率也会有所下降的，同时还得不断把这些信息转交给客服，不但浪费客服的&lt;b&gt;处理时间&lt;/b&gt;，而且还会在网路传输中消耗&lt;b&gt;过多的流量/时间。&lt;/b&gt;&lt;br&gt;但是Websocket只需要&lt;b&gt;一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中&lt;/b&gt;，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。&lt;br&gt;同时由&lt;b&gt;客户主动询问&lt;/b&gt;，转换为&lt;b&gt;服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。）&lt;/b&gt;，没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的&lt;b&gt;客服（Handler）&lt;/b&gt;了&lt;br&gt;--------------------&lt;br&gt;至于怎么在不支持Websocket的客户端上使用Websocket。。答案是：&lt;b&gt;不能&lt;/b&gt;&lt;br&gt;但是可以通过上面说的 long poll 和 ajax 轮询来 &lt;b&gt;模拟出类似的效果&lt;/b&gt;&lt;br&gt;-----&lt;br&gt;_(:з」∠)_两天写了两篇科普类文章。。好累OAQ，求赞。。&lt;br&gt;对啦，如果有错误，欢迎大家在底下留言指出噢~</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic1.zhimg.com/6651f2f811ec133b0e6d7e6d0e194b4c_200x112.jpg" data-rawwidth="374" data-rawheight="133" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic1.zhimg.com/6651f2f811ec133b0e6d7e6d0e194b4c_r.jpg">
额。。最高票答案没答到点子上，最后怎么跑到Nodejs上去了。。Websocket只是协议而已。。 我一个个来回答吧 <b>一、WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）</b> 首先HTTP…

<a href="/question/20215561/answer/40316953" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-02-22" target="_blank" href="/question/20215561/answer/40316953">编辑于 2016-03-01</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-266399"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>192 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="13" data-type="Answer">
<link itemprop="url" href="/question/37905339/answer/74234374">
<meta itemprop="answer-id" content="25117070" />
<meta itemprop="answer-url-token" content="74234374" />
<meta itemprop="answerCount" content="54" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/37905339" target="_blank" data-id="7369387" data-za-element-name="Title">
QQ空间的前端技术水平如何？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/37905339/answer/74234374">
<!-- <meta itemprop="answer-id" content="25117070">
<meta itemprop="answer-url-token" content="74234374"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3455</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3455</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$diao-xiong-2"
target="_blank" href="/people/diao-xiong-2"
>雕兄</a></span><span title="QQ空间web前端工程师，健身爱好者" class="bio">
QQ空间web前端工程师，健身爱好者
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3455" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3455</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7369387" data-action="/answer/content" data-author-name="雕兄" data-entry-url="/question/37905339/answer/74234374">

<textarea hidden class="content">利益相关：QQ空间 web前端开发，你吐槽的页面，就是我做的。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/2820f63660125c07843a12bebdc0a1eb_b.jpg&quot; data-rawwidth=&quot;91&quot; data-rawheight=&quot;96&quot; class=&quot;content_image&quot; width=&quot;91&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;知乎从来都是只看不答，这次为了答题，总算注册一个知乎大号。这个回答仅对题主提出的做的不好的地方做下反思和一些解释，至于技术牛不牛，不在这里探讨，反正我是不牛的那个。&lt;br&gt;&lt;br&gt;妈妈说做错了就得承认，黄老师说不能鸭子死了嘴壳子硬。感谢题主指出了问题，让我可以再回过头来看做得不好的地方（老大总算要安排时间给我优化啦，哈哈哈）。&lt;br&gt;&lt;br&gt;一开始，关于文件数加载，先提出我的看法：&lt;br&gt;1.最重要的时间是什么，是用户首次可交互时间，那么为了尽可能的优化这个时间，我们要保证在这之前请求尽可能的少，这是必须做到极致的。&lt;br&gt;2.有些功能，用户一进来并不会立刻使用，那么这些功能的文件，只需要在用户准备用它之前加载好即可。什么时候加载，多少个请求，其实影响不大。&lt;br&gt;&lt;br&gt;好啦，下边一个一个的说吧。&lt;br&gt;&lt;br&gt;&lt;b&gt;1.加载了114个js文件&lt;/b&gt;&lt;br&gt;我进自己空间，清掉缓存，无缓存状态，js 122个，吓尿了。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/ffc728c88bb66ad0a7b72f6b296e7029_b.png&quot; data-rawwidth=&quot;813&quot; data-rawheight=&quot;578&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;813&quot; data-original=&quot;https://pic2.zhimg.com/ffc728c88bb66ad0a7b72f6b296e7029_r.png&quot;&gt;&lt;br&gt;再次进空间，带缓存访问，还好，文件数虽多，大多数都是从from cache，还好还好。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/9af23815571a78b358200855748592b9_b.png&quot; data-rawwidth=&quot;859&quot; data-rawheight=&quot;740&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;859&quot; data-original=&quot;https://pic2.zhimg.com/9af23815571a78b358200855748592b9_r.png&quot;&gt;&lt;br&gt;回过来继续看哪些文件可合并，哪些文件不可合并。逐个说下吧。&lt;br&gt;&lt;br&gt;1）基础库文件 3个&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/1262539b7fc97adaeeb1db9c913f8c50_b.png&quot; data-rawwidth=&quot;839&quot; data-rawheight=&quot;65&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;839&quot; data-original=&quot;https://pic1.zhimg.com/1262539b7fc97adaeeb1db9c913f8c50_r.png&quot;&gt;这几个是基础库，可不可以合呢？当然可以合，为什么不合呢？基础库文件基本是不会改动的，我们又设置了长缓存。对大部分用户来说，这个文件是会使用缓存的，如果我们把这3个文件突然改成合并加载，所有用户都会重新下载这部分文件，浪费流量啊，浪费流量就是浪费钱。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/e1aa1d85820ed29858df1fadc830b132_b.png&quot; data-rawwidth=&quot;700&quot; data-rawheight=&quot;756&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;700&quot; data-original=&quot;https://pic3.zhimg.com/e1aa1d85820ed29858df1fadc830b132_r.png&quot;&gt;&lt;br&gt;2）说说发表框的文件 3个&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/5f7f69cde064f6eeed8420796186df93_b.png&quot; data-rawwidth=&quot;1414&quot; data-rawheight=&quot;354&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1414&quot; data-original=&quot;https://pic4.zhimg.com/5f7f69cde064f6eeed8420796186df93_r.png&quot;&gt;这些文件可不可以合呢，从抓包可以看出，其实我是合了的。为什么是3个而不是1个呢？因为合成1个url就太长了，超出老ie的限制，就要报错。没办法，拆成3个。那为什么不低版本ie 3个请求，新版本浏览器1个请求呢？有些其他原因，这里不好说&lt;br&gt;&lt;br&gt;3）个人中心的各种模块 8个文件&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/28d960269be8ae8c89b471b557232163_b.png&quot; data-rawwidth=&quot;1395&quot; data-rawheight=&quot;251&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1395&quot; data-original=&quot;https://pic4.zhimg.com/28d960269be8ae8c89b471b557232163_r.png&quot;&gt;&lt;br&gt;这里的合并没做好，从长度上来说，可以减少到3到4个请求，这里有优化空间&lt;br&gt;&lt;br&gt;4）音乐播放器文件 3个&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/3454fe8f409bb9169aec3fa7e195199d_b.png&quot; data-rawwidth=&quot;826&quot; data-rawheight=&quot;66&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;826&quot; data-original=&quot;https://pic2.zhimg.com/3454fe8f409bb9169aec3fa7e195199d_r.png&quot;&gt;这里也有优化空间，不多说啦&lt;br&gt;&lt;br&gt;5）评论框的文件 20个&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/e6d347d92c17e99850f273df9f2748fc_b.png&quot; data-rawwidth=&quot;1192&quot; data-rawheight=&quot;428&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1192&quot; data-original=&quot;https://pic1.zhimg.com/e6d347d92c17e99850f273df9f2748fc_r.png&quot;&gt;这个可以合并一下，为什么之前不合并呢？要讲好长一个故事，题主估计也不想听，不废话啦&lt;br&gt;&lt;br&gt;6）其他接入的团队的文件 11个&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/7e7b49fb2d4ab9174eb46c1ec4354cdc_b.png&quot; data-rawwidth=&quot;808&quot; data-rawheight=&quot;94&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;808&quot; data-original=&quot;https://pic1.zhimg.com/7e7b49fb2d4ab9174eb46c1ec4354cdc_r.png&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/0e612c0062a22be74ded4ebdb343c24b_b.png&quot; data-rawwidth=&quot;819&quot; data-rawheight=&quot;149&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;819&quot; data-original=&quot;https://pic4.zhimg.com/0e612c0062a22be74ded4ebdb343c24b_r.png&quot;&gt;&lt;br&gt;合不合呢？我也想合，待我去问问&lt;br&gt;&lt;br&gt;7）/qzone/mall/目录文件 6个&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/76c59977cf7bbda8eebbf04e159d0a91_b.png&quot; data-rawwidth=&quot;738&quot; data-rawheight=&quot;124&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;738&quot; data-original=&quot;https://pic2.zhimg.com/76c59977cf7bbda8eebbf04e159d0a91_r.png&quot;&gt;有个基础库重复加载啦，惭愧惭愧。其他的代码都是一些功能模块，可以合并么？也可以，不过这些模块进某些页面时用，有些页面时不用，而且不是首屏的功能，多几个请求对体验的影响不大。总的来说，合也可，不合也可。&lt;br&gt;&lt;br&gt;8）/qzone/photo/目录文件 8个&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/0bd0991025c5aa716d61943e94de5ccb_b.png&quot; data-rawwidth=&quot;644&quot; data-rawheight=&quot;166&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;644&quot; data-original=&quot;https://pic4.zhimg.com/0bd0991025c5aa716d61943e94de5ccb_r.png&quot;&gt;这个目录的文件倒是可以把请求合并一下，预计可以减少到3 到4个请求。&lt;br&gt;&lt;br&gt;9）又是一堆功能模块 37个&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/58f698836b8cc8128934bac99e574afd_b.png&quot; data-rawwidth=&quot;775&quot; data-rawheight=&quot;763&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;775&quot; data-original=&quot;https://pic2.zhimg.com/58f698836b8cc8128934bac99e574afd_r.png&quot;&gt;这里也可以优化，预计可以减少到8个以内&lt;br&gt;&lt;br&gt;10）3个配置文件&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/e79cb5376716f3147169c1140e107cd1_b.png&quot; data-rawwidth=&quot;697&quot; data-rawheight=&quot;69&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;697&quot; data-original=&quot;https://pic2.zhimg.com/e79cb5376716f3147169c1140e107cd1_r.png&quot;&gt;可以合，不过合并后，1个文件变更会导致其他文件也重新下载，性价比不高。而且这些文件并不会在第一屏加载。合不合对体验的影响不大。&lt;br&gt;&lt;br&gt;综上，预计优化后总请求数在40个以内。还有优化空间的，我们也可以再探讨&lt;br&gt;&lt;br&gt;&lt;b&gt;2.对最高赞的匿名用户（请原谅，你匿名了，我只能这样称呼你了）提出的问题稍微解释下：&lt;/b&gt;&lt;br&gt;&lt;br&gt;1）有些文件没混淆，有些文件混淆了。&lt;br&gt;为什么呢？我们是在发布系统上做的压缩混淆。最开始是指做压缩，不做混淆的。在某个时间点才开启了混淆。只要在那个时间点之后发布的文件，就是做过混淆的。我的看法是，如果经常改的文件，下次修改发布后，自然就混淆了。如果不是经常改的文件，有没有必要去混淆呢？得看收益了&lt;br&gt;那旧文件要不要去混淆呢？我们找个文件分析一下吧。&lt;br&gt;以这个文件为例：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ctc.qzonestyle.gtimg.cn/qzone/photo/v7/js/lib/photo.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://qzonestyle.gtimg.cn/qzone/photo/v7/js/lib/photo.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;原始文件大小：136K&lt;br&gt;只去注释换行空格，开启gzip，大小：21k&lt;br&gt;去注释换行混淆，开启gzip，大小：19k&lt;br&gt;以上的结果可以看出，做不做混淆，对一个136k的文件来说，影响在2k。&lt;br&gt;我们当时的策略是：对cdn上流量较大的文件，重新发布一遍，做混淆。流量小的，就等到下个版本发布时就混淆。一直等不到下个版本的，流量又小的，就不管了。&lt;br&gt;&lt;br&gt;你又可能会问：把所有旧代码发布一遍，很麻烦么？发布不麻烦，麻烦的是，有些旧代码过不了gcc simple级别的压缩，重新发布一遍（上万个文件），意味着发布的时候得花很多时间去改旧代码。时间就耗进去，需求不做了么？不做需求，那么还要不要领工资呢？不领工资，回家老婆要买驴牌，孩子要学跳舞，这些都要钱啊！面对现实，还是忍了&lt;br&gt;&lt;br&gt;2）中英文混搭&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/1202bd49d55959e6ee4021e2ffb75a5b_b.png&quot; data-rawwidth=&quot;486&quot; data-rawheight=&quot;141&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;486&quot; data-original=&quot;https://pic4.zhimg.com/1202bd49d55959e6ee4021e2ffb75a5b_r.png&quot;&gt;中英文混搭的地方确实很多，没办法，读了这么多年书，最对不起就是英文老师。不过你这个例子举得不好，因为这里的dianping指的就是大众点评，如果我去改成英文什么的，反而更影响了理解。&lt;br&gt;&lt;br&gt;3）空if&lt;br&gt;这里实在是惭愧，不解释，接受打脸。&lt;br&gt;&lt;br&gt;4）代码审查的力度&lt;br&gt;这也是我想吐槽的，如果借这个机会能换的大家的重视，这脸打得值得。&lt;br&gt;&lt;br&gt;感谢你能看到这里。&lt;br&gt;&lt;br&gt;最后的最后，题主和那位匿名的兄弟，如果有兴趣，可以私信我，如果我们彼此能看上眼，可以来我们这里试试。&lt;br&gt;&lt;br&gt;20151117&lt;br&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic2.zhimg.com/ffc728c88bb66ad0a7b72f6b296e7029_200x112.png" data-rawwidth="813" data-rawheight="578" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic2.zhimg.com/ffc728c88bb66ad0a7b72f6b296e7029_r.png">
利益相关：QQ空间 web前端开发，你吐槽的页面，就是我做的。 知乎从来都是只看不答，这次为了答题，总算注册一个知乎大号。这个回答仅对题主提出的做的不好的地方做下反思和一些解释，至于技术牛不牛，不在这里探讨，反正我是不牛的那个。 妈妈说做错了就得…

<a href="/question/37905339/answer/74234374" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/37905339/answer/74234374">发布于 2015-11-27</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7369387"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>333 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic4.zhimg.com/v2-6cedfd5526d19a4f66e98529a136c807_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="14" data-type="Answer">
<link itemprop="url" href="/question/36426051/answer/76031743">
<meta itemprop="answer-id" content="25837026" />
<meta itemprop="answer-url-token" content="76031743" />
<meta itemprop="answerCount" content="281" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/36426051" target="_blank" data-id="6777532" data-za-element-name="Title">
有哪些老鸟程序员知道而新手不知道的小技巧？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/36426051/answer/76031743">
<!-- <meta itemprop="answer-id" content="25837026">
<meta itemprop="answer-url-token" content="76031743"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3354</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3354</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$da-hu-li-69"
target="_blank" href="/people/da-hu-li-69"
>大狐狸</a></span><span title="游戏开发" class="bio">
游戏开发
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3354" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3354</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6777532" data-action="/answer/content" data-author-name="大狐狸" data-entry-url="/question/36426051/answer/76031743">

<textarea hidden class="content">本来只是分享几条看法，没想到会有这么多人喜欢。我再补充一些，希望能对进阶中的程序朋友有帮助。手机敲得，比较凌乱。作为个人意见仅供参考。&lt;br&gt;&lt;br&gt;1.重构是程序员的主力技能。&lt;br&gt;&lt;br&gt;2.工作日志能提升脑容量。&lt;br&gt;&lt;br&gt;3.先用profiler调查，才有脸谈优化。&lt;br&gt;&lt;br&gt;4.注释贵精不贵多。杜绝大姨妈般的“例注”。漫山遍野的碎碎念注释，实际就是背景噪音。&lt;br&gt;&lt;br&gt;5.普通程序员+google=超级程序员。&lt;br&gt;&lt;br&gt;6.单元测试总是合算的。&lt;br&gt;&lt;br&gt;7.不要先写框架再写实现。最好反过来，从原型中提炼框架。&lt;br&gt;&lt;br&gt;8.代码结构清晰，其它问题都不算事儿。&lt;br&gt;&lt;br&gt;9.好的项目作风硬派，一键测试，一键发布，一键部署; 烂的项目生性猥琐，口口相传，不立文字，神神秘秘。&lt;br&gt;&lt;br&gt;10.编码不要畏惧变化，要拥抱变化。&lt;br&gt;&lt;br&gt;11.常充电。程序员只有一种死法：土死的。&lt;br&gt;&lt;br&gt;12. 编程之事，隔离是方向，起名是关键，测试是主角，调试是补充，版本控制是后悔药。&lt;br&gt;&lt;br&gt;13. 一行代码一个兵。形成建制才能有战斗力。单位规模不宜过大，千人班，万人排易成万人坑。&lt;br&gt;&lt;br&gt;14. 重构/优化/修复Bug，同时只能作一件。&lt;br&gt;&lt;br&gt;15. 简单模块注意封装，复杂模块注意分层。&lt;br&gt;&lt;br&gt;16. 人脑性能有限，整洁胜于杂乱。读不懂的代码，尝试整理下格式;  不好用的接口，尝试重新封装下。&lt;br&gt;&lt;br&gt;17. 迭代速度决定工作强度。想多快好省，就从简化开发流程，加快迭代速度开始。&lt;br&gt;&lt;br&gt;18. 忘掉优化写代码。过早优化等同恶意破坏；忘掉代码作优化。优化要基于性能测试，而不是纠结于字里行间。&lt;br&gt;&lt;br&gt;19. 最好的工具是纸笔;其次好的是markdown。&lt;br&gt;&lt;br&gt;20. leader问任务时间，若答不上来，可能是任务拆分还不够细。&lt;br&gt;&lt;br&gt;21. 宁可多算一周，不可少估一天。过于“乐观”容易让boss受惊吓。&lt;br&gt;&lt;br&gt;22. 最有用的语言是English。其次的可能是Python。&lt;br&gt;&lt;br&gt;23. 百闻不如一见。画出结果，一目了然。调试耗时将大大缩短。&lt;br&gt;&lt;br&gt;24. 资源、代码应一道受版本管理。资源匹配错误远比代码匹配错误更难排查。&lt;br&gt;&lt;br&gt;25. 不要基于想象开发， 要基于原型开发。原型的价值是快速验证想法，帮大家节省时间。&lt;br&gt;&lt;br&gt;26. 序列化首选明文文本 。诸如二进制、混淆、加密、压缩等等有需要时再加。&lt;br&gt;&lt;br&gt;27. 编译器永远比你懂微观优化。只能向它不擅长的方向努力。&lt;br&gt;&lt;br&gt;28. 不要定过大、过远、过细的计划。即使定了也没有用。&lt;br&gt;&lt;br&gt;29. 至少半数时间将花在集成上。时间，时间，时间总是不够。&lt;br&gt;&lt;br&gt;30. 与主流意见/方法/风格/习惯相悖时，先检讨自己最可靠。&lt;br&gt;&lt;br&gt;31. 出现bug主动查，不管是不是你的。这能让你业务能力猛涨、个人形象飙升; 如果你的bug被别人揪出来.....呵呵，那你会很被动～≧﹏≦&lt;br&gt;&lt;br&gt;32. 不知怎么选技术书时就挑薄的。起码不会太贵，且你能看完。&lt;br&gt;&lt;br&gt;33. git是最棒的。简单，可靠，免费。&lt;br&gt;&lt;br&gt;34. 仅对“可预测的非理性”抛断言。&lt;br&gt;&lt;br&gt;35. Log要写时间与分类。并且要能重定向输出。&lt;br&gt;&lt;br&gt;36. 注释是稍差的文档。更好的是清晰的命名。让代码讲自己的故事。&lt;br&gt;&lt;br&gt;37. 造轮子是很好的锻炼方法。前提是你见过别的轮子。&lt;br&gt;&lt;br&gt;38. code review最好以小组/结对的形式。对业务有一定了解，建议会更有价值（但不绝对）。而且不会成为负担。管理员个人review则很容易成team的瓶颈。&lt;br&gt;&lt;br&gt;39. 提问前先做调研。问不到点上既被鄙视，又浪费自己的时间。&lt;br&gt;&lt;br&gt;40. 永远别小看程序媛(╯3╰)</textarea>


<div class="zh-summary summary clearfix">

本来只是分享几条看法，没想到会有这么多人喜欢。我再补充一些，希望能对进阶中的程序朋友有帮助。手机敲得，比较凌乱。作为个人意见仅供参考。 1.重构是程序员的主力技能。 2.工作日志能提升脑容量。 3.先用profiler调查，才有脸谈优化。 4.注释贵精不贵多…

<a href="/question/36426051/answer/76031743" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-12-09" target="_blank" href="/question/36426051/answer/76031743">编辑于 2016-02-16</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6777532"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>150 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="15" data-type="Answer">
<link itemprop="url" href="/question/23400374/answer/24543868">
<meta itemprop="answer-id" content="5090723" />
<meta itemprop="answer-url-token" content="24543868" />
<meta itemprop="answerCount" content="107" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/23400374" target="_blank" data-id="1541539" data-za-element-name="Title">
十五言这样赤裸裸地抄袭 Medium，能被人们接受么？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/23400374/answer/24543868">
<!-- <meta itemprop="answer-id" content="5090723">
<meta itemprop="answer-url-token" content="24543868"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3353</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3353</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$midare"
target="_blank" href="/people/midare"
>孙北吉</a></span><span title="热爱钢琴的伪宅" class="bio">
热爱钢琴的伪宅
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3353" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3353</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1541539" data-action="/answer/content" data-author-name="孙北吉" data-entry-url="/question/23400374/answer/24543868">

<textarea hidden class="content">&lt;img src=&quot;https://pic4.zhimg.com/911152687c5739d67128138d45209733_b.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;200&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic4.zhimg.com/911152687c5739d67128138d45209733_r.jpg&quot;&gt;本来，我准备了很多截图来说明十五言与 Medium 的相同，那阵势看起来一定能得到很多赞，但都是嚼舌根，让人看了除了爽，也没太大意思。我想认真地说说我的想法：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/69e3f847236c2257d925ff11cbb14cc4_b.jpg&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;1454&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1200&quot; data-original=&quot;https://pic1.zhimg.com/69e3f847236c2257d925ff11cbb14cc4_r.jpg&quot;&gt;十五言（上）与 Medium（下）的样式表，&lt;b&gt;注意十五言在复制后者的样式以后，在下面又增写了一个 font-size。&lt;/b&gt;&lt;br&gt;&lt;br&gt;我们学院和新媒体沾边，下面有游戏技术、艺术专业。在去年还是前年的毕设展映上，我亲眼见到有个游戏作品从概念到美术都照搬了 Kingdom Rush 那款魔幻风格的塔防游戏。我当时就错愕地向制作者提问这是怎么回事。结局肯定如你所知，他们说着「时间不够…」「我们很喜欢…」，当然，我也无法再追问下去。&lt;br&gt;&lt;br&gt;我最害怕的是——你看，上面我用的那个「当然」——我感到全场、包括我在内，都不由自主的产生了一种「理解的力量」，这种力量压着所有人的脑袋，告诉我们「这有什么关系…」。&lt;br&gt;&lt;br&gt;现在，我感到了这种力量影响了一些回答——至少影响着姬十三老师，还有十五言团队的&lt;b&gt;所有人&lt;/b&gt;。&lt;br&gt;&lt;br&gt;十五言比起之前那些抄袭 Medium 的团队来说，最特别的，就是带上了「果壳」「姬十三」这些名号。我实在、真的难以想象我高中以来常看的、应该说是国内科普做的最好的网站的团队，正做着和我们班一些同学在 HTML 课结课作业里一样的事情——&lt;b&gt;下载一个国外网站的所有前端代码，把上面的英文换成中文。更恶劣的是，那些同学也许并没有指望得到好成绩，而十五言却一定希冀能够得到用户的肯定，也许以后在商业上有更好的表现，或者说——挣到钱！？&lt;/b&gt;&lt;br&gt;&lt;br&gt;一个已经干出抄袭事情的产品，还有什么资格谈理想呢？不就是想快些发展、抢占用户还有培养用户习惯……这些老一套吗，&lt;b&gt;最后呢，不就是想挣钱吗？&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/3ae9b0f0c709bd39df1fb6928b008695_b.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;150&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic2.zhimg.com/3ae9b0f0c709bd39df1fb6928b008695_r.jpg&quot;&gt;我就是纳闷，卧龙传说可以被作为笑料，于正「借鉴」琼瑶又掀起了一场风暴，为什么中国互联网行业就是能、总是能得到一个更多的优待？像素级的拷贝就是打着学习、吸取经验的旗号，是「可以被理解的、值得同情的、新产品创业路上必经的一步」？十五言就能抬着高贵的头颅，说着「我们有一个好团队」？&lt;br&gt;&lt;br&gt;在文学、作曲、绘画、摄影这些文艺领域；在论文写作，考试这些学术领域。一旦被发现了抄袭的行为，先不说触犯法律，&lt;b&gt;犯错者就已经是会身败名裂，在这个行业混不下去的啊！&lt;/b&gt;十五言团队的各位，你们肯定是觉得，自己在中国互联网这个环境是还能混下去的吧——唉，是啊，是能混下去不是吗…&lt;br&gt;&lt;br&gt;姬十三老师说：&lt;br&gt;&lt;blockquote&gt;产品形态上，现在的版本就是Medium的拷贝猫，是一个实验阶段产品。接下来，我们会针对中文环境做许多创新，一点一点改进，最终让十五言成为最好的产品。&lt;/blockquote&gt;&lt;br&gt;我知道，这又要变成一个「开始完全抄袭，然后慢慢因为中国的环境不同，产生出很多微创新…最后和 Medium 不是那么相同的产品」的故事。&lt;b&gt;那为什么，为什么不能先做出那「一点一点改进」，做出一个至少没这么像素级抄袭的产品，再来上线呢？&lt;/b&gt;&lt;br&gt;&lt;br&gt;琼瑶在公开信里，想让「借鉴」她《梅花烙》的《宫锁连城》立刻停播，&lt;b&gt;为什么我们就不能要求「十五言」立刻下线？&lt;/b&gt;为什么我们还要求着他们发放激活码，一个完全和国外产品相同的产品的激活码？&lt;b&gt;为什么我们还要用这个产品？&lt;/b&gt;&lt;br&gt;&lt;br&gt;我想再说一遍，十五言现在还大大方方地摆在那里，&lt;b&gt;不就是想快些发展、抢占用户还有培养用户习惯……这些老一套吗，最后呢，不就是想挣钱吗？&lt;/b&gt;&lt;br&gt;&lt;br&gt;姬十三老师还说：&lt;br&gt;&lt;blockquote&gt;我们的使命就是创造一个合适的机制去展现这些写作和思考背后的光芒。&lt;/blockquote&gt;&lt;b&gt;恶心不恶心啊！&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/b5590c59206e371a8acf20645f4e2571_b.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;200&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic2.zhimg.com/b5590c59206e371a8acf20645f4e2571_r.jpg&quot;&gt;说真的，我作为一个以后很可能从事前端行业的本科生，真的难以想象如果我怀着十二分热忱来到了一个企业，第一份活计也许竟然是要抄袭、重构一个国外的网站，并且还是一个上线的商业项目。&lt;br&gt;&lt;br&gt;姬十三自己也许不写代码，我就想问问那些亲自重构 Medium 代码的工程师：哥哥姐姐，你们干这活的时候，到底是什么心情啊，是因为想拿工钱？还是真的觉得这样的行为可以接受？一个在其他任何领域都不能接受的行为，在自己干的行当就可以被接受？&lt;br&gt;&lt;br&gt;我自己也做过 App，做过小游戏，我在编译上线的时候、收到正面反馈的时候，真的是非常非常开心，收到负面评价的时候，也真的是特别难过…姬十三老师、十五言团队，尤其是里面写代码的前辈们，我们同为写写代码的，你们在上线十五言的时候，也会开心吗？看到知乎这里这么多负面评价，也会难过吗？&lt;br&gt;&lt;br&gt;也许你们可以劝劝姬十三老师下线十五言，从下一刻开始亲自、立刻修改界面呢？（我知道公司有规矩，做事有程序）&lt;br&gt;&lt;br&gt;我觉得我国的互联网环境虽然糟糕，真的也不应该这样糟糕，即使真的有这样糟糕，也不应该带头让这样的糟糕发生下去吧…？&lt;br&gt;&lt;br&gt;真的，我觉得十五言团队现在可以马上做的就是：&lt;b&gt;赶紧先把现在的十五言下线吧，真丢人啊！&lt;/b&gt;&lt;br&gt;&lt;br&gt;-&lt;br&gt;&lt;br&gt;另外有个回答说：&lt;br&gt;&lt;blockquote&gt;我只觉得看见一众眼睛血红的面颅，满满的写着两个字——吃人。&lt;/blockquote&gt;我知道一面倒的言论里，肯定会有「冷静和观望」的声音…但是，究竟谁才是两眼放着贪婪的血光，满满地写着两个字——份额（时机、机遇）来吃用户、想吃高端用户的面颅啊…&lt;br&gt;&lt;br&gt;我们这帮啥也做不了的用户呢？用脚投票，十五言一天还是和 Medium 一模一样的样子，就一天别去用呗。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic4.zhimg.com/911152687c5739d67128138d45209733_200x112.jpg" data-rawwidth="600" data-rawheight="200" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic4.zhimg.com/911152687c5739d67128138d45209733_r.jpg">
本来，我准备了很多截图来说明十五言与 Medium 的相同，那阵势看起来一定能得到很多赞，但都是嚼舌根，让人看了除了爽，也没太大意思。我想认真地说说我的想法： 十五言（上）与 Medium（下）的样式表，<b>注意十五言在复制后者的样式以后，在下面又增写了一个…</b>

<a href="/question/23400374/answer/24543868" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-04-16" target="_blank" href="/question/23400374/answer/24543868">编辑于 2015-02-04</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1541539"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>214 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="16" data-type="Answer">
<link itemprop="url" href="/question/22715390/answer/22368482">
<meta itemprop="answer-id" content="4149207" />
<meta itemprop="answer-url-token" content="22368482" />
<meta itemprop="answerCount" content="66" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/22715390" target="_blank" data-id="1266882" data-za-element-name="Title">
开发一个 Flappy Bird 需要多少行代码，多少时间？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/22715390/answer/22368482">
<!-- <meta itemprop="answer-id" content="4149207">
<meta itemprop="answer-url-token" content="22368482"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3258</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3258</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$zuo-wen"
target="_blank" href="/people/zuo-wen"
>左文</a></span><span title="iOS/Android/Cocos开发者" class="bio">
iOS/Android/Cocos开发者
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3258" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3258</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1266882" data-action="/answer/content" data-author-name="左文" data-entry-url="/question/22715390/answer/22368482">

<textarea hidden class="content">&lt;p&gt;&lt;b&gt;网上找到一篇文章，主场景300左右行代码，一天时间做出来，你信么？&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;原文链接： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/touchsnow/article/details/19071961&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;flappy bird游戏源代码揭秘和下载&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;————————————————————————————————————&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;背景：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;最近火爆全球的游戏flappy bird让笔者叹为观止，于是花了一天的时间山寨了一个一模一样的游戏，现在把游戏的思路和源码分享出来，代码是基于javascript语言，cocos2d-x游戏引擎，cocos2d-x editor手游开发工具完成的，请读者轻砸；&lt;/p&gt;&lt;p&gt;ps：运行demo必须配置好cocos2d-x editor，暂不支持其他工具；&lt;u&gt;还有demo是跨平台的，可移植运行android，ios，html5移动系统等，csdn博客里会介绍代码如何移植，请持续关注；&lt;/u&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;Android Apk下载演示：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;暂时先移植到android平台&lt;/p&gt;&lt;p&gt;下载地址： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//share.weiyun.com/cac18d8c58d40bf2401b3fdeeb6bcb2f&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;share.weiyun.com/cac18d&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8c58d40bf2401b3fdeeb6bcb2f&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;代码下载：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;  csdn下载：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//download.csdn.net/detail/touchsnow/6912707&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;download.csdn.net/detai&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;l/touchsnow/6912707&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;  百度云盘：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1pJnWDb9&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1pJnWDb&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;  金山快盘 ：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.kuaipan.cn/file/id_25348935635745384.htm%3Fsource%3D1&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;kuaipan.cn/file/id_2534&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8935635745384.htm?source=1&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;代码如何移植到各平台：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;Android：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/touchsnow/article/details/19176091&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.csdn.net/touchsnow&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/article/details/19176091&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;html5:       &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.makeapp.co/%3Fp%3D245&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.makeapp.co/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;p=245&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;效果图：&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/765282dd955615781212934f058aba5a_b.jpg&quot; data-rawwidth=&quot;1355&quot; data-rawheight=&quot;706&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1355&quot; data-original=&quot;https://pic3.zhimg.com/765282dd955615781212934f058aba5a_r.jpg&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/2684b9be0357c9fec79833c280c72294_b.jpg&quot; data-rawwidth=&quot;1352&quot; data-rawheight=&quot;712&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1352&quot; data-original=&quot;https://pic1.zhimg.com/2684b9be0357c9fec79833c280c72294_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;开发工具：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;   cocos2dx editor，它是开发跨平台的手机游戏工具，运行window/mac系统上，javascript脚本语言，基于cocos2d-x跨平台游戏引擎, 集合代码编辑，场景设计，动画制作，字体设计，还有粒子，物理系统，地图等等的，而且调试方便，和实时模拟；&lt;/p&gt;&lt;p&gt;cocos2dx editor下载，介绍和教程：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/touchsnow/article/details/19070665&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.csdn.net/touchsnow&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/article/details/19070665&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;；&lt;/p&gt;&lt;p&gt;cocos2dx editor官方博客：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.makeapp.co/%3Fcat%3D8&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.makeapp.co/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;cat=8&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;；&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;思路和源码：&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;  1 场景设计MainLayer.ccbx，如下图；主要分三层，开始场景、主场景、游戏结束场景，通过显示隐藏控制三个场景的切换。&lt;/p&gt;&lt;p&gt;   MainLayer.ccbx代码&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;

&amp;lt;Document
        jsControlled=&quot;true&quot;
        jsController=&quot;MainLayer&quot;
        resolution=&quot;default&quot;
        &amp;gt;

    &amp;lt;Resolutions&amp;gt;
        &amp;lt;Resolution centeredOrigin=&quot;false&quot; ext=&quot;iphone&quot; height=&quot;1280&quot; width=&quot;720&quot; name=&quot;default&quot; scale=&quot;1&quot;/&amp;gt;
        &amp;lt;Resolution centeredOrigin=&quot;false&quot; ext=&quot;iphone&quot; height=&quot;720&quot; width=&quot;1280&quot; name=&quot;default1&quot; scale=&quot;1&quot;/&amp;gt;
    &amp;lt;/Resolutions&amp;gt;

    &amp;lt;Animations&amp;gt;
        &amp;lt;Animation autoPlay=&quot;true&quot;
                   id=&quot;0&quot;
                   name=&quot;Default Timeline&quot;
                   length=&quot;10&quot;
                   chainedId=&quot;0&quot;
                   offset=&quot;0.0&quot;
                   position=&quot;0.0&quot;
                   resolution=&quot;30&quot;
                   scale=&quot;128&quot;&amp;gt;
            &amp;lt;CallbackChannel&amp;gt;
            &amp;lt;/CallbackChannel&amp;gt;
            &amp;lt;SoundChannel&amp;gt;
            &amp;lt;/SoundChannel&amp;gt;
        &amp;lt;/Animation&amp;gt;

    &amp;lt;/Animations&amp;gt;
    &amp;lt;Layer
            positionX=&quot;0&quot; positionY=&quot;0.0&quot;
            sizeType=&quot;Percent&quot;
            width=&quot;100&quot; height=&quot;100&quot;
            anchorPointX=&quot;0.5&quot; anchorPointY=&quot;0.5&quot; ignoreAnchorPoint=&quot;true&quot;
            scaleX=&quot;1&quot; scaleY=&quot;1&quot;
            &amp;gt;

      &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;720.0&quot; height=&quot;1280.0&quot; positionX=&quot;0&quot; positionY=&quot;0&quot; anchorPointX=&quot;0&quot;
                                         anchorPointY=&quot;0&quot; src=&quot;Resources/bg.png&quot; name=&quot;&quot; var=&quot;&quot; target=&quot;None&quot; scaleX=&quot;1&quot; scaleY=&quot;1&quot; visible=&quot;true&quot;/&amp;gt;
      &amp;lt;LayerColor positionType=&quot;LeftBottom&quot; width=&quot;720&quot; height=&quot;1280&quot; positionX=&quot;0&quot; positionY=&quot;0&quot; anchorPointX=&quot;0&quot;
                  anchorPointY=&quot;0&quot; color=&quot;#fff2e8ff&quot; visible=&quot;false&quot;/&amp;gt;
      &amp;lt;Menu positionType=&quot;LeftBottom&quot; width=&quot;40&quot; height=&quot;40&quot; positionX=&quot;356.0&quot; positionY=&quot;237.0&quot; anchorPointX=&quot;0.5&quot;
              anchorPointY=&quot;0.5&quot; scaleX=&quot;2.4&quot; scaleY=&quot;1.725&quot;&amp;gt;
      &amp;lt;/Menu&amp;gt;
      &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;840.0&quot; height=&quot;281.0&quot; positionX=&quot;0&quot; positionY=&quot;0&quot; anchorPointX=&quot;0&quot;
                                         anchorPointY=&quot;0&quot; src=&quot;Resources/ground.png&quot; var=&quot;ground&quot; target=&quot;Doc&quot;/&amp;gt;
      &amp;lt;Node positionType=&quot;LeftBottom&quot; width=&quot;40&quot; height=&quot;40&quot; positionX=&quot;800&quot; positionY=&quot;250&quot; anchorPointX=&quot;0&quot;
            anchorPointY=&quot;0&quot; var=&quot;hoseNode&quot; target=&quot;Doc&quot;&amp;gt;
        &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;86.0&quot; height=&quot;60.0&quot; positionX=&quot;-500&quot; positionY=&quot;400&quot; anchorPointX=&quot;0.5&quot;
                                         anchorPointY=&quot;0.5&quot; src=&quot;Resources/flappy_packer.plist/bird3.png&quot; var=&quot;test&quot; target=&quot;Doc&quot; visible=&quot;false&quot;/&amp;gt;
        &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;86.0&quot; height=&quot;60.0&quot; positionX=&quot;-550&quot; positionY=&quot;500&quot; anchorPointX=&quot;0.5&quot;
                anchorPointY=&quot;0.5&quot; src=&quot;Resources/flappy_packer.plist/bird1.png&quot; var=&quot;bird&quot; target=&quot;Doc&quot; scaleX=&quot;1&quot; scaleY=&quot;1&quot; rotation=&quot;0&quot; visible=&quot;true&quot;/&amp;gt;
      &amp;lt;/Node&amp;gt;
      &amp;lt;Node positionType=&quot;LeftBottom&quot; width=&quot;40&quot; height=&quot;40&quot; positionX=&quot;303.0&quot; positionY=&quot;500&quot; anchorPointX=&quot;0.5&quot;
            anchorPointY=&quot;0.5&quot; var=&quot;readyNode&quot; target=&quot;Doc&quot; visible=&quot;true&quot;&amp;gt;
        &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;508.0&quot; height=&quot;158.0&quot; positionX=&quot;95.0&quot; positionY=&quot;584.0&quot; anchorPointX=&quot;0.5&quot;
                                         anchorPointY=&quot;0.5&quot; src=&quot;Resources/flappy_packer.plist/getready.png&quot;/&amp;gt;
        &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;286.0&quot; height=&quot;246.0&quot; positionX=&quot;73.0&quot; positionY=&quot;236.0&quot; anchorPointX=&quot;0.5&quot;
                                         anchorPointY=&quot;0.5&quot; src=&quot;Resources/flappy_packer.plist/click.png&quot;/&amp;gt;
      &amp;lt;/Node&amp;gt;
      &amp;lt;Node positionType=&quot;LeftBottom&quot; width=&quot;40&quot; height=&quot;40&quot; positionX=&quot;300&quot; positionY=&quot;500&quot; anchorPointX=&quot;0.5&quot;
            anchorPointY=&quot;0.5&quot; var=&quot;overNode&quot; target=&quot;Doc&quot; visible=&quot;true&quot;&amp;gt;
        &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;590.0&quot; height=&quot;298.0&quot; positionX=&quot;72.0&quot; positionY=&quot;219.0&quot; anchorPointX=&quot;0.5&quot;
                                         anchorPointY=&quot;0.5&quot; src=&quot;Resources/flappy_packer.plist/base.png&quot;&amp;gt;
          &amp;lt;Sprite positionType=&quot;LeftBottom&quot; width=&quot;508.0&quot; height=&quot;158.0&quot; positionX=&quot;286.0&quot; positionY=&quot;458.0&quot; anchorPointX=&quot;0.5&quot;
                                         anchorPointY=&quot;0.5&quot; src=&quot;Resources/flappy_packer.plist/gameover.png&quot;/&amp;gt;
        &amp;lt;/Sprite&amp;gt;
        &amp;lt;Menu positionType=&quot;LeftBottom&quot; width=&quot;40&quot; height=&quot;40&quot; positionX=&quot;0&quot; positionY=&quot;0&quot; anchorPointX=&quot;0.5&quot;
              anchorPointY=&quot;0.5&quot;&amp;gt;
          &amp;lt;MenuItem positionType=&quot;LeftBottom&quot; width=&quot;290&quot; height=&quot;176&quot; positionX=&quot;-65.0&quot; positionY=&quot;-92.0&quot; anchorPointX=&quot;0.5&quot;
                    anchorPointY=&quot;0.5&quot; normalImage=&quot;Resources/flappy_packer.plist/start.png&quot; target=&quot;Doc&quot; onClick=&quot;onStartClicked&quot;/&amp;gt;
          &amp;lt;MenuItem positionType=&quot;LeftBottom&quot; width=&quot;290&quot; height=&quot;176&quot; positionX=&quot;230.0&quot; positionY=&quot;-92.0&quot; anchorPointX=&quot;0.5&quot;
                    anchorPointY=&quot;0.5&quot; target=&quot;Doc&quot; normalImage=&quot;Resources/flappy_packer.plist/grade.png&quot; onClick=&quot;onGradeClicked&quot;/&amp;gt;
        &amp;lt;/Menu&amp;gt;
      &amp;lt;/Node&amp;gt;
    &amp;lt;/Layer&amp;gt;


&amp;lt;/Document&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;2 代码编写MainLayer.js&lt;/p&gt;&lt;p&gt;   首先，小鸟在向前飞，其实是底部的路和水管在向左移动，相对的你就感觉小鸟在向右飞了；路循环移动代码：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;MainLayer.prototype.groundRun = function ()
{
    var action1 = cc.MoveTo.create(0.5, cc.p(-120, 0));
    var action2 = cc.MoveTo.create(0, cc.p(0, 0));
    var action = cc.Sequence.create(action1, action2);
    this.ground.runAction(cc.RepeatForever.create(action));
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;   初始化高低不同的水管，每一关卡都由上下两水管和空隙组成。总长度相同，空隙也一定，随机取下面水管的长度，就形成错落有致的水管关卡；&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;MainLayer.prototype.newHose = function (num)
{
    var hoseHeight = 830;
    var acrossHeight = 300;
    var downHeight = 100 + getRandom(400);
    var upHeight = 1100 - downHeight - acrossHeight;

    var hoseX = 400 * num;

    var HoseName = FP_MAIN_TEXTURE.HOSE;
    var ccSpriteDown = cc.Sprite.createWithSpriteFrameName(HoseName[0]);
    ccSpriteDown.setZOrder(1);
    ccSpriteDown.setAnchorPoint(cc.p(0, 0));
    ccSpriteDown.setPosition(cc.p(hoseX, 0));
    ccSpriteDown.setScaleY(downHeight / hoseHeight);

    var ccSpriteUp = cc.Sprite.createWithSpriteFrameName(HoseName[1]);
    ccSpriteUp.setZOrder(1);
    ccSpriteUp.setAnchorPoint(cc.p(0, 0));
    ccSpriteUp.setPosition(cc.p(hoseX, downHeight + acrossHeight));
    ccSpriteUp.setScaleY(upHeight / hoseHeight);

    this.hoseNode.addChild(ccSpriteDown);
    this.hoseNode.addChild(ccSpriteUp);
    this.hoseSpriteList.push(ccSpriteDown);
    this.hoseSpriteList.push(ccSpriteUp);
    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;  一开始进入游戏让底部路不断移动，初始化水管，显示准备游戏场景；&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;MainLayer.prototype.onEnter = function ()
{
    cc.AnimationCache.getInstance().addAnimations(&quot;Resources/flappy_frame.plist&quot;);
    this.groundRun();
    this.ground.setZOrder(10);
    this.birdReadyAction();
    this.bird.setZOrder(20);
    this.readyNode.setVisible(true);
    this.overNode.setVisible(false);

    for (var i = 0; i &amp;lt; 30; i++) {
        this.newHose(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt; 点击屏幕，小鸟向上飞60dp,然后更快的速度下落（移动动画），同时闪动翅膀（帧动画）；&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;MainLayer.prototype.birdRiseAction = function ()
{
    var riseHeight = 60;
    var birdX = this.bird.getPositionX();
    var birdY = this.bird.getPositionY();
    var time = birdY / 600;

    var actionFrame = cc.Animate.create(cc.AnimationCache.getInstance().getAnimation(&quot;fly&quot;));
    var flyAction = cc.Repeat.create(actionFrame, 90000);
    var riseAction1 = cc.MoveTo.create(0.2, cc.p(birdX, birdY + riseHeight));
    var riseAction2 = cc.RotateTo.create(0, -30);
    var riseAction = cc.Spawn.create(riseAction1, riseAction2);
    var fallAction1 = cc.MoveTo.create(time, cc.p(birdX, 50));
    var fallAction2 = cc.Sequence.create(cc.DelayTime.create(time / 6), cc.RotateTo.create(0, 30));
    var fallAction = cc.Spawn.create(fallAction1, fallAction2);

    this.bird.stopAllActions();
    this.bird.runAction(cc.Spawn.create(
            cc.Sequence.create(riseAction, cc.DelayTime.create(0.1), fallAction),
            flyAction)
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt; 检测碰撞，如果小鸟碰到地面和水管，发生碰撞，这里碰撞直接用cocos2d-x 里面的图片和图片交叉函数 cc.rectIntersectsRect；&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;MainLayer.prototype.checkCollision = function ()
{
    if (this.bird.getPositionY() &amp;lt; 60) {
        cc.log(&quot;floor&quot;);
        this.birdFallAction();
        return;
    }
    for (var i = 0; i &amp;lt; this.hoseSpriteList.length; i++) {
        var hose = this.hoseSpriteList[i];
        if (!this.isInScreen(hose)) {
            // continue;
        }

        if (cc.rectIntersectsRect(hose.getBoundingBox(), this.bird.getBoundingBox())) {
            cc.log(&quot;hose positionX==&quot; + hose.getBoundingBox().x);
            cc.log(&quot;this.bird positionX==&quot; + this.bird.getBoundingBox().x);
            cc.log(&quot;i==&quot; + i);
            cc.log(&quot;birdFallAction&quot;);
            this.birdFallAction();
            return;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;碰撞后，小鸟先下落，游戏结束场景显示；&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;MainLayer.prototype.birdFallAction = function ()
{
    this.gameMode = OVER;
    this.bird.stopAllActions();
    this.ground.stopAllActions();
    var birdX = this.bird.getPositionX();
    var birdY = this.bird.getPositionY();
    var time = birdY / 2000;
    this.bird.runAction(cc.Sequence.create(
            cc.DelayTime.create(0.1),
            cc.Spawn.create(cc.RotateTo.create(time, 90), cc.MoveTo.create(time, cc.p(birdX, 50))))
    );
    this.overNode.setVisible(true);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;游戏的难度主要在于多个水管的移动，小鸟触摸动画，检测碰撞;&lt;br&gt;&lt;br&gt;&lt;p&gt;再次提示代码下载地址：&lt;/p&gt;&lt;p&gt;  csdn下载：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//download.csdn.net/detail/touchsnow/6912707&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;download.csdn.net/detai&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;l/touchsnow/6912707&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;  百度云盘：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1pJnWDb9&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1pJnWDb&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;  金山快盘 ：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.kuaipan.cn/file/id_25348935635745384.htm%3Fsource%3D1&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;kuaipan.cn/file/id_2534&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8935635745384.htm?source=1&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;楼下有求图片的，地址：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//share.weiyun.com/d73228232bc0b1ff99f553afff58b7a2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;share.weiyun.com/d73228&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;232bc0b1ff99f553afff58b7a2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;更多内容：&lt;/b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/touchsnow/article/details/19071961&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.csdn.net/touchsnow&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/article/details/19071961&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;官方博客：&lt;/b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.makeapp.co/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.makeapp.co/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;联系笔者：&lt;/b&gt;zuowen@makeapp.co （邮箱）&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;想了解其他游戏开发可关注：&lt;/b&gt;&lt;a href=&quot;http://www.zhihu.com/question/23038067&quot; class=&quot;internal&quot;&gt;消灭星星（Popstar）游戏是怎么开发实现的？难不难？经常看到有人玩这个，很好奇里面的逻辑，拜求高手解答！&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;附录：其他游戏例子学习 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/touchsnow/article/details/19070665&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.csdn.net/touchsnow&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/article/details/19070665&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;；&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/baf8423a2d074f5475639ad92b4b4ee6_b.jpg&quot; data-rawwidth=&quot;1364&quot; data-rawheight=&quot;738&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1364&quot; data-original=&quot;https://pic3.zhimg.com/baf8423a2d074f5475639ad92b4b4ee6_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/0ab40199df16155dee739e43d9b366f2_b.jpg&quot; data-rawwidth=&quot;1360&quot; data-rawheight=&quot;726&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1360&quot; data-original=&quot;https://pic3.zhimg.com/0ab40199df16155dee739e43d9b366f2_r.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/5994e6b7a39277102b4afb9304252733_b.jpg&quot; data-rawwidth=&quot;1358&quot; data-rawheight=&quot;728&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1358&quot; data-original=&quot;https://pic4.zhimg.com/5994e6b7a39277102b4afb9304252733_r.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/abdee6f10d30cda1edb6aff4c8d07b10_b.jpg&quot; data-rawwidth=&quot;1361&quot; data-rawheight=&quot;727&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1361&quot; data-original=&quot;https://pic1.zhimg.com/abdee6f10d30cda1edb6aff4c8d07b10_r.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/6fd502bb7517157be3293f9417c10785_b.jpg&quot; data-rawwidth=&quot;1358&quot; data-rawheight=&quot;728&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1358&quot; data-original=&quot;https://pic2.zhimg.com/6fd502bb7517157be3293f9417c10785_r.jpg&quot;&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/765282dd955615781212934f058aba5a_200x112.jpg" data-rawwidth="1355" data-rawheight="706" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/765282dd955615781212934f058aba5a_r.jpg">
<b>网上找到一篇文章，主场景300左右行代码，一天时间做出来，你信么？</b><b>原文链接： <a href="//link.zhihu.com/?target=http%3A//blog.csdn.net/touchsnow/article/details/19071961" class=" wrap external" target="_blank" rel="nofollow noreferrer">flappy bird游戏源代码揭秘和下载<i class="icon-external"></i></a></b> <b>————————————————————————————————————</b><b>背景：</b>最近火爆全球的游戏flappy bird让笔者叹为观止，于是花了…

<a href="/question/22715390/answer/22368482" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-02-11" target="_blank" href="/question/22715390/answer/22368482">编辑于 2014-04-01</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1266882"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>163 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="17" data-type="Answer">
<link itemprop="url" href="/question/38331755/answer/75945686">
<meta itemprop="answer-id" content="25802476" />
<meta itemprop="answer-url-token" content="75945686" />
<meta itemprop="answerCount" content="162" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/38331755" target="_blank" data-id="7540002" data-za-element-name="Title">
为什么同样是解决一个问题，别人就能想出算法，而我却绞尽脑汁，百般尝试也不得其法？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/38331755/answer/75945686">
<!-- <meta itemprop="answer-id" content="25802476">
<meta itemprop="answer-url-token" content="75945686"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3207</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3207</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$xu-hao-82-57"
target="_blank" href="/people/xu-hao-82-57"
>许浩</a></span><span title="仍然大学生" class="bio">
仍然大学生
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3207" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3207</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7540002" data-action="/answer/content" data-author-name="许浩" data-entry-url="/question/38331755/answer/75945686">

<textarea hidden class="content">别人总是觉得我代码写得快又好，然而他们不知道&lt;br&gt;最开始我们一起学习代码的时候，老师布置的代码作业，一个简单的排序我要去图书馆找电脑找bug找一个下午，一个递归我要编三个下午，所有的题我得提前一周开始做，才能按时完成。我只认为自己做出来的东西才能拿出手。&lt;br&gt;大部分人只是该交的时候写一下结果发现写不出来，copy个别人的就完了。&lt;br&gt;最重要的就是找bug想思路的问题，那时觉得毫无错误就是出不来结果，只能一遍遍翻书，一遍遍看例题，以求能找到自己理解的不当和思维的漏洞。&lt;br&gt;有几次事前没做出来一直到交题的最后半小时才调好。&lt;br&gt;但是，每次用自己的思路和自己亲手敲的代码解决了问题，那种成就感都会把我所有的过程中全部的纠结和沮丧一扫而光。我痴迷于那种感觉，所以到现在，所有的代码我都要亲手完成。&lt;br&gt;犯过无数的低级错误，也全部凭自己的力量把他们找了出来。自己想出过各种低级算法，也全都解决了问题，后来看一些高级算法就可以瞬间了解他们的优点和思路。&lt;br&gt;现在我也算周围人眼中所谓的大神。代码有bug来找我，我一眼就看出来，因为我这种错误不知犯了多少遍。他们没有思路的问题我几分钟就想好，因为类似的问题我想了不知道多少次，自己做了多少蠢蠢的算法来解决，最后又突然在别处看到了其他解决方式，才知道自己多傻逼。&lt;br&gt;一年多了，周围的人觉得他们绞尽脑汁也写不出程序，我只能说，空手套白狼是不可能的。如今的情况是当年留下的祸根导致的。&lt;br&gt;写代码，思路是很重要的。而这些大脑方面的原因是经过不断的锤炼才可以提高的。&lt;br&gt;能写出代码的人，当遇到他们写不出的代码时，是不会停止尝试和绞尽脑汁的。而你所谓的绞尽脑汁，可能只是你以为吧，到底是看着问题发呆多，抱怨自己做不出来的时间多，还是真正在想解决方法的时间多，你自己可以回忆一下。</textarea>


<div class="zh-summary summary clearfix">

别人总是觉得我代码写得快又好，然而他们不知道 最开始我们一起学习代码的时候，老师布置的代码作业，一个简单的排序我要去图书馆找电脑找bug找一个下午，一个递归我要编三个下午，所有的题我得提前一周开始做，才能按时完成。我只认为自己做出来的东西才能…

<a href="/question/38331755/answer/75945686" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/38331755/answer/75945686">发布于 2015-12-09</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7540002"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>153 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="18" data-type="Answer">
<link itemprop="url" href="/question/51997376/answer/129065505">
<meta itemprop="answer-id" content="47138512" />
<meta itemprop="answer-url-token" content="129065505" />
<meta itemprop="answerCount" content="26" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/51997376" target="_blank" data-id="13016998" data-za-element-name="Title">
如何看待哔哩哔哩的开源 HTML5 播放器内核 flv.js?
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/51997376/answer/129065505">
<!-- <meta itemprop="answer-id" content="47138512">
<meta itemprop="answer-url-token" content="129065505"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3046</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3046</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$MagicNumber"
target="_blank" href="/people/MagicNumber"
>谦谦</a></span><span title="naive coder" class="bio">
naive coder
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3046" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3046</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="13016998" data-action="/answer/content" data-author-name="谦谦" data-entry-url="/question/51997376/answer/129065505">

<textarea hidden class="content">谢邀，抱歉拖延到现在才来回答问题。&lt;br&gt;利益相关：flv.js 作者&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Bilibili/flv.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - Bilibili/flv.js: HTML5 FLV Player&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;flv.js 做了三件事：&lt;br&gt;1. HTML5 原生仅支持播放 mp4/webm 格式，flv.js 实现了在 HTML5 上播放 FLV 格式视频&lt;br&gt;2. 使 Bilibili 网页端平滑过度到 HTML5 播放器，历史遗留不再是障碍&lt;br&gt;3. 对于视频直播，在 HTML5 上支持了延迟极低 HTTP FLV 播放，解开网页端直播对 Flash 的依赖&lt;br&gt;&lt;br&gt;一些人问我为什么不直接采用 MP4 格式，并表示对 FLV 格式的厌恶&lt;br&gt;这个问题一方面是历史遗留问题，由于视频网站前期完全依赖 Flash 播放而选择 FLV 格式；&lt;br&gt;&lt;br&gt;另一方面，如果仔细研究过 FLV/MP4 封装格式，你会发现 FLV 格式非常简洁，而 MP4 内部 box 种类繁杂，结构复杂固实而又有太多冗余数据。FLV 天生具备流式特征适合网络流传输，而 MP4 这种使用最广泛的存储格式，设计却并不一定优雅。&lt;br&gt;&lt;br&gt;这里我不想谈论多媒体封装格式的优劣。flv.js 是在 HTML5 上实现自定义视频格式播放的一个较好的范例，充分利用了 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//w3c.github.io/media-source/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Media Source Extensions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;, Fetch API 以及 ECMAScript 6 等 HTML5/Web 上较新的技术，并考验着这些 API：开发期间发现 Edge 对 Fetch API 的支持存在 bug，发现各个浏览器在 MSE 的实现细节上都有一些差异和问题，发现 Safari 的 MSE 实现健壮度较差（滑稽）&lt;br&gt;&lt;br&gt;在 flv.js 项目初期，Media Source Extensions (MSE) 在国内处于无人问津的状态；而 MSE API 已经过近 4 年的发展演进，是 HTML5 多媒体相关最重要的 API 之一。MSE 是 HTML5 上实现自定义格式播放的关键，flv.js 开源也是希望 MSE 能被更广泛地了解和应用。&lt;br&gt;&lt;br&gt;最后，Chrome 等浏览器正在加速 Flash 淘汰的进程，HTML5 video 由各浏览器厂商实现了高性能硬解，MSE 作为媒体格式扩展的补充，flv.js 证明了当前 HTML5 多媒体技术已超越陈旧的 Flash。</textarea>


<div class="zh-summary summary clearfix">

谢邀，抱歉拖延到现在才来回答问题。 利益相关：flv.js 作者 <a href="//link.zhihu.com/?target=https%3A//github.com/Bilibili/flv.js" class=" wrap external" target="_blank" rel="nofollow noreferrer">GitHub - Bilibili/flv.js: HTML5 FLV Player<i class="icon-external"></i></a> flv.js 做了三件事： 1. HTML5 原生仅支持播放 mp4/webm 格式，flv.js 实现了在 HTML5 上播放 FLV 格式视频 2. 使 Bilibili 网页端平滑过度到 HTML5…

<a href="/question/51997376/answer/129065505" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/51997376/answer/129065505">发布于 2016-10-30</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-13016998"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>213 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="19" data-type="Answer">
<link itemprop="url" href="/question/53686737/answer/136076041">
<meta itemprop="answer-id" content="49953863" />
<meta itemprop="answer-url-token" content="136076041" />
<meta itemprop="answerCount" content="400" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/53686737" target="_blank" data-id="13694497" data-za-element-name="Title">
如何看待哔哩哔哩的 flv.js 作者月薪不到 5000 元？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/53686737/answer/136076041">
<!-- <meta itemprop="answer-id" content="49953863">
<meta itemprop="answer-url-token" content="136076041"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>3015</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">3015</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$excited-vczh"
target="_blank" href="/people/excited-vczh"
>vczh</a></span><span title="《C++Primer 5th》强势审校" class="bio">
《C++Primer 5th》强势审校
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="3015" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">3015</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="13694497" data-action="/answer/content" data-author-name="vczh" data-entry-url="/question/53686737/answer/136076041">

<textarea hidden class="content">这个故事告诉我们，对技术的热爱就下班的时候发泄一下，不要跟赚钱的事情搅在一起。在我国，对于初学者来说，最大的误解就是通过工作来锻炼自己。老板们说这句话跟高中老师说上了大学就可以轻松了是没有任何区别的。学习就是要课后学习，学牛逼了，你才有那份工作。哪个老板会让员工来干他们不会的事情？&lt;br&gt;&lt;br&gt;当然了，技术牛逼也不一定就非要去做最牛逼的工作不可，你也可以用牛逼的技术，做一些对别人比较难但是对自己其实很容易的工作，大幅度缩短工作时间，无限提高work life balance。你也不要担心这样就堕落了，因为你回家就可以写自己喜欢的程序了。只有自己喜欢的问题，提高难度才能提高自己。&lt;br&gt;&lt;br&gt;这样虽然在简历上其实不是那么好看，但是开心就是用（本来该赚到的）钱买的啊（逃</textarea>


<div class="zh-summary summary clearfix">

这个故事告诉我们，对技术的热爱就下班的时候发泄一下，不要跟赚钱的事情搅在一起。在我国，对于初学者来说，最大的误解就是通过工作来锻炼自己。老板们说这句话跟高中老师说上了大学就可以轻松了是没有任何区别的。学习就是要课后学习，学牛逼了，你才有那…

<a href="/question/53686737/answer/136076041" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-12-16" target="_blank" href="/question/53686737/answer/136076041">编辑于 2016-12-16</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-13694497"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>132 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="20" data-type="Answer">
<link itemprop="url" href="/question/41460230/answer/91065135">
<meta itemprop="answer-id" content="31863516" />
<meta itemprop="answer-url-token" content="91065135" />
<meta itemprop="answerCount" content="741" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/41460230" target="_blank" data-id="8791398" data-za-element-name="Title">
如何评价应届生前端人员月薪要3.3k到13k后，该公司CEO的评价？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/41460230/answer/91065135">
<!-- <meta itemprop="answer-id" content="31863516">
<meta itemprop="answer-url-token" content="91065135"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>2909</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">2909</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$wjfwzzc"
target="_blank" href="/people/wjfwzzc"
>王剑锋</a></span><span title="游标卡尺不寂寞 / 从小到大不停在INTJ与INFP间疯狂摇摆" class="bio">
游标卡尺不寂寞 / 从小到大不停在INTJ与I…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="2909" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">2909</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="8791398" data-action="/answer/content" data-author-name="王剑锋" data-entry-url="/question/41460230/answer/91065135">

<textarea hidden class="content">更新：&lt;br&gt;&lt;br&gt;贵司水军洗地完全是意料之中的行为，互联网产业发展到今天了，能不能有一点创意；瞧瞧致歉下的评论，“艺术家们”也是顾不得贵司的高雅路线了，什么品味、气质都是扯淡，损起人来也是一样的low。&lt;br&gt;&lt;br&gt;我不会再关注这件事了，只回复身边朋友的评论。&lt;br&gt;&lt;br&gt;“夫子哂之。”&lt;br&gt;&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;刘先生微博的最新置顶回复。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/0e9de27c6446ae51857da0afe6514226_b.jpg&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;1850&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic3.zhimg.com/0e9de27c6446ae51857da0afe6514226_r.jpg&quot;&gt;&lt;br&gt;我以北航一个在读学生的身份表示个人的认可，其余人怎么看是另外的事。&lt;br&gt;&lt;br&gt;至于我行文时故意选择的语气和态度，遭到了评论区不少人的语带酸味的指责，我表示——我就是成心的；这让我想起《一代宗师》里的话，“但凡一个人见不得人好，见不得人高明，是没有容人之心”。我能容你，我不介意；你不容我，我不在乎。&lt;br&gt;&lt;br&gt;但我要声明，我只是阐述了我所知道的事实，当然每个人的视角都是片面的，我心有自知；但我没有伪造，没有夸大，没有删评论。而且这些与该事件本身无关，我不想也没时间继续撕逼。刘先生致歉了，语气诚恳，我谨代表个人接受了，行则正，立则端，我达到我通过公开平台交涉的目的了，这就是我对于此事的行事作风。&lt;br&gt;&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;实名做答。利益相关：鄙人同校同院同级同学。&lt;br&gt;&lt;br&gt;该同学的回复如下：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/1e36275bb1daa47cf00a8aac7a48c63b_b.png&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;246&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/1e36275bb1daa47cf00a8aac7a48c63b_r.png&quot;&gt;&lt;br&gt;所以首先需要澄清的就是，该同学&lt;b&gt;从没有提出过3.3k一类的薪水&lt;/b&gt;，所以该同学&lt;b&gt;没有任何所谓的信誉问题&lt;/b&gt;。&lt;br&gt;&lt;br&gt;那么问题完全在这位Artand公司CEO刘强先生身上了。&lt;br&gt;&lt;br&gt;贵司的一把手在公开的平台使用了“让丫有多远滚多远”、“给脸不要脸”等侮辱性话语针对一个应届的学生，这一点首先就暴露了刘先生的素质问题。&lt;br&gt;&lt;br&gt;当然，也许是刘先生真性情，有情怀，立志高远，不拘小节，这种人也不罕见，我也挺欣赏。&lt;br&gt;&lt;br&gt;然而刘先生伪造了3.3k这样一个工资数字，如果就实习工资来说还算正常（一星期30小时左右，至少我去年大三时面MSRA、Hulu和BAT的intern时基本都在这个级别）。然而该同学即将毕业，应聘的是校招全职，如果刘先生认为北京985高校应届前端的薪水批发价还达不到10k，要么就是刘先生生性幽默，要么就是刘先生真的不懂行情，是所谓“就差一个程序员”了的CEO。&lt;br&gt;&lt;br&gt;该同学是敝校敝院前端水平不弱的妹子，在国内任何一线公司都配得上13k，虽然这个薪水在敝校敝院也就是批发价。当然也许是贵司福利好，3.3k也能让员工活在帝都安心工作；也许是贵司眼界太高，觉得敝校的学生也就是3.3k的水平。&lt;br&gt;&lt;br&gt;无论哪一种，都让鄙人这种渣渣敬而远之。我的同级同学中，有MIT发顶会paper的，有FLAG挣美刀的，有拿BAT special挣股权的，也有鄙人这种弱渣保研还兼职去创业公司赌期权的，就是没有被诬陷要价3.3k还被公然骂街的。&lt;br&gt;&lt;br&gt;虽然我不做前端， &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;前辈是我敬重的人，他最后的分析我认为非常在理。13k是市场价格，你情我愿是市场规律；鄙人的愤怒，不仅在于我的同学被质疑和辱骂，更在于我的同学们、乃至我的学校和学院被挟持在刘先生疑似发起的舆论暴力和负面营销之下，我们的声誉受到了损害。&lt;br&gt;&lt;br&gt;我的声音很弱小，但我希望刘先生能针对此事做出应有的回应，至少应当对该同学的人身攻击表达出应有的歉意。否则刘先生将失去的，可能不仅仅是敝校敝院的生源。&lt;br&gt;&lt;br&gt;以上。&lt;br&gt;&lt;br&gt;--------------------------------------------------------------------------------------------&lt;br&gt;&lt;br&gt;补充：&lt;br&gt;&lt;br&gt;1. 我不会回答任何关于该同学的任何问题，诸如为何走春招之类的；一方面我了解有限，另一方面请尊重个人选择和隐私。&lt;br&gt;&lt;br&gt;2. 关于批发价，这个是根据今年敝校敝院招生办内部发布的就业offer情况评估的，实名采样匿名发布，13k基本是均值没有问题，没有低于10k的，高的那就没边了……还没包括一些诸如户口、股权等隐性待遇。更具体的我也不会公开。&lt;br&gt;&lt;br&gt;3. 有人爆料了具体过程，我没有验证也不打算验证，大家自行参考。&lt;a href=&quot;https://www.zhihu.com/question/41460230/answer/91062910&quot; class=&quot;internal&quot;&gt;如何评价应届生前端人员月薪要3.3k到13k后，该CEO的评价？ - 飞翔的猫miao 的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;4. 欢迎就事论事。至于说我用于高傲装逼、給敝校敝院掉价之类的，第一，您跑题了，讲不清事情转而攻击态度是最常见也最low的吵架方式，我不care，也没空吵，我的时间很值钱，不止13k；第二，我周围大神云集，我深知自己乃一介庸人，高傲不起来，敝校敝院的逼格也轮不到我去支撑，何谈掉价，如果这都让您觉得我在装逼，那只能说明您所处环境眼界不高、或者您自己太弱。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/0e9de27c6446ae51857da0afe6514226_200x112.jpg" data-rawwidth="440" data-rawheight="1850" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/0e9de27c6446ae51857da0afe6514226_r.jpg">
更新： 贵司水军洗地完全是意料之中的行为，互联网产业发展到今天了，能不能有一点创意；瞧瞧致歉下的评论，“艺术家们”也是顾不得贵司的高雅路线了，什么品味、气质都是扯淡，损起人来也是一样的low。 我不会再关注这件事了，只回复身边朋友的评论。 “夫…

<a href="/question/41460230/answer/91065135" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-03-17" target="_blank" href="/question/41460230/answer/91065135">编辑于 2016-03-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-8791398"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>317 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="zm-invite-pager">

<span class="zg-gray-normal">上一页</span>








<span class="zg-gray-normal">1</span>



<span><a href="?page=2">2</a></span>



<span><a href="?page=3">3</a></span>



<span>...</span>

<span><a href="?page=50">50</a></span>



<span><a href="?page=2">下一页</a></span>

</div>

</div>
</div>

</div>
</div>


<div class="zu-main-sidebar" data-za-module="RightSideBar">

<div class="zm-side-section">
<div class="zm-side-section-inner">
<div class="topic-header-side zm-entry-head-wrap">

<div class="clearfix"><div id="zh-topic-side-head">

<a href="javascript:;" name="focus" class="zg-mr10 zu-entry-focus-button zg-btn-white" id="tf-225">取消关注</a>

<div class="zm-topic-side-followers-info">

<a href="/topic/19550901/followers"><strong>108689</strong></a> 人关注了该话题

</div>
</div></div>
<div style="margin-top: 15px;">

<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/organize">组织</a>
<span class="zg-bull">•</span>
<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/manage">管理</a>
<span class="zg-bull">•</span>

<a class="zg-link-litblue-normal" href="/topic/19550901/log">日志</a>
</div>

</div>
</div>
</div>

<div class="zm-side-section">
<div class="zm-side-section-inner">
<h3 class="zm-topic-side-organize-title">描述
</h3>
<div id="zh-topic-desc" data-resourceid="225" data-action="/topic-introduction">
<div class="zm-editable-content" data-editable-maxlength="130" ></div>
</div>
</div>
</div>
<div class="shameimaru-placeholder" data-loc="topic_up" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

<div class="zm-side-section" id="zh-topic-side-parents-list">
<div class="zm-side-section-inner parent-topic">
<h3 class="zm-topic-side-organize-title">父话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19550516"
data-hovercard="t$b$19550516" data-token="19550516" data-topicid="98" data-za-element-name="Title">
Web 开发
</a>

<a class="zm-item-tag"
href="/topic/19552332"
data-hovercard="t$b$19552332" data-token="19552332" data-topicid="708" data-za-element-name="Title">
软件开发
</a>

<a class="zm-item-tag"
href="/topic/19561719"
data-hovercard="t$b$19561719" data-token="19561719" data-topicid="3839" data-za-element-name="Title">
网站开发
</a>

</div>
</div>
</div>
<div class="zm-side-section" id="zh-topic-side-children-list">
<div class="zm-side-section-inner child-topic">
<h3 class="zm-topic-side-organize-title">子话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19552521"
data-hovercard="t$b$19552521" data-token="19552521" data-topicid="769" data-za-element-name="Title">
JavaScript
</a>

<a class="zm-item-tag"
href="/topic/19551326"
data-hovercard="t$b$19551326" data-token="19551326" data-topicid="369" data-za-element-name="Title">
CSS
</a>

<a class="zm-item-tag"
href="/topic/19573936"
data-hovercard="t$b$19573936" data-token="19573936" data-topicid="7912" data-za-element-name="Title">
前端工程师
</a>

<a class="zm-item-tag"
href="/topic/19551323"
data-hovercard="t$b$19551323" data-token="19551323" data-topicid="367" data-za-element-name="Title">
HTML
</a>

<a class="zm-item-tag"
href="/topic/19583739"
data-hovercard="t$b$19583739" data-token="19583739" data-topicid="11152" data-za-element-name="Title">
前端性能优化
</a>

<a class="zm-item-tag"
href="/topic/19806306"
data-hovercard="t$b$19806306" data-token="19806306" data-topicid="87560" data-za-element-name="Title">
前端框架
</a>

<a class="zm-item-tag"
href="/topic/19621319"
data-hovercard="t$b$19621319" data-token="19621319" data-topicid="23778" data-za-element-name="Title">
前端开发框架和库
</a>

<a class="zm-item-tag"
href="/topic/19590813"
data-hovercard="t$b$19590813" data-token="19590813" data-topicid="13512" data-za-element-name="Title">
前端入门
</a>

<a class="zm-item-tag"
href="/topic/19597369"
data-hovercard="t$b$19597369" data-token="19597369" data-topicid="15721" data-za-element-name="Title">
浏览器兼容性
</a>

<a class="zm-item-tag"
href="/topic/19566907"
data-hovercard="t$b$19566907" data-token="19566907" data-topicid="5573" data-za-element-name="Title">
Div+CSS
</a>

</div>

<a class="zg-link-litblue zm-topic-side-title-link" href="/topic/19550901/organize/entire#anchor-children-topic">共有 31 个子话题，查看话题结构 » </a>

</div>
</div>


<div class="zm-side-section">
<div class="zm-side-section-inner" id="zh-topic-top-answerer">
<h3>

<a href="/topic/19550901/top-writer" class='SidebarListNav-sideLink Link--light' target="_blank">
查看全部 »
</a>

活跃回答者</h3>
<div class='zm-topic-side-person-list'>

<div class="zm-topic-side-person-item">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="author-link">徐飞</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="三流程序员，二流架构师">三</span>流程序员，二流架构师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/sharpmaster/topic/19550901/answers">在该话题下有 91 个回答，8980 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/ecfeb2b0c_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="author-link">张云龙</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="全民直播CTO">全</span>民直播CTO

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/fouber/topic/19550901/answers">在该话题下有 30 个回答，9721 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic4.zhimg.com/7be980a0f_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="author-link">尤雨溪</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="不会搞艺术的程序员不是好设计师">不</span>会搞艺术的程序员不是好设计师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/evanyou/topic/19550901/answers">在该话题下有 128 个回答，12K 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic2.zhimg.com/191ec5daa9b4d6931eed0eba8a9cf39d_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="author-link">张克军</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="豆瓣前端工程师">豆</span>瓣前端工程师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/kejun/topic/19550901/answers">在该话题下有 40 个回答，3330 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="author-link">贺师俊</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="Web开发者">W</span>eb开发者

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/he-shi-jun/topic/19550901/answers">在该话题下有 396 个回答，14K 赞同</a>


</div>
</div>
</div>


</div>
</div>
</div>


<div class="shameimaru-placeholder" data-loc="topic_down" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

</div>


</div>


<div id="zh-footer" class="zh-footer">
<div class="content zg-wrap clearfix">
<ul>

<li><a href="https://liukanshan.zhihu.com" target="_blank">刘看山</a></li>

<li><a href="/question/19581624" target="_blank">知乎指南</a></li>
<li><a href="javascript:;" id="js-feedback-button">建议反馈</a></li>

<li><a href="/app" target="_blank">移动应用</a></li>
<li><a href="/careers">加入知乎</a></li>
<li><a href="/terms" target="_blank">知乎协议</a></li>
<li><a href="/jubao" target="_blank">举报投诉</a></li>
<li><a href="/contact">联系我们</a></li>

</ul>

<span class="copy">&copy; 2017 知乎</span>

</div>
</div>

<script type="text/json" class="json-inline" data-name="guiders2">{"exclusive-popover":{},"section":{},"editor":[]}</script>
<script type="text/json" class="json-inline" data-name="current_user">["\u6587\u5200\u6c34\u539f","liu-yuan-39-9","https:\/\/pic2.zhimg.com\/56a9754ca686ba7d3b1e725c6452ccd1_s.png","649f8fe7032b205a3cbbbb875135734d","\u534a\u8def\u51fa\u5bb6\u5b66\u5b89\u5353",0,0,true,"174596549@qq.com","http:\/\/mail.qq.com",0,false,false,false,"32745954738176",false,false,false,true,null]</script>
<script type="text/json" class="json-inline" data-name="user_status">[null,null,false]</script>
<script type="text/json" class="json-inline" data-name="env">["zhihu.com","comet.zhihu.com",false,null,false,false]</script>
<script type="text/json" class="json-inline" data-name="permissions">[]</script>


<script type="text/json" class="json-inline" data-name="ga_vars">{"user_created":1378258190000,"now":1486361868000,"abtest_mask":"---------0--------------------","user_attr":[1,0,0,"-",1],"user_hash":"649f8fe7032b205a3cbbbb875135734d"}</script>

<script type="text/json" class="json-inline" data-name="ra-urls">{"Copyright":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Copyright.98ac6609.js","PayUIApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PayUIApp.ca78ba78.js","CouponApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CouponApp.66b486a6.js","PaymentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PaymentApp.7f16d61c.js","Community":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Community.920e484a.js","Report":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Report.26635627.js","OrgOpHelp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/OrgOpHelp.f1709e97.js","common":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/common.a4dd3236.js","BalanceApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/BalanceApp.14e3a013.js","AnswerWarrant":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/AnswerWarrant.97f134aa.js","CommentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CommentApp.7556991d.js"}</script>

<script type="text/json" class="json-inline" data-name="current_topic">[["\u524d\u7aef\u5f00\u53d1","19550901","https:\/\/pic1.zhimg.com\/v2-8e66233f5558e741bad3a8c50b9566c8_s.jpg",225],[["Web \u5f00\u53d1","19550516","https:\/\/pic3.zhimg.com\/891b4f32a_s.jpg"],["\u8f6f\u4ef6\u5f00\u53d1","19552332","https:\/\/pic2.zhimg.com\/185d9c33d_s.jpg"],["\u7f51\u7ad9\u5f00\u53d1","19561719","https:\/\/pic2.zhimg.com\/78645670d_s.jpg"]],1,0,"",0]</script>

<script src="https://static.zhihu.com/static/revved/-/js/vendor.cb14a042.js"></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/base.6cca0b95.js"></script>

<script src="https://static.zhihu.com/static/revved/-/js/closure/common.31d4e5c0.js"></script>


<script src="https://static.zhihu.com/static/revved/-/js/closure/richtexteditor.71ca49de.js" async></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/page-main.c075e49f.js"></script>
<meta name="entry" content="ZH.entryT" data-module-id="page-main">

<script type="text/zscript" znonce="67716185e240415b96ca4de2ce6b533a"></script>

<input type="hidden" name="_xsrf" value="b08047425d2b394c9b9106bb47ce2ec8"/>
</body>
</html>