[
  {
    "question": "\nWeb 前后端分离的意义大吗？\n",
    "author": "Cat Chen",
    "content": "\n\n<textarea hidden class=\"content\">没必要分太细。我们需要 specialist，但是 senior 的人都应该了解整个 E2E (end-to-end) 过程的。&lt;br&gt;&lt;br&gt;在 Facebook 我们不分前端和后端，只分 product 和 infrastructure。做 product 的通常都是 full stack，不需要对特定的技术非常精通，但要求学习能力和灵活性足够好，不能只做自己 comfort zone 以内的事情，do whatever it takes to get your product shipped。通常聪明的应届生都会先进入 product，因为他们学什么都很快，也不会说浪费了在某个领域的积累。infrastructure 拥有更多各个领域的 specialist，前端只是其中之一。infrastructure 的客户就是 product，要做的事情就是让 product 开发实际产品时觉得爽，就这么简单。&lt;br&gt;&lt;br&gt;至于真正 senior 的人，必须了解整个 E2E 过程。这有点像那个「在浏览器地址栏按下回车后都发生了什么」的答案，也就是掌握大局同时了解细节。因为具体的问题可疑扔给 junior 的人去解决，所以 senior 的存在价值就是在众多问题当中寻找值得解决的问题。学过计算机体系结构的人都应该知道，性能优化只应该在瓶颈上做，因为做在非瓶颈上就是浪费资源。同理技术或产品的优化都应该是做在瓶颈上的，所以 senior 的人应该熟悉整套系统并且能够有效找到当前的瓶颈。这时候就不存在前端或者后端的概念了，因为 specialist 在特定领域再精通，不了解整个 E2E 的过程就没办法再往上提升。&lt;br&gt;&lt;br&gt;&lt;a data-hash=&quot;ec03b8e839a6fb763e1b8113455362db&quot; href=&quot;//www.zhihu.com/people/ec03b8e839a6fb763e1b8113455362db&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@winter&quot; data-hovercard=&quot;p$b$ec03b8e839a6fb763e1b8113455362db&quot;&gt;@winter&lt;/a&gt; 提到「联调」，我想说我很久没听说过这个词了，因为这个词没有对应的英语版本，美国公司的产品开发过程通常不包括联调。product 要做什么，就自己学习对应的技术，学习公司内部的 infrastructure，然后调用公司内部的 API 就可以了。一个产品的逻辑，要分前端和后端两个团队的人实现，然后还要协调实现的结果，这我只在中国公司见过。当然这不仅仅要求公司 infrastructure 好，还要求有开放的文化。&lt;br&gt;&lt;br&gt;我进 Facebook 之前只写 JS，在 Facebook 要用 PHP 我随便学学就开始写，反正写得不好 code review 时会有人指出。只要保持开放的学习心态，同一个错误不要一犯再犯，别人都乐意帮助你进步。现在我的 PHP/Hack 就仅仅是够用的程度，但这不妨碍我工作。我的工作当然要用到别人的 infrastructure，偶尔用起来有点小不爽，我就会想要改动一下。管它是 Python、Java 还是 C++，反正我不爽就必须亲自研究源代码弄懂了自己该。原本的作者不一定有时间处理我的小需求，我就按照我的理解去改，改好提交 code review，别人都会帮忙看然后提点建议。&lt;br&gt;&lt;br&gt;所谓联调，无非就是有些事情你自己做不了非要以来于别人帮你做，然后别人就会成为阻塞你的环节。（通常都是前端依赖后端，很少有说后端因为前端没完成就必须停下来等的。）这种做不了就停下来等的态度是不对的，不能说那是别人的问题就等别人解决。总之阻塞了产品发布的问题就是你的问题，无论需要你学习什么新技术，无论需要你编写和调试什么不熟悉的代码，do whatever it takes，just get the product launched。&lt;br&gt;&lt;br&gt;&lt;a data-hash=&quot;3c6ade4a8174f2167598f6c4e2ca21f5&quot; href=&quot;//www.zhihu.com/people/3c6ade4a8174f2167598f6c4e2ca21f5&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@齐泰然&quot; data-hovercard=&quot;p$b$3c6ade4a8174f2167598f6c4e2ca21f5&quot;&gt;@齐泰然&lt;/a&gt; 那个木工和电工的比喻大致也是对的。在中国公司，这就是木工和电工的分离。在美国公司，有一帮人使用 3D 打印机、激光切割机、数控机床，外加 Arduino 或 Raspberry Pi，迅速把新一代电子产品的原型做出来；还有另外一帮人研究新一代的 3D 打印机，考虑如何让上述 maker 更快地把头脑中的产品原型变为现实。在中国公司，木工和电工整天吵架，木工说电工不把线路板面积确定下来他就没办法做木盒子，电工说他在电动机大小不确定的情况下线路板没办法定稿。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n没必要分太细。我们需要 specialist，但是 senior 的人都应该了解整个 E2E (end-to-end) 过程的。 在 Facebook 我们不分前端和后端，只分 product 和 infrastructure。做 product 的通常都是 full stack，不需要对特定的技术非常精通，但要求学习能力和灵活…\n\n<a href=\"/question/28207685/answer/39974928\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28207685/answer/39974928\">发布于 2015-02-17</a></p>\n\n",
    "link": "https://zhihu.com/question/28207685/answer/39974928"
  },
  {
    "question": "\n为什么市场上优秀的前端这么少，国外也是这样吗？\n",
    "author": "周萌萌",
    "content": "\n\n<textarea hidden class=\"content\">4.29更新&lt;br&gt;我不是猎头！不是猎头！不是猎头！&lt;br&gt;重要的事儿说三遍！&lt;br&gt;最近在研究怎么颠覆猎头，不信？&lt;br&gt;听听Fenng怎么说：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5ODIyMTE0MA%3D%3D%26mid%3D208103072%26idx%3D1%26sn%3D5c4a1d668879837f03d7a64e3bdc842c%26scene%3D1%26key%3D1936e2bc22c2ceb582f7c81b3c0c4acdc043b86446f3a2c3115c616dcf41fca207f669c731204c5402222b2622069fb1%26ascene%3D0%26uin%3DNjQzNzkyMTIw%26devicetype%3DiMac%2BMacBookPro11%252C1%2BOSX%2BOSX%2B10.10.3%2Bbuild%2814D136%29%26version%3D11020012%26pass_ticket%3D5V604hPTaz219h82Y%252BbH0einFLfLCd%252BXuDpdwD7ocYa7sPyfxXbbgXW9Ojl%252FiMph&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;为什么高端人才会使用「拍卖」来选工作？&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.28更新&lt;br&gt;感谢大家鼓励！&lt;br&gt;点赞不关注的都是坏人&amp;gt;&amp;lt;&lt;br&gt;&lt;br&gt;有童鞋私信问我是咋自学的？&lt;br&gt;墙裂推荐这本《Head First HTML与CSS(第2版) 》O'REILLY, 2013&lt;br&gt;虽是典型的外国砖头教材，但是图文并茂内容生动有趣，适合我这种爱读故事的文科生~&lt;br&gt;&lt;br&gt;----------------正文的分割线----------------------&lt;br&gt;&lt;br&gt;&lt;p&gt;哇，最近正在摩拳擦掌开始学前端，从HTML开始，仿佛回到了本科时的计算机课时代，当然那时学的还是VB和C++ 哎，岁月是把杀猪刀啊。。。&lt;/p&gt;&lt;br&gt;&lt;p&gt;周末看到这个问题，天气热的不想出门，个么来码码字吧！&lt;/p&gt;&lt;br&gt;&lt;p&gt;「为什么优秀的前端工程师这么少？这么少？少？」，这是我在敝司HR群里最常听到的抱怨之一，甚至超过吐槽iOS和Android开发。。。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;因为天真的HR mm们一般认为：「前端开发相较于其他领域的开发要容易的多，为啥CTO还要求那么多，推荐的前端被退回来一个又一个？」&lt;/p&gt;&lt;br&gt;&lt;p&gt;我曾经也是这么看前端的，不就是切切图、排排版、加个动图嘛，后来准备学前端，才发现前端开发根本不是软！柿！子！&lt;/p&gt;&lt;br&gt;&lt;p&gt;既然开了头就不能半途而废，发挥文科生的精神我查阅了一些前端的文献，从了解前端历史开始进入这个领域。&lt;/p&gt;&lt;br&gt;&lt;p&gt;首先，我可以很肯定的回答第二个问题，是的，国外的优秀前端也是香饽饽，很难招！&lt;/p&gt;&lt;p&gt;先甩一张图：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/d7373150863e9d272f350e893bcb5686_b.jpg&quot; data-rawwidth=&quot;540&quot; data-rawheight=&quot;300&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;540&quot; data-original=&quot;https://pic3.zhimg.com/d7373150863e9d272f350e893bcb5686_r.jpg&quot;&gt;&lt;p&gt;根据&lt;a href=&quot;//link.zhihu.com/?target=http%3A//indeed.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;indeed.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;抓取的数千家网站的职位显示，&lt;b&gt;目前「HTML5」岗位是需求增长最快的开发岗位，在所有开发职位中排名第一&lt;/b&gt;，MongoDB和iOS紧随其后位列第二、第三。&lt;/p&gt;&lt;br&gt;&lt;p&gt;可见，HTML5可以说是最热门的前端岗位了，在2010年和2014年底有两次爆发性增长，现在在美国的岗位需求甚至超过了iOS。&lt;/p&gt;&lt;br&gt;&lt;p&gt;所以市场上优秀的前端工程师相对较缺少，是一个国际问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;再来回答第一个问题，前端工程师的地位和薪水上涨除了供不应求的市场经济因素，与前端工程师独有的特性分不开。作为前端初学者，对前端开发的了解还比较浅，分享一篇看到的blog吧。&lt;/p&gt;&lt;br&gt;&lt;p&gt;Jose Aguinaga是一位美国的前端工程师，根据自己求职、面试、以及项目工作的经验回答了这个问题，文章比较长，主要从三个角度回答了这个问题：&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;1、前端是相对来说的一个新领域&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;这些岗位的大多数已经存在了多年，但是在web行业对它们做出合理规范的要求却是最近10年才开始做的。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;2、普遍存在误解&lt;/b&gt;&lt;/p&gt;「大多数人心中的前端工程师」和「实际上前端工程师的工作」完全不是一个事儿。&lt;br&gt;&lt;br&gt;&lt;b&gt;3、大量糟糕的前端工程师的存在&lt;/b&gt;&lt;br&gt;「糟糕的前端工程师」与「优秀的前端工程师」做的工作也不是一个level的事儿。&lt;br&gt;&lt;br&gt;&lt;br&gt;下面是原文，我简单翻译了一下。（专业词汇好多，有误请指出，轻拍~原文地址：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jjperezaguinaga.com/2014/03/19/why-cant-we-find-front-end-developers/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;why-cant-we-find-front-end-developers&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ）&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;一、相对来说，前端是一个新领域&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;可能很多人认为前端开发和网页开发类似，而网页开发已经有20多年的历史，所以前端并不是一个新领域。然而，&lt;b&gt;前端工程师的概念中的接口技术实现和用户体验作为一个专业的工作领域&lt;/b&gt;，却无疑是很新的。大概几年前，前端开发的技术增长迅猛，如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80e48378d618e8f1db3c6beadf54693b_b.jpg&quot; data-rawwidth=&quot;835&quot; data-rawheight=&quot;474&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;835&quot; data-original=&quot;https://pic4.zhimg.com/80e48378d618e8f1db3c6beadf54693b_r.jpg&quot;&gt;&lt;p&gt;过去几年前端工程师的可视化增长趋势 by Google Trends&lt;/p&gt;&lt;br&gt;&lt;p&gt;对大多数互联网圈外的人来说，&lt;b&gt;网页开发是横亘在网页可视化设计和技术实现之间的一条模糊的界限&lt;/b&gt;。毕竟，网页开发的确是一部分前端工程师的工作，并且人们想象前端工程师只专注于用户接触的部分。&lt;/p&gt;&lt;p&gt;最近，将接口技术实现和用户体验作为作为一个专业领域的概念才刚刚兴起。十五年或更久以前，网页的可视化设计和技术实现所需要的资源是平均分配的。随着网站的发展——网站不仅是一个登录页面，工程资源的需求越来越明显。人们开始专门学习网站专用的Javasript、后端技术、UX、数据库，甚至系统设计。&lt;/p&gt;&lt;p&gt;今天，&lt;b&gt;一个像AirBnB/Facebook/Quora的Web应用程序，投入的工程资源比设计资源多得多。&lt;/b&gt;换句话说，如今，做出网页的视觉设计比技术实现要更快。这并不是说和20年前相比，可视化设计没那么重要，或投入的资源更少，而是说如今的网页需求要求更多的工程师供应。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/bdecfc0700c767bdc1d65e830cca6742_b.jpg&quot; data-rawwidth=&quot;1191&quot; data-rawheight=&quot;1034&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1191&quot; data-original=&quot;https://pic3.zhimg.com/bdecfc0700c767bdc1d65e830cca6742_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;因为一个Web应用程序的技术实现包含了多种领域，在90年代「网站工程师」是多面手：他们有的来自数据库管理员和系统管理员，有的来自后台工程师，软件工程师，UX工程师和前端工程师。最新的可能人们最恐惧：用Javascript，HTML和CSS修修补补一个视图，让它和所有的浏览器都适配。要享受前端工程师，你必须对视觉设计有兴趣（或者乐于做一个受虐狂▼）。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/042571cfeebc5e7a8fa3e50e6d3ad6ae_b.jpg&quot; data-rawwidth=&quot;1624&quot; data-rawheight=&quot;848&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1624&quot; data-original=&quot;https://pic3.zhimg.com/042571cfeebc5e7a8fa3e50e6d3ad6ae_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;很显然，要处理大量的Web应用程序需求，技术任务就要进行分类，以便于多人同时处理网站请求。我不知道哪个任务需要最多的时间，或者哪个是最难的，但是事实上现在已经不可能一个人快速地解决所有的技术细节了——这也是多家网络机构和企业关心的问题。因此，所有之前我提到的工作描述（后台工程师、DBA等等）都被归入了web行业。请注意：&lt;b&gt;这些岗位的大多数已经存在了多年，但是在web行业对它们做出合理规范的要求却是最近10年才开始做的。&lt;/b&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/4882de34025531d6291828212691fb1c_b.jpg&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;831&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1200&quot; data-original=&quot;https://pic1.zhimg.com/4882de34025531d6291828212691fb1c_r.jpg&quot;&gt;&lt;p&gt;现在还有一类人是独自处理一个Web应用程序的所有问题，即「全栈工程师」，但是优秀的全栈工程师同样数量稀少。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;现在，创业公司已经很清楚，要想成功可能需要覆盖一个Web应用程序的诸多技术方面：前端、后台、DBA、运营等等。PaaS（Platform as a Service）的诞生帮助创业公司剥离了运营，同时多种BaaS（Backend as a Service）服务，比如&lt;a href=&quot;//link.zhihu.com/?target=http%3A//Parse.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;Parse.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，甚至可以为你的应用提供数据库模型和终端（当然你仍然需要某人帮你设计模型）。前端还没有被提供这种服务，但是已经有一些服务可以让你购买登陆页面的前端模块和组件；如果你想要创造一些真正的Web应用程序，除了求助前端工程师，你别无他法，就像你要创立一个品牌你也绕不开请一位设计师一样。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;二、普遍存在的误解&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;寻找前端工程师难的另外一个很重要的原因，就是它是被广泛误解的领域。正如前面提到的，大多人都认为前端开发是一个「相对于来说更简单的领域」。不妨用一个已经过时的模式描述这个误解：&lt;/p&gt;&lt;p&gt;&lt;b&gt;大多数人心中的前端工程师是：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1、把Photoshop文件、图片或者线框做成一个页面；&lt;/p&gt;&lt;p&gt;2、偶尔设计Photoshop文件、图片或者线框；&lt;br&gt;3、用JS实现动画、过渡效果；&lt;br&gt;4、用HTML和CSS编程，实现网页的内容和形式。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;事实上，前端工程师在做的是：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1、在设计师和工程师之间创建可视化的语言；&lt;br&gt;2、根据设计稿定义一组代表内容、品牌和功能的组件；&lt;br&gt;3、为Web应用程序的框架、需求、可视化的语言和规格设定基准；&lt;br&gt;4、根据设备、浏览器、屏幕、动画来划分web应用的工作划分；&lt;br&gt;5、用QA基准来保证指南来确保品牌忠诚度、代码质量、产品标准；&lt;br&gt;6、调节Web应用程序的样式，包括间距、字体、标题、图标、布局等等；&lt;br&gt;7、根据不同分辨率、横屏竖屏等，调节Web应用程序的样式；&lt;br&gt;8、标记 Web 应用程序，使之语义化，SEO 友好；&lt;br&gt;9、通过API获取内容要考虑友好性、电池消耗性、设备和客户端的特性；&lt;br&gt;10、开发客户端要考虑动画的流畅、延迟加载、交互、应用工作流程，大多数时间用来考虑渐进增强和向后兼容的标准；&lt;br&gt;11、保证后台连接安全，采取跨地资源共享（ CORS ）的程序考虑，防止跨站点脚本（ XSS）和跨站点请求伪造（ CSRF ） ；&lt;br&gt;12、最重要的是，尽管要符合以上标准，但是无论现在还是将来永远是「用户第一」。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;为了实现上述目标，前端工程师采用了多种工具，从可视化工具（Photoshop/Adobe/Macaw/Sketch），到编程工具 （IDE’s，命令行，源代码版本控制， Bash脚本，建设任务） 。有时，我们甚至要照顾市场（Newsletters，Campaigns，分析，SEO，社会媒体） 、 UX （动画、过渡、反馈、接口、可视化语言），到内容改进（断点、避免孤立词汇、可读性、颜色） 。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;三、存在糟糕的前端工程师&lt;/b&gt;&lt;/p&gt;&lt;p&gt;或许难以招到优秀的前端工程师最明显的原因就是：大量糟糕的前端工程师的存在。正如大家知道的，前端工程师的入门门槛非常低。JS、CSS、HTML并不是很难掌握的语言。只要花一点时间，谁都可以通过网上教程（CodeAcademy/CodeSchool）学会。但是学习Erlang（作者自己最爱的变成语言之一）、Go，甚至ANSI C，都需要你掌握很多计算机的知识。调整网页中的颜色和图片是非常容易的，但是了解网络的软肋却是完全不同的事情。&lt;/p&gt;&lt;p&gt;最终，前端工程师市场上被做这些事的家伙搞坏：&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;糟糕的前端工程师是这样做事：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1、滥用JS库，因为他们实际上并不了JS的内部（e.g. 一切都用jQuery）；&lt;/p&gt;&lt;p&gt;2、滥用JS插件，抄别人的代码哪怕自己根本读不懂（e.g.jQuery.doParallaxPls.js）；&lt;/p&gt;&lt;p&gt;3、给Web应用程序添加CSS框架，却只用到CSS/JS的5%，没有看到任何的需求、设计或者比较和评价；&lt;/p&gt;&lt;p&gt;4、认为只要添加了CSS框架，网站就可以「有求必应」；&lt;/p&gt;&lt;p&gt;5、一边在说着「响应式web设计」，却对服务器端技术一无所知；&lt;/p&gt;&lt;p&gt;6、用CSS编程时不管预处理器、命名规范等，却用不合适的selector/ids/magic numbers等；&lt;/p&gt;&lt;p&gt;7、忽视表现、内存泄露（并不理解内存泄露的真正含义），不会检测代码；&lt;/p&gt;&lt;p&gt;8、不会用指标衡量一个产品，或者这种指标旨在自己的电脑、浏览器、设备有效；&lt;/p&gt;&lt;p&gt;9、忽视软件技术。&lt;/p&gt;&lt;br&gt;&lt;p&gt;虽然CS背景并不是成为一个优秀前端工程师的必备条件，但是&lt;b&gt;计算机和软件的基础对你用JS或浏览器编程都非常重要&lt;/b&gt;。优秀的前端工程师知道，web可能是最有影响力的平台和环境之一，所以在那里执行的程序&lt;b&gt;必须&lt;/b&gt;被小心对待，甚至比在任何一台可视化机器上的任何一种语言更小心。&lt;/p&gt;&lt;p&gt;一位优秀的前端工程师不仅要考虑web技术和语言，并且还要了解所有不同的组件、系统和概念。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;以下是优秀的前端工程师在即时面对普通的任务也会做的事情：（这才是市场急需的前端）&lt;/b&gt;&lt;/p&gt;&lt;p&gt;1、DNS解析、使用CDN和关于multiple Hostnames as part of resources request.&lt;/p&gt;&lt;p&gt;2、HTTP Headers (Expires, Cache-Control, If-Modified-Since)&lt;/p&gt;&lt;p&gt;3、Steve Souders的所有规则(&lt;a href=&quot;//link.zhihu.com/?target=http%3A//shop.oreilly.com/product/9780596529307.do&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;High Performance Websites&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;4、如何解决PageSpeed, YSlow, Chrome Dev Tools Audit, Chrome Dev Tools Timeline显示的所有问题；&lt;/p&gt;&lt;p&gt;5、何时把任务传到服务器和客户端；&lt;/p&gt;&lt;p&gt;6、缓存，预取和负荷技术的使用；&lt;/p&gt;&lt;p&gt;7、Native JS，知道何时从头开始做，何时查找别人的代码，同时可以评估这样做的优缺点；&lt;/p&gt;&lt;p&gt;8、modern MVC Javascript libraries (e.g. AngularJS, EmberJS, ReactJS), graphic libraries (e.g. D3, SnapSVG), DOM manipulation libraries (e.g. jQuery, Zepto), lazy loading or package management libraries (e.g. RequireJS, CommonJS), task managers (e.g. Grunt, Gulp), package managers (e.g. Bower, Componentjs) and testing (e.g. Protractor, Selenium)的相关知识和用法；&lt;/p&gt;&lt;p&gt;9、CSS标准、modern conventions、 strategies (e.g. BEM, SMACSS, OOCSS)的知识和用法；&lt;/p&gt;&lt;p&gt;10、JS的电脑知识（内存管理，单线程的性质，垃圾收集算法，超时，范围，提升，模式）&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;结论：&lt;/b&gt;&lt;/p&gt;&lt;p&gt;现在，&lt;b&gt;前端工程师终于前所未有的在web中有了一席之地&lt;/b&gt;。可能是由于多设备、浏览器和Web标准的演变的革命，所以寻找能够专注于Web应用程序用户端的人变得很迫切。全世界的前端工程师和开发者正在参与到那些我们曾想象web可以给我带来的一切的变化的产品。现在存储着我们所写、听、email、看的所有实体都和云相连。&lt;/p&gt;&lt;p&gt;虽然现在招前端工程师很难，但是我知道越来越多的人将会加入前端的大军。不仅是因为大多数前端工作提供的优渥薪水和办公环境，也是因为web中的前端编程变得越来越让人兴奋：通过网络提供服务，你有机会接触千万用户的生活，所有的一切都汇聚于一个叫浏览器的东西——它消泯了局限，使得人们可以分析，描绘和渲染任何一种疯狂的想法。&lt;/p&gt;&lt;br&gt;&lt;p&gt;加油吧，前端！&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/d7373150863e9d272f350e893bcb5686_200x112.jpg\" data-rawwidth=\"540\" data-rawheight=\"300\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/d7373150863e9d272f350e893bcb5686_r.jpg\">\n4.29更新 我不是猎头！不是猎头！不是猎头！ 重要的事儿说三遍！ 最近在研究怎么颠覆猎头，不信？ 听听Fenng怎么说：<a href=\"//link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5ODIyMTE0MA%3D%3D%26mid%3D208103072%26idx%3D1%26sn%3D5c4a1d668879837f03d7a64e3bdc842c%26scene%3D1%26key%3D1936e2bc22c2ceb582f7c81b3c0c4acdc043b86446f3a2c3115c616dcf41fca207f669c731204c5402222b2622069fb1%26ascene%3D0%26uin%3DNjQzNzkyMTIw%26devicetype%3DiMac%2BMacBookPro11%252C1%2BOSX%2BOSX%2B10.10.3%2Bbuild%2814D136%29%26version%3D11020012%26pass_ticket%3D5V604hPTaz219h82Y%252BbH0einFLfLCd%252BXuDpdwD7ocYa7sPyfxXbbgXW9Ojl%252FiMph\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">为什么高端人才会使用「拍卖」来选工作？<i class=\"icon-external\"></i></a> 4.28更新 感谢大家鼓励！ 点赞不关注的都是坏人&gt;&lt; 有童鞋私信问我是咋自学的？ 墙裂推荐这本《He…\n\n<a href=\"/question/29875948/answer/45937246\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-04-26\" target=\"_blank\" href=\"/question/29875948/answer/45937246\">编辑于 2015-05-08</a></p>\n\n",
    "link": "https://zhihu.com/question/29875948/answer/45937246"
  },
  {
    "question": "\n如何评论浏览器最新的 WebAssembly 字节码技术？\n",
    "author": "罗志宇",
    "content": "\n\n<textarea hidden class=\"content\">这个注定是一个长回答，像我这种不喜欢写字的人，看到这种问题，一般都会在回答和不回答之间纠结一个星期。\n&lt;br&gt;&lt;br&gt;下面要讲的，其实是一个悲伤的故事。\n&lt;br&gt;&lt;br&gt;&lt;b&gt;Javascript ，也叫Ecma script,  是这家伙用了 10 天时间赶出来的。。\n&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/76e48a8051d234092252797a170e5670_b.jpg&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;300&quot; class=&quot;content_image&quot; width=&quot;400&quot;&gt;&lt;i&gt;所以，各位程序猿们，如果你觉得老板 10 天要你们上线一个 App 是一个丧心病狂的事情，那么可以多想想这位哥。&lt;/i&gt;&lt;br&gt;&lt;i&gt;Youtube 上有位哥的采访，你可以听听大神当年的故事。&lt;/i&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DIPxQ9kEaF8c&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;youtube.com/watch?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;v=IPxQ9kEaF8c&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;当然，码农和大神的区别在于：遇到这种事情，10 天以后码农死掉了，而大神成功了。&lt;br&gt;只是但凡这种极速上线的事情，都会留下一堆的坑，大神和码农的的区别，也就是水洼和天坑的区别。\n&lt;br&gt;&lt;br&gt;这个是坑列表：\n&lt;br&gt;&lt;ul&gt;&lt;li&gt;Javascript  从最开始设计，就是一种解释型语言，因为大神觉得让 Javascript 的目标用户－ “非专业编程人员和设计师”，了解什么是编译器是一件很残忍的事情。&lt;br&gt;&lt;/li&gt;&lt;li&gt;类型自然也是没有的，因为学习类型就要学习 CPU 工作原理， 学习 CPU 工作原理就要学习组成原理， 大神觉得，让 “非专业编程人和设计师” 去了解 1 和 1.0 一个是 CPU 上处理， 一个是 FPU 上面处理这种显而易见的现象是一件很残忍的事情。&lt;br&gt;&lt;/li&gt;&lt;li&gt;对象模型是惊人的奇葩，那是因为不想设计得和 Java 一样强大, Netscape 当初想法是主要工作都是 Java 来完成，只有轻量级的简单操作留给 Java script, 做为一种胶水语言( glue langurage).  现在知道为什么叫 Java script了吧？ 一个是Java, 一个是和Java 配合的 Script (脚本）。 之前还叫过Live script, 因为脚本和 Java 互动的技术叫 Live connect.&lt;br&gt;&lt;/li&gt;&lt;li&gt;对于泛型， 缺省参数，操作符重载， 异常 等等这些黑科技， 大神的回答通通是：&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic4.zhimg.com/f842e99d3aea905e523dc7b9d11b9547_b.jpg&quot; data-rawwidth=&quot;600&quot; data-rawheight=&quot;450&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic4.zhimg.com/f842e99d3aea905e523dc7b9d11b9547_r.jpg&quot;&gt;&lt;br&gt;&lt;i&gt;好吧，异常后来加上去了。\n&lt;/i&gt;&lt;br&gt;&lt;br&gt;如果故事到此为止，其实不算一个悲伤故事，大神 10 天时间完成预定目的，东西也发布了，市场反应也不错。\n&lt;br&gt;&lt;br&gt;但是问题是，市场反应实在是太好了，好得 Javascript 一路窜红，红得各大浏览器厂商纷纷支持， 成为浏览器里面事实上的官方语言。 在这个过程中， 还顺手干掉了 VB script, \n&lt;br&gt;&lt;br&gt;于是这个当初为 “非专业编程人员和设计师” 的解释型语言现在居然变成互联网上面最重要的语言之一，被用来做各种之前想也不敢想的东西，甚至还有人不顾死活的拿他来做WebOS.\n&lt;br&gt;&lt;br&gt;&lt;b&gt;于是这个时候，之前所有的小水洼都变成了天坑。之后很长段时间 JS 领域的发展史，都可以说是填坑史。\n&lt;/b&gt;&lt;br&gt;&lt;br&gt;其中最大的一个坑，就是性能。\n&lt;br&gt;&lt;br&gt;&lt;b&gt;性能填坑阶段一&lt;/b&gt;&lt;br&gt;Javascript 一开始就是解释性语言，解释性语言的一大特点就是慢， 而网页应用越来越复杂，如果点个按钮要等几秒钟，那淘宝的秒杀就要变成10秒杀了。这个当然不能忍。 于是聪明的人类想到一个办法，虽然你是解释型语言，但是我可以偷偷的编译你啊。 这个也不需要让这帮 “非专业编程人员和设计师” 们知道， 我只要在程序运行前的一刹那，编译即将运行的代码就好。你看我机不机智。\n&lt;br&gt;&lt;br&gt;于是 Google 在 2009 年在 V8 中引入了 JIT 技术 (Just in time compiling 江湖人称即时编译)。 有了这个buff, Javascript 瞬间提升了 20 － 40 倍的速度。直接导致一大波大型网页应用的出现。从此 Javascript 一骑绝尘， 飞黄腾。。呃， 好像哪里不对嘛？&lt;br&gt;&lt;br&gt;人类的性能的期望是无穷无尽的，JIT 的带来的性能提升很快就榨干了。实际上 JIT 有以下问题：\n&lt;br&gt;&lt;ul&gt;&lt;li&gt;JIT 基于运行期分析编译，而 Javascript 是一个没有类型的语言，于是， 大部分时间，JIT 编译器其实是在猜测 Javascript 中的类型，举个例子：&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic3.zhimg.com/0dabd0c866f65c3d3eddb73870e78342_b.png&quot; data-rawwidth=&quot;584&quot; data-rawheight=&quot;45&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;584&quot; data-original=&quot;https://pic3.zhimg.com/0dabd0c866f65c3d3eddb73870e78342_r.png&quot;&gt; JIT 看到这里， 觉得好开心， 马上把 add 编译成 &lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/65f5decbf09c5a6c1bbc9ca47bd443ed_b.png&quot; data-rawwidth=&quot;584&quot; data-rawheight=&quot;31&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;584&quot; data-original=&quot;https://pic2.zhimg.com/65f5decbf09c5a6c1bbc9ca47bd443ed_r.png&quot;&gt;可是你随后又干了这样一个事情 &lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/813c68eae2830fecfda7130c21e2a297_b.png&quot; data-rawwidth=&quot;580&quot; data-rawheight=&quot;31&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;580&quot; data-original=&quot;https://pic4.zhimg.com/813c68eae2830fecfda7130c21e2a297_r.png&quot;&gt;   JIT 编译器的表情肯定是\n&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/3124475f966c2c6241d7612e2f407101_b.png&quot; data-rawwidth=&quot;234&quot; data-rawheight=&quot;247&quot; class=&quot;content_image&quot; width=&quot;234&quot;&gt;&lt;i&gt;怎么办， 已经编译成机器码了啊。&lt;/i&gt;&lt;br&gt;&lt;i&gt;    这种情况下，JIT 编译器只能推倒重来。JIT 带来的性能提升，有时候还没有这个重编的开销大。&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;有很多的情况下面， JIT 编译器都无法生成代码，比如异常， 比如 for in , 这个基本上是实现难度引起的，具体可以参考： &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Optimization killers · petkaantonov/bluebird Wiki · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt; 事实上，大部分时间 JIT 都不会生成优化代码，有字节码的，直接字节码，没有字节码的，粗粗编译下就结了，因为 JIT 自己也需要时间，除非是一个函数被使用过很多遍，否则不会被编译成机器码，因为编译花的时间可能比直接跑字节码还多。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;于是，整体上 Javascript JIT 提高的性能到达的天花板还是不高的，虽然是提高了 20 - 50倍，那只是因为之前解释执行实在是太慢了。。\n&lt;br&gt;&lt;br&gt;&lt;b&gt;性能填坑阶段二。&lt;/b&gt;&lt;br&gt;既然 JIT 遇到的问题是类型不确定问题和有一些语言功能，比如异常，for in ， JIT 起来很麻烦， 我可不可以搞个方法让用户不去用这些功能，同时让他们把用的类型都标注出来啊。\n&lt;br&gt;&lt;br&gt;按照这个思路， 催生了两种实现路径：&lt;br&gt;&lt;ul&gt;&lt;li&gt;一种是 Typescript,  Dart, JSX 为代表的，基本思想是， 我搞个其他的语言，这个语言是强类型的，所以程序猿们需要指定类型，然后我把它编译成 Javacript 不就行了嘛。强类型的语言编译成弱类型还不容易，什么，不知道怎么编？ 把类型去掉就行了嘛。 &lt;/li&gt;&lt;br&gt;&lt;li&gt;另一种是火狐的  Asm.js 为代表的， 做一个 javascript 子集， 同时试图利用标注的方法，加上变量类型， 如果觉得好难理解，这就是个典型的例子：&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic3.zhimg.com/c6bf3df160b0ac8864deb12ce546dbb2_b.png&quot; data-rawwidth=&quot;584&quot; data-rawheight=&quot;77&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;584&quot; data-original=&quot;https://pic3.zhimg.com/c6bf3df160b0ac8864deb12ce546dbb2_r.png&quot;&gt;加上一堆没有什么卵用提示 x 其实是个 int， 然后有一个能够识别这些符号的JS引擎，你就可以不用猜类型了哦， 事实上，由于有了类型，连传统的 AOT 都成为了可能 &lt;i&gt;(Ahead of time, 不懂的话，想象一下，就是和 C/C++ 那种编译方式就好了）。&lt;/i&gt;&lt;br&gt;&lt;br&gt;如果你没有注意到，第二种的速度提升潜力比第一种要大非常多。因为第一种，无论如何，也是就是让JIT (即时编译) 快一点,  第二种那可直接就编译了啊 (AOT).\n&lt;br&gt;&lt;br&gt;这个是 Asm.js 相对于 JIT 和原生的性能对比&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/305c06e47eb648e096f92614ad2b9aa0_b.png&quot; data-rawwidth=&quot;909&quot; data-rawheight=&quot;465&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;909&quot; data-original=&quot;https://pic1.zhimg.com/305c06e47eb648e096f92614ad2b9aa0_r.png&quot;&gt;同时大家有没后注意到，这个不是原生代码哦， 性能堪比原生代码， 安全性和传统 Javascript 完全一样。 (尼玛，你让插件们怎么活）。&lt;br&gt;&lt;br&gt;&lt;b&gt;Web Assembly 就是第二种方式，说到底，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Mozilla&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mozilla&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;b&gt;, &lt;/b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Google&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;b&gt;, &lt;/b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Microsoft&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Microsoft&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;b&gt;, and &lt;/b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Apple_Inc.&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apple&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 觉得 Asm.js 这个方法有前途，想标准化一下，大家都能用。&lt;/b&gt;&lt;br&gt;&lt;br&gt;有了大佬们的支持，Web Assembly 比 asm.js 要激进很多。 Web Assembly 连标注 Js 这种事情都懒得做了，不是要 AOT 吗？ 我直接给字节码好不好？（后来改成 AST 树）。对于不支持 Web Assembly 的浏览器， 会有一段 Javascript 把 Web Assembly 重新翻译为 Javascript 运行， 这个技术叫 polyfill, HTML5 刚出来的时候很常用的一个技术。&lt;br&gt;&lt;br&gt;使用 AST 的原因是因为 AST 比字节码更容易压缩，也更容易翻译。\n&lt;br&gt;&lt;br&gt;不了解 AST 可以看下面这张图， 说明 Javascript 引擎的执行过程。 Javascript 先编译为 AST， 然后到 Bytecode.  AST 的抽象程度比 Bytecode 要高一级。\n&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/d51485954493e645cb307ab370c45631_b.jpg&quot; data-rawwidth=&quot;422&quot; data-rawheight=&quot;119&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;422&quot; data-original=&quot;https://pic2.zhimg.com/d51485954493e645cb307ab370c45631_r.jpg&quot;&gt;&lt;br&gt;总结来说， Web Assembly 的工作方式如下：\n&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/a3d0d0e45057489e78b70620b739bb74_b.png&quot; data-rawwidth=&quot;867&quot; data-rawheight=&quot;238&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;867&quot; data-original=&quot;https://pic1.zhimg.com/a3d0d0e45057489e78b70620b739bb74_r.png&quot;&gt;好处是： &lt;ul&gt;&lt;li&gt;大幅度提高 Javascript 的性能，希望能把性能这个坑填完，同时也不损失安全性。Webapp 和 原生 App 的性能差距变得很小。&lt;br&gt;&lt;/li&gt;&lt;li&gt;基本之前需要插件来提高速度这种技术已经没有必要了， 网页应用的移植性会变得更好。&lt;br&gt;&lt;/li&gt;&lt;li&gt; 感谢@easing 提醒， WebAssembly 其实允许任何语言编译到它制定的AST tree， 这样子，各位就可以开开脑洞了， 因为，你可以用C/C++写网页了。。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;i&gt;PS: 这个技术我大 Opera 居然没有参与，今天去申请了进入这个 W3C 讨论组，有消息再放给大家。 &lt;/i&gt;&lt;br&gt;&lt;i&gt;=======================================================================&lt;/i&gt;&lt;br&gt;感谢@&lt;a href=&quot;http://www.zhihu.com/people/sapjax&quot; class=&quot;internal&quot;&gt;sapjax&lt;/a&gt; Gmail 不是 2009 发布的， 是2009脱离beta，原文中已经删除其引用。&lt;br&gt;&lt;br&gt;=======================================================================&lt;br&gt;更新：&lt;br&gt;哥已成功潜入 Webassembly 成员组，代表我大 Opera. 哇哈哈哈哈哈哈&lt;br&gt;On August 6, 2015, 8:09  UTC, fredrik luo became a participant in the&lt;br&gt;WebAssembly Community Group. This person was nominated by Lars Erik&lt;br&gt;Bolstad.</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/76e48a8051d234092252797a170e5670_200x112.jpg\" data-rawwidth=\"400\" data-rawheight=\"300\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/76e48a8051d234092252797a170e5670_r.jpg\">\n这个注定是一个长回答，像我这种不喜欢写字的人，看到这种问题，一般都会在回答和不回答之间纠结一个星期。\n 下面要讲的，其实是一个悲伤的故事。\n <b>Javascript ，也叫Ecma script, 是这家伙用了 10 天时间赶出来的。。\n</b> <i>所以，各位程序猿们，如果你觉得老板…</i>\n\n<a href=\"/question/31415286/answer/58022648\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-06\" target=\"_blank\" href=\"/question/31415286/answer/58022648\">编辑于 2015-08-07</a></p>\n\n",
    "link": "https://zhihu.com/question/31415286/answer/58022648"
  },
  {
    "question": "\n接私活结果最后钱要不回来该怎么办？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">真事 做的时候网站后端偷偷的加了个公共接口，调用一次删除数据库几百条数据，最后还真没给我钱，然后我就把他们的数据库删光啦。。&lt;br&gt;————————————————————————&lt;br&gt;说下经过吧，当时我做好功能都是直接在他们服务器部署的，密码我知道，我把所有功能做完后部署完，和他们说了下，他们就把服务器密码改掉了。我和他们要钱，不仅不给 还说我开发功能拖延时间长要和我要什么赔偿费用，真是没见过这么不要脸的。 果断的删tmd的数据库。&lt;br&gt;————————————————————————&lt;br&gt;一点建议，当时做项目的时候就考虑到先在自己服务器上部署，给客户看效果，对方满意之后，把尾款结了，我再发布到他们公司的服务器上。我想如果这样做应该不会有之后的纠纷问题。可是当时做的时候懒的搞这么多就直接在他们服务器做了。&lt;br&gt;我觉的，接私活最好在自己服务器开发好（如果没有自己服务器也有很多把本地服务映射到外网的工具，如ngrok），给对方看效果。满意了付款，付款了就把代码给他们。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n真事 做的时候网站后端偷偷的加了个公共接口，调用一次删除数据库几百条数据，最后还真没给我钱，然后我就把他们的数据库删光啦。。 ———————————————————————— 说下经过吧，当时我做好功能都是直接在他们服务器部署的，密码我知道…\n\n<a href=\"/question/31534957/answer/52515060\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-06-24\" target=\"_blank\" href=\"/question/31534957/answer/52515060\">编辑于 2015-07-01</a></p>\n\n",
    "link": "https://zhihu.com/question/31534957/answer/52515060"
  },
  {
    "question": "\n阅读大型 JavaScript 源码时有什么好用的工具？\n",
    "author": "林建入",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;&lt;b&gt;这是一个为了阅读复杂 JavaScript 代码而开发的工具，以阅读 Vue.js 为例，在 Sublime Text 中打开后感觉非常复杂，不知道该从哪里读起：&lt;/b&gt;&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/7d747eb646fd5cc237c7f943df453781_b.png&quot; data-rawwidth=&quot;2784&quot; data-rawheight=&quot;1642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2784&quot; data-original=&quot;https://pic2.zhimg.com/7d747eb646fd5cc237c7f943df453781_r.png&quot;&gt;&lt;br&gt;&lt;b&gt;使用 lambda-view 打开后，可以看到源代码整体的轮廓其实就是一个立即调用的匿名函数：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/b7e92044964ea4865662756e33230183_b.png&quot; data-rawwidth=&quot;2784&quot; data-rawheight=&quot;1642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2784&quot; data-original=&quot;https://pic4.zhimg.com/b7e92044964ea4865662756e33230183_r.png&quot;&gt;&lt;br&gt;展开函数部分，值得注意的缩进风格与 Sublime Text 之类的编辑器完全不同，更易读；并且内部结构默认处于收缩状态，可以比较清楚的看到整个函数内的轮廓：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/5bb4fcefae4ee8352c63689b35cee3b1_b.png&quot; data-rawwidth=&quot;2784&quot; data-rawheight=&quot;1642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2784&quot; data-original=&quot;https://pic2.zhimg.com/5bb4fcefae4ee8352c63689b35cee3b1_r.png&quot;&gt;&lt;br&gt;点击后可以继续展开：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/fc0a1415b5a38dea0e8603abaaa97e03_b.png&quot; data-rawwidth=&quot;2784&quot; data-rawheight=&quot;1642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2784&quot; data-original=&quot;https://pic4.zhimg.com/fc0a1415b5a38dea0e8603abaaa97e03_r.png&quot;&gt;&lt;br&gt;不仅可以阅读 Vue.js 之类的前端代码，Node.js 代码也完全没问题。下面的截图来自 Node.js v4.5.0 源代码中的 node.js 文件，可以清晰的看到其整体结构也是一个立即调用的匿名函数：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/01f95ff0733c5fa905f199a8d0ca1886_b.png&quot; data-rawwidth=&quot;2784&quot; data-rawheight=&quot;1642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2784&quot; data-original=&quot;https://pic3.zhimg.com/01f95ff0733c5fa905f199a8d0ca1886_r.png&quot;&gt;&lt;br&gt;展开后内部结构很清楚：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/92c67e8691bd94a11f7b895df98d9653_b.png&quot; data-rawwidth=&quot;2784&quot; data-rawheight=&quot;1642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2784&quot; data-original=&quot;https://pic4.zhimg.com/92c67e8691bd94a11f7b895df98d9653_r.png&quot;&gt;&lt;br&gt;对于最新版本的 Node.js v6.5.0 （使用了 ES6 语法）也完全没问题，可以放心实验。该工具的安装使用方法参见项目主页：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Jianru-Lin/lambda-view&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/Jianru-Lin/l&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ambda-view&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;（截止2016年10月12日，最新版本为 v4.7.0，修复了全部已经反馈的故障）&lt;br&gt;&lt;br&gt;&lt;b&gt;-----------------------------------&lt;/b&gt;&lt;b&gt;&lt;b&gt;-----------------------------------&lt;/b&gt;&lt;/b&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;&lt;b&gt;下述内容已不再具有意义，保留仅作历史记录&lt;br&gt;-----------------------------------&lt;/b&gt;&lt;/b&gt;&lt;b&gt;&lt;b&gt;-----------------------------------&lt;/b&gt;&lt;/b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;&lt;br&gt;&lt;br&gt;（λ-VIEW 目前已经更新到 3.0 ，本文回答的内容已经不符合目前的情况了，稍后我会做同步的更新，指明新版本的操作方法）&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个问题是我自己问的，因为这一点困扰了我很久。但是这个月初的时候，我抽了一些时间写了这个工具。它能够将复杂的 JavaScript 代码简化到极易阅读的程度。具体的原理和细节我在后面解释，我们先看看使用体验——&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/8ab994db57021f6902062ad02ebeeefe_b.jpg&quot; data-rawwidth=&quot;1663&quot; data-rawheight=&quot;931&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1663&quot; data-original=&quot;https://pic3.zhimg.com/8ab994db57021f6902062ad02ebeeefe_r.jpg&quot;&gt;&lt;br&gt;上图是原始的 AngularJS 源码，可以看到左侧的行号已经超过 2 万行，直接阅读这样的代码无异于&lt;b&gt;划着独木舟在大海里寻找孤岛&lt;/b&gt;，其难度可想而知。不过当我们对其进行处理后（点击上方的 After 按钮），情况就不同了，如下图所示：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/d147c0a90b16ba5c7e2e74445c3be596_b.jpg&quot; data-rawwidth=&quot;1663&quot; data-rawheight=&quot;931&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1663&quot; data-original=&quot;https://pic3.zhimg.com/d147c0a90b16ba5c7e2e74445c3be596_r.jpg&quot;&gt;&lt;br&gt;诶？2 万行代码怎么只剩下两行了？仔细一看，哦，原来这才是 AngularJS 的「真容」！整个 AngularJS 只是由一个立即调用的匿名函数（这里用 {λ} 表示），以及一行额外的处理代码组成。通常我们阅读代码的原则是——&lt;b&gt;先从最外层轮廓上对代码本身获得一个直观的认识，然后再深入到具体的细节里，&lt;/b&gt;这能从根本上避免在刚开始就陷入细节的泥潭。这个工具正是建立在这一原则之上的。或者说，它可以帮助你更好的贯彻这一原则。（我们在稍后会用它来和其他常见的 IDE、文本编辑器进行对比，这会让你对此看得更清楚）&lt;br&gt;&lt;br&gt;现在我想看看 AngularJS 中的那个匿名函数里到底做了些什么。于是我点击  {λ} 部分，紧接着就变成了下面的样子：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/4a7000a04bfede4ab6e025834c1b4b36_b.jpg&quot; data-rawwidth=&quot;1663&quot; data-rawheight=&quot;931&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1663&quot; data-original=&quot;https://pic3.zhimg.com/4a7000a04bfede4ab6e025834c1b4b36_r.jpg&quot;&gt;&lt;br&gt;你会注意到：&lt;br&gt;&lt;ol&gt;&lt;li&gt;顶部标识出了当前函数的路径 &amp;lt;Program&amp;gt; / λ-0 （&amp;lt;Program&amp;gt; 代表顶级作用域，而 λ-0 是我们目前所处于的位置，它是顶级作用域下的第 0 号匿名函数）&lt;/li&gt;&lt;li&gt;左侧列举出了当前作用域内定义的子函数&lt;/li&gt;&lt;li&gt;右侧的源代码区域出现的&lt;b&gt;不是&lt;/b&gt;原始的 JavaScript 代码，而是经过美化的——花括号都不见了，而是改为使用缩进；分号都去除了；等等&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;今天先写到这里，后续会补上&lt;br&gt;&lt;br&gt;待续1：这个工具是怎么实现的？&lt;br&gt;待续2：和 IDE 相比这个工具有什么优缺点？&lt;br&gt;待续3：后续会增加什么功能？&lt;br&gt;&lt;br&gt;我强烈建议你亲自上 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.miaodeli.com&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;喵德利&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; （我已经部署好了） 试一试，因为有些细节如果由我在此描述难免太冗长，但你一旦自己亲身体验，就会立刻体会到。&lt;br&gt;&lt;br&gt;&lt;i&gt;2014-09-23 更新&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;这个工具是怎么实现的？&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个工具看起来很复杂。这可能会产生出让人钦佩的误解。事实上我确实做了一些工作，但并不像看起来那么艰巨。如果列举一下，整个工作实际上是由以下部分合力完成的：&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;ACE 编辑器，提供了代码编辑支持&lt;/li&gt;&lt;li&gt;Esprima 解析器，能够将 JavaScript 源代码解析为 AST（抽象语法树）&lt;/li&gt;&lt;li&gt;jQuery 库，帮助我便捷的进行 DOM 操作&lt;/li&gt;&lt;li&gt;Bootstrap 库，简化了界面布局和组织的工作&lt;/li&gt;&lt;li&gt;我自己的代码，实现了最终的功能&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;可见我确实做了一些事。但更主要的工作还是由 1-4 的部分完成的。如果你觉得这个软件很不错，或许上述库的作者们更应当被感谢。&lt;br&gt;&lt;br&gt;特别值得一提的是 Esprima，它是这整个软件所用到的核心部件。我首先使用它来完成 AST（抽象语法树）的构建，紧接着，我会遍历这颗 AST 树，然后重新按照我想要的方式生成一颗 DOM 树。这样就完成了一次重渲染，将原始的 JavaScript 代码改写为了更简洁的形式。&lt;br&gt;&lt;br&gt;当然，在遍历 AST 树的过程中也要做一些简单的分析工作。否则就无法实现将子函数抽取出来这样的操作了。不过这个分析操作实在很简单，也没什么可谈的。后续我会在分析过程上做很多工作，实现更多实用的功能。详细的情况可以参见后续的路线图部分。&lt;br&gt;&lt;br&gt;&lt;b&gt;和 WebStorm 之类的 IDE 相比有什么优缺点？&lt;/b&gt;&lt;br&gt;&lt;br&gt;术业有专攻。尽管 WebStorm 之类的 IDE 提供了强大的「编辑」功能。但是从实践的角度来说，这些编辑器在用于阅读代码时还存在诸多不足。&lt;br&gt;&lt;br&gt;比较典型的一点是，编辑器总是老老实实的把原始的排版格式呈现出来。而实际上我们需要的是更加紧凑、标准、一致、适度简化后的呈现。例如下面的对比图所示：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/c2d5bad683754c8c689f47c8630c76fe_b.jpg&quot; data-rawwidth=&quot;535&quot; data-rawheight=&quot;259&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;535&quot; data-original=&quot;https://pic3.zhimg.com/c2d5bad683754c8c689f47c8630c76fe_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;上图是同一段代码（选自 AngularJS）处理前后的对比。我们可以注意到一些细节：&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;分号被移除了&lt;/li&gt;&lt;li&gt;花括号被移除了（改为用缩进来表示层次关系）&lt;/li&gt;&lt;li&gt;行间距被适当增大了，看起来没那么拥挤了&lt;/li&gt;&lt;li&gt;函数调用时，前后括号和参数之间都增加了空白&lt;/li&gt;&lt;li&gt;最重要的是，代码从 6 行变成了 4 行，缩短了&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;任何程序员——任何真正尝试过阅读陌生的大型项目的程序员，应该都能够理解这种形式简化将带来的实际好处。它让你更加专注于代码的逻辑，而不是形式。&lt;br&gt;&lt;br&gt;我们的代码阅读软件能够理解代码的结构，并能够将其转换为更加简洁的形式，这一点有时候能给我们带来意想不到的帮助——例如阅读在 web 环境下那些被压缩过的代码。下图的代码截取自某站点：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/8464b0730e2bf2ec34c2b9b5898c54f1_b.jpg&quot; data-rawwidth=&quot;1657&quot; data-rawheight=&quot;343&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1657&quot; data-original=&quot;https://pic2.zhimg.com/8464b0730e2bf2ec34c2b9b5898c54f1_r.jpg&quot;&gt;&lt;br&gt;这样的代码是经过压缩的——删掉了空格、缩进、换行等字符并改写了变量名等——阅读几乎是不可能的。但有些人却必须要从这样的代码里找出感兴趣的东西，比如大家熟悉的白帽子安全人员。&lt;br&gt;&lt;br&gt;相对一般的 IDE，专门的代码阅读软件在处理这样的问题上更加得心应手。&lt;br&gt;&lt;br&gt;综上所述，WebStorm 之类的软件在「编辑」、「项目管理」方面更加强大，但在「阅读」、「分析」方面，专门的代码阅读工具会更加方便。&lt;br&gt;&lt;br&gt;&lt;b&gt;未来的发展路线图——后续功能开发计划&lt;/b&gt;&lt;br&gt;&lt;br&gt;（待续）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/7d747eb646fd5cc237c7f943df453781_200x112.png\" data-rawwidth=\"2784\" data-rawheight=\"1642\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/7d747eb646fd5cc237c7f943df453781_r.png\">\n<b><b>这是一个为了阅读复杂 JavaScript 代码而开发的工具，以阅读 Vue.js 为例，在 Sublime Text 中打开后感觉非常复杂，不知道该从哪里读起：</b> </b> <b>使用 lambda-view 打开后，可以看到源代码整体的轮廓其实就是一个立即调用的匿名函数： 展开函数部分，值得注意的缩…<a href=\"//link.zhihu.com/?target=https%3A//github.com/Jianru-Lin/lambda-view\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/Jianru-Lin/l</span><span class=\"invisible\">ambda-view</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> （截止2016年10月12日，最新版本为 v4.7.0，修复了全部已经反馈的故障） <b>-----------------------------------</b><b><b>-----------------------------------</b></b></b>\n\n<a href=\"/question/25490540/answer/30883710\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-09-22\" target=\"_blank\" href=\"/question/25490540/answer/30883710\">编辑于 2016-10-12</a></p>\n\n",
    "link": "https://zhihu.com/question/25490540/answer/30883710"
  },
  {
    "question": "\n用 JavaScript 可以做哪些有趣的事情？\n",
    "author": "zecy",
    "content": "\n\n<textarea hidden class=\"content\">.&lt;br&gt;可以用来造女朋友。&lt;br&gt;&lt;br&gt;《&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//paiza.jp/poh/ando&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;恋愛SLG: プログラミングで彼女をつくる&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（恋爱 SLG ：编程造女朋友）》是由日本 Gino 开发的一个网页游戏，用于推广他们运营的程序员中介网站&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//paiza.jp/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt; ITプログラマー・エンジニア転職のpaiza&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和编程教学网站 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//paiza.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Web-based online coding environment&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 。&lt;br&gt;&lt;br&gt;在这个游戏中，你有一个初始女友，她有一些基本的设置项，比如瞳色、发型、简单的服装。但这当然是不够的，为了把她打造成你心中的女神，你必须解锁更多的物品！&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;856&quot; data-rawwidth=&quot;1327&quot; src=&quot;https://pic1.zhimg.com/10af253a29edaa764aaba65b1d746998_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1327&quot; data-original=&quot;https://pic1.zhimg.com/10af253a29edaa764aaba65b1d746998_r.jpg&quot;&gt;&lt;br&gt;你要通过做算法题来达成这个目标：&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;711&quot; data-rawwidth=&quot;1327&quot; src=&quot;https://pic1.zhimg.com/2fba4d3347e0a02526cfb3952ead8850_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1327&quot; data-original=&quot;https://pic1.zhimg.com/2fba4d3347e0a02526cfb3952ead8850_r.jpg&quot;&gt;&lt;br&gt;你有很多语言可以选择，当然也包括 JavaScript ！&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;788&quot; data-rawwidth=&quot;1088&quot; src=&quot;https://pic3.zhimg.com/70281638e93e54a7d6d712ac26d4e8be_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1088&quot; data-original=&quot;https://pic3.zhimg.com/70281638e93e54a7d6d712ac26d4e8be_r.jpg&quot;&gt;&lt;br&gt;完成挑战，不光能够解锁新的设置项，还能够提高好感度！&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;488&quot; data-rawwidth=&quot;369&quot; src=&quot;https://pic1.zhimg.com/c844f361b16945366a846dc8781c3868_b.png&quot; class=&quot;content_image&quot; width=&quot;369&quot;&gt;&lt;br&gt;这样女朋友的表情会变得更加丰富，可以换上各种衣服，最还可以去约会哦！&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;898&quot; data-rawwidth=&quot;960&quot; src=&quot;https://pic4.zhimg.com/886877461427ad68f19b204f22908e6f_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;960&quot; data-original=&quot;https://pic4.zhimg.com/886877461427ad68f19b204f22908e6f_r.jpg&quot;&gt;&lt;br&gt;除此以外，你还能和其他男朋友同台竞技，比比谁写的更快更简洁。&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;816&quot; data-rawwidth=&quot;997&quot; src=&quot;https://pic3.zhimg.com/3d52a27098791d8375e43ee90fa1185e_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;997&quot; data-original=&quot;https://pic3.zhimg.com/3d52a27098791d8375e43ee90fa1185e_r.png&quot;&gt;&lt;br&gt;表现出众，没准还能收到 Offer 哦！&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;257&quot; data-rawwidth=&quot;986&quot; src=&quot;https://pic2.zhimg.com/30b7e3a7e301e595e0e51a446e5ec369_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;986&quot; data-original=&quot;https://pic2.zhimg.com/30b7e3a7e301e595e0e51a446e5ec369_r.png&quot;&gt;&lt;br&gt;还等什么，快来试试吧！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawheight=\"856\" data-rawwidth=\"1327\" src=\"https://pic1.zhimg.com/10af253a29edaa764aaba65b1d746998_200x112.jpg\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/10af253a29edaa764aaba65b1d746998_r.jpg\">\n. 可以用来造女朋友。 《<a class=\" wrap external\" href=\"//link.zhihu.com/?target=https%3A//paiza.jp/poh/ando\" target=\"_blank\" rel=\"nofollow noreferrer\">恋愛SLG: プログラミングで彼女をつくる<i class=\"icon-external\"></i></a>（恋爱 SLG ：编程造女朋友）》是由日本 Gino 开发的一个网页游戏，用于推广他们运营的程序员中介网站<a class=\" wrap external\" href=\"//link.zhihu.com/?target=http%3A//paiza.jp/\" target=\"_blank\" rel=\"nofollow noreferrer\"> ITプログラマー・エンジニア転職のpaiza<i class=\"icon-external\"></i></a> 和编程教学网站 <a href=\"//link.zhihu.com/?target=https%3A//paiza.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Web-based online coding env…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/38269966/answer/76501304\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/38269966/answer/76501304\">发布于 2015-12-13</a></p>\n\n",
    "link": "https://zhihu.com/question/38269966/answer/76501304"
  },
  {
    "question": "\n在你的前端路上，印象最深的事儿是什么？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">混蛋前男友。&lt;br&gt;&lt;br&gt;他在大二时做队长和几个厉害的程序员做项目比赛。然后遇到大一刚读完的我，我正愁不知道学什么好。他说:我是后台，队里也有ACM厉害的，也有美工，就缺一个前端，你来做我的前端吧。然后尼玛我就成了他的前端，他教我前端顺便把我勾搭到手，给他做的网页，有项目的或者是情人节礼物送他的。结果最后他还嫌我技术不好，没有能在他们的hack day比赛做出前台效果，他没能拿到奖品mac。我本来大四实习就去了他工作的城市，已经留用了，签过合同了，结果我一回校毕业就把我甩了！！&lt;br&gt;&lt;br&gt;最恨别人问我为什么做前端！！！&lt;br&gt;&lt;br&gt;————————————————&lt;br&gt;你们不要赞了好么！他也看知乎的啊！！&lt;br&gt;&lt;br&gt;————————————————&lt;br&gt;事情是真的，但是我并没有说有因果关系。大家可以拿来开心一下，就不要赞了好么！！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n混蛋前男友。 他在大二时做队长和几个厉害的程序员做项目比赛。然后遇到大一刚读完的我，我正愁不知道学什么好。他说:我是后台，队里也有ACM厉害的，也有美工，就缺一个前端，你来做我的前端吧。然后尼玛我就成了他的前端，他教我前端顺便把我勾搭到手，给…\n\n<a href=\"/question/29263567/answer/43864020\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-04-04\" target=\"_blank\" href=\"/question/29263567/answer/43864020\">编辑于 2015-04-06</a></p>\n\n",
    "link": "https://zhihu.com/question/29263567/answer/43864020"
  },
  {
    "question": "\n为什么市场上优秀的前端这么少，国外也是这样吗？\n",
    "author": "净空无道",
    "content": "\n\n<textarea hidden class=\"content\">原因其实很简单，就是因为FE这个职位，就是一个充满矛盾的职位，这个职位的存在就是一个大BUG啊！&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;入门及其容易，精通极其困难。&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;一个智商正常的高中毕业生，一个星期，绝对能写出基本的HTML页面，附上CSS，还有简单的JS。让他学C？一个星期可能还学不到指针呢，指针要多久能跨过去还不知道呢。&lt;/li&gt;&lt;li&gt;但是，只要你的资质不差，努力肯学，那么随着你的项目经验丰富和自己的钻研，RD（C、Java，甚至PHP）升级到高级工程师到资深工程师不难。但是前端，看看现在市场上的资深工程师有几个，北极厂里面能到T7、T8的，其他厂类似等级前端工程师有多少就知道了，JS的作为一个从函数式编程过来的语言，很多比较低级的工程师因为理解不了他的思想导致很容易装撞上天花板，然后再也迈不过去了。&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;锦上可以添花，雪中不能送炭&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;现在因为大家对移动端重视，对交互要求高，看了国外的好东西多了，审美也上来了，所以才觉得前端重要，交互重要。&lt;/li&gt;&lt;li&gt;但是客观说，一个网站/APP，没有好的前端，就是交互不好、页面不美观，就当作一个丑人吧。但是没有后端，功能实现不好，性能上不去，那就是缺胳膊少腿的残疾人了。&lt;/li&gt;&lt;li&gt;所以很多用人的CEO、CTO、HR喊缺前端的时候，心里想的是这个锦上缺朵花，但是绝对不会给你炭的地位。&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;充满BUG的开发环境&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;是的，计算机的一个重大的特点就是兼容性的问题。这个任何开发都不否认。&lt;/li&gt;&lt;li&gt;但是能够不兼容到JS、CSS这个级别的，还有几个语言？虽然说连C这样的都有兼容性问题，C89下跑的好好的程序，到了C99下面可能就会有问题，或者说你用的Sun的Java实现写的程序到MS的Java实现下面就有问题，但是那都是很细节，很特定的兼容性问题了啊。&lt;/li&gt;&lt;li&gt;像JS这样，连最重要的事件处理就两大派系，DOM结构两大派系，CSS一堆混乱的情况，真心没见过更乱的啊。就好象说你用的JDK里面的Date对象默认给你处理的是玛雅历法，你是不是想掀桌子骂人？&lt;/li&gt;&lt;li&gt;所以JS的面试、开发中，很大一块被人津津乐道的就是各种兼容性的问题，比如让你自己写一个AJAX实现你怎么处理不同浏览器的兼容性问题啊，冒泡和捕捉怎么处理啊等等。&lt;/li&gt;&lt;li&gt;不过感谢IE6，要不然全中国的2/3的FE都少失业了。&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;职能/责任不对称&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;在一个成熟的公司、项目里面，前端只负责显示、交互，和简单的现实逻辑，后端负责业务逻辑、数据存储。&lt;/li&gt;&lt;li&gt;对应的，前端出点问题，比如按钮位置不对了，点击后的事件不对了，傻子都能看出来，但是后端的问题，除非真的是逻辑写错了，而且是很直白的错误，否则很难一眼看出来，洒家曾经客串过一次RD，写的一个BUG上线稳定运行30后才发现。&lt;br&gt;&lt;/li&gt;&lt;li&gt;但是出问题了，因为所有人，包括QA第一接触的就是前端界面，所以很自然的就把bug扔给前端，前端吭哧吭哧看半天，发现有60%都是后端的问题再扔过去——做过业务的FE同学肯定有过这样的经历吧。&lt;/li&gt;&lt;li&gt;所以洒家自己做leader的时候很多同学都抱怨过这些类似的问题，不是自己的问题但是第一个被指责的却是自己。很不爽，或者说，很委屈。&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;职业技能树乱点&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;一般公司里面，FE和RD都是放在技术体系下面，最终汇报对象都是CTO，但是FE在很多地方，技能树是瞎点出来了！&lt;/li&gt;&lt;li&gt;如果你看FE的面试题目，会发现和RD没啥区别，语言的特性、性能的分析、基本算法等等，除了把语言换掉基本没事情区别。&lt;/li&gt;&lt;li&gt;但是实际工作中，一个好的FE，要跟PM、UI/UE/UX、RD、QA打交道，需要你理解产品的思想，懂艺术设计，发现bug的时候还要跟踪到后端确定是谁的bug等等，人家RD的技能数是一颗茁壮成长的苍天大树，FE的技能书就是一个歪歪扭扭枝枝杈杈但是还要你长高长粗的怪树。&lt;/li&gt;&lt;li&gt;最明显的，需求评审会上，RD只关注这个功能我能不能实现，FE还要关注这个按钮能不能这么画，这个设计会不会有浏览器兼容问题，这个交互是不是合理——虽然这是别人的工作但是一旦有问题第一个被骂的都是FE啊。&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;&lt;b&gt;职业发展线路不明&lt;/b&gt;&lt;/li&gt;&lt;ol&gt;&lt;li&gt;其实这点从整个互联网行业都有，你做医生、教师这些职业，看看周围的人，就知道，如果你做得好，或者不好，或者平庸，你到40、50、60的时候是什么样子。但是IT从业人员，尤其是互联网从业人员，看不到这个未来，所以才有那么多类似能不能写程序到30岁这样的问题。&lt;/li&gt;&lt;li&gt;在这个前提下，FE更悲催的是，RD可以看见自己的技术路线是，初级工程师、高级工程师、资深工程师、Team/Tech Leader、Tech Manager，直道CTO，当然半道该行的不算啊。&lt;/li&gt;&lt;li&gt;在FE看来，一直升到资深工程师还是可以的，但是后面除非很大的公司，有专门的前端Team，否则再升Leader和Manager的时候，FE处于一个很不利的地位。我们确实也看到因为FE的技能树乱点，所以很多FE也会在合适的时候走PM、UI、甚至创业的路线但是很难看见FE做到CTO（除非加入创业公司直接做CTO）。&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic4.zhimg.com/ecc2371529842749f8ada1ff80f52f17_b.jpg&quot; data-rawwidth=&quot;950&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;950&quot; data-original=&quot;https://pic4.zhimg.com/ecc2371529842749f8ada1ff80f52f17_r.jpg&quot;&gt;随手画了这么一张图，只要你勤奋、努力，RD是可能随着时间累计自己的经验然后提高自己的等级的，但是FE可以看到，在蓝色点之前，很快的就能学到80%的技能，但是后面的20%需要非常长的时间去突破，甚至有人因为不理解FE的很多编程思想，几年都一直突破不过去。&lt;br&gt;&lt;br&gt;加上其他的原因，比如这几年FE的技术发展确实太快了，每天都在层出不穷的概念、名词，要分辨哪些是真金白银的技术，那些是大公司的工程师为了升职加薪搞出来概念，然后再学习吸取这些技术，对FE的要求也无形中提供很多了。&lt;br&gt;&lt;br&gt;所以，一个充满了BUG的职位，怎么可能那么容易招到合适的人才呢？</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/ecc2371529842749f8ada1ff80f52f17_200x112.jpg\" data-rawwidth=\"950\" data-rawheight=\"500\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/ecc2371529842749f8ada1ff80f52f17_r.jpg\">\n原因其实很简单，就是因为FE这个职位，就是一个充满矛盾的职位，这个职位的存在就是一个大BUG啊！ <b>入门及其容易，精通极其困难。</b>一个智商正常的高中毕业生，一个星期，绝对能写出基本的HTML页面，附上CSS，还有简单的JS。让他学C？一个星期可能还学不到指针…\n\n<a href=\"/question/29875948/answer/48714000\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-23\" target=\"_blank\" href=\"/question/29875948/answer/48714000\">编辑于 2015-05-23</a></p>\n\n",
    "link": "https://zhihu.com/question/29875948/answer/48714000"
  },
  {
    "question": "\nHTML5 有哪些让你惊艳的 demo？\n",
    "author": "SuneBear",
    "content": "\n\n<textarea hidden class=\"content\">找不到之前所见过的网页，深有同感！&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//tympanus.net/Development/AnimatedBooks/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Animated Books with CSS 3D Transforms&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  这是一个3D书本，CSS3完成&lt;br&gt;&lt;br&gt;=========HTML5特效聚集网站========&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//christmasexperiments.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;christmasexperiments.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.chromeexperiments.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;chromeexperiments.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.mrdoob.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mr.doob&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//litewerx.dk/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;litewerx.showcase&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//fff.cmiscm.com/%23%21/main&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Form Follows Function&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//alteredqualia.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;AlteredQualia&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html5rocks.com/en/resources&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;html5rocks.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;===========视觉特效与交互式视频============&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.thewildernessdowntown.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;thewildernessdowntown.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.itsumokawaii.jp/en/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Interactive Film &quot;itsumo kawaii&quot;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.beonlineb.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;beonlineb.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.justareflektor.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arcade Fire / Just a Reflektor&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.aaronkoblin.com/Aaronetrope/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Aaronetrope&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  3D科幻视频投影对话&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//aleksandarrodic.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Aleksandar Rodic&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 3D立体博客&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//inear.se/beanstalk/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Beanstalk&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ro.me/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ro.me/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//alteredqualia.com/three/examples/webgl_terrain_dynamic.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;three.js webgl&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 动态地图&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ogreen.special-t.com/en/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ô Green by SPECIAL.T&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 水中植物广告&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//kimatica.net/%23/leafs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Kimatica - Creative Connections&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 树脉&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//callhimecho.com/%23&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Earth to Echo&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 电影科幻宣传网站&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//middle-earth.thehobbit.com/map&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;middle-earth.thehobbit.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/map&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 霍比特人&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hellorun.helloenjoy.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HelloRun™&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  线稿房间，第一人称动&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//letters-inc.jp/%3Ft%3Dd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;LETTERS, INC.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 集成电路&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dataveyes.com/%23%21/en&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dataveyes | Human Data Interactions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 视觉粒子&lt;br&gt;&lt;br&gt;=========音乐与可视化==========&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//do.adive.in/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;do.adive.in/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.clicktorelease.com/code/rocking-dendrites/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rocking dendrites&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 摇滚与触手&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jabtunes.com/labs/arabesque/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Arabesque - Music Colour Particles&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 优美的纯音乐与彩色烟雾&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blackpawn.com/demos/vrtx-01-compo-filler/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;compo.filler&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  蓝电之音&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//lights.helloenjoy.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lights&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 波点&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.airtightinteractive.com/demos/js/uberviz/wordproblems/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ĂberViz&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 电子&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.nihilogic.dk/labs/canvas_music_visualization/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A [ Radiohead&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;   音乐画画&lt;br&gt;&lt;br&gt;=========物理特性元素============&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hakim.se/experiments/html5/blob/03/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blob &lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 大水球&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//andrew-hoyer.com/experiments/cloth/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Andrew Hoyer&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 布-骨架&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ie.microsoft.com/testdrive/Performance/FishBowl/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5 Fish Bowl&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; IE-鱼缸&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//webglsamples.googlecode.com/hg/aquarium/aquarium.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;googlecode.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; chrome-水族馆&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//alteredqualia.com/three/examples/webgl_animals.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;three.js webgl&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 动物&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.spielzeugz.de/html5/liquid-particles-3D/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Liquid Particles 3D&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 3D粒子流&lt;br&gt;&lt;br&gt;==========画绘与生成===========&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.queness.com/post/4650/10-jaw-dropping-html5-and-javascript-effects&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;10 Jaw Dropping HTML5 and Javascript Effects&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  10个画绘特效&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//html5-pro.com/wormz/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wormz . html5 canvas experiment&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 图片生成毛毛虫~~&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//weavesilk.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Silk – Interactive Generative Art&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  光效&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//sketchtoy.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sketch Toy: Draw sketches and share replays with friends!&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 记录线稿步骤&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//asciiflow.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ASCIIFlow Infinity&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ASCII字符生成图表&lt;br&gt;&lt;br&gt;========一些融入了HTML5的网站=======&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//andrevv.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Andrew McCarthy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  滚动动物奔跑&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//tokyomildfoundation.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;tokyomildfoundation.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  东京温柔基金&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.fifty-five.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fifty-five | the data agency&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  垂直分割&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//aprilzero.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A P R I L Z E R O&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  数据分析&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//gamingmedia.ru/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gaming Media&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 创意横向滚动&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.luxaqua-design.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Luxaqua | Aquarium Design&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 深邃海底纵向滚动&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.kilfish.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KILFISH&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  鬼畜纵向滚动&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//fullten-plums.com.tw/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;有顆梅，在台灣&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  食品纵向滚动&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.vespillo-lefilm.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Vespillo le film&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  Vespillo纵向滚动&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//moonbear.animalsasia.org/ie/en/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Exploring Moon Bears&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; IE-月熊志&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//metaljunkthegame.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Metal Junk: The Game&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; HTML5游戏：金属废墟，游戏就不展开了~~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n找不到之前所见过的网页，深有同感！ <a href=\"//link.zhihu.com/?target=http%3A//tympanus.net/Development/AnimatedBooks/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Animated Books with CSS 3D Transforms<i class=\"icon-external\"></i></a> 这是一个3D书本，CSS3完成 =========HTML5特效聚集网站======== <a href=\"//link.zhihu.com/?target=http%3A//christmasexperiments.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">christmasexperiments.com 的页面<i class=\"icon-external\"></i></a> <a href=\"//link.zhihu.com/?target=http%3A//www.chromeexperiments.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">chromeexperiments.com 的页面<i class=\"icon-external\"></i></a> <a href=\"//link.zhihu.com/?target=http%3A//www.mrdoob.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mr.doob<i class=\"icon-external\"></i></a> <a href=\"//link.zhihu.com/?target=http%3A//litewerx.dk/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">litewerx.showcase<i class=\"icon-external\"></i></a> <a href=\"//link.zhihu.com/?target=http%3A//fff.cmiscm.com/%23%21/main\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Form Follows Funct…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/24398907/answer/30239864\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/24398907/answer/30239864\">发布于 2014-09-07</a></p>\n\n",
    "link": "https://zhihu.com/question/24398907/answer/30239864"
  },
  {
    "question": "\nH5 是什么？\n",
    "author": "王德福",
    "content": "\n\n<textarea hidden class=\"content\">前一段时间很火的 吴亦凡入伍的广告&lt;br&gt;你看静态新闻的时候，是在加载后面两个视频，加载完成之后，吴亦凡就蹦出来了&lt;br&gt;&lt;br&gt;所以你们看到吴亦凡从画面里面出来的时候脑海里的台词是：&lt;br&gt;&lt;b&gt;卧槽，这是怎么做到的！&lt;/b&gt;&lt;br&gt;而我的内心台词是：&lt;br&gt;&lt;b&gt;卧槽，我知道是怎么做到的，你把流量还给我好么！&lt;/b&gt;&lt;br&gt;================================&lt;br&gt;更新一张之前和甲方之间的聊天记录，在整个minisite已经交付上线以后，甲方突然问了这么一句，大家感受一下。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/4223d739290501fd0a0b34364de7fe5e_b.jpg&quot; data-rawwidth=&quot;719&quot; data-rawheight=&quot;1280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;719&quot; data-original=&quot;https://pic3.zhimg.com/4223d739290501fd0a0b34364de7fe5e_r.jpg&quot;&gt;这就是为什么我很反感别人跟我说H5，我特么知道你到底什么意思。。。&lt;br&gt;&lt;br&gt;===================================================&lt;br&gt;先科普一下，HTML5并不是&lt;b&gt;一项技术&lt;/b&gt;，而是&lt;b&gt;一个标准&lt;/b&gt;。&lt;br&gt;标准的意思就是：学生准则手册。你可以按照准则做，甚至可以超出准则更加严格的要求自己，也可以不按照准则来，但是会被老师训斥小伙伴讨厌，别人都不找你玩，就像IE6一样。&lt;br&gt;&lt;br&gt;那HTML5这些标准浏览器厂商到底姿持不姿持呢？这要看他们各自的尿性了。像chrome这种不仅在很多标准上支持的非常好，还积极上进很多地方超出了标准，支持一些标准中还是草案的部分。&lt;br&gt;&lt;br&gt;所以其实要么我们是作为理论派讨论&lt;b&gt;HTML5标准&lt;/b&gt;，要么是作为实践派讨论&lt;b&gt;HTML5标准在某浏览器的应用&lt;/b&gt;。但是实际上我们在说到H5的时候，并不是指标准，也不是指标准的应用，而是一个硬生生造出来的奇怪概念合集，所以我是&lt;b&gt;旗帜鲜明的反对这个称呼&lt;/b&gt;的。&lt;br&gt;&lt;br&gt;最近一年的时间，我主要靠这个东西养家（并没有家）糊口。所以我是懂得甲方打电话过来询问，“你是不是会做H5开发？”的时候，我知道他们要的是那种可以在朋友圈分享的，看起来很酷炫的小页面，他们实际要的东西拆开来看大概包括以下技术点;&lt;br&gt;&lt;br&gt;1. 页面素材预加载技术，可以使用createJS之中的preloadJS。我没有看preloadJS的源码，不过预加载并不是HTML5标准中更新的方法。&lt;br&gt;2. 音乐加载播放技术，createJS中同样有soundJS可以实现，而且这部分说起来确实是HTML5标准支持的内容，在上个时代并没有audio这样的标签。&lt;br&gt;3.可以滑动的页面，大多数是用了swiper.js这个Jquery插件，也有一些是手写的swipe，比较拙劣的手写版页面是不会跟手滑动的，其中touchstart等四个touch系列的事件是HTML5标准中的事件&lt;br&gt;4.可以涂抹擦除，多半是canvas叠加层，canvas是HTML5标准里面的标签，是代表了先进生产力的标签。&lt;br&gt;5.有动态的文字和图片，常见的是使用了css3或者直接使用js动画。很多时候提到HTML5多半还会带上CSS3，而CSS的分级又是另外的一个问题了，在不同的项目标准上，CSS会独立定级，以后应该不会有CSS4这个东西，所以大家也不用担心在H5以后又冒出来了C4（不过真是想用C4炸死那些每天把H5挂在嘴上的人）&lt;br&gt;6.可以填表报名，这是最基本的表单，是有网页以来就有的东西。&lt;br&gt;7.可以支持分享自定义的文案和图片，这个是用到了微信的jssdk，和HTML标准半毛钱关系都没有。&lt;br&gt;8.还有其他我想起来再补充的。&lt;br&gt;&lt;br&gt;所以我们在谈论H5的时候，实际上是一个&lt;b&gt;解决方案&lt;/b&gt;，一个看起来&lt;b&gt;酷炫&lt;/b&gt;的移动端onepage网站的解决方案。而这个解决方案不仅包含了HTML5新增的audio标签，canvas，拖拽特性，本地存储，websocket通信，同时也包括了&lt;b&gt;盒模型&lt;/b&gt;，包括&lt;b&gt;绝对定位&lt;/b&gt;，包括&lt;b&gt;一切前端的基本知识&lt;/b&gt;。&lt;br&gt;&lt;br&gt;有学弟来问我说，学长我想学H5，应该从哪里开始？&lt;br&gt;我说HTML5新增特性在W3C上都可以查得到的。&lt;br&gt;学弟说，不，我想学的是H5，想做H5的页面。&lt;br&gt;于是我猜测他所指的就是上面论述的这种酷炫小页面，我就说，那你要先学习&lt;b&gt;HTML&lt;/b&gt;，包括HTML5的新标准和之前的全部标准，然后学&lt;b&gt;CSS&lt;/b&gt;以及&lt;b&gt;CSS3&lt;/b&gt;，了解它们在浏览器的实现情况，&lt;b&gt;原生JS&lt;/b&gt;了解一点就可以，大多的操作可以用&lt;b&gt;Jquery&lt;/b&gt;，了解常用的几个&lt;b&gt;Jquery插件&lt;/b&gt;的用法，应该就差不多了。如果想要做更酷炫的的，学一下&lt;b&gt;egret&lt;/b&gt;或者&lt;b&gt;cocos2d&lt;/b&gt;更好。如果要优化加载速度，还要学一下&lt;b&gt;grunt&lt;/b&gt;一类的自动化工具。&lt;b&gt;微信的sdk&lt;/b&gt;有很多坑，至少&lt;b&gt;nodejs&lt;/b&gt;或者&lt;b&gt;php&lt;/b&gt;一类的后端语言要会一点。&lt;br&gt;&lt;br&gt;学弟说，&lt;b&gt;那这不就是前端了么？我只是想学H5啊&lt;/b&gt;。&lt;br&gt;&lt;br&gt;所以你看，当我们对一个概念的内涵无法统一的时候，我们根本不知道彼此之间在谈论的是什么。&lt;br&gt;&lt;br&gt;”H5“本应是一个&lt;b&gt;技术合集&lt;/b&gt;，却被意会成了&lt;b&gt;一项技术&lt;/b&gt;，变成可以在&lt;b&gt;质&lt;/b&gt;上而不是&lt;b&gt;量&lt;/b&gt;上描述的概念。&lt;br&gt;&lt;br&gt;对于营销来说，我们只要讲我们可以做H5或者不能做，这种定性的描述就够了。但是对于技术上，这是定量的事情，只能在具体某个技术项上是否，无法对这个本不存在的概念说是否。&lt;br&gt;&lt;br&gt;就比如我遇到过有甲方说，我们之前找了一个人做H5，做的还不错，但是这个case他又说做不了，我也搞不懂H5和H5之间也有那么大差别吗？我只能笑笑和他说，&lt;b&gt;世界这么大，各种各样的H5都是有的&lt;/b&gt;。&lt;br&gt;&lt;br&gt;这就是为什么我反对H5，因为这个名词和它表示的&lt;b&gt;内涵是严重不符&lt;/b&gt;的，这让我们&lt;b&gt;难以沟通&lt;/b&gt;，让营销人和技术人之间&lt;b&gt;产生误解&lt;/b&gt;，让浑水摸鱼的培训师们赚的盆满钵满，让技术新人不&lt;b&gt;踏踏实实&lt;/b&gt;的学习技术。&lt;br&gt;&lt;br&gt;&lt;b&gt;每当有人问我，”你是不是做H5的？“&lt;/b&gt;&lt;br&gt;&lt;b&gt;我的内心都很想咆哮一句，”你才是做H5的，你全家都是做H5的“&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/4223d739290501fd0a0b34364de7fe5e_200x112.jpg\" data-rawwidth=\"719\" data-rawheight=\"1280\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/4223d739290501fd0a0b34364de7fe5e_r.jpg\">\n前一段时间很火的 吴亦凡入伍的广告 你看静态新闻的时候，是在加载后面两个视频，加载完成之后，吴亦凡就蹦出来了 所以你们看到吴亦凡从画面里面出来的时候脑海里的台词是： <b>卧槽，这是怎么做到的！</b> 而我的内心台词是： <b>卧槽，我知道是怎么做到的，你把流量…</b>\n\n<a href=\"/question/30363342/answer/53957010\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-06\" target=\"_blank\" href=\"/question/30363342/answer/53957010\">编辑于 2016-09-09</a></p>\n\n",
    "link": "https://zhihu.com/question/30363342/answer/53957010"
  },
  {
    "question": "\n零基础的前端开发初学者应如何系统地学习？\n",
    "author": "彭晟杰",
    "content": "\n\n<textarea hidden class=\"content\">首先你已经不是零基础了。&lt;br&gt;&lt;br&gt;其实这种事情没有什么捷径，亲自动手，一步一步来即可，不能好高骛远。&lt;br&gt;&lt;br&gt;Step 1: 用 HTML + CSS 模仿几个漂亮的静态页面。当你看到现在大部分的网页都觉得能大概猜到怎样做，并且花时间真的能做出来的时候，即可进入下一步。注意，这个时候请你不要管浏览器兼容性或者太过注意代码的优雅结构，因为没必要。做到能兼容现代浏览器，内容和样式基本完全分离即可。这大概需要半个月到一个月的学习时间。&lt;br&gt;&lt;br&gt;Step 2: 用 HTML + CSS + JS 写几个有交互的页面。例如，你可以写一个漂亮的注册页面，它能够验证各种输入是否符合条件并且有一个用原生 JS 实现的日期选择器（Date Picker）。或者，写一个漂亮的，有动画的相册。注意，这个阶段请使用原生 JavaScript。同样的，兼容现代浏览器即可。这大概需要半个月的学习时间。&lt;br&gt;&lt;br&gt;Step 3: 入门一门后端语言。按照你的情况，就 php 吧。有了上面的经验，php 入门之后，相信你能够做一个漂亮的无用户留言版了。请把数据存贮在文件中，因为你还没有学习 SQL 嘛。这大概需要半个月的时间，如果你学习能力强，一个星期也不是没有可能。&lt;br&gt;&lt;br&gt;Step 4: 入门一个关系数据库。比如说 MySQL。DDL 和 CRUD ，请一定要熟练。恩，这个阶段不要谈什么优化，那是扯淡。现在，你大概可以做一个多用户的博客程序了。这大概需要半个月的时间。&lt;br&gt;&lt;br&gt;你看，两个半月不到你就可以成为一个初级的 Web 开发者了。博客做好之后，你可以尝试造更多的轮子。比如：带简单的用户权限的论坛程序、简单的记账工具，等等，做你喜欢做的任何小程序都行。在这个过程中，你会变成一个熟练的初级程序员，或者，你为了偷懒，会学会 jQuery，Smarty 等框架。&lt;br&gt;&lt;br&gt;有一天，你发现你靠写小程序提高不了水平了。接下来就要学习真正的干货了。&lt;br&gt;&lt;ul&gt;&lt;li&gt;学习 C 语言。别问我为什么，我就是觉得一个程序员应该要学过 C 语言，牛逼不牛逼是另外一会事儿，况且很多书都是用的 C 语言描述。别光学语法，弄清编译是什么，链接是什么，指针是又怎么一会事儿。&lt;br&gt;&lt;/li&gt;&lt;li&gt;学习数据结构和简单的算法。你看，你学完 C 语言就能学数据结构和算法了，我难以想象用 php 来描述数据结构和算法会有多么地奇怪。如果你觉得学了之后还是不知道数据结构究竟是什么，有什么用，那证明你还没有真的学到。&lt;br&gt;&lt;/li&gt;&lt;li&gt;学习一门面向对象的静态编程语言。推荐 Java。学得有多好，就看你花了多少时间了。请务必仔细阅读各类相关书籍，深刻领会面向对象的重要编程思想（不过，切忌迷信面向对象编程）。&lt;br&gt;&lt;/li&gt;&lt;li&gt;学习操作系统和计算机网络。至少一些基本的概念需要弄清楚，具体的细节，没有必要过于纠结。&lt;/li&gt;&lt;/ul&gt;Okay...以上都可划为「不求甚解」的阶段，接下来就可以选一个方向（前端，或者后端）「求甚解」了。在「求甚解」的阶段里，我这里就不细说了，也没法儿细说，并且你到了这个阶段，一般是不需要别人告诉你需要学什么了。所以，我只说在进入这个阶段之前，或者刚刚进入这个阶段时，最好去做的一些事情：&lt;br&gt;&lt;ul&gt;&lt;li&gt;看书或文档抛弃中文译本，借助各种工具阅读英文原版。&lt;br&gt;&lt;/li&gt;&lt;li&gt;学习使用 Unix-like 系统。&lt;br&gt;&lt;/li&gt;&lt;li&gt;学会提问[1]。&lt;br&gt;&lt;/li&gt;&lt;li&gt;订阅科技博客，了解业界正在发生什么事情。&lt;/li&gt;&lt;/ul&gt;Happy hacking！&lt;br&gt;&lt;br&gt;[1] 提问的智慧：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.wapm.cn/smart-questions/smart-questions-zh.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wapm.cn/smart-questions&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/smart-questions-zh.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n首先你已经不是零基础了。 其实这种事情没有什么捷径，亲自动手，一步一步来即可，不能好高骛远。 Step 1: 用 HTML + CSS 模仿几个漂亮的静态页面。当你看到现在大部分的网页都觉得能大概猜到怎样做，并且花时间真的能做出来的时候，即可进入下一步。注意，…\n\n<a href=\"/question/19834302/answer/15070774\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2012-08-12\" target=\"_blank\" href=\"/question/19834302/answer/15070774\">编辑于 2013-07-20</a></p>\n\n",
    "link": "https://zhihu.com/question/19834302/answer/15070774"
  },
  {
    "question": "\n你见过哪些令你瞠目结舌的 JavaScript 代码技巧？\n",
    "author": "郑航",
    "content": "\n\n<textarea hidden class=\"content\">&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'数字不在范围内'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'★★★★★☆☆☆☆☆'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;可以快速打印一个五分制的评分情况。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;获得一个10位长度的随机字符串&lt;br&gt;====&lt;br&gt;啊，抖个机灵这么多赞，下面的正经答案没人理，搞得好像写JS的没有能打的！I'm angry</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nfunction getRating(rating) {\n if(rating &gt; 5 || rating &lt; 0) throw new Error('数字不在范围内');\n return '★★★★★☆☆☆☆☆'.substring(5 - rating, 10 - rating );\n}可以快速打印一个五分制的评分情况。 Math.random().toString(36).substr(2,10)\n…\n\n<a href=\"/question/37904806/answer/74109099\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-11-26\" target=\"_blank\" href=\"/question/37904806/answer/74109099\">编辑于 2016-03-18</a></p>\n\n",
    "link": "https://zhihu.com/question/37904806/answer/74109099"
  },
  {
    "question": "\nreact.js,angular.js,vue.js学习哪个好？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">谢谢邀请，这个问题我要认真回答一下，尽量不带主观偏向。&lt;br&gt;&lt;br&gt;我们学一个东西，通常两个目的：&lt;br&gt;&lt;br&gt;- 为了解决现有的问题&lt;br&gt;- 为了解决将来可能会有的问题&lt;br&gt;&lt;br&gt;所以，在学这些东西之前，先必须了解，它们是用来解决什么问题的。&lt;br&gt;&lt;br&gt;Angular，React，Vue，这三者其实面对的是同一个领域，那就是Web应用，什么是Web应用呢，我之前有一篇大致讲了：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/xufei/blog/issues/5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;构建单页Web应用 · Issue #5 · xufei/blog · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;这三者中，Angular的适用领域相对窄一些，React可以拓展到服务端，移动端Native部分，而Vue因为比较轻量，还能用于业务场景非常轻的页面中。&lt;br&gt;&lt;br&gt;在Web应用中，我们需要解决的问题可以归纳为三类：&lt;br&gt;&lt;br&gt;- 状态&lt;br&gt;- 组织&lt;br&gt;- 效率&lt;br&gt;&lt;br&gt;1. 状态&lt;br&gt;&lt;br&gt;什么是&lt;b&gt;&lt;u&gt;状态&lt;/u&gt;&lt;/b&gt;？&lt;br&gt;&lt;br&gt;在一个业务界面中，我们可能会根据某些数据去生成一块界面，然后通过界面上的某些操作，改变一些数据，从而影响界面的另外一些部分。&lt;br&gt;&lt;br&gt;这里面就存在两种关系，一种是从数据到界面，一种是从界面到数据。能够描述界面当前状况的数据，就可以被称为状态。&lt;br&gt;&lt;br&gt;如果不对状态作抽象，很可能会导致逻辑的混乱，比如说，一个地方点了，要改多个地方，这种代码直接写，很容易写乱的，所以，不同的框架采用不同的方式进行了处理。&lt;br&gt;&lt;br&gt;比如说MVVM流的Angular和Vue，还有Avalon，Regular，Knockout，都是走的这一流派，通过类似模板的语法，描述界面状态与数据的绑定关系，然后通过内部转换，把这个结构建立起来，当界面发生变化的时候，按照配置规则去更新相应的数据，然后，再根据配置好的规则去，从数据更新界面状态。&lt;br&gt;&lt;br&gt;React走的是另外一个流派，就是所谓的函数式，在这个里面，推崇的是单向数据流：给定原始界面（或数据），施加一个变化，就能推导出另外一个状态（界面或者数据的更新）。&lt;br&gt;&lt;br&gt;在这里需要额外提一下ReactiveJS，它的理念又有所不同，是基于Reactive的。&lt;br&gt;&lt;br&gt;2. 组织&lt;br&gt;&lt;br&gt;刚才这些，都可以看作是满足最基本的需求，那就是业务的正确性。在这之后，就有另外的诉求了，首当其冲的就是整个业务代码的组织。&lt;br&gt;&lt;br&gt;所谓&lt;u&gt;&lt;b&gt;组织&lt;/b&gt;&lt;/u&gt;，指的是两个方面，一方面是模块关系，另一方面是业务模型。&lt;br&gt;&lt;br&gt;我们是怎样解决模块关系的呢？共识就是组件化。整个应用形成倒置的组件树，每个组件提供对外接口，然后内部只关注自己的实现。这些东西说起来简单，但实际做的时候还是有非常多需要考虑的东西，包括组件的定义，约束，管理，测试等等，而在Web这个体系中，组件化也有一些不太适合的场景，需要做一些权衡，这方面详细说就比较复杂了，需要好多篇幅才能说清楚，可以看看我这篇：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/xufei/blog/issues/22&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Web应用组件化的权衡 · Issue #22 · xufei/blog · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;那么，业务模型又是指什么呢？我们提到React的时候，就会听到Flux，Redux之类的东西，为什么又要有它们呢？我们必须认识到，脱离了这类东西，纯上层的组件化是不牢固的，如果你感受不到，只有一个原因：你的项目的业务层太薄。&lt;br&gt;&lt;br&gt;业务模型指的是所处领域中的业务数据、规则、流程的集合。即使抛开所有展示层，这一层也是应当要能够运作起来的。&lt;br&gt;&lt;br&gt;那么，这跟Redux之类又有什么关系呢？&lt;br&gt;&lt;br&gt;我们刚才提到组件化，整个应用形成了一个组件树，组件之间可能会需要通讯，它们通讯的内容可能是简单的界面事件，也可能是业务含义较深，能够牵一发而动全身的。界面是怎么来的？是由初始界面加上状态形成的，为了能够反映界面的变化，我们必须使得对业务模型的每一个扰动都收敛到确切的状态，所以，这也就是Redux这类东西的意义所在。&lt;br&gt;&lt;br&gt;所以，没有Redux之类辅助方案的React，是不完整的。而Redux本身，也不是局限到只能作为React辅助方案的，它的理念，对于Angular，Vue，照样是非常重要的补充。在同一业务场景下，对于每个框架来说，数据模型层面临的问题都是一样的，在这一层并没有任何分别。&lt;br&gt;&lt;br&gt;另外，Angular 2中引入了RxJS，这个东西处理这方面也是有很大优势的。&lt;br&gt;&lt;br&gt;在这里我要插一句自己的想法，很多学习能力较强的朋友，当他发现FP，FRP之类编程模型的时候，会非常喜欢，但对于大型项目，需要很多人协作的状况来说，不一定是好事。&lt;br&gt;&lt;br&gt;用面向过程，面向对象的那些方式，虽然笨重，但好处是门槛低，符合大多数人的理解和思维方式，并且可以复用几十年积累的各种设计模式和经验。所以，如果不是小而精悍的团队，我对引入FP和FRP都是比较保守的。&lt;br&gt;&lt;br&gt;在这些东西下层，还有Relay，GraphQL等等致力于业务模型同步的方案，但这个引入代价同样是非常大。&lt;br&gt;&lt;br&gt;再插另外一句：很多人吐槽Angular大而全笨重，吐槽React全家桶，但其实世界上大部分人是没有框架整合能力的，小而美的库最后整合了，在面临各种业务需求之后不断引入新模块，也还是一个大而全的方案。在绝大部分场景下，还是有一整套标配模块比较好。你看ExtJS他也单独提供ExtCore模块，但不但竞争不过jQuery，连mootools和prototype都竞争不过，用它的人几乎都是用全方案的。&lt;br&gt;&lt;br&gt;3. 效率&lt;br&gt;&lt;br&gt;效率也分两种，一种是开发效率，一种是运行效率。&lt;br&gt;&lt;br&gt;我们前面提到，组件化，这是提升开发效率的一种手段，在组件化这个点上，各路框架的组织方式大同小异，反正最终都是组件树。&lt;br&gt;&lt;br&gt;具体到单个组件的实现上，我个人是倾向于MVVM流的，之前 &lt;a data-hash=&quot;790dccce26904cdcd11b0fad3bac37b7&quot; href=&quot;//www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7&quot; class=&quot;member_mention&quot; data-tip=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot; data-hovercard=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot;&gt;@题叶&lt;/a&gt;  做过对比，MVVM系的代码量会少一些，开发效率稍高一点。&lt;br&gt;&lt;br&gt;其中，Angular因为实现的特殊性，有作用域继承之类的双刃剑黑魔法，开发效率的不稳定因素要高不少，深刻理解的人用起来效率很高，不理解的用了到处是坑。&lt;br&gt;&lt;br&gt;再看运行效率，这里面，Angular是较低的那个，主要在于数据变更检测方式，但这也不是绝对的，在部分场景下，脏检测未必就没有优势，这个记得 &lt;a data-hash=&quot;f7f6a8fa75165069749ef3b8bedb53e7&quot; href=&quot;//www.zhihu.com/people/f7f6a8fa75165069749ef3b8bedb53e7&quot; class=&quot;member_mention&quot; data-tip=&quot;p$b$f7f6a8fa75165069749ef3b8bedb53e7&quot; data-hovercard=&quot;p$b$f7f6a8fa75165069749ef3b8bedb53e7&quot;&gt;@郑海波&lt;/a&gt;论述过。&lt;br&gt;&lt;br&gt;运行效率的另外一面主要是创建和修改DOM，在创建上，大家是没有太大差异的，而在修改DOM的时候，React首创的虚拟DOM有很大优势，所以其他框架内部实现也在逐渐借鉴。&lt;br&gt;&lt;br&gt;（我之前有个对虚拟DOM的回答是有偏差的，稍后去更新）&lt;br&gt;&lt;br&gt;========&lt;br&gt;&lt;br&gt;如果看到这里，很可能你会疑惑，题目问的明明是学哪个好，我说这些是什么意思？&lt;br&gt;&lt;br&gt;我用这些篇幅说明了Web应用的业务开发中存在哪些麻烦，每种技术又是来解决什么痛点的，这样，你可以按照自己的需求去，结合业务场景进行分析，然后选择需要的挨个学下去。&lt;br&gt;&lt;br&gt;其实学API之类的很快，还是要把自己业务中的难点想清楚，带着问题去学，带着需求去学，学思想重于学使用，一定能事半功倍。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谢谢邀请，这个问题我要认真回答一下，尽量不带主观偏向。 我们学一个东西，通常两个目的： - 为了解决现有的问题 - 为了解决将来可能会有的问题 所以，在学这些东西之前，先必须了解，它们是用来解决什么问题的。 Angular，React，Vue，这三者其实面对的是…\n\n<a href=\"/question/39943474/answer/83905933\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-29\" target=\"_blank\" href=\"/question/39943474/answer/83905933\">编辑于 2016-01-29</a></p>\n\n",
    "link": "https://zhihu.com/question/39943474/answer/83905933"
  },
  {
    "question": "\n你们是怎么学会正则表达式的？\n",
    "author": "矩阵",
    "content": "\n\n<textarea hidden class=\"content\">&lt;ul&gt;&lt;li&gt;把正则表达式必备网站&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.regexr.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RegExr: Learn, Build, &amp;amp; Test RegEx&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;加入书签栏，这个网站非常强大，主要的功能有：&lt;/li&gt;&lt;/ul&gt;a.公式上的悬浮气泡UI解释该规则匹配的字符串&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-683d17924870374b9017773885cc12bd_b.png&quot; data-rawwidth=&quot;1055&quot; data-rawheight=&quot;157&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1055&quot; data-original=&quot;https://pic2.zhimg.com/v2-683d17924870374b9017773885cc12bd_r.png&quot;&gt;b.匹配结果也有对应的解释&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-5276c3fd92ab011d41e79bb349ea93ba_b.png&quot; data-rawwidth=&quot;927&quot; data-rawheight=&quot;524&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;927&quot; data-original=&quot;https://pic3.zhimg.com/v2-5276c3fd92ab011d41e79bb349ea93ba_r.png&quot;&gt;c.右侧边栏有正则表达式的详细规范及图中的小抄&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-a743211cf7a40e4e0c3184cdc22c386a_b.png&quot; data-rawwidth=&quot;346&quot; data-rawheight=&quot;693&quot; class=&quot;content_image&quot; width=&quot;346&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;再配合刷几道HackerRank上正则表达式的题&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.hackerrank.com/domains/regex/re-introduction&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Programming Problems and Competitions :: HackerRank&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;这样最多几个小时，正则表达式的基本使用就没问题了。工作中遇到的正则表达式问题基本上都可以用RegExr网站帮助解决。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/v2-683d17924870374b9017773885cc12bd_200x112.png\" data-rawwidth=\"1055\" data-rawheight=\"157\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/v2-683d17924870374b9017773885cc12bd_r.png\">\n把正则表达式必备网站<a href=\"//link.zhihu.com/?target=http%3A//www.regexr.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">RegExr: Learn, Build, &amp; Test RegEx<i class=\"icon-external\"></i></a>加入书签栏，这个网站非常强大，主要的功能有：a.公式上的悬浮气泡UI解释该规则匹配的字符串 b.匹配结果也有对应的解释 c.右侧边栏有正则表达式的详细规范及图中的小抄 再配合刷几道HackerRank上正…\n\n<a href=\"/question/48219401/answer/126612931\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-10-14\" target=\"_blank\" href=\"/question/48219401/answer/126612931\">编辑于 2016-10-14</a></p>\n\n",
    "link": "https://zhihu.com/question/48219401/answer/126612931"
  },
  {
    "question": "\n如何看待民工叔因为 Teambition 是 React 技术栈而离职？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">果然还是有这个问题，看来大家对八卦都很感兴趣，那我说一下吧。&lt;br&gt;&lt;br&gt;加入Teambition之前，我对TB原有的技术栈和将要做的改造都是有所考虑的，也是带着明确的技术倾向加入的（TypeScript，RxJS，Vue），这些不是无目的的，因为之前，我就认识曾经在Teambition工作过的寸志、题叶等，对这个场景有过一定程度的思考。&lt;br&gt;&lt;br&gt;Teambition主版本的技术栈是Backbone + JQuery + CoffeeScript，这个组合，从当时来看，可以理解，然而，3年过去了，整个前端领域发生了天翻地覆的变化，大清是肯定要亡了，问题在于两点：&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;康梁，还是孙黄？&lt;br&gt;&lt;/li&gt;&lt;li&gt;三民主义，还是锤子镰刀？&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;对于一个旧系统的改造，无非两条路：逐步改进；推翻重来。一般来说，逐步改进都是优于推翻重来的，因为赌多大就可能输多大。&lt;br&gt;&lt;br&gt;4月中旬，我入职半个月左右的时候，我逐渐倾向于重新做一套，原因在于两点：&lt;br&gt;&lt;br&gt;第一，原先数据模型层处理得不好，主要是：同步和异步的处理、数据的共享和更新机制，如果要改对，非常困难，而且从底层开始把同步改异步，很可能需要一路往上改到顶。在不换掉老数据层的情况下，有很多遗留问题几乎无法解决。&lt;br&gt;&lt;br&gt;我举个例子，有不少数据都是初始化的时候提前加载好，设置到Collection中，然后之后的所有操作全部同步调用，这样的问题在于，并不是所有数据都立刻需要，但如果你要把这些数据的请求改成用Promise之类做封装，有缓存就立即返回，没缓存就查询，会导致与之相关的所有业务代码都要变成异步的方式。&lt;br&gt;&lt;br&gt;另外，数据模型之间的监听关系也存在缺失，由于Teambition产品交互的特殊性，很多视图要共享一些业务数据，而且是全业务存在WebSocket推送，不把监听关系全部写对的后果是，可能你改了某个地方的数据，原先应当同步的十多个集合里面，漏通知了某些，那些对应的视图就不一致了。&lt;br&gt;&lt;br&gt;第二，Teambition有一个Mobile Web版，数据模型跟PC版是一致的，只是视图和业务逻辑比较简单一些，有机会先重构这个版本，验证完整个流程，然后从小到大反推PC版。这个过程是可以降低一些风险的。甚至，后面可以考虑把小企业用户和大企业用户的版本分开，把这个新版作为其中某一个的基础版本。&lt;br&gt;&lt;br&gt;对于新版数据层的设计，我是有整体思路的，只是部分细节的考虑还不完善，这些事情我跟团队的太狼说了，给他讲了RxJS的事情（最近我和他都写过对这方面的总结），还有我对整个这块东西的考虑，他非常给力，冒着差点不能毕业的风险，在学校拼命写了超多代码，把这个事情搞得比我想象中还要快。大家可以看看这个库的提交记录，感受一下战斗力：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/teambition/teambition-sdk&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;teambition/teambition-sdk&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;然后，5月份下旬开始，他的这块初步可用，我们就开始做新版Mobile Web，同时帮他踩坑。这个版本是用Vue + TS做的，当时vue-rx这个库还不太行，所以我们都是手动订阅数据流，然后往data里面设置。&lt;br&gt;&lt;br&gt;这段时间整体还是比较顺利的，然而到了6月份，出了个突发状况，原先从简聊回归到Teambition的部分同事对我当时的状况产生了误会，认为我长期把PC版丢着不管，去搞一个没那么重要的小版本，本末倒置，然后他们直接开始用React + Redux改进原先PC版的视图层。&lt;br&gt;&lt;br&gt;这个时候我比较尴尬，因为mobile的事情尚未结束，是丢不下来的，即使这块做完，PC版的发展方向也已经大大偏离我的预期了，这几位同事找我聊过一次，建议我把之前做的东西放弃，改用React + Redux。&lt;br&gt;&lt;br&gt;然后我挺苦闷的，想来想去，觉得这样不能接受，就提出了离职。这件事情并未跟团队中任何人说过，只有上层知道。老板向我询问这两种技术方案的关系，我回答了一句：三民主义和共产主义都能救中国，但两个不能一起上。&lt;br&gt;&lt;br&gt;反复争执对团队肯定是很不利，所以当时我的意思是，既然要我放弃之前做的方案，那不如我彻底离开，再招几个React方向的人进来，全部转换到这条路，也是能行的。但上层觉得这样不好，还是建议我们沟通，让那几位同事放弃他们的方案。这个时候，他们大概写了三周左右时间的代码，某一块功能接近完成的状态。&lt;br&gt;&lt;br&gt;公司上层建议我再沟通一下，可能事情还有转机。当时我的心态已经不一样了，后来想想，还是坚持一下吧。&lt;br&gt;&lt;br&gt;既然要沟通，就要讨论后面事情怎么做，尴尬的是，团队中只有个别人支持Vue，绝大部分人无明显倾向（因为原Teambition的开发人员都是没有接触过React的），部分同事强烈倾向于React，所以很难达成共识，而且当时讨论到一半，我倾向使用Vue，希望Mobile和PC版技术栈一致，得到的指责是不顾大局，只顾自己利益，RxJS也被认为不适用于Teambition应用场景，但我坚持认为它在这个场景下，明显优于Redux。&lt;br&gt;&lt;br&gt;争执不下的时候，太狼提议我们使用Angular2，这个妥协的选择被接受了，不少同事认为，使用大厂的产品会更可靠一些，我也不排斥这个选择，因为RxJS、TypeScript这两个东西在ng2里面更加被深度使用。（大家唯一分歧较小的地方竟然是开发语言的选择，除了个别同事希望用ES6之外，好多人都认同TypeScript，因为Teambition最复杂的还是业务逻辑层，用比较严格的限制还是有很多好处的）&lt;br&gt;&lt;br&gt;后来就开始搞ng2，当时正好有一个企业版新功能，然后就先做它，但做的过程中还是踩到不少坑，比如那个rc5版本的升级，又加回来了ngModule，导致大部分代码都修改了，这个东西我很不认同。&lt;br&gt;&lt;br&gt;另外一个出了挺多问题的东西是zone.js，我们那个功能是要集成在主系统里，所以是先启动主应用，然后再bootstrap ng2的，zone跟外面一些东西有些冲突，后来想办法解决了，然后在不同浏览器上又出现了一些问题，花了挺多时间的。&lt;br&gt;&lt;br&gt;这个部分做完之后，大家开始对ng2也不满意了，所以，最后又变成React技术栈了。不过，到这个时候，大家已经逐步意识到RxJS这套方案的好处了，我们开始那个数据层的库，其实是在做整个应用的全局数据状态管理，视图层状态是从它推导出来的，所以现在又引入了redux-observable来做中间的转换。&lt;br&gt;&lt;br&gt;另外，因为业务的发展，整体重构的可能已经减小了，所以只能局部优化，并且尝试把新版数据层逐步接入。后面一段时间中，最大的难点应该就在这里。&lt;br&gt;&lt;br&gt;在回到React体系之后，我基本上就确定一定会离开了。很多技术方案没有明显好坏的区分，都很优秀，但人是有口味偏好的，长期以来，我一直更认同MVVM框架们，认为在JS这种不纯的体系，一味追求纯函数、无副作用，未必是一个好的选择。在复杂场景下，把业务抽象到Rx管道中，视图层的事情则完全交给轻量MVVM框架，把MVVM框架整个视为一层Virtual DOM，一样会是一个好的解决方案。&lt;br&gt;&lt;br&gt;我认同在数据和业务逻辑层使用FP或者FRP以更好地抽象，并且覆盖全量测试，但在贴近视图这里，还是坚持自己的看法：在MDV（数据驱动视图）的情况下，没有必要对业务视图组件做测试，只需保证数据正确即可。在这一点上，我跟很多团队成员是有分歧的。&lt;br&gt;&lt;br&gt;短短8个月，经历了很多事情，终究选择了离开。正如另外一个回答说的，我不差钱，想离职就离职。一个工作十多年的码农，谈不上有钱，也绝不至于饿死，真那么在意钱，我年初就该去阿里啊。像我这种没有任何物质爱好的人，还是做点让自己开心的事情比较好，到这年纪还在一线搞代码，本身就是对这个职业充满热爱。三年前跟响马哥吃饭，我问他，为什么有nodejs，你还要搞fibjs？他说，技术人员有自己的偏好，写代码还不是为了按照自己喜欢的方式吗？我深以为然。&lt;br&gt;&lt;br&gt;Teambition的这些同事，朝气蓬勃，对技术有着很强的热情，虽然理念未必相同，但也能够从他们身上学到不少东西。我虽然比TB前端团队平均年龄大10岁左右，但我内心也是他们这样的人，我也有我的坚持，一样的心高气傲，不愿放弃自己的棱角。&lt;br&gt;&lt;br&gt;现在，在Teambition前端全面转向React体系的情况下，欢迎喜欢这条技术路线的朋友们加入他们，一起改变世界。&lt;br&gt;&lt;br&gt;-------11.28晚上补充--------&lt;br&gt;&lt;br&gt;今天一天看到这么多评论……，有一些事情大家不要过多猜测，我列这些出来的主要原因是要解释技术选型怎么会这么转换的，其中踩过哪些坑，供同行参考。整个事情，我觉得自己沟通方面的问题比较多，入职之前没有沟通清楚是架构师还是前端leader，入职之后花了很久才勉强搞清楚成员的技能等级，平时跟大家交流看法也不多，了解和熟悉业务的过程也比较慢，整个做事情也一直很tb的节奏有些不太搭。&lt;br&gt;&lt;br&gt;这里面不存在上级授权的问题，应该说上层还是寄予了较多期望，我自己在遇到困难的时候是那种比较闷的人，有不少问题是沟通不顺畅引起的，美玲总结得很好，应该还是因为我不太适合这个岗位，所以很勉强地做下去，对公司、自己、团队成员都有挺多伤害的。&lt;br&gt;&lt;br&gt;（以上言辞如果有不合适的，请联系我修改）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n果然还是有这个问题，看来大家对八卦都很感兴趣，那我说一下吧。 加入Teambition之前，我对TB原有的技术栈和将要做的改造都是有所考虑的，也是带着明确的技术倾向加入的（TypeScript，RxJS，Vue），这些不是无目的的，因为之前，我就认识曾经在Teambition工…\n\n<a href=\"/question/53022579/answer/133298778\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-11-28\" target=\"_blank\" href=\"/question/53022579/answer/133298778\">编辑于 2016-11-28</a></p>\n\n",
    "link": "https://zhihu.com/question/53022579/answer/133298778"
  },
  {
    "question": "\n为什么前端不能一直做？难道要转行？？\n",
    "author": "张云龙",
    "content": "\n\n<textarea hidden class=\"content\">到目前为止，我感觉，一个人做研发能走多远，取决于一种内在的特质。&lt;br&gt;&lt;br&gt;有人一毕业就很牛逼，有人工作了5、6年还是个毕业生的水平，我也反复观察这两类人，试图找出他们的差异。说真的，每个人都有自己的天花板，可为什么有的人天花板很高，有的人天花板却很低。&lt;br&gt;&lt;br&gt;就我目前的观察来看，决定一个人技术天花板高度的特质就是【计算机领域的学科素养】和【精益求精的钻研精神】&lt;br&gt;&lt;ul&gt;&lt;li&gt;所谓 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/view/2617350.htm%3Ffr%3Daladdin&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;学科素养&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，是在读书的时候培养起来的一种思维方式，这种思维方式非常重要，决定了当你遇到问题的时候采用什么策略解决问题。有的人埋头写了几年的页面都没有什么思考，有的人写过几次之后就开始思考如何解放研发的生产力。学科素养好的，特别容易理解整个web应用的原理和过程，遇到问题无论是分析、定位还是解决的速度都特别快。学科素养在整个技术发展中会起到非常非常重要的作用，有些非常牛的工程师可以把领域论文转换成工程应用，这基本上是学科素养决定的能力。&lt;br&gt;&lt;/li&gt;&lt;li&gt;而精益求精的钻研精神是一种态度了，其实学科素养中包括了这种品质，我想单独拿出来说是因为确实遇到了一些牛人，可能天赋比较好吧，通过努力还是能达到一定的深度。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;学科素养工作之后基本上没办法再提高了了，天花板也就是这么来的。由于前端门槛低，所以每年有很多其他非技术领域的同学转入前端，前端从业人员普遍计算机学科素养不高，技术深度就走不下去，形成题主的结论也不为奇。&lt;br&gt;&lt;br&gt;前端绝对不是走不远的领域，我相信有这样结论的人，在其他领域也一样走不远。不是领域缺少空间，而是人缺少潜质。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n到目前为止，我感觉，一个人做研发能走多远，取决于一种内在的特质。 有人一毕业就很牛逼，有人工作了5、6年还是个毕业生的水平，我也反复观察这两类人，试图找出他们的差异。说真的，每个人都有自己的天花板，可为什么有的人天花板很高，有的人天花板却很…\n\n<a href=\"/question/26226720/answer/32485874\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-10-26\" target=\"_blank\" href=\"/question/26226720/answer/32485874\">编辑于 2014-10-27</a></p>\n\n",
    "link": "https://zhihu.com/question/26226720/answer/32485874"
  },
  {
    "question": "\n为什么点赞手速过快会出现计赞 2 次？\n",
    "author": "赵嘉木",
    "content": "\n\n<textarea hidden class=\"content\">这应该是交互设计的问题+bug的共同结果。&lt;br&gt;&lt;br&gt;（各位！点了赞就不要取消了啊！试验之后点了就点了，别删啊！你能理解提示有几十个赞同，打开之后才发现还是原来那几只……）&lt;br&gt;&lt;br&gt;&lt;b&gt;----------------------------------------&lt;/b&gt;&lt;b&gt;----------&lt;/b&gt;&lt;b&gt;以下为详细解释&lt;/b&gt;&lt;b&gt;----------------------------------------&lt;/b&gt;&lt;b&gt;----------&lt;/b&gt;&lt;br&gt;&lt;br&gt;1.交互方面&lt;br&gt;在设计产品的时候，有一个原则叫做“Don't make me wait”。&lt;br&gt;等待，会让用户流失。无反馈的长时间等待，会让用户大量流失。&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;有数据表明，如果网页加载时长超过3秒，超过半数的用户会直接走开。&lt;/blockquote&gt;&lt;br&gt;所有做产品的都希望加载时间越短越好，最好是短到没有。但很遗憾，这并不现实。很多时候客户端（网页）需要向服务器获取数据来实现页面上内容的更新。而这样的一来一回至少也需要几十甚至上百毫秒。为了避免这零点几秒的等待，产品狗们想出了一个花招——先展示后同步。&lt;br&gt;&lt;br&gt;对于那些不重要的数据，在用户操作的时候，先直接在本地（客户端或网页）上展示出来，同时在后台向服务器同步数据。当获得返回值的时候，如果一切正常，就不做任何显示；如果出现了什么错误结果，再视情况向用户展示不同的错误信息。&lt;br&gt;&lt;br&gt;知乎的点赞就是这样。简略流程如下。&lt;br&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;用户点赞。&lt;/li&gt;&lt;li&gt;客户端（或网页）在本地（就是用户自己的电脑上）显示出点赞行为（向上箭头变蓝）且点赞数+1。&lt;/li&gt;&lt;li&gt;客户端（或网页）向服务器发送数据。&lt;/li&gt;&lt;li&gt;服务器接收数据，并在数据库中记录用户的点赞行为。&lt;/li&gt;&lt;li&gt;服务器向客户端（或网页）返回点赞成功的消息。&lt;/li&gt;&lt;li&gt;操作完结。&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;在这样的流程下，如果用户在短时间内快速连续点赞，快到在一次“发送-返回”流程完成之前就点了第二下，那么在客户端（或网页）的&lt;b&gt;本地&lt;/b&gt;就会显示出“点赞数+2”的效果。当然，在服务器的记录中只记录了点赞+1。只要刷新一下数据就正常了。&lt;br&gt;&lt;br&gt;（上述流程是为了方便理解而写的简略流程，不是正式的流程）&lt;br&gt;&lt;br&gt;2.bug方面&lt;br&gt;当然，产品设计师们是知道这个漏洞的。所以在产品开发的时候，会在按钮上加一个限制。当按钮被点击之后就会锁定点击的状态，不允许再次点击。而按题主的说法，连续两次点击有效。就说明这应该是按钮被点击的时候没有及时切换状态就触发了第二次点击。这应该是一个bug。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这应该是交互设计的问题+bug的共同结果。 （各位！点了赞就不要取消了啊！试验之后点了就点了，别删啊！你能理解提示有几十个赞同，打开之后才发现还是原来那几只……） <b>----------------------------------------</b><b>----------</b><b>以下为详细解释</b><b>----------------…</b>\n\n<a href=\"/question/28903860/answer/42836775\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-03-24\" target=\"_blank\" href=\"/question/28903860/answer/42836775\">编辑于 2015-03-27</a></p>\n\n",
    "link": "https://zhihu.com/question/28903860/answer/42836775"
  },
  {
    "question": "\n有谁能详细讲一下css如何画出一个三角形？怎么想都想不懂？\n",
    "author": "Vkki",
    "content": "\n\n<textarea hidden class=\"content\">&lt;img src=&quot;https://pic3.zhimg.com/c0bfe43c71c912bbb2e4a2ca6dcf02fe_b.png&quot; data-rawwidth=&quot;160&quot; data-rawheight=&quot;158&quot; class=&quot;content_image&quot; width=&quot;160&quot;&gt;&lt;br&gt;这是一个普通的 div ，一个边长为 100px 的正方形，border 宽度为 10px， 没有任何技术含量，地球人都会画。&lt;br&gt;&lt;br&gt;我们知道 border 是分为 top、right、bottom、left 的，那么这个矩形的四个边是怎样划分的呢？&lt;br&gt;&lt;br&gt;显然，要想公平地分割四条边框，只有这样：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/051f92f55023deb4542e6745c88edb03_b.png&quot; data-rawwidth=&quot;356&quot; data-rawheight=&quot;352&quot; class=&quot;content_image&quot; width=&quot;356&quot;&gt;&lt;br&gt;所以我们如果把上、左、右三条边隐藏掉（颜色设为 transparent），会怎样呢？&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/3dd7575a75b3c676b523151ec4e69337_b.png&quot; data-rawwidth=&quot;212&quot; data-rawheight=&quot;69&quot; class=&quot;content_image&quot; width=&quot;212&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/a9c9de26d2d5c18f5844fc7e360bbd67_b.png&quot; data-rawwidth=&quot;164&quot; data-rawheight=&quot;140&quot; class=&quot;content_image&quot; width=&quot;164&quot;&gt;&lt;br&gt;呐，这就是个梯形了！感觉离革命胜利很近了是不是！&lt;br&gt;仔细观察一下这个梯形，和三角形有神马区别呢？&lt;br&gt;对！上面多了一条边！&lt;br&gt;上面这条边有什么特点呢？&lt;br&gt;&lt;br&gt;&lt;b&gt;它的长度&lt;/b&gt;刚好等于 &lt;b&gt;div 的宽度&lt;/b&gt;！&lt;br&gt;&lt;br&gt;所以我们要把这个 div 的宽度缩小！&lt;br&gt;多小合适呢？&lt;br&gt;当然是 0 啦！&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/c6cd2ffbdc9eb394e8d9328d250d0785_b.png&quot; data-rawwidth=&quot;218&quot; data-rawheight=&quot;78&quot; class=&quot;content_image&quot; width=&quot;218&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/175e5038541afbfc3a61c4d84020e08d_b.png&quot; data-rawwidth=&quot;152&quot; data-rawheight=&quot;141&quot; class=&quot;content_image&quot; width=&quot;152&quot;&gt;&lt;br&gt;三角形粗来了！！！！！！！&lt;br&gt;&lt;br&gt;好像太小了点，怎么把它放大捏？&lt;br&gt;&lt;br&gt;很简单，我们把 border 的宽度扩大，&lt;br&gt;怎么扩大呢？&lt;br&gt;显然这条底边和上边已经没什么关系了，&lt;br&gt;上边唯一的作用就是影响三角形顶点到 div 上边缘的距离。&lt;br&gt;所以我们只需要扩大左、下、右这三条边。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/8f32bd54a932eb715ec9f8c1808e71b2_b.png&quot; data-rawwidth=&quot;212&quot; data-rawheight=&quot;82&quot; class=&quot;content_image&quot; width=&quot;212&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/30f837d92a222c7a9aeaa6b90d2e8816_b.png&quot; data-rawwidth=&quot;229&quot; data-rawheight=&quot;199&quot; class=&quot;content_image&quot; width=&quot;229&quot;&gt;&lt;br&gt;&lt;b&gt;下边&lt;/b&gt;的 width 控制了三角形的&lt;b&gt;高&lt;/b&gt;（150px）&lt;br&gt;&lt;b&gt;左右两边&lt;/b&gt;的 width 分别控制了三角形的&lt;b&gt;底边长的两部分&lt;/b&gt;（加起来共 200px）&lt;br&gt;&lt;br&gt;再举个例子，如果把右边 width 设为 0 &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/412a64d40394652cbb21f76fdd51389c_b.png&quot; data-rawwidth=&quot;212&quot; data-rawheight=&quot;81&quot; class=&quot;content_image&quot; width=&quot;212&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/f26bca95a1f74394829458c7115c8f7b_b.png&quot; data-rawwidth=&quot;225&quot; data-rawheight=&quot;175&quot; class=&quot;content_image&quot; width=&quot;225&quot;&gt;&lt;br&gt;就是个直角三角形了~&lt;br&gt;&lt;br&gt;利用相邻的两个三角形还可以拼出钝角三角形~&lt;br&gt;&lt;br&gt;最后放个福利：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//apps.eky.hk/css-triangle-generator/zh-hant&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS三角形產生器&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/051f92f55023deb4542e6745c88edb03_200x112.png\" data-rawwidth=\"356\" data-rawheight=\"352\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/051f92f55023deb4542e6745c88edb03_r.png\">\n这是一个普通的 div ，一个边长为 100px 的正方形，border 宽度为 10px， 没有任何技术含量，地球人都会画。 我们知道 border 是分为 top、right、bottom、left 的，那么这个矩形的四个边是怎样划分的呢？ 显然，要想公平地分割四条边框，只有这样： 所以我…\n\n<a href=\"/question/35180018/answer/61554144\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-30\" target=\"_blank\" href=\"/question/35180018/answer/61554144\">编辑于 2015-09-01</a></p>\n\n",
    "link": "https://zhihu.com/question/35180018/answer/61554144"
  },
  {
    "question": "\n能否说百度搜索结果页使用的是落后的table布局？\n",
    "author": "苏莉安",
    "content": "\n\n<textarea hidden class=\"content\">诸位，我知道大家都喜欢Google讨厌百度，但这不代表遇到百度的问题就能跳过“是不是”而直接问“为什么”，然后嘲讽一番。&lt;br&gt;&lt;br&gt;百度搜索结果页源码的主体结构是这个样子的：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/f6bcc156c538a1e7c9b1bfb20e8325cc_b.jpg&quot; data-rawwidth=&quot;390&quot; data-rawheight=&quot;317&quot; class=&quot;content_image&quot; width=&quot;390&quot;&gt;一看即知，这是典型的div+css布局，跟table没有半毛关系。&lt;br&gt;&lt;br&gt;然后我们把content_left这个div展开，它就是展示所有搜索结果的地方：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/a1fa7365c5a98abe8f110d7546fb719e_b.jpg&quot; data-rawwidth=&quot;615&quot; data-rawheight=&quot;421&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;615&quot; data-original=&quot;https://pic3.zhimg.com/a1fa7365c5a98abe8f110d7546fb719e_r.jpg&quot;&gt;现在你大概明白为什么有人误以为百度用table布局了，因为每个单独的搜索结果都是一个table，这个table里只有一行一列，也就是一个td，再里面就是搜索结果的标题和摘要了。&lt;br&gt;但我们得澄清两个概念：&lt;br&gt;&lt;ol&gt;&lt;li&gt;不是页面里用了table就叫table布局，只有用单元格来划分页面区域和元素定位时才叫table布局；&lt;/li&gt;&lt;li&gt;用table不代表落后，至少在显示真正的表格式数据时，用table是最适合也是最方便的。有些人明明能用table却偏要用div或ol来模拟“表格效果”，这种行为我们称之为蛋疼。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;好，谈下一话题。这只有一个单元格的table是干什么用的？百度为什么要费劲给每个搜索结果套一层？Google为什么不这么做？&lt;br&gt;先看看Google的搜索结果吧：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/e9caa74be121090aa9bb2603980bb45b_b.jpg&quot; data-rawwidth=&quot;536&quot; data-rawheight=&quot;444&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;536&quot; data-original=&quot;https://pic4.zhimg.com/e9caa74be121090aa9bb2603980bb45b_r.jpg&quot;&gt;注意，每一行右侧换行时的留白是不一样的，原因是英文单词包含字母个数不一致，导致网页排版时无法对齐，所以为了可读性，只能保留整个单词而牺牲了整齐排版的美观度。&lt;br&gt;这不是Google自己的问题，而是整个英文互联网环境和HTML格式的问题。要知道，书籍和报纸会通过适当截断单词和拉宽字间距来做到排版整齐，但在网页上做不到，因为网页文本内容是动态的，文字的大小和位置都不会固定，而且也没有拼写检查系统来判断哪个单词哪里该截断。&lt;br&gt;&lt;br&gt;以纽约时报为例。&lt;br&gt;这是报纸排版（两端对齐）：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/469d3835b2f9ee814b15edd572178a74_b.jpg&quot; data-rawwidth=&quot;365&quot; data-rawheight=&quot;428&quot; class=&quot;content_image&quot; width=&quot;365&quot;&gt;&lt;br&gt;&lt;br&gt;这是网页新闻（右侧没有对齐）：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/6ace6102e5dbb483ce034c457e756985_b.jpg&quot; data-rawwidth=&quot;604&quot; data-rawheight=&quot;201&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;604&quot; data-original=&quot;https://pic2.zhimg.com/6ace6102e5dbb483ce034c457e756985_r.jpg&quot;&gt;&lt;br&gt;说了这么多英文网站的事，那和百度又有什么关系呢？&lt;br&gt;&lt;br&gt;css里有这样两个属性：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;word-wrap: break-word;//如果某个长单词超过了一行的长度，就截断它；\nword-break: break-all;//不管单词是什么，只要超出行尾，就截断它。\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这两个属性在英文网站的正文里，不到万不得已是不用的，因为截断单词等于失去了可读性。但在中国成了香饽饽，许多网站为了整齐的视觉效果，直接把所有英文单词截断。比如下面就是百度的搜索结果：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/af856b624fb531f524487186e0e6ee2d_b.jpg&quot; data-rawwidth=&quot;551&quot; data-rawheight=&quot;362&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;551&quot; data-original=&quot;https://pic2.zhimg.com/af856b624fb531f524487186e0e6ee2d_r.jpg&quot;&gt;&lt;br&gt;可以看到，连answers这种不算长的单词都被粗暴截断，对英文读者来说简直是不可原谅的，但对百度所面对的广大中国用户来说，首先，很少搜索英文，第二，有英文也大多是在中文网站上偶尔点缀，就算被截断，对词义理解的损失也是微乎其微，而换来的是整齐的页面排版。&lt;br&gt;搜狗、搜搜、360搜索，用的全是这一套方案。&lt;br&gt;&lt;br&gt;但它们三个并没有在每个搜索结果外面套一层table，为什么百度会这么做？&lt;br&gt;因为百度在这几家中做的最早，考虑兼容的事情也最多，而word-wrap和word-break原本是IE自己搞出来的样式，直到2010年才作为css3标准，各家浏览器、各个版本的支持程度都不同。&lt;br&gt;为了保证无论任何长单词都不会越界，百度用了杀手锏，也就是终极解决方案：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;table-layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;fixed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;只要预设了table的尺寸并设置为fixed，那么被它套起来的文字就算天塌下来都不会越界。设为折行就折行，设为隐藏就隐藏，无论内容怎么变化，外层table的宽度永远是固定值。&lt;br&gt;&lt;br&gt;总结一下吧：&lt;br&gt;&lt;b&gt;传统媒体&lt;/b&gt;：通过语法分析来截断单词、调整字间距，达到可读性和排版的平衡点；&lt;br&gt;&lt;b&gt;外国网站&lt;/b&gt;：牺牲整齐的排版，保留单词的完整性便于阅读；&lt;br&gt;&lt;b&gt;中国搜索引擎&lt;/b&gt;：牺牲单词的完整性，保证排版整齐；使用table、word-wrap、word-break等方式保证文字不越界、不留白。&lt;br&gt;&lt;br&gt;所以说百度错了吗？按它的用户定位，也就是大多数对英文内容基本没有要求的人来说，这么做是完全合乎情理的。如果哪天百度打算进军国际搜索市场，截断单词这种事会在第一时间取消掉，那个无用的table自然也就消失了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/f6bcc156c538a1e7c9b1bfb20e8325cc_200x112.jpg\" data-rawwidth=\"390\" data-rawheight=\"317\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/f6bcc156c538a1e7c9b1bfb20e8325cc_r.jpg\">\n诸位，我知道大家都喜欢Google讨厌百度，但这不代表遇到百度的问题就能跳过“是不是”而直接问“为什么”，然后嘲讽一番。 百度搜索结果页源码的主体结构是这个样子的： 一看即知，这是典型的div+css布局，跟table没有半毛关系。 然后我们把content_left这…\n\n<a href=\"/question/21443714/answer/18319914\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-08-12\" target=\"_blank\" href=\"/question/21443714/answer/18319914\">编辑于 2013-08-13</a></p>\n\n",
    "link": "https://zhihu.com/question/21443714/answer/18319914"
  },
  {
    "question": "\n如何通俗易懂地向初学者通解释 jQuery、CSS3 和 HTML5 的关系？\n",
    "author": "郑诚",
    "content": "\n\n<textarea hidden class=\"content\">&lt;ul&gt;&lt;li&gt;&lt;b&gt;HTML是由多种骨头(标签)组成的骨架。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;HTML5是更多的新骨头(标签),同时去掉了以前觉得不好用的骨头.&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;CSS是皮肤。CSS3是更美的皮肤&lt;br&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;JS控制单个动作。(抬手,张嘴,放下手,抬腿,转头,握拳等)&lt;br&gt;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;jQuery是把一组常用动作编排成了一个招式。&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;(例如吃饭这个动作里面编排了:拿起勺子,挖一勺饭,把勺子贴近嘴,张嘴,勺子送进嘴,勺子拿出嘴,咀嚼.)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;-----&lt;/b&gt;&lt;b&gt;--------------------------------------------------------------------------------------------------&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;以下的东西等他学完JS后，&lt;/b&gt;&lt;br&gt;&lt;b&gt;如果问 &lt;/b&gt;&lt;b&gt;jQuery &lt;/b&gt;&lt;b&gt;和 JS 有什么区别？，&lt;/b&gt;&lt;b&gt;jQuery&lt;/b&gt;&lt;b&gt;能不能取代JS？&lt;/b&gt;&lt;b&gt;你再告诉他这个&lt;/b&gt;&lt;b&gt;。&lt;/b&gt;&lt;br&gt;用招式(jQuery)跟电脑沟通更方便，不过招式(jQuery)是用单个动作(JS)组合而成的，&lt;br&gt;所以永远不可能取代单个动作(JS)&lt;br&gt;&lt;br&gt;招式(jQuery)编排了很多常用的动作(比如跑步，吃饭，跳跃，下蹲)。&lt;br&gt;但是如果需要某些高难度动作(比如 空中转体720°用脸着地)，而招式(jQuery) 里还没有编排。&lt;br&gt;那就需要自己用单个动作(JS)来组合一个。&lt;br&gt;&lt;br&gt;&lt;br&gt;----&lt;br&gt;Bootstrap 是推特出的一个前端框架，其实就是把 HTML,CSS,JS 都给你预先写好一些。&lt;br&gt;你可以拿它预先写好的这种界面风格直接拿来用。&lt;br&gt;按照上面的例子，就像是给你搭了一个简单的机器人，这个机器人有特定的骨架和皮肤和一些预设动作。对界面要求暂时不高的地方可以拿来用用。比如一个小项目的第一版界面不用花特别多时间弄得多么多么漂亮。就可以拿 Bootstrap 先顶着（其实 Boostrap 挺漂亮的，也不差）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>HTML是由多种骨头(标签)组成的骨架。</b><b>HTML5是更多的新骨头(标签),同时去掉了以前觉得不好用的骨头.</b><b>CSS是皮肤。CSS3是更美的皮肤 </b><b>JS控制单个动作。(抬手,张嘴,放下手,抬腿,转头,握拳等) </b><b>jQuery是把一组常用动作编排成了一个招式。</b>(例如吃饭这个动作里面编排了…\n\n<a href=\"/question/20408103/answer/15047781\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2012-08-08\" target=\"_blank\" href=\"/question/20408103/answer/15047781\">编辑于 2016-10-25</a></p>\n\n",
    "link": "https://zhihu.com/question/20408103/answer/15047781"
  }
]