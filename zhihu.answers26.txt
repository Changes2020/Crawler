[
  {
    "question": "\n国内大型互联网公司（如BAT）对于web前端开发方向校招都考些什么？\n",
    "author": "张云龙",
    "content": "\n\n<textarea hidden class=\"content\">一直想写一篇完整的关于前端面试方面的个人体会和总结，这里就先小扯一下。&lt;br&gt;&lt;br&gt;我在B和A都有过从事校招、社招的经历，两个东家的招聘原则基本一致。&lt;br&gt;&lt;br&gt;首先，我想说，有不少面试官还是靠直觉的，随便扯两句就过了的情况也存在，但是我觉得面试本身应该是非常严谨的事，关乎到一个人的前途和命运，应该尽量细致全面的评价面试者，做到“客观、独立、第三方”，哈哈。&lt;br&gt;&lt;br&gt;两家公司在招聘技术岗位的时候，都希望从【技术基础】、【技术成果】和【技术热情】三方面考量一个同学， &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-tip=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt; 的答案也给出了相同的分类（说法不同而已），所以考察的点也围绕着这三条。&lt;br&gt;&lt;br&gt;每次面试我都希望尽量挖掘面试同学的潜力，所以一般会从面试者的简历中找他觉得最好的项目，深入的问下去，这个过程中把js、css、html的技术基础尽量都考察到，问问数据交互、js逻辑实现、样式问题上的处理等，通常能覆盖到大部分我想了解的。&lt;br&gt;&lt;br&gt;遇到没有什么具体技术成果的同学，我自己会事前用心准备一些可以从多个角度回答的问题，面试官准备自己的题库也是个不错的面试技巧，偷懒的话可以问那个“从地址栏输入url到展现页面都发生了什么”，类似 &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-tip=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt; 的点击链接到下载完成，是个不错的面试题。我自己以前准备的一些问题比如：&lt;br&gt;&lt;ol&gt;&lt;li&gt;如何在页面上实现一个圆形的可点击区域。能想到用map+area或者svg的，我觉得html可能比较熟；能想到border-radius的，我觉得css可能比较熟。如果实在想不出来什么，我就引导他回答纯js实现，这个时候就问问怎么求一个点在圆上这种简单算法，加上js的Math几个api，怎么获取鼠标坐标什么的。&lt;br&gt;&lt;/li&gt;&lt;li&gt;用js实现千位分隔符（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/view/3468964.htm%3Ffr%3Daladdin&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;千位分隔符_百度百科&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），这道题挺考逻辑的，看起来简单，写起来不太容易，如果回答三位循环、字符串数组分隔之类的，可以深度问下去，在加上正负号什么的看看对方的应变能力。如果能用一条正则+replace搞定，那就加分啦。&lt;/li&gt;&lt;li&gt;有一个高度自适应的div，里面有两个div，一个高度100px，希望另一个填满剩下的高度。这题有js解法、一般css解法、css3解法等。&lt;/li&gt;&lt;/ol&gt;总之就是准备一些看似简单，但又有点小陷阱，可以综合考察前端技术的问题，让经验不足的同学可以在面试的过程临时想到什么办法解决问题，这种急智也是我所期待的。我本人不建议单纯考察某写冷门的知识点或者专业名词解释，偶然性很大，不太公平。（某些面试官居然自己构造专业名词问别人，比如你知道什么是CDYSB么，啊？不知道？！这就是层叠样式表的拼音缩写啊，就是css啊，你是不是搞前端的啊！）&lt;br&gt;&lt;br&gt;其实很多时候，从回答第一个问题开始，有经验的面试官就能感觉到对方是否合格了，所以有些面试官的面试过程好像是在聊人生。但我一直不敢相信这种直觉，我希望有科学、严谨的方法论来指导面试，争取做到全面且客观。所以当我用自以为合理的方法已经判断面试人不合格的时候，还是会在面试的最后问对方“在整个面试的过程中，你是否有什么别的擅长的技术是我们没有聊到的？”，我想再多给对方一个机会，以防我的面试方法上有什么不足。同时还会问他身边有没有觉得是技术大牛的，我会要联系方式，交给hr去跟进。&lt;br&gt;&lt;br&gt;面试这件事，应该是可以被系统的研究和量化的。&lt;br&gt;&lt;br&gt;以上是我作为面试官的心态和想法。聪明、有潜力、学科素养好的，会尝试挖掘你的潜力；平时做了很多项目，有一定经验，对前端有热情的同学，会尝试肯定你的成果；唯独要排除的就是面试前突击，想过来忽悠的同学。有底子的好苗子尽管放心来，很少会被误判，就算没来面试，说不定也被来面试的同学推荐了。&lt;br&gt;&lt;br&gt;以上观点只是我个人的看法，不代表公司。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n一直想写一篇完整的关于前端面试方面的个人体会和总结，这里就先小扯一下。 我在B和A都有过从事校招、社招的经历，两个东家的招聘原则基本一致。 首先，我想说，有不少面试官还是靠直觉的，随便扯两句就过了的情况也存在，但是我觉得面试本身应该是非常严谨…\n\n<a href=\"/question/26188893/answer/32360020\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-10-24\" target=\"_blank\" href=\"/question/26188893/answer/32360020\">编辑于 2014-10-24</a></p>\n\n",
    "link": "https://zhihu.com/question/26188893/answer/32360020"
  },
  {
    "question": "\nJavaScript 函数式编程存在性能问题么？\n",
    "author": "justjavac",
    "content": "\n\n<textarea hidden class=\"content\">最近正打算写 javascript 性能和 V8 GC 的专题，今天就看到了这个问题。&lt;br&gt;&lt;br&gt;原作者写到：&lt;br&gt;&lt;blockquote&gt;&lt;h3&gt;Don't over-optimize&lt;/h3&gt;&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/petkaantonov/bluebird/wiki/Optimization-killers&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;There are good resources&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;p&gt;而在 jsperf 网站中，可以看到：&lt;/p&gt;&lt;h1&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//jsperf.com/foreach-vs-loop&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;forEach vs loop · jsPerf&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-8ec7c5821d29f3f2e8806445b159eb8d_b.png&quot; data-rawwidth=&quot;1063&quot; data-rawheight=&quot;240&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1063&quot; data-original=&quot;https://pic2.zhimg.com/v2-8ec7c5821d29f3f2e8806445b159eb8d_r.png&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-43ef9549f9fa36dbad8b2c9757213639_b.png&quot; data-rawwidth=&quot;627&quot; data-rawheight=&quot;467&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;627&quot; data-original=&quot;https://pic2.zhimg.com/v2-43ef9549f9fa36dbad8b2c9757213639_r.png&quot;&gt;慢了 96%。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//jsperf.com/lodash-map-vs-foreach&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lodash map vs forEach vs native for loop&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-879ed053bcf12ceb17f0e94267da09b0_b.png&quot; data-rawwidth=&quot;1068&quot; data-rawheight=&quot;511&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1068&quot; data-original=&quot;https://pic1.zhimg.com/v2-879ed053bcf12ceb17f0e94267da09b0_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;h1&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//jsperf.com/flatten-an-array-loop-vs-reduce&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flatten an array - loop vs reduce&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/h1&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-e5e2093d9a1ac36ac657639273a1a144_b.png&quot; data-rawwidth=&quot;1054&quot; data-rawheight=&quot;611&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1054&quot; data-original=&quot;https://pic1.zhimg.com/v2-e5e2093d9a1ac36ac657639273a1a144_r.png&quot;&gt;使用最原始的 for 循环，性能提升了近一倍。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//jsperf.com/simple-js-loop-comparison&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JS loop comparison&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;即使是原生循环，不同的写法，性能也不一样。换句话说：&lt;b&gt;越是使用奇技淫巧，性能就越高&lt;/b&gt;。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-91dfd8ef43650c007c6faf99b201a047_b.png&quot; data-rawwidth=&quot;1058&quot; data-rawheight=&quot;979&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1058&quot; data-original=&quot;https://pic4.zhimg.com/v2-91dfd8ef43650c007c6faf99b201a047_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;上周末我还创建了一个 ES6 中 rest 参数对比数组参数的测试：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//jsperf.com/fp-rest-vs-array&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fp rest vs array&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-46b2fe8cf1c48abd5ef24db765f416ab_b.png&quot; data-rawwidth=&quot;1053&quot; data-rawheight=&quot;224&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1053&quot; data-original=&quot;https://pic4.zhimg.com/v2-46b2fe8cf1c48abd5ef24db765f416ab_r.png&quot;&gt;数组参数比 rest 快了 14%。&lt;br&gt;&lt;br&gt;说到函数式编程，大家都会提到 Lo-Dash 和 RxJS。去年我翻译了一篇文章：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//justjavac.com/javascript/2015/12/15/introducing-lazy-evaluation.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;如何百倍加速 Lo-Dash？引入惰性计算&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，开头是这样写的：&lt;br&gt;&lt;blockquote&gt;我一直以为像 Lo-Dash 这样的库已经不能再快了，毕竟它们已经足够快了。 Lo-Dash 几乎完全混合了各种 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DNthmeLEhDDM&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript 奇技淫巧&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（YouTube）来压榨出最好的性能。&lt;/blockquote&gt;但是 Lo-Dash 却使用了更深的技巧，把性能提升了不只百倍，基准测试：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//jsperf.com/lazy-demo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;lazy-demo · jsPerf&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-25962e7d6f5a5f7f1cdd3c373443e2cb_b.png&quot; data-rawwidth=&quot;1052&quot; data-rawheight=&quot;225&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1052&quot; data-original=&quot;https://pic4.zhimg.com/v2-25962e7d6f5a5f7f1cdd3c373443e2cb_r.png&quot;&gt;&lt;p&gt;我的观念是：这些事应该交给编译器去优化，而 V8 也确实做的非常出色。记得之前 C 语言有一个关键字 register，开发者可以使用 register 定义变量，告诉编译器这个变量要放到寄存器里面。我学 C 语言的时候电脑还是 30386,30586 时代，好像有 4 个还是 6 个寄存器可以使用，而现在的主流 C 编译器都会默认忽略这个关键词。&lt;/p&gt;&lt;p&gt;如果你是一个库开发者，你应该多研究研究 V8 的运行机制，比如 JIT，GC，等。如果你是一个普通开发者，还是那句老话，&lt;b&gt;过早优化是万恶之源&lt;/b&gt;。你应该把可读性，可维护性，可测试性放到首位。&lt;/p&gt;&lt;p&gt;---------- 更 2017-01-11 13:39:56 ------&lt;/p&gt;&lt;p&gt;评论中 &lt;a data-hash=&quot;dd2386587ab3a1aaf6af0eecdd5fee04&quot; href=&quot;//www.zhihu.com/people/dd2386587ab3a1aaf6af0eecdd5fee04&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@beeplin&quot; data-hovercard=&quot;p$b$dd2386587ab3a1aaf6af0eecdd5fee04&quot;&gt;@beeplin&lt;/a&gt; 说 forEach 居然这么慢。再补充点 V8 的相关知识。&lt;/p&gt;&lt;p&gt;大部分开发者认为 javascript 是脚本语言，所以应该是解释执行的。但是 V8 并没有 JS 解释器它有 2 个不同的编译器，分别是通用编译器和优化编译器。javascript 是直接被编译为机器码执行的。&lt;/p&gt;&lt;p&gt;对于编译和执行相关的 javascript 文章没有找到，姑且用一篇鸟哥 &lt;a data-hash=&quot;59b86961796e441b1cf36c486f096a30&quot; href=&quot;//www.zhihu.com/people/59b86961796e441b1cf36c486f096a30&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Laruence&quot; data-hovercard=&quot;p$b$59b86961796e441b1cf36c486f096a30&quot;&gt;@Laruence&lt;/a&gt; 的 PHP 文章凑数吧： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.laruence.com/2012/08/16/2701.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;关于PHP的编译和执行分离 | 风雪之隅&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;JIT 编译器相比传统解释器也有一个很大的优势就是可以找出&lt;b&gt;热代码&lt;/b&gt;，对于频繁使用的代码进行编译和优化。&lt;/p&gt;&lt;p&gt;但是并不是所有的 JavaScript 代码都能被优化：&lt;/p&gt;&lt;p&gt;目前&lt;b&gt;暂时&lt;/b&gt;不能被优化的有：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;Generator&lt;/b&gt; functions&lt;/li&gt;&lt;li&gt;Functions that contain a &lt;b&gt;for-of&lt;/b&gt; statement&lt;/li&gt;&lt;li&gt;Functions that contain a &lt;b&gt;try-catch&lt;/b&gt; statement&lt;/li&gt;&lt;li&gt;Functions that contain a &lt;b&gt;try-finally&lt;/b&gt; statement&lt;/li&gt;&lt;li&gt;Functions that contain a &lt;a href=&quot;//link.zhihu.com/?target=http%3A//stackoverflow.com/q/34595356/504611&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;compound let assignment&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Functions that contain a compound &lt;b&gt;const&lt;/b&gt; assignment&lt;/li&gt;&lt;li&gt;Functions that contain object literals that contain &lt;b&gt;__proto__&lt;/b&gt;, or &lt;b&gt;get&lt;/b&gt; or &lt;b&gt;set&lt;/b&gt; declarations.&lt;/li&gt;&lt;/ul&gt;永远不可能被优化的有：&lt;br&gt;&lt;ul&gt;&lt;li&gt;Functions that contain a &lt;b&gt;debugger&lt;/b&gt; statement&lt;/li&gt;&lt;li&gt;Functions that call literally &lt;b&gt;eval()&lt;/b&gt;&lt;/li&gt;&lt;li&gt;Functions that contain a &lt;b&gt;with&lt;/b&gt; statement&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;第一个 debugger用在开发环境，线上环境中千万不要包含 debugger 代码。&lt;/p&gt;&lt;p&gt;第二个 eval 是万恶之源，不要用。&lt;/p&gt;&lt;p&gt;第三个 不要使用 with 语句。&lt;/p&gt;&lt;p&gt;一旦使用这些代码，将导致这个函数无法被优化。&lt;/p&gt;&lt;p&gt;chromium 源码中定义了所有导致性能的原因 bailout：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//cs.chromium.org/chromium/src/v8/src/bailout-reason.h&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cs.chromium.org/chromiu&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;m/src/v8/src/bailout-reason.h&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;那 forEach 为什么会这么慢呢？因为完全可以在优化的时候 JIT 为 for-loop，而且可以展开为性能最高的 loop。我们可以看一下 V8 的源码：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/v8/v8/blob/master/src/js/array.js%23L1037-L1055&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/v8/v8/blob/m&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;aster/src/js/array.js#L1037-L1055&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-33f03295981721598aacaf0d61301424_b.png&quot; data-rawwidth=&quot;586&quot; data-rawheight=&quot;418&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;586&quot; data-original=&quot;https://pic1.zhimg.com/v2-33f03295981721598aacaf0d61301424_r.png&quot;&gt;&lt;i&gt;&amp;lt;del&amp;gt;每次循环都要判断参数是否为一个回掉函数，而且还判断了元素是否为 undefined&amp;lt;/del&amp;gt;&lt;/i&gt;,（谢谢评论区各位大大提醒，此段有误）&lt;/p&gt;&lt;p&gt;而 lodash 的 foreach 直接使用了 while 循环。而 lodash 的 map 比原生 for-loop 还快，因为它提前分配了一个 array &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/lodash/lodash/blob/37d4e23edc265e1950b9552dc71a6e3a1167082a/lodash.js%23L3514&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/lodash/lodas&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;h/blob/37d4e23edc265e1950b9552dc71a6e3a1167082a/lodash.js#L3514&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/v2-8ec7c5821d29f3f2e8806445b159eb8d_200x112.png\" data-rawwidth=\"1063\" data-rawheight=\"240\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/v2-8ec7c5821d29f3f2e8806445b159eb8d_r.png\">\n最近正打算写 javascript 性能和 V8 GC 的专题，今天就看到了这个问题。 原作者写到： Don't over-optimizeModern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your t…\n\n<a href=\"/question/54637225/answer/140362071\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2017-01-11\" target=\"_blank\" href=\"/question/54637225/answer/140362071\">编辑于 2017-02-03</a></p>\n\n",
    "link": "https://zhihu.com/question/54637225/answer/140362071"
  },
  {
    "question": "\n编程大牛们，你们有什么能快速入门一门语言/框架/工具的独门方法？\n",
    "author": "Milo Yip",
    "content": "\n\n<textarea hidden class=\"content\">&lt;ol&gt;&lt;li&gt;读书；&lt;/li&gt;&lt;li&gt;做习题；&lt;/li&gt;&lt;li&gt;做练手项目；&lt;/li&gt;&lt;li&gt;回到1。&lt;/li&gt;&lt;/ol&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n读书；做习题；做练手项目；回到1。\n\n<a href=\"/question/50991824/answer/123609734\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/50991824/answer/123609734\">发布于 2016-09-25</a></p>\n\n",
    "link": "https://zhihu.com/question/50991824/answer/123609734"
  },
  {
    "question": "\n前端深入到什么程度才可以本科就拿到bat google 的offer？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">其实被邀请这类扯淡的提问已经不是两三次了。通常我就直接无视，这个呢，我就不友善的说一说。&lt;br&gt;&lt;br&gt;第一个，问题本身就很扯淡：&lt;br&gt;前端深入到什么程度才可以本科就拿到bat google 的offer？&lt;br&gt;&lt;br&gt;BAT的offer跟Google的offer可以这样并列？傻孩子。&lt;br&gt;&lt;br&gt;第二个，所有大公司应届offer从来不是看你在某个领域深入到怎么样的程度，因为正常人不可能指望应届毕业生能深入某个领域，要是这么容易深入，那些工作7、8年的资深工程师都耍啥呢？&lt;br&gt;&lt;br&gt;当然总是有天才的，天才有专门的通道，比如阿里之星号称进去就年薪60万。不过看你这么提问，是天才的几率是0。&lt;br&gt;&lt;br&gt;（当然不少小公司倒是很愿意招那些刚毕业就会点三脚猫功夫的学生。至于进这样的小公司是不是ok，那就是另外一个话题了。）&lt;br&gt;&lt;br&gt;第三个，问题描述里“我要在哪方面作深入研究，才能在前端方面有所建树”，这画风一转，一下从功利性的“拿offer”变成了“有所建树”。你明白这两个根本是截然不同层次的东西吗？&lt;br&gt;&lt;br&gt;&lt;br&gt;下面是对你的个人建议：&lt;br&gt;1. 先学会怎么把问题写到能看的程度。逻辑的基本通顺，没有一眼可见的硬伤，还有标点。想做前端，先练细节。标点都马马虎虎的人来面试前端，我一律先减30分。&lt;br&gt;2. 211跟985的人比拼进BAT，很不乐观，这不是血统论（看过我其他帖子的人知道我讲过好几个没上过大学但是超级鸡汤的励志例子），而是统计事实。这不是叫你放弃，而是人生规划时清楚现在自己的状况。&lt;br&gt;3. 才大二，少做（react/angular/php）hello world级别的事情（除非你能作出点真的有点实际价值的产品），先打基础。&lt;br&gt;&lt;br&gt;以上。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n其实被邀请这类扯淡的提问已经不是两三次了。通常我就直接无视，这个呢，我就不友善的说一说。 第一个，问题本身就很扯淡： 前端深入到什么程度才可以本科就拿到bat google 的offer？ BAT的offer跟Google的offer可以这样并列？傻孩子。 第二个，所有大公司…\n\n<a href=\"/question/39662828/answer/83157524\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-24\" target=\"_blank\" href=\"/question/39662828/answer/83157524\">编辑于 2016-01-24</a></p>\n\n",
    "link": "https://zhihu.com/question/39662828/answer/83157524"
  },
  {
    "question": "\n阿里和百度的前端offer比较？\n",
    "author": "Cat Chen",
    "content": "\n\n<textarea hidden class=\"content\">如果百度的年薪能让你在上海活得舒服，多四万根本不值得一提。你现在已经有投资想法？没有的话，多四万收入好则多两万定存，不好则全数花掉。大多数应届生对投资理财没什么概念，收入超过基本开销的部分毫无增值能力。&lt;br&gt;&lt;br&gt;在钱有限的时候，用钱赚钱的能力也是有限的，还不如先提高用知识赚钱的能力。这时候一个好的项目和好的 mentor 最重要。我没有  &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt; 那么多话要说，就两条：&lt;br&gt;&lt;br&gt;1. 项目要找 rocket ship，也就是爆炸性增长的。不明自请自行搜索「Sheryl Sandberg rocket ship」。&lt;br&gt;2. mentor 要能从项目中划一块大小刚好在你 learning zone 的问题给你。comfort zone 你学不到东西，panic zone 你根本不知道如何下手解决。不明白请自行搜索上述词组。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n如果百度的年薪能让你在上海活得舒服，多四万根本不值得一提。你现在已经有投资想法？没有的话，多四万收入好则多两万定存，不好则全数花掉。大多数应届生对投资理财没什么概念，收入超过基本开销的部分毫无增值能力。 在钱有限的时候，用钱赚钱的能力也是…\n\n<a href=\"/question/26799539/answer/34312973\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/26799539/answer/34312973\">发布于 2014-12-01</a></p>\n\n",
    "link": "https://zhihu.com/question/26799539/answer/34312973"
  },
  {
    "question": "\n可以用WebRTC来做视频直播吗？\n",
    "author": "韦易笑",
    "content": "\n\n<textarea hidden class=\"content\">别迷信 WebRtc，WebRtc只适合小范围（8人以内）音视频会议，不适合做直播：&lt;br&gt;&lt;br&gt;1. 视频部分：vpx的编码器太弱，专利原因不能用264，做的好的都要自己改264/265代码才行。&lt;br&gt;2. 音频部分：音频只适合人声编码，对音乐和其他非人声的效果很糟糕。&lt;br&gt;3. 网络部分：对国内各种奇葩网络适应性太低，网络糟糕点或者人多点就卡。&lt;br&gt;4. 信号处理：同时用过 GIPS和 WebRTC 进行对比，可以肯定目前开源的代码是GIPS阉割过的。&lt;br&gt;5. 使用规模：10人以内使用，超过10人就挂了，WebEx方案支持的人数都比 RTC 强。&lt;br&gt;&lt;br&gt;正确的方法是啥呢？&lt;br&gt;------------------------- 分割线 ------------------------- &lt;br&gt;让粉丝们来看直播，如果同时粉丝数&amp;gt;10人，那么不关 WebRtc 鸟事，服务器请使用 nginx rtmp-module架设，架设好了用 ffmpeg 命令行来测试播摄像头。主播客户端请使用rtmp进行推流给rtmp-module，粉丝请使用 rtmp / flv + http stream 进行观看，PC-web端的粉丝请使用 Flash NetStream来观看，移动 web端的粉丝请使用 hls / m3u8 来观看。&lt;br&gt;&lt;br&gt;如果你试验成功要上线了，出现压力了，那么把nginx分层（接入层+交换层），稍微改两行代码，如果资金不足以全国部署服务器，那么把 nginx-rtmp-module 换为 cdn 的标准直播服务，也可以直接调过 nginx，一开始就用 cdn 的直播服务，比如网宿（斗鱼的直播服务提供商）。&lt;br&gt;&lt;br&gt;这是正道，别走弯路了。&lt;br&gt;---</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n别迷信 WebRtc，WebRtc只适合小范围（8人以内）音视频会议，不适合做直播： 1. 视频部分：vpx的编码器太弱，专利原因不能用264，做的好的都要自己改264/265代码才行。 2. 音频部分：音频只适合人声编码，对音乐和其他非人声的效果很糟糕。 3. 网络部分：对…\n\n<a href=\"/question/25497090/answer/72397450\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-11-16\" target=\"_blank\" href=\"/question/25497090/answer/72397450\">编辑于 2015-11-16</a></p>\n\n",
    "link": "https://zhihu.com/question/25497090/answer/72397450"
  },
  {
    "question": "\n电子工程师是怎样的成长之路？\n",
    "author": "陈俊直",
    "content": "\n\n<textarea hidden class=\"content\">谢邀：&lt;br&gt;我只能说我的专业成长之路：我高考报的志愿全是计算机、电子信息、自动化等工科专业，而且非北方的院校不读（我是南方人）。然后考上了天津的一学校学计算机专业。大二学完电路、C、java、微机原理等之后发现我还是喜欢做硬件，然后大三就转到了测控专业。学MCU原理的时候，那时候穷，买不起开发板。就买了几颗51的MCU，用学校实验室的万用板等元器件焊了一个最小系统+ISP电路（废了几颗MCU，弄爆电容、整坏了老师的仿真器）……后来跟着老师陆续做了些项目（全是他自己的找的生意，我们给他免费打工），参加电子设计比赛，除了51还用过TI的DSP。当时还想着学FPGA，但发现开销太大，毕业迫在眉睫，然后就先毕业出去混了。&lt;br&gt;&lt;br&gt;第一份工作是一家做煤矿矿用设备的企业，所有的主控MCU都是使用PIC的MCU，花了一个月时间自己焊开发板、自己看着Microchip的数据手册和使用指南啃下了Microchip的PIC12/16/18、dsPIC系列MCU。然后老板没让我先参与研发，而是把老产品的坏件都修好。至此，我开始发现，做EE，不能迷信用什么主控芯片，做硬件设计重点是在于系统接口电路调试和实现。&lt;br&gt;干了快两年，那套井下通信控制设备也差不多了，一个老工程师告诫我。做硬件重要不是在于设计，而是在于调试设备的过程，在调试过程中出现的各种千奇百怪的bug，能解决掉了就是你学到了。&lt;br&gt;&lt;br&gt;后来东西做完后，我嫌涨薪太慢。萌生去意，正好此时大学同学在北京的一家做铁路列车装备的企业要招人。然后我就过去了。在这个企业里开始学着用ARM芯片，学着用嵌入式实时操作系统。也接触到了EMC的概念。为了一个带有触摸屏的模块设备能通过严酷等级三级（根据GB/T17626）的EMC型式试验，基本上天天加班研究TVS管、压敏电阻、PCB布线等，每天拿着静电抢在那里扫。终于在大年二九那天晚上搞定了它……（说多都是泪）&lt;br&gt;&lt;br&gt;后来因为某次高铁事故，很多相关不相关的设计铁路行业的民企的资金链都被拖垮了，我所在的企业也不能幸免，之后又跳槽了，还是在铁路行业。做铁路信号系统，在这里开始涉及到做FPGA/CPLD芯片，开始涉及到做开关电源。当时为了调试一个反击式开关电源，天天加班、烧了不少的MOS管，慢慢的巩固了我那可怜的模电知识。当然最重要的是学到了完整的一套项目管理流程，明白了做项目开发，最重要的在于需求分析。&lt;br&gt;……&lt;br&gt;至此说了我大学到之前工作的三个企业，现在在广州混，做电机控制，因为是正在进行的东西，我就不多说了。&lt;br&gt;做电工最总要的就是动手和经验，现在大学基本都会让学生焊一个收音机来练手，目的就是让你加深巩固模电的知识。&lt;br&gt;上面写得很乱，因为我刚加班回到家，如有逻辑、字符混乱之初，敬请谅解……&lt;br&gt;&lt;br&gt;======================&lt;br&gt;现在是吐槽阶段，为啥我不说学什么具体的，因为：1：上面已经有人说过了大概的；2：你以后有大把机会去了解；3：也是最重要的，是你身份的不符合。&lt;br&gt;&lt;br&gt;为啥说身份不符合，估计楼主还是高三的孩子。如果我没记错，应该还有两个月多几天就要高考了。我认为你的这个问题提早了，你现在要考虑的是必须确保你的高考成绩。考不上的话说啥都没用。我不同意 &lt;a data-hash=&quot;cdb3f51a20f10ec53cdd959d7cfc8f4d&quot; href=&quot;//www.zhihu.com/people/cdb3f51a20f10ec53cdd959d7cfc8f4d&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@冯小熊&quot; data-tip=&quot;p$b$cdb3f51a20f10ec53cdd959d7cfc8f4d&quot; data-hovercard=&quot;p$b$cdb3f51a20f10ec53cdd959d7cfc8f4d&quot;&gt;@冯小熊&lt;/a&gt; 说的如果高考考不上，那四年后考个研究生。中国的升学考试内容重点在于公共课程，专业课你再牛，还是枉然。考个好的学校，你能有好的资源（我很幸运，在本科阶段就能进实验室帮老师做项目，要知道以前都是研究生才能进的实验室啊）。如果考不上大学，虽然有类似魅族老总黄章这样的高中毕业就创业的例子，但那毕竟是少数。在大学里，有的人能泡到好几个小妞、有的人玩游戏能去参加电竞比赛。但更多人是扎实了专业基础、开阔视野，最重要的是他们毕业时候手里有个敲门砖——毕业证。中国的企业现在普遍还是很现实的。&lt;br&gt;&lt;br&gt;另外我不认为深圳有什么自由的风气（你说的是深圳旁边的HK吧）。你去过深圳么，你确认你能适应深圳的气候环境么？个人认为，如果你能考上哈工大之类的985，那也可以先在资源好的大学多学点。深圳很多的电工都是从全国各地优秀大学过来的。不一定非得直接去深圳读大学（当然了，在深大毕业后，你户口就在深圳了，去香港比我们这些非深户口方便多了）。&lt;br&gt;&lt;br&gt;最后，关于你说“希望三十岁之前能把技术搞个手熟”。想起当年的那个老工程师跟我说过的：做电工，毕业出来干五年才算出师、十年才算小有成就……我做硬件设计这么久，&lt;b&gt;觉得做得越多，越敬畏，敬畏电子技术知识海洋的博大，而我仅仅是了解那么一瓢水。&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谢邀： 我只能说我的专业成长之路：我高考报的志愿全是计算机、电子信息、自动化等工科专业，而且非北方的院校不读（我是南方人）。然后考上了天津的一学校学计算机专业。大二学完电路、C、java、微机原理等之后发现我还是喜欢做硬件，然后大三就转到了测控…\n\n<a href=\"/question/23239634/answer/24019622\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-04-01\" target=\"_blank\" href=\"/question/23239634/answer/24019622\">编辑于 2014-04-02</a></p>\n\n",
    "link": "https://zhihu.com/question/23239634/answer/24019622"
  },
  {
    "question": "\n如何看待 CSS 中 BEM 的命名方式？\n",
    "author": "大猫",
    "content": "\n\n<textarea hidden class=\"content\">再烂的东西,如果真的毫无价值,是会马上被历史所淹没的&lt;br&gt;&lt;br&gt;每个领域都有沉淀下来对特定开发者在特定场景有用的东西&lt;br&gt;很赞同克军那句取其精华去其糟粕,何为精华,自己根据使用场景取舍&lt;br&gt;&lt;br&gt;可能大多数同学看到那么多下划线中划线以及那么长我靠还有驼峰的名字,就会觉得混乱和不爽&lt;br&gt;不爽是一个很主观的词儿,他除了解决心理问题,没法解决生理问题&lt;br&gt;&lt;br&gt;CSS这么多年并没有一个相对比较严谨的套路出来,宽松的写法导致团队成员写法各异,丢在页面都能跑起来,但混着做项目就不敢动或理不清别人写的代码&lt;br&gt;&quot;这个CSS重写一遍比修改老文件快&quot;,这样的念头几乎所有人都曾有过.&lt;br&gt;&lt;br&gt;我们团队用BEM快1年,下面我来谈谈一些心得&lt;br&gt;&lt;br&gt;&lt;b&gt;了解什么是 B.E.M&lt;/b&gt;&lt;br&gt;&lt;br&gt;Block&lt;br&gt;!误区:这个block并非inline-block里的block,&lt;br&gt;而是将所有东西都划分为一个&lt;u&gt;独立的模块&lt;/u&gt;,一个header是block,header里嵌套的搜索框是block,甚至一个icon一个logo也是block&lt;br&gt;block可以相互嵌套&lt;br&gt;&lt;br&gt;Element&lt;br&gt;!误区:如果一个Element-son是另一个Element-father的子元素,&lt;br&gt;那么写法是 Block__Element-father__Element-son_Modifer,嵌套多了会很长么?&lt;br&gt;不是的!!!&lt;br&gt;一个Block下的所有Element无论相互层级如何,都要摊开扁平的属于Block&lt;br&gt;所以&lt;u&gt; BEM 最多只有 B+E+M 三级&lt;/u&gt;,不可能出现 B+E+E+..+E+M 超长class名,也要求E不能同名&lt;br&gt;&lt;br&gt;Modifier&lt;br&gt;之前我们经常写的 .current .active 等表达状态&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;从Class中解读B.E.M&lt;/b&gt;&lt;br&gt;&lt;br&gt;我们常说CSS的注释要写WHY,而不是写WHAT,看Class命名最好就知道是WHAT&lt;br&gt;BEM提出的一个概念是用连接符号来表达,它并不规定必须用什么连接符,但规定用不同连接符做团队内约定区分BEM 3类元素&lt;br&gt;&lt;br&gt;例如我们组内约定&lt;br&gt;__双下划线代表B和E连接例如 menu&lt;b&gt;__item&lt;/b&gt;&lt;br&gt;_单下划线代表B和M或E和M的连接 例如 menu&lt;b&gt;_active&lt;/b&gt; 或 menu__item&lt;b&gt;_active&lt;/b&gt;&lt;br&gt;-中划线同英语里做连字符例如 mod-menu 或 &lt;b&gt;mod-menu&lt;/b&gt;__item 这里 B或E或M需要多个单词来描述,就使用中划线&lt;br&gt;&lt;br&gt;打字会抽搐吧...&lt;br&gt;你听说过Emmet么?再不济Zen Coding有听说过吧?实在不行听说过安利也行啊&lt;br&gt;FYI &lt;a href=&quot;//link.zhihu.com/?target=http%3A//docs.emmet.io/filters/bem/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;docs.emmet.io/filters/b&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;em/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;拆分Block到文件&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/2f34e41f10a05b3675a8153110aa19bd_b.jpg&quot; data-rawwidth=&quot;827&quot; data-rawheight=&quot;819&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;827&quot; data-original=&quot;https://pic2.zhimg.com/2f34e41f10a05b3675a8153110aa19bd_r.jpg&quot;&gt;&lt;br&gt;我们并没有用BEM推荐的拆分CSS到更多目录里,图片是拆目录的.因为用的是 Grunt+LESS&lt;br&gt;团队项目特色为N个相互独立的移动端项目,Block并不会很多,所以文件扁平化很直观,带来的效率也相对高,如图为其中某个项目的css部分&lt;br&gt;另外,写block的时候需要新建less文件,字母排序,是否重名都很清晰&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/a0fa188483ddc8d645fcb26ae6826aa5_b.jpg&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;184&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic2.zhimg.com/a0fa188483ddc8d645fcb26ae6826aa5_r.jpg&quot;&gt;&lt;br&gt;按ctrl+f查找class定位和按快捷键打开文件名没啥大区别,更何况新版LESS还有source map&lt;br&gt;&lt;br&gt;最后我们团队正在开发对应模块管理的工具,目标是向NPM一样玩,同Alice一样规划解决方案&lt;br&gt;&lt;br&gt;&lt;b&gt;代码复用&lt;/b&gt;&lt;br&gt;&lt;br&gt;代码风格可能文档里说的也不是很详细,不如直接对着他们的页面按F12吧 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//beta.yandex.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;beta.yandex.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;BEM/OOCSS 风格对维护重用的class有极大帮助,适当的拆分block后组合,威力无穷&lt;br&gt;&lt;br&gt;那个千年老栗子——如果我想将一个f30的类，改成f35怎么办？是挂羊头卖狗肉的直接将.f30{font-size:30px}改成.f30{font-size:35}吗？还是要进行全局搜索，改动所有的html的class名？&lt;br&gt;或者 Alice 里面的&lt;br&gt;.text-size30{font-size:30px;}&lt;br&gt;.text-size20{font-size:20px;}&lt;br&gt;.text-size10{font-size:10px;}&lt;br&gt;&lt;br&gt;而我们采用的是类似 bootstrap 的方案&lt;br&gt;用程度来划分,而非具体数值,所以根本就不会存在.text-size30这么个类,那个写style上去有毛线区别.&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/e952dd436525ba2079e729742c2f91bc_b.jpg&quot; data-rawwidth=&quot;587&quot; data-rawheight=&quot;114&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;587&quot; data-original=&quot;https://pic1.zhimg.com/e952dd436525ba2079e729742c2f91bc_r.jpg&quot;&gt;&lt;br&gt;在var.less里定义具体的数值&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/adde16397f58140be3f84a3dc8f8a734_b.jpg&quot; data-rawwidth=&quot;443&quot; data-rawheight=&quot;156&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;443&quot; data-original=&quot;https://pic1.zhimg.com/adde16397f58140be3f84a3dc8f8a734_r.jpg&quot;&gt;&lt;br&gt;在 ui.less 里调用&lt;br&gt;&lt;br&gt;BEM的任何一个block都可以到处用,这对模块并不多的手机项目非常有利.&lt;br&gt;&lt;br&gt;&lt;b&gt;关于hax大神吐槽的不用ID和后代选择器&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;ID&lt;/b&gt;&lt;br&gt;ID对于我和!important对于我一样,并不否认价值,但想不起来上一次用是啥时候了.&lt;br&gt;说到这里顺便提一下 z-index的问题,有多少同学写z-index的时候会写1000+?有做过整站z-index规划么? 同样的用 class 如果能规划好了,我是不倾向用id,也想不到有什么非用ID不可的情况,性能什么的,呵呵,测过,影响不大&lt;br&gt;特定场景例子:在腾讯,JS和CSS是分别2种团队的人在写,我们约定ID给JS,class给CSS和固定前缀的JS hook,不管是不是BEM,ID在我们这两种团队约定下也是不使用,并且也没带来啥问题&lt;br&gt;&lt;br&gt;&lt;b&gt;后代选择器&lt;/b&gt;&lt;br&gt;这个BEM写block的时候是不用,&lt;u&gt;但block相互嵌套的时候是用的&lt;/u&gt;,&lt;br&gt;例如一个状态下需要变动多个表现,用后代选择器一次性处理&lt;br&gt;性能以及JS/CSS代码可维护性都有明显优势&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/bbdab46e7f8d0b2dc68afbb37a8b7742_b.jpg&quot; data-rawwidth=&quot;505&quot; data-rawheight=&quot;228&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;505&quot; data-original=&quot;https://pic3.zhimg.com/bbdab46e7f8d0b2dc68afbb37a8b7742_r.jpg&quot;&gt;节选自 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//yandex.st/search_islands_www/0.2.15/desktop.bundles/index/_index.css&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;yandex.st/search_island&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;s_www/0.2.15/desktop.bundles/index/_index.css&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Tag selector 是翻译成标签选择器么&lt;/b&gt;&lt;br&gt;BEM是不允许用标签选择器的,一开始难以接受...&lt;br&gt;.menu li 能搞定的事情需要每个 li 都写.menu-item&lt;br&gt;&lt;br&gt;&lt;u&gt;坏处&lt;/u&gt;&lt;br&gt;是 k 数增加么?gzip下真不是个问题,或者是写代码额外工作量?这难道不是动态生成的么?再不济编辑器也可以随便列编辑或复制当前行或代码提示啊&lt;br&gt;&lt;br&gt;&lt;u&gt;好处&lt;/u&gt;&lt;br&gt;就是避免 li 里的 li 受影响&lt;br&gt;举个例子,商品详情页是允许商家自定义标签的,那么商家展示区域标签的祖先元素一旦用标签选择器定义了样式,子子孙孙都要背负.&lt;br&gt;&lt;br&gt;所以十分赞同在无法百分百确定不会嵌套同样标签的情况下不用标签选择器&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;团队最重要的是统一&lt;/b&gt;&lt;br&gt;有一次讨论连字符用中划线还是下划线的时候,谁也说服不了谁,&lt;br&gt;最后一个掌勺的拍板,大家统一用一个,而非同一个团队多种风格.&lt;br&gt;这对上下游合作,内部合作都会极大的降低沟通成本&lt;br&gt;&lt;br&gt;之所以用 BEM(部分),也是因为没找到更好的类似规范,虽然有缺陷,但至少可以统一&lt;br&gt;讨论一个东西,我们很容易找出他的槽点,但是提出更好解决方案的同学少之又少,&lt;br&gt;从BEM中我们可以学习他优秀的方面纳为己用,&lt;br&gt;&lt;b&gt;团队合作永远是统一高于一切&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;20160812 更新:&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.smashingmagazine.com/2016/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;smashingmagazine.com/20&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;16/06/battling-bem-extended-edition-common-problems-and-how-to-avoid-them/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/2f34e41f10a05b3675a8153110aa19bd_200x112.jpg\" data-rawwidth=\"827\" data-rawheight=\"819\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/2f34e41f10a05b3675a8153110aa19bd_r.jpg\">\n再烂的东西,如果真的毫无价值,是会马上被历史所淹没的 每个领域都有沉淀下来对特定开发者在特定场景有用的东西 很赞同克军那句取其精华去其糟粕,何为精华,自己根据使用场景取舍 可能大多数同学看到那么多下划线中划线以及那么长我靠还有驼峰的名字,就会觉得…\n\n<a href=\"/question/21935157/answer/20116700\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-11-16\" target=\"_blank\" href=\"/question/21935157/answer/20116700\">编辑于 2016-08-12</a></p>\n\n",
    "link": "https://zhihu.com/question/21935157/answer/20116700"
  },
  {
    "question": "\n为什么有很多人明明基础都不会，却一直在讨论jQuery？\n",
    "author": "Twiknight",
    "content": "\n\n<textarea hidden class=\"content\">说得好像你懂得v8是怎么执行你写的JS的一样。&lt;br&gt;说得好像你懂得C++runtime是怎么执行V8的一样。&lt;br&gt;说得好像你懂得C++是怎么转换成机器码的一样。&lt;br&gt;&lt;br&gt;--------------------------&lt;br&gt;高级语言的意义就是把程序员从繁复的造轮子工作中解放出来。&lt;br&gt;要是这个道理都没高明白，我建议题主还是多去思考思考为什么jQuery这种东西会出现和流行。&lt;br&gt;&lt;br&gt;---------------------------&lt;br&gt;我在评论里说&lt;br&gt;&lt;blockquote&gt;原生dom操作和jQuery都是浏览器渲染的接口&lt;/blockquote&gt;可能有人不理解我为什么这么讲。&lt;br&gt;当然后来想想我这么说是不太恰当。但是你就此认为我不知道jQuery是用javascript写的是不是就有点过分了？&lt;br&gt;&lt;br&gt;不过我也不是随便乱说的。&lt;br&gt;&lt;b&gt;接口（Interface）是什么？是约定。&lt;/b&gt;你和其他程序（模块，类……）约定好了，这个动作的结果该是什么样子，比如返回一个值，或者在UI上做一个什么变换，然后这个动作就不归你管了，由其他程序去执行。&lt;br&gt;&lt;br&gt;所以，jQuery操作dom算不上什么原理，javascript操作dom也算不上原理。&lt;br&gt;这都是浏览器给你的dom操作接口，至于为什么你做了个动作屏幕上的东西变了，那是浏览器做的事情。&lt;br&gt;区别的地方也就是两点：&lt;br&gt;1、jQuery是在原生dom操作的基础上封装出来的。&lt;br&gt;2、jQuery不是浏览器自带的。&lt;br&gt;可是，难道第三方接口就不是接口了？（说它是浏览器的接口可能不准确，因为带有一种钦定的感觉）&lt;br&gt;&lt;br&gt;题主讲的Js的原理，我理解成dom渲染原理，这里问题不大吧。&lt;br&gt;&lt;b&gt;其实你用javascript去操作dom，能学到的大部分是技巧，不是原理。&lt;/b&gt;&lt;br&gt;因为渲染的工作是浏览器做的，不是你做的。&lt;br&gt;你的工作，也就是相当于给浏览器写了个配置文件，告诉它我要的效果是这个样子。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;这种程度，离原理还差得远。&lt;/b&gt;&lt;br&gt;我举个例子，任何一个语言或者平台，总有一些“最佳实践”。记住了，并且会用——这叫技巧；知道为什么这个东西在这是最佳——这叫原理。&lt;br&gt;最简单的，你需要反复操作一个dom的话，最后把它保存在一个变量里——这是技巧；因为如果你不这么做浏览器要反复的查询dom树，做无用功，这里只用很少的空间就换取了大量的时间——这是原理。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n说得好像你懂得v8是怎么执行你写的JS的一样。 说得好像你懂得C++runtime是怎么执行V8的一样。 说得好像你懂得C++是怎么转换成机器码的一样。 -------------------------- 高级语言的意义就是把程序员从繁复的造轮子工作中解放出来。 要是这个道理都没高明白…\n\n<a href=\"/question/36498186/answer/67826086\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-10-15\" target=\"_blank\" href=\"/question/36498186/answer/67826086\">编辑于 2015-10-16</a></p>\n\n",
    "link": "https://zhihu.com/question/36498186/answer/67826086"
  },
  {
    "question": "\n本科生如何系统地学习前端开发？\n",
    "author": "秦墨鱼",
    "content": "\n\n<textarea hidden class=\"content\">赞&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/JacksonTian/fks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JacksonTian/fks · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;你只需要注册一个github账号，github去关注一下，了然！&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/7a7c88c7fb72db4bf545ea97019863f4_b.png&quot; data-rawwidth=&quot;1111&quot; data-rawheight=&quot;1007&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1111&quot; data-original=&quot;https://pic1.zhimg.com/7a7c88c7fb72db4bf545ea97019863f4_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;总结一些常用的前端知识体系&lt;br&gt;1. 布局框架：&lt;p&gt;Bootstrap: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//getbootstrap.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;getbootstrap.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Foundation: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//foundation.zurb.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Foundation | The most advanced responsive front-end framework in the world.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Uikit: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.getuikit.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;UIkit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Web Components:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//css-tricks.com/modular-future-web-components//&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;css-tricks.com/modular-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;future-web-components//&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;2. 构建工具及包管理器：&lt;p&gt;Grunt: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//gruntjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Grunt: The JavaScript Task Runner&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Yeoman: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//yeoman.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The web's scaffolding tool for modern webapps&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Bower: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//bower.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bower&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;NPM: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.npmjs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;npm&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;3. 代码优化：&lt;p&gt;Google Closure Compiler:&lt;/p&gt;&lt;p&gt;CSS Lint: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//csslint.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Lint&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;JSHint: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jshint.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSHint, a JavaScript Code Quality Tool&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;JSLint: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jslint.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JSLint: The JavaScript Code Quality Tool&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;4. CSS预处理器&lt;p&gt;Less: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//lesscss.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Getting started&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Sass: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//sass-lang.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sass: Syntactically Awesome Style Sheets&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;5. 调试工具：&lt;p&gt;Chrome：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developers.google.com/chrome-developer-tools/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;hrome-developer-tools/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Firebug: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//getfirebug.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Firebug&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;HTTPWatch: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.httpwatch.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HttpWatch 10: HTTP Sniffer for IE, iPhone and iPad&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Fiddler: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.telerik.com/fiddler&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fiddler free web debugging proxy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;IE Developer Toolbar:&lt;/p&gt;&lt;p&gt;Weinre: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//people.apache.org/%7Epmuellr/weinre/docs/latest/Home.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;weinre - Home&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;6. 文档工具：&lt;p&gt;JSDoc: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/jsdoc3/jsdoc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - jsdoc3/jsdoc: An API documentation generator for JavaScript.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Jekyll: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jekyllrb.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;jekyllrb.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;7. IDE/文本编辑器&lt;p&gt;WebStorm: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jetbrains.com/webstorm/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;WebStorm: The Smartest JavaScript IDE&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;8. 移动端 手势事件库：&lt;p&gt;GMU: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//gmu.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GMU - mobile UI&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Hammer.js:&amp;lt; &lt;a href=&quot;//link.zhihu.com/?target=http%3A//eightmedia.github.io/hammer.js/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;eightmedia.github.io/ha&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;mmer.js/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;p&gt;QuoJS: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//quojs.tapquo.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;QuoJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Zepto: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//zeptojs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Zepto.js: the aerogel-weight jQuery-compatible JavaScript library&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Swipe: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//swipejs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - thebird/Swipe: Swipe is the most accurate touch slider.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;jQuery Mobile: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jquerymobile.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;jquerymobile.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;KendoUI:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.telerik.com/kendo-ui&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Kendo UI HTML Framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Goratchet:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//goratchet.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ratchet&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;9. 思维导图&lt;p&gt;XMind:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.xmind.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;XMind: The Most Professional Mind Mapping Software&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;10.模块加载器：&lt;p&gt;ESL:&amp;lt; &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ecomfe/esl&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - ecomfe/esl: enterprise standard loader&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;p&gt;RequireJS: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//requirejs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RequireJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;SeaJS:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//seajs.org/docs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sea.js - A Module Loader for the Web&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;11. 项目管理:&lt;p&gt;Github: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;How people build software · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;GitLab: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//about.gitlab.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Code, test, and deploy together with GitLab open source git repo management software&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Redmine: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.redmine.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Overview - Redmine&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;12. 原型设计:&lt;p&gt;Axure RP: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.axure.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Interactive Wireframe Software &amp;amp; Mockup Tool&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;13. 富互联网应用框架&lt;p&gt;AngularJs: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.angularjs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;AngularJS â€” Superheroic JavaScript MVW Framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Backbone: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//backbonejs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Backbone.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;AmpersandJS&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ampersandjs.com//&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ampersand.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Knockout: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//knockoutjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Knockout : Home&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Underscore: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//underscorejs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Underscore.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;14. 模板引擎&lt;p&gt;EJS: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.embeddedjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;EJS - JavaScript Templates&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Handlebars: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//handlebarsjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Handlebars.js: Minimal Templating on Steroids&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Jade: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jade-lang.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Jade - Template Engine&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Velocity: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//velocity.apache.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Velocity Site&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;15. 测试框架&lt;p&gt;Jasmine: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//pivotal.github.io/jasmine/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pivotal.github.io/jasmi&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ne/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;QUnit: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//qunitjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;QUnit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;mocha: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//visionmedia.github.io/mocha/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;visionmedia.github.io/m&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ocha/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;16. 版本控制&lt;p&gt;Git: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//git-scm.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;git-scm.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Subversion: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//subversion.apache.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Apache Subversion&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Mercurial(Hg): &lt;a href=&quot;//link.zhihu.com/?target=http%3A//mercurial.selenic.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;mercurial.selenic.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;17. WEB框架/服务器&lt;p&gt;Node: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//nodejs.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;nodejs.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Express: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//expressjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Express - Node.js web application framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Apache: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//httpd.apache.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Welcome! - The Apache HTTP Server Project&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Nginx: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//nginx.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nginx news&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;18. CommonJS&lt;p&gt;Component: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//component.io/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;component.io/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;19. WEB安全&lt;p&gt;XSS(跨站脚本攻击)&lt;/p&gt;&lt;p&gt;CSRF(跨站点伪造请求攻击)&lt;/p&gt;&lt;p&gt;跨iframe攻击&lt;/p&gt;&lt;p&gt;Clickjacking安全漏洞&lt;/p&gt;20. 代码规范&lt;p&gt;Code Guide: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//alloyteam.github.io/code-guide/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;alloyteam.github.io/cod&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;e-guide/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;编写可维护的CSS: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//segmentfault.com/a/1190000000388784/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;编写可维护的CSS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;GJS编码规范指南: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//alloyteam.github.io/JX/doc/specification/google-javascript.xml&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;alloyteam.github.io/JX/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;doc/specification/google-javascript.xml&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;jQueryJS规范: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//contribute.jquery.org/style-guide/js/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;contribute.jquery.org/s&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;tyle-guide/js/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;21. HTML模块化&lt;p&gt;html5boilerplate: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//html5boilerplate.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;html5boilerplate.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;22. CSS模块化&lt;p&gt;Normalize.css: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//necolas.github.io/normalize.css/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Normalize.css: Make browsers render all elements more consistently.&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;LESS:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.lesscss.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;用法 | Less.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;OOCSS:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.oocss.cc/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;oocss.cc/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//oocss.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Object-oriented CSS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;CssReset:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cssreset.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cssreset.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;23. HTML5 Canvas&lt;p&gt;D3:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//d3js.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;d3js.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;KINETIC:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//kineticjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;KineticJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;24. 前端学习网站&lt;/p&gt;&lt;p&gt;慕课网： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;imooc.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;极客学院： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jikexueyuan.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;jikexueyuan.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;攻城课堂：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.gongchongketang.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;gongchongketang.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;NODESCHOOL:  &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.nodeschool.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;nodeschool.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/7a7c88c7fb72db4bf545ea97019863f4_200x112.png\" data-rawwidth=\"1111\" data-rawheight=\"1007\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/7a7c88c7fb72db4bf545ea97019863f4_r.png\">\n赞<a href=\"//link.zhihu.com/?target=https%3A//github.com/JacksonTian/fks\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">JacksonTian/fks · GitHub<i class=\"icon-external\"></i></a> 你只需要注册一个github账号，github去关注一下，了然！ 总结一些常用的前端知识体系 1. 布局框架：Bootstrap: <a href=\"//link.zhihu.com/?target=http%3A//getbootstrap.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">getbootstrap.com/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>Foundation: <a href=\"//link.zhihu.com/?target=http%3A//foundation.zurb.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Foundation | The most advanced responsive front-end framework in the world.<i class=\"icon-external\"></i></a>…\n\n<a href=\"/question/22951927/answer/57065007\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-30\" target=\"_blank\" href=\"/question/22951927/answer/57065007\">编辑于 2016-04-11</a></p>\n\n",
    "link": "https://zhihu.com/question/22951927/answer/57065007"
  },
  {
    "question": "\n零基础转前端是怎样一种体验？\n",
    "author": "成都梁朝伟",
    "content": "\n\n<textarea hidden class=\"content\">这个问题，我觉得我目前可以回答50%，但是时间关系我只能大致谈一谈，明天有空继续更。&lt;br&gt;我已经自学了1个多月！感觉方法和资料选择还是比较重要的吧。反正我现在能仿写绝大多数静态页面了，百度啊，新浪，QQ注册这类的。慢慢用盒子模型套，总会还原的，只是时间问题。&lt;br&gt;已掌握html5+css的知识点（不包括CSS3和canves），JavaScript已学习一个星期。同时也学服务器，搭建开发环境，后端PHP(只是了解，心里有个数，以后工作肯定得会的，目前不急)&lt;br&gt;我的建议是你先了解前端开发是什么，那些技术需求起什么作用。心里有个底，知道以后工作中哪个是重点。至少html5+css+JavaScript这三个家伙到底能干嘛？布局，样式，交互指的是什么。&lt;br&gt;可以给你推荐下我的学习资料来源，&lt;br&gt;1先看传智播客对html+css最基础那个60个视频的课程，基本两到三天就可以看完。然后心里就有方向了。这个时候你要想清楚自己是不是喜欢前端，兴趣很重要。&lt;br&gt;2接下来看千锋那个html基础，只有26个视频，但是全部是例子，跟着做，每个例子都写好，分类，我花了一个星期看这个。（这个我真的是呕心沥血推荐，由浅入深的例子，和课后留的思考，自己下来一定要去网上查资料弄懂。）&lt;br&gt;3.找传智播客上有个叫8小时学会html5，这个视频主要讲h5新加入的标签，以及定义。其中他会提到canvas，这个还是学完JavaScript之后，再来学就很快了。&lt;br&gt;4.认真学完前三个，你就可以开始大量练习下，找网页来写，基本上一天专心点，可以写一个。后面会越来越熟练，一个星期写满10个，差不多也就巩固了。这里推荐先做百度页面的仿写，不懂得地下F12查看下别人是怎么布局，最后建议仿写QQ注册，大量的反复div套用。不懂的地方可以查看&quot;w3c&quot;里面的标签和解释，靠自学转行的程序员，以后工作中不会遇到问题就懵逼，学习自己解决。&lt;br&gt;5.可以开始JavaScript的学习，及其前端相关知识，这里我还在研究哪个资料好.&amp;lt;JavaScript高级设计&amp;gt;被称为每个前端程序员必看的书，但是我觉初学者还是先保证入门，要提高的时候再来看这个，所以目前暂时没有发现哪本书比较好。&lt;br&gt;（这里的步骤我会持续更新，因为我现在也放慢了学习进度，敲代码的时间较多）&lt;br&gt;&lt;br&gt;if(reallike){&lt;br&gt;everything is easy!&lt;br&gt;}&lt;br&gt;else{&lt;br&gt;get out!&lt;br&gt;}&lt;br&gt;最后说下，我以前学机械。做了一年了，6月份辞职回来，才开始接触前端。感觉要正式踏入这行，开始工作，估计需要半年的时间。希望有志同道合的朋友多交流。另外那些资料如果不知道怎么找，可以私信我。&lt;br&gt;看着我默默打字的份上，亲点个赞吧！&lt;img data-rawwidth=&quot;960&quot; data-rawheight=&quot;1280&quot; src=&quot;https://pic2.zhimg.com/c96bf39884453a67814cfc03c12ba781_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;960&quot; data-original=&quot;https://pic2.zhimg.com/c96bf39884453a67814cfc03c12ba781_r.jpg&quot;&gt;------------------------------------------------------更新下----------------------------------------------------------------------------&lt;br&gt;最近主要是在学习，服务器，开发工具，和以后做项目时需要用到的一些软件。关于资料的问题，终于给大家整理好了。我的百度云：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1eRGSUNC&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1eRGSUN&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 密码：1nia&lt;br&gt;资料的备注我都改好了，一看就懂。（传智博客的60视频我没有下载这里直接给链接好了：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dvd.boxuegu.com/course/88.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端与移动开发基础视频&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）另外给了三个压缩文件sublime text2，webstorm phpstorm开发工具，word文档是安装及破解教程，另外关于环境搭建和服务器的知识我还在总结中。最后提一句好多人问怎么你也是机械转互联网啊？看链接吧&lt;a href=&quot;http://www.zhihu.com/question/32729247/answer/111285300&quot; class=&quot;internal&quot;&gt;为什么如此多学机械的同学都想转行？ - 污男的回答&lt;/a&gt;，都是泪！&lt;br&gt;创建于 2015-03-13&lt;br&gt;著作权归作者所有</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawwidth=\"960\" data-rawheight=\"1280\" src=\"https://pic2.zhimg.com/c96bf39884453a67814cfc03c12ba781_200x112.jpg\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/c96bf39884453a67814cfc03c12ba781_r.jpg\">\n这个问题，我觉得我目前可以回答50%，但是时间关系我只能大致谈一谈，明天有空继续更。 我已经自学了1个多月！感觉方法和资料选择还是比较重要的吧。反正我现在能仿写绝大多数静态页面了，百度啊，新浪，QQ注册这类的。慢慢用盒子模型套，总会还原的，只是…\n\n<a href=\"/question/48989656/answer/114288632\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-01\" target=\"_blank\" href=\"/question/48989656/answer/114288632\">编辑于 2016-08-03</a></p>\n\n",
    "link": "https://zhihu.com/question/48989656/answer/114288632"
  },
  {
    "question": "\n怎么看 LinkedIn 放弃 Scala 和 Node.js？\n",
    "author": "彭哲夫",
    "content": "\n\n<textarea hidden class=\"content\">每次我说 node 不适合做后端工程的时候总有人跳出来说你看 linkedin 如何如何，现在啪啪啪感觉又如何？&lt;br&gt;&lt;br&gt;放弃 scala 我觉得并非和 scala 难有关，不就一个工具么，高阶程序员还在乎语言层面难不难的？我认为更多的是因为技术积累的问题。scala 调用 java 容易，反过来就是草泥马了啊。既然用了 jvm 了，何不就直接上一套 java 的完事？无论是招人还是基础设施成本都是可预见的下降。所以我总觉得啊，不是 scala 或者 clojure 不好，现在招人成本这么高，还特么是小众语言，往上走人力成本是不能承受的之痛。&lt;br&gt;&lt;br&gt;至于 node，黑箱和以桌面为目标的V8衍生出来这2个点就足矣在工程选型的时候直接放弃。做工程，尤其是做大工程的，基本不会选用这么不严谨的技术。本来前后端要解决的问题就不一样，省了这么一丢丢的所谓 fullstack 成本，后期运维成本分分钟焦作人。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n每次我说 node 不适合做后端工程的时候总有人跳出来说你看 linkedin 如何如何，现在啪啪啪感觉又如何？ 放弃 scala 我觉得并非和 scala 难有关，不就一个工具么，高阶程序员还在乎语言层面难不难的？我认为更多的是因为技术积累的问题。scala 调用 java 容…\n\n<a href=\"/question/28979908/answer/42899334\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28979908/answer/42899334\">发布于 2015-03-24</a></p>\n\n",
    "link": "https://zhihu.com/question/28979908/answer/42899334"
  },
  {
    "question": "\nSafari 会成为下一个 IE 吗？\n",
    "author": "vczh",
    "content": "\n\n<textarea hidden class=\"content\">不会的，因为在苹果的设计下面，不肯更新到最新硬件的果粉，才是被淘汰的那个（逃</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n不会的，因为在苹果的设计下面，不肯更新到最新硬件的果粉，才是被淘汰的那个（逃\n\n<a href=\"/question/54824277/answer/141272156\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2017-01-16\" target=\"_blank\" href=\"/question/54824277/answer/141272156\">编辑于 2017-01-16</a></p>\n\n",
    "link": "https://zhihu.com/question/54824277/answer/141272156"
  },
  {
    "question": "\n程序员讨厌面试被问一些基础问题么？\n",
    "author": "vczh",
    "content": "\n\n<textarea hidden class=\"content\">我不讨厌啊，问这种问题证明这个面试很简单一定会过，根本就不需要动用大脑，当然很开心，水水就过了。&lt;br&gt;&lt;br&gt;我面试过最难得一次是在MSRA，一个欧洲人，就是不出题，跟我聊我的项目，聊了一个小时，什么都扒光了，卧槽……&lt;br&gt;&lt;br&gt;最简单的也是在同一个面试，是一个美国人，估计被天朝的垃圾学生虐怕了，随便就从MSDN上打印一个函数让我实现，号称几乎没有人做对过，然后我就用了10分钟，于是后面无所事事，就随便水。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我不讨厌啊，问这种问题证明这个面试很简单一定会过，根本就不需要动用大脑，当然很开心，水水就过了。 我面试过最难得一次是在MSRA，一个欧洲人，就是不出题，跟我聊我的项目，聊了一个小时，什么都扒光了，卧槽…… 最简单的也是在同一个面试，是一个美国…\n\n<a href=\"/question/35538719/answer/63244707\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-09-11\" target=\"_blank\" href=\"/question/35538719/answer/63244707\">编辑于 2015-09-11</a></p>\n\n",
    "link": "https://zhihu.com/question/35538719/answer/63244707"
  },
  {
    "question": "\n如何规范 CSS 的命名和书写？\n",
    "author": "词晖",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;strong&gt;书写顺序&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　1.位置属性(position, top, right, z-index,\ndisplay, float等)&lt;/p&gt;&lt;p&gt;　　2.大小(width, height, padding, margin)&lt;/p&gt;&lt;p&gt;　　3.文字系列(font, line-height, letter-spacing,\ncolor- text-align等)&lt;/p&gt;&lt;p&gt;　　4.背景(background, border等)&lt;/p&gt;&lt;p&gt;　　5.其他(animation, transition等)&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/5a67fa4dab92c018abfd97e4ab286ac9_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic2.zhimg.com/5a67fa4dab92c018abfd97e4ab286ac9_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;strong&gt;书写规范使用&lt;/strong&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;strong&gt;缩写属性&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/2166c1fb168908a5858998eab2d309aa_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic3.zhimg.com/2166c1fb168908a5858998eab2d309aa_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;　　去掉小数点前的“0”&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/ea65b1c1c00c792866a670e9d66161a8_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/ea65b1c1c00c792866a670e9d66161a8_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;　　简写命名&lt;/p&gt;&lt;p&gt;　　很多用户都喜欢简写类名，但前提是要让人看懂你的命名才能简写哦!&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/53ddaefb44a6a8ce5b54de9f15466fca_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic3.zhimg.com/53ddaefb44a6a8ce5b54de9f15466fca_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;　　16进制颜色代码缩写&lt;/p&gt;&lt;p&gt;　　有些颜色代码是可以缩写的，我们就尽量缩写吧，提高用户体验为主。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/46bf23e08a7195ec7091217bb5c667d6_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic3.zhimg.com/46bf23e08a7195ec7091217bb5c667d6_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;　　连字符CSS选择器命名规范&lt;/p&gt;&lt;p&gt;　　1.长名称或词组可以使用中横线来为选择器命名。&lt;/p&gt;&lt;p&gt;　　2.不建议使用“_”下划线来命名CSS选择器，为什么呢?&lt;/p&gt;&lt;p&gt;　　输入的时候少按一个shift键;&lt;/p&gt;&lt;p&gt;　　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)&lt;/p&gt;&lt;p&gt;　　能良好区分JavaScript变量命名(JS变量命名是用“_”)&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/45dddce1b5295a7c09f2380900dce8d1_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic2.zhimg.com/45dddce1b5295a7c09f2380900dce8d1_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;　　不要随意使用Id&lt;/p&gt;&lt;p&gt;　　id在JS是唯一的，不能多次使用，而使用class类选择器却可以重复使用，另外id的优先级优先与class，所以id应该按需使用，而不能滥用。　&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/951bee68367f559a1fd37db3d242e59f_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic4.zhimg.com/951bee68367f559a1fd37db3d242e59f_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;　　为选择器添加状态前缀&lt;/p&gt;&lt;p&gt;　　有时候可以给选择器添加一个表示状态的前缀，让语义更明了，比如下图是添加了“.is-”前缀。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/d81807b01ec5d710debe3f0b4191ae2f_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic4.zhimg.com/d81807b01ec5d710debe3f0b4191ae2f_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;　　CSS命名规范(规则)常用的CSS命名规则&lt;/p&gt;&lt;p&gt;　　头：header&lt;/p&gt;&lt;p&gt;　　内容：content/container&lt;/p&gt;&lt;p&gt;　　尾：footer&lt;/p&gt;&lt;p&gt;　　导航：nav&lt;/p&gt;&lt;p&gt;　　侧栏：sidebar&lt;/p&gt;&lt;p&gt;　　栏目：column&lt;/p&gt;&lt;p&gt;　　页面外围控制整体佈局宽度：wrapper&lt;/p&gt;&lt;p&gt;　　左右中：left right center&lt;/p&gt;&lt;p&gt;　　登录条：loginbar&lt;/p&gt;&lt;p&gt;　　标志：logo&lt;/p&gt;&lt;p&gt;　　广告：banner&lt;/p&gt;&lt;p&gt;　　页面主体：main&lt;/p&gt;&lt;p&gt;　　热点：hot&lt;/p&gt;&lt;p&gt;　　新闻：news&lt;/p&gt;&lt;p&gt;　　下载：download&lt;/p&gt;&lt;p&gt;　　子导航：subnav&lt;/p&gt;&lt;p&gt;　　菜单：menu&lt;/p&gt;&lt;p&gt;　　子菜单：submenu&lt;/p&gt;&lt;p&gt;　　搜索：search&lt;/p&gt;&lt;p&gt;　　友情链接：friendlink&lt;/p&gt;&lt;p&gt;　　页脚：footer&lt;/p&gt;&lt;p&gt;　　版权：copyright&lt;/p&gt;&lt;p&gt;　　滚动：scroll&lt;/p&gt;&lt;p&gt;　　内容：content&lt;/p&gt;&lt;p&gt;　　标签：tags&lt;/p&gt;&lt;p&gt;　　文章列表：list&lt;/p&gt;&lt;p&gt;　　提示信息：msg&lt;/p&gt;&lt;p&gt;　　小技巧：tips&lt;/p&gt;&lt;p&gt;　　栏目标题：title&lt;/p&gt;&lt;p&gt;　　加入：joinus&lt;/p&gt;&lt;p&gt;　　指南：guide&lt;/p&gt;&lt;p&gt;　　服务：service&lt;/p&gt;&lt;p&gt;　　注册：regsiter&lt;/p&gt;&lt;p&gt;　　状态：status&lt;/p&gt;&lt;p&gt;　　投票：vote&lt;/p&gt;&lt;p&gt;　　合作伙伴：partner&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注释的写法&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　/* Header */&lt;/p&gt;&lt;p&gt;　　内容区&lt;/p&gt;&lt;p&gt;　　/* End Header */&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Id&lt;/strong&gt;&lt;strong&gt;的命名&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　1)页面结构&lt;/p&gt;&lt;p&gt;　　容器: container&lt;/p&gt;&lt;p&gt;　　页头：header&lt;/p&gt;&lt;p&gt;　　内容：content/container&lt;/p&gt;&lt;p&gt;　　页面主体：main&lt;/p&gt;&lt;p&gt;　　页尾：footer&lt;/p&gt;&lt;p&gt;　　导航：nav&lt;/p&gt;&lt;p&gt;　　侧栏：sidebar&lt;/p&gt;&lt;p&gt;　　栏目：column&lt;/p&gt;&lt;p&gt;　　页面外围控制整体佈局宽度：wrapper&lt;/p&gt;&lt;p&gt;　　左右中：left right center&lt;/p&gt;&lt;p&gt;&lt;strong&gt;(2)&lt;/strong&gt;&lt;strong&gt;导航&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　导航：nav&lt;/p&gt;&lt;p&gt;　　主导航：mainnav&lt;/p&gt;&lt;p&gt;　　子导航：subnav&lt;/p&gt;&lt;p&gt;　　顶导航：topnav&lt;/p&gt;&lt;p&gt;　　边导航：sidebar&lt;/p&gt;&lt;p&gt;　　左导航：leftsidebar&lt;/p&gt;&lt;p&gt;　　右导航：rightsidebar&lt;/p&gt;&lt;p&gt;　　菜单：menu&lt;/p&gt;&lt;p&gt;　　子菜单：submenu&lt;/p&gt;&lt;p&gt;　　标题: title&lt;/p&gt;&lt;p&gt;　　摘要: summary&lt;/p&gt;&lt;p&gt;&lt;strong&gt;(3)&lt;/strong&gt;&lt;strong&gt;功能&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　标志：logo&lt;/p&gt;&lt;p&gt;　　广告：banner&lt;/p&gt;&lt;p&gt;　　登陆：login&lt;/p&gt;&lt;p&gt;　　登录条：loginbar&lt;/p&gt;&lt;p&gt;　　注册：register&lt;/p&gt;&lt;p&gt;　　搜索：search&lt;/p&gt;&lt;p&gt;　　功能区：shop&lt;/p&gt;&lt;p&gt;　　标题：title&lt;/p&gt;&lt;p&gt;　　加入：joinus&lt;/p&gt;&lt;p&gt;　　状态：status&lt;/p&gt;&lt;p&gt;　　按钮：btn&lt;/p&gt;&lt;p&gt;　　滚动：scroll&lt;/p&gt;&lt;p&gt;　　标籤页：tab&lt;/p&gt;&lt;p&gt;　　文章列表：list&lt;/p&gt;&lt;p&gt;　　提示信息：msg&lt;/p&gt;&lt;p&gt;　　当前的: current&lt;/p&gt;&lt;p&gt;　　小技巧：tips&lt;/p&gt;&lt;p&gt;　　图标: icon&lt;/p&gt;&lt;p&gt;　　注释：note&lt;/p&gt;&lt;p&gt;　　指南：guild&lt;/p&gt;&lt;p&gt;　　服务：service&lt;/p&gt;&lt;p&gt;　　热点：hot&lt;/p&gt;&lt;p&gt;　　新闻：news&lt;/p&gt;&lt;p&gt;　　下载：download&lt;/p&gt;&lt;p&gt;　　投票：vote&lt;/p&gt;&lt;p&gt;　　合作伙伴：partner&lt;/p&gt;&lt;p&gt;　　友情链接：link&lt;/p&gt;&lt;p&gt;　　版权：copyright&lt;/p&gt;&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;&lt;strong&gt;::&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　1.一律小写;&lt;/p&gt;&lt;p&gt;　　2.尽量用英文;&lt;/p&gt;&lt;p&gt;　　3.不加中槓和下划线;&lt;/p&gt;&lt;p&gt;　　4.尽量不缩写，除非一看就明白的单词。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;strong&gt;样式表文件命名&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;　　主要的 master.css&lt;/p&gt;&lt;p&gt;　　模块 module.css&lt;/p&gt;&lt;p&gt;　　基本共用 base.css&lt;/p&gt;&lt;p&gt;　　布局、版面 layout.css&lt;/p&gt;&lt;p&gt;　　主题 themes.css&lt;/p&gt;&lt;p&gt;　　专栏 columns.css&lt;/p&gt;&lt;p&gt;　　文字 font.css&lt;/p&gt;&lt;p&gt;　　表单 forms.css&lt;/p&gt;&lt;p&gt;　　补丁 mend.css&lt;/p&gt;&lt;p&gt;　　打印 print.css&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/5a67fa4dab92c018abfd97e4ab286ac9_200x112.jpg\" data-rawwidth=\"500\" data-rawheight=\"250\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/5a67fa4dab92c018abfd97e4ab286ac9_r.jpg\">\n<strong>CSS</strong><strong>书写顺序</strong> 1.位置属性(position, top, right, z-index,\ndisplay, float等) 2.大小(width, height, padding, margin) 3.文字系列(font, line-height, letter-spacing,\ncolor- text-align等) 4.背景(background, border等) 5.其他(animation, transition等) <strong>…</strong>\n\n<a href=\"/question/19586885/answer/48933504\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19586885/answer/48933504\">发布于 2015-05-25</a></p>\n\n",
    "link": "https://zhihu.com/question/19586885/answer/48933504"
  },
  {
    "question": "\n粗略的讲，假设php的学习成本为1，那么js,c,java,python,c++的学习成本分别为多少？\n",
    "author": "Coldwings",
    "content": "\n\n<textarea hidden class=\"content\">恰好你所列举的每一个都会，最少的语言也写过超过万行代码，多的就实在太多了……自己的体会的话大致由易至难如下：&lt;br&gt;&lt;br&gt;C：0.8，最简单也最纯粹。&lt;br&gt;&lt;br&gt;单说语言，C真的足够简单纯粹，最容易根据代码彻底地清楚每个语句的执行细节，你写了什么就一定会做，语言细节上的例外很少（当然这里是说语言层面，未谈及库）。&lt;br&gt;&lt;br&gt;不过自带轮子比较少，三方轮子偏基础，想要快速做个什么东西这个是比不过其它的。此外原生不具备OO语法，如果希望实现面向对象无疑需要自行发挥或借助三方库。&lt;br&gt;&lt;br&gt;Python：0.9，可能是与PHP最相似的。&lt;br&gt;&lt;br&gt;各种轮子异常丰富，语言逻辑极端简单，完全遵循一切都是对象以及凡事都是引用的原则。&lt;br&gt;&lt;br&gt;表面的简单隐藏了许多比较不简单的细节，于是坑就出现了。&lt;br&gt;&lt;br&gt;由于标准很详细，社区对于遵循标准的意愿很高，三方包大都能够很好地统一设计，相比PHP更少出现命名、参数混乱的情况。&lt;br&gt;&lt;br&gt;以往的最大学习阻碍在于2与3的巨大差异带来的社区割裂。近年有所好转。&lt;br&gt;&lt;br&gt;&lt;br&gt;Java：2，规范化的标杆&lt;br&gt;&lt;br&gt;Java的语言规范足够严格，使得写东西的时候会有更多的束缚。但是语言抽象其实并不复杂。&lt;br&gt;&lt;br&gt;与Java密不可分的是设计模式，而其中大部分所谓设计模式恰是由Java的严格规范和相对不灵活的特点带来的最优实践。&lt;br&gt;&lt;br&gt;至于JVM调优一类的东西，暂且不放到对语言的考查范围里吧……&lt;br&gt;&lt;br&gt;此外Java的轮子也十分丰富。但是正因为轮子过于丰富，特别对于J2EE，轮子间的组合选择往往特别多，很难说上用哪些才是最优实践。&lt;br&gt;&lt;br&gt;浏览器解释端的JS：3，欢迎踩坑。&lt;br&gt;&lt;br&gt;最原始的JS并不好用，也不好学，很容易出现觉得自己弄懂了没弄错但是就他娘的出问题了的情况。尽管语法超级简单，但是语言层面的坑就多得数不胜数。况且各家浏览器一家一个js解释器，差异较大而通用性大打折扣（这里还不说那些个浏览器API的事）。&lt;br&gt;&lt;br&gt;完整版的JS，ECMAScript：1.5&lt;br&gt;&lt;br&gt;感谢node和babel，JS所遵循的规则ECMA262终于给JS改名回了自己的名字。随着最近几年的规范化，JS，或者按照官方名称ECMAScript无论从语法规范还是社区扩展来看都越来越靠谱合理，踩坑概率大大下降（然而还是有），工程性规范性越来越可靠。其变种如TypeScript等甚至加上了类静态类型分析，大大降低了学习成本和开发成本。&lt;br&gt;&lt;br&gt;不过这一年一圈新标准新特性等节奏有时候实在是太快了……&lt;br&gt;&lt;br&gt;C++之C with STL：1.5&lt;br&gt;这种风格大抵是竞赛党的自然选择结果。总体来说不会难，因为几乎还是在用C风格写代码，配合STL用来解决一些基本的容器和通用算法需求。&lt;br&gt;&lt;br&gt;因为STL的存在，势必要多学一些相关知识。&lt;br&gt;&lt;br&gt;C++11以前标准的OO风格C++：3&lt;br&gt;&lt;br&gt;老派C++其实不太好学，C++11起提供的那些个新特性如果要用之前标准去写其实挺麻烦的。嗯…学习成本方面，除去必要的OO知识，对比Java，需要同时操心顶层逻辑实现和底层内存实现，负荷不小。&lt;br&gt;&lt;br&gt;大量使用C++11、14、17特性和库的现代C++：2&lt;br&gt;&lt;br&gt;利用这些个库，很大程度上C++可以像Java那样做甩手掌柜光写逻辑，而把底层细节交给库来实现。仅以此为目标的话可以很大程度上降低认知负担，减轻学习压力：用它们，可以在不牵扯C++的90%功能与特性的前提下写出一个像模像样的OO程序。&lt;br&gt;&lt;br&gt;光以自己写而言，足够简单了。不过谁也没法保证你所用的库都是这个套路来的，以及你手头的东西没有前辈遗留的老代码。所以最终还是得学那些个东西。&lt;br&gt;&lt;br&gt;以精通为目标的C++：100&lt;br&gt;&lt;br&gt;理论上没人能精通C++，标准委员会的那帮人也不行。&lt;br&gt;&lt;br&gt;君不见C++依靠宏和模板可以把事情折腾到什么程度……</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n恰好你所列举的每一个都会，最少的语言也写过超过万行代码，多的就实在太多了……自己的体会的话大致由易至难如下： C：0.8，最简单也最纯粹。 单说语言，C真的足够简单纯粹，最容易根据代码彻底地清楚每个语句的执行细节，你写了什么就一定会做，语言细节…\n\n<a href=\"/question/54338144/answer/138904304\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/54338144/answer/138904304\">发布于 2017-01-03</a></p>\n\n",
    "link": "https://zhihu.com/question/54338144/answer/138904304"
  },
  {
    "question": "\n如何帮助前端新人入门和提高？\n",
    "author": "陈炳遥",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;以前学习过一段时间的web前端开发，整理了一些我看过的/我认为比较好的学习资料（网站、书籍）。不要问我为啥没有进阶版，我只是一条产品汪而已，求轻喷。＝＝&lt;/p&gt;&lt;p&gt;以下引用知乎 @李路 的话。&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;以我的经验，大部分技术，熟读下列四类书籍即可。&lt;/p&gt;&lt;p&gt;入门，用浅显的语言和方式讲述正确的道理和方法，如head first系列&lt;br&gt;全面，巨细无遗地探讨每个细节，遇到疑难问题时往往可以在这里得到理论解答，如Definitive Guide/Programming xx系列&lt;br&gt;实践，结合实际中经常遇到的情景环境，来描述如何设计和解决问题，如cookbook系列&lt;br&gt;深入，讲解一些文化，思路，甚至于哲学上的东西，真正做到深入一种语言去编程，如unix编程艺术，程序员修炼之道等等&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;受李路老师的启发，我结合了自己在学习前端过程中用到的资料如下：&lt;/p&gt;一、 语言基础（以书和网站为主）&lt;br&gt;1.HTML&amp;amp;CSS：&lt;br&gt;（1）入门：&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Codecademy上的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/en/tracks/web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;html&amp;amp;css课程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——在线交互式编程平台，弄清楚基本概念和基本语法&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;w3school上的HTML/CSS教程——技术手册式的教程，比较全面，照着实例敲一遍&lt;/li&gt;&lt;/ul&gt;（2）进阶：&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《精通CSS·高级Web标准解决方案》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——对CSS有一个比较深入的学习，对核心技术了解&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/25786074/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《HTML5权威指南》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——非常全面的书，内容也很新，包含了HTML5+CSS3+JS DOM&lt;/li&gt;&lt;/ul&gt;（3）实战：&lt;ul&gt;&lt;li&gt;&lt;strong&gt;bootstrap框架: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.bootcss.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bootstrap中文网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;/《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/25769817/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bootstrap实战&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》——流行的前端框架，注重实用即可&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Codeademy上的Web Developer Skills+Projects——通过自己做小页面/小网站来运用所学&lt;/li&gt;&lt;/ul&gt;（4）提高：&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/2052176/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《CSS禅意花园》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——提高自己的艺术设计能力，通过实例来学习如何用CSS设计出漂亮的页面&lt;/li&gt;&lt;/ul&gt;2.Javascript：&lt;br&gt;（1）入门：&lt;ul&gt;&lt;li&gt;Codeademy上的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/en/tracks/javascript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;javascript教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——实例比较多，比较浅，算是基本了解JS&lt;/li&gt;&lt;li&gt;w3school上的JS教程——比较详细的了解下JS的特性&lt;/li&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/6038371/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《JavaScript DOM编程艺术》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——讲js和DOM的基本知识和运用，了解JS和DOM可以做什么&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;（2）进阶：&lt;ul&gt;&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/10546125/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《JavaScript高级程序设计》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——JS圣经，比较全面，非常好的一本书，比犀牛书可阅读性强&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/2228378/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《JavaScript权威指南》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——传说中的犀牛书，好厚好厚的一本书，不适合入门，适合当工具书看&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/11874748/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《JavaScript语言精粹》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——很薄的一本书，但是可以帮助你快速了解JS的精华部分&lt;/li&gt;&lt;/ul&gt;（3）实战：&lt;ul&gt;&lt;li&gt;&lt;strong&gt;jQuery框架: w3school上的jQuery教程/Codeademy上的jQuery教程&lt;/strong&gt;——了解Jquery&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/25733582/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《jQuery基础教程》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——流行的前端框架，注重实用&lt;/li&gt;&lt;/ul&gt;（4）提高：&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/5362856/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《高性能JavaScript》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——讲如何提高js性能，以及构建和部署文件到生产环境的最佳实践&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/3176860/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《Secrets of the JavaScript Ninja》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——jQuery作者写的书，如果你觉得精通JS了再看这本书&lt;/li&gt;&lt;/ul&gt;附录：前端网站大汇总&lt;br&gt;1、前端知识体系：&lt;ul&gt;&lt;li&gt;&lt;strong&gt;前端知识体系及修炼攻略：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/borishuai/article/details/8676573&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端知识体系及修炼攻略&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——对前端知识体系剖析的非常好，尤其是最后对前端的阶段性划分，对前端学习很有指导意义，推荐！&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;前端开发知识结构：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/JacksonTian/fks&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JacksonTian/fks · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——有个前端知识框架的思维导图，给了很多链接和好书，推荐！&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;2、技术资讯类&lt;ul&gt;&lt;li&gt;W3Cfuns : &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3cfuns.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端网（W3Cfuns）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——国内最大的前端站，比较全&lt;/li&gt;&lt;li&gt;大前端：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.daqianduan.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;大前端_关注前端开发和wordpress主题的博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——没有W3Cfuns那么杂，有些wodpress的主题，“前端导航”也比较好用&lt;/li&gt;&lt;li&gt;W3Cplus:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3cplus.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;W3CPlus | css3教程-css3实例-css3动画&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——也是比较全，有个“国外优秀译文”，非常喜欢&lt;/li&gt;&lt;li&gt;前端观察 ：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.qianduan.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端观察&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——专注于前端设计与开发的博客，比较有深度，排版干净，推荐！&lt;/li&gt;&lt;li&gt;前端乱炖 ：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html-js.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端乱炖, 最专业的前端技术内容社区&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——有点像前端的知乎，有问答平台和专栏啥的&lt;/li&gt;&lt;/ul&gt;3、技术教程、文档类&lt;ul&gt;&lt;li&gt;&lt;strong&gt;慕课网：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/course/program&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;慕课网-学习计划&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;——超级实用的视频教程类网站，各种小实例，非常适合照着“前端学习计划”计划学习&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;codecademy :&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codecademy.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——英文，简单有趣的互动编程学习网站，非常适合入门，中文版是&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jianshu.com/p/%25E5%259F%25BA%25E6%259C%25AC%25E6%2598%25AFcodecademy%25E7%25BF%25BB%25E8%25AF%2591%25E8%25BF%2587%25E6%259D%25A5%25E7%259A%2584%25EF%25BC%258C%25E9%2584%2599%25E8%25A7%2586%25EF%25BC%259D%25EF%25BC%259D&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.fenby.com/&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;W3schoo在线教程l: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3school 在线教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——中文，适合入门，教程相当全，在线实例可以敲，可惜较浅，有些地方不太准确和深入&lt;/li&gt;&lt;li&gt;&lt;strong&gt;火狐开发者网络MDN：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mozilla 开发者网络&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——中文，不仅有技术文档，而且有相当多的参考资料和资源、工具，推荐！&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;W3C标准：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/standards/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Standards - W3C&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;——英文，不解释，官方文档，真前端和伪前端就在于此。可惜英文的，而且可读性差。极不适合入门，适合提高。&lt;/li&gt;&lt;li&gt;Web平台文档：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.webplatform.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Your Web, documented · WebPlatform.org&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;——英文，权威性仅次于W3C标准，可读性高于W3C标准，W3C官方认可，高质量。&lt;/li&gt;&lt;/ul&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n以前学习过一段时间的web前端开发，整理了一些我看过的/我认为比较好的学习资料（网站、书籍）。不要问我为啥没有进阶版，我只是一条产品汪而已，求轻喷。＝＝以下引用知乎 @李路 的话。以我的经验，大部分技术，熟读下列四类书籍即可。入门，用浅显的语言…\n\n<a href=\"/question/19862294/answer/47926672\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-15\" target=\"_blank\" href=\"/question/19862294/answer/47926672\">编辑于 2015-05-21</a></p>\n\n",
    "link": "https://zhihu.com/question/19862294/answer/47926672"
  },
  {
    "question": "\n如何评价性能大幅提升的Chrome 53?\n",
    "author": "兆赫兹",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;------ 6. 18. 2016 更新 ------&lt;/b&gt;&lt;br&gt;---新增 有关内存占用的问题---&lt;br&gt;&lt;br&gt;# 前言&lt;br&gt;先来聊聊 Chrome 的故事， Chrome 昔日曾以 V8 引擎一骑绝尘的运行速度碾压对手，荣登为快不破之榜首，只是惊喜之后，越来越多的用户发现超高速引擎的背后是大量的内存占用，随后越来越多的人开始抱怨声讨 Chrome 内存占用问题，人类的不满足和抱怨是天性，也正是这一点使我们现在比过去做的更好。也或许正是这些抱怨起了作用，在 Chrome 53 中，迎来了绝对是 chrome 目前为止史上最大幅度性能的提升。或许过去没有，未来也不会再有。Chrome 53 只有一个，时光飞逝，即便 Chrome 65 、chrome 78 来临，我们回想这个遥远的午后，还会为第一次见如此恐怖的性能提升为之惊讶和感叹往昔峥嵘..&lt;br&gt;&lt;br&gt;# 总体对比：&lt;br&gt;1. Chrome 53， 在 Mac 上的表现，相对于 Chrome 51 总体上提升46.9%&lt;br&gt;2. Chrome 53， 在 Android 上的表现，相对于 Chrome 51 总体上提升了 209%&lt;br&gt;3.  在 iPad Air 2 下的 safari 与 android M 下的 Chrome 53 对比，提升了 103%&lt;br&gt;4. Chrome 53 与 Safari 在 Mac 下的对比，提升 -1.78%，真的是 -1.78%&lt;br&gt;&lt;br&gt;如果以上的数据如果还没让你惊讶，或许下面的细节提升程度会让你觉得这不符合科学，就好象违反了&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//book.douban.com/search/%25E5%25BC%2597%25E9%259B%25B7%25E5%25BE%25B7%25E9%2587%258C%25E5%2585%258B%25C2%25B7%25E5%25B8%2583%25E9%25B2%2581%25E5%2585%258B%25E6%2596%25AF&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;弗雷德里克·布鲁克斯&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 在其著作《人月神话》中说的那样：计算机语言对性能提升程度，远远赶不上硬件上的摩尔定律。但冰冷冷的数字就在下面，你看或者不看，它就在那里，不增不减。&lt;br&gt;&lt;br&gt; 在 Mac 上的细节提升，主要体现在了 HTML 套件，和 SVG 渲染上，HTML 套件提升了大约 161%，测试数据都是针对相同平台下的 Chrome 51 稳定版， SVG 套件提升了大约 151%。这只是开胃菜，然而你也知道：好戏还在后头..&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/351faf7e9cde93a73a44c250c9893844_b.png&quot; data-rawwidth=&quot;617&quot; data-rawheight=&quot;234&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;617&quot; data-original=&quot;https://pic1.zhimg.com/351faf7e9cde93a73a44c250c9893844_r.png&quot;&gt;&lt;br&gt;也不知是 Google 也在彻底贯彻移动为先的时代，而有意针对自家移动设备大幅度优化，还是纯属技术自然更新迭代，总之 Chrome 53 在移动设备上的提升才是重头戏，先来看看数据：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/738b869597a609c9c6e3e1f5c70d1c64_b.png&quot; data-rawwidth=&quot;636&quot; data-rawheight=&quot;221&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;636&quot; data-original=&quot;https://pic1.zhimg.com/738b869597a609c9c6e3e1f5c70d1c64_r.png&quot;&gt;HTML 套件提升约 590%， SVG 套件提升 1087% ，虽然我数学一直不好，但不可否认这的确是一个恐怖的提升，也特别的好奇：之前的chrome在这方面的表现到底是有多差？&lt;br&gt;&lt;br&gt;# &lt;b&gt;Chrome 53  为什么这么快？&lt;/b&gt;&lt;br&gt;&lt;p&gt;使用基准试验的情况下， 简单来说，GPU的团队改善了GPU的渲染瓶颈，使得 CSS 和 SVG 渲染更快，Canvas 和 WebGL 也表现的更好。&lt;/p&gt;&lt;p&gt;你也可以在chrome://flags 下开启 强制GPU栅格化（force gpu resterization），自行测试性能提升：&lt;/p&gt;&lt;blockquote&gt;  --force-gpu-rasterization&lt;br&gt;&lt;/blockquote&gt;&lt;b&gt;# 有关 Chrome 53 内存占用多少的疑问&lt;/b&gt;&lt;br&gt;很多人都好奇这个版本的内存占用是不是变大了啊，毕竟羊毛出在羊身上，要是这几十年没有硬件产品的更新迭代，性能提升，就算你底层优化的再好，也不可能野鸡变凤凰啊~~&lt;br&gt;但实际上，这次的性能提升，根据现有的官方文档说，chrome 团队好像只是在 GPU 光栅渲染架构方面进行了调整，并没有涉及到内存占用方面，也就是说：&lt;b&gt;Chrome 占用内存可能还是跟现在一样的大小，但是速度变快了&lt;/b&gt;。不知道这是一个好消息还是坏消息，就好像现在的宽带资费一样，价钱不变，但是网速给你提上去。运营商美言：宽带免费提速，加量不加价。&lt;br&gt;当然也不排除Chrome 53 的GPU调整和内存之间也有见不得人的勾当，毕竟集成显卡和内存的关系也是千丝万缕，离开谁也活不了啊。&lt;br&gt;&lt;br&gt;另外，这次性能的提升和 V8引擎没有啥关系啊，所以大家不要嘀咕 Node.js 会不会因此变得更美好了啦..&lt;br&gt;&lt;br&gt;&lt;p&gt;如果你看到这里，已经迫不及待的想要尝试 Chrome 53 了， 它就在这里：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.google.co.uk/chrome/browser/canary.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome Canary&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  ，鉴于大家都是 chromer，翻墙这种小事你自己搞定啦~~&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果你想查看更多细节上的信息，可以点开整个评测文档： &lt;a href=&quot;//link.zhihu.com/?target=https%3A//docs.google.com/document/d/1vKNGim07lvPCYL1ctiNss1BqhjfE49t6LwZkwoTkeXU/edit%3Fusp%3Dsharing&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google Doc&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，为了方便，我已经贴上了更详细的多平台对比 ，玩儿的开心　：）&lt;/p&gt;&lt;br&gt;&lt;b&gt;# Chrome 53 在 Mac 上的总体表现：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/0382d02d4203d0abb2fc8095bee1cb42_b.png&quot; data-rawwidth=&quot;622&quot; data-rawheight=&quot;363&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;622&quot; data-original=&quot;https://pic3.zhimg.com/0382d02d4203d0abb2fc8095bee1cb42_r.png&quot;&gt;&lt;br&gt;细节表现：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/3c5f7e0d2ee72be972007963d38bb0d8_b.png&quot; data-rawwidth=&quot;648&quot; data-rawheight=&quot;556&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;648&quot; data-original=&quot;https://pic1.zhimg.com/3c5f7e0d2ee72be972007963d38bb0d8_r.png&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/aedc35fb1c291b668fd1769598bd07a2_b.png&quot; data-rawwidth=&quot;590&quot; data-rawheight=&quot;551&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;590&quot; data-original=&quot;https://pic3.zhimg.com/aedc35fb1c291b668fd1769598bd07a2_r.png&quot;&gt;&lt;br&gt;&lt;b&gt;# 最新版的 Safari 技术预览版 与 Chrome 的对比：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/9caf14d26a658e5ffbecce1ee42ed4fb_b.png&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;348&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic4.zhimg.com/9caf14d26a658e5ffbecce1ee42ed4fb_r.png&quot;&gt;&lt;br&gt;细节表现：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/419e5b557c4a723c73bd5e2c9ab7db6c_b.png&quot; data-rawwidth=&quot;462&quot; data-rawheight=&quot;745&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;462&quot; data-original=&quot;https://pic1.zhimg.com/419e5b557c4a723c73bd5e2c9ab7db6c_r.png&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/28176bec9af84a00711b195911adaf53_b.png&quot; data-rawwidth=&quot;473&quot; data-rawheight=&quot;166&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;473&quot; data-original=&quot;https://pic4.zhimg.com/28176bec9af84a00711b195911adaf53_r.png&quot;&gt;&lt;br&gt;&lt;b&gt;＃在移动端 iOS 9.3. iPad Air 2 设备 与搭载Android M 系统的 Pixel C （某平版电脑）之间的对比 ，但需要注意的是因为硬件参数有很多不同，测试数据所以不太有说服力。&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/10852ff901ce7077858b072178497b7d_b.png&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;547&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;640&quot; data-original=&quot;https://pic2.zhimg.com/10852ff901ce7077858b072178497b7d_r.png&quot;&gt;细节表现：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/81316011db1b27fd10ab11b7b7d3d919_b.png&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;607&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;550&quot; data-original=&quot;https://pic2.zhimg.com/81316011db1b27fd10ab11b7b7d3d919_r.png&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/a639d3633924699792936ba13eaeaf92_b.png&quot; data-rawwidth=&quot;568&quot; data-rawheight=&quot;471&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;568&quot; data-original=&quot;https://pic3.zhimg.com/a639d3633924699792936ba13eaeaf92_r.png&quot;&gt;&lt;br&gt;&lt;b&gt;# 在安卓平版上：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/a79e0b229c299275cded04b632f6162b_b.png&quot; data-rawwidth=&quot;618&quot; data-rawheight=&quot;545&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;618&quot; data-original=&quot;https://pic4.zhimg.com/a79e0b229c299275cded04b632f6162b_r.png&quot;&gt;&lt;br&gt;细节表现：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/ef21e54b431e9b11068173bf9c0e8ddc_b.png&quot; data-rawwidth=&quot;611&quot; data-rawheight=&quot;288&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;611&quot; data-original=&quot;https://pic1.zhimg.com/ef21e54b431e9b11068173bf9c0e8ddc_r.png&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/e96bacc8b1c9289c95963c2a55875536_b.png&quot; data-rawwidth=&quot;541&quot; data-rawheight=&quot;699&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;541&quot; data-original=&quot;https://pic3.zhimg.com/e96bacc8b1c9289c95963c2a55875536_r.png&quot;&gt;&lt;br&gt;以上是全部数据统计。&lt;br&gt;或许你已经被 chrome 的内存占用折磨的苦不堪言，早已逃离 chrome 多年，当你看完chrome53恐怖的提升程度后，或许你会小小的尝试一下改变 ：）&lt;br&gt;另外，因为没有chrome53内存占用的数据对比，所以我们可以随便猜测， 哈哈。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/351faf7e9cde93a73a44c250c9893844_200x112.png\" data-rawwidth=\"617\" data-rawheight=\"234\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/351faf7e9cde93a73a44c250c9893844_r.png\">\n<b>------ 6. 18. 2016 更新 ------</b> ---新增 有关内存占用的问题--- # 前言 先来聊聊 Chrome 的故事， Chrome 昔日曾以 V8 引擎一骑绝尘的运行速度碾压对手，荣登为快不破之榜首，只是惊喜之后，越来越多的用户发现超高速引擎的背后是大量的内存占用，随后越来…\n\n<a href=\"/question/47416449/answer/106085774\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-06-15\" target=\"_blank\" href=\"/question/47416449/answer/106085774\">编辑于 2016-06-18</a></p>\n\n",
    "link": "https://zhihu.com/question/47416449/answer/106085774"
  },
  {
    "question": "\nReact这样整个全家桶真的好么？这么碎片化会是以后前端框架的趋势么？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">嗯其实 Vue 也有全家桶。区别在于 Vue 的全家桶是帮你配好 + 带有吃法指南的，而 React 的全家桶是要你自己去菜市场里挑的。&lt;br&gt;&lt;br&gt;其实跨过『上手体验』之后看『开发体验』，两者并没有明显的『优劣』，更多是『偏好』。但是你要单说『上手体验』，我觉得 Vue 确实做的比 React 好，这也没什么好谦虚的。&lt;br&gt;&lt;br&gt;React 粉肯定会点我反对，这跟我之前说的 ng 粉斯德哥尔摩症状是一样的，花了那么多力气精通了如何在菜市场挑菜，当然看不得别人下馆子爽。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n嗯其实 Vue 也有全家桶。区别在于 Vue 的全家桶是帮你配好 + 带有吃法指南的，而 React 的全家桶是要你自己去菜市场里挑的。 其实跨过『上手体验』之后看『开发体验』，两者并没有明显的『优劣』，更多是『偏好』。但是你要单说『上手体验』，我觉得 Vue 确…\n\n<a href=\"/question/47114001/answer/104559187\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-06-06\" target=\"_blank\" href=\"/question/47114001/answer/104559187\">编辑于 2016-06-06</a></p>\n\n",
    "link": "https://zhihu.com/question/47114001/answer/104559187"
  },
  {
    "question": "\n微信网页版中的代码是工程师的恶作剧吗？\n",
    "author": "Tim Chen",
    "content": "\n\n<textarea hidden class=\"content\">开玩笑或者闹情绪，无论如何这是很不专业的。&lt;br&gt;&lt;br&gt;Code review都没有？无法相信做code review的人会允许这个通过。我记得以前我被个老外做code review，他指出我的某行注释的首字母没有大写，一定要我改。&lt;br&gt;&lt;br&gt;也没有使用静态检查工具扫描敏感关键字。在微软静态检查工具是做在自动化流程里的，这种关键词会直接报bug。&lt;br&gt;&lt;br&gt;至于说影响，可能会导致小部分用户反感甚至极度反感，如果被媒体捅一下影响就更大了。而这些完全可以被避免。&lt;br&gt;&lt;br&gt;所以说流程和工具很重要。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n开玩笑或者闹情绪，无论如何这是很不专业的。 Code review都没有？无法相信做code review的人会允许这个通过。我记得以前我被个老外做code review，他指出我的某行注释的首字母没有大写，一定要我改。 也没有使用静态检查工具扫描敏感关键字。在微软静态检…\n\n<a href=\"/question/50678955/answer/122265695\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/50678955/answer/122265695\">发布于 2016-09-16</a></p>\n\n",
    "link": "https://zhihu.com/question/50678955/answer/122265695"
  }
]