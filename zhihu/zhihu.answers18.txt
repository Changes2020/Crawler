[
  {
    "question": "\n为什么说 Gmail 达到了前端技术的最尖端？\n",
    "author": "郝培强",
    "content": "\n\n<textarea hidden class=\"content\">最尖端是不是说不好，说句不怕得罪前端届的话，就算真有最尖端又能怎么样？别人真想学也不是学不了。&lt;br&gt;&lt;br&gt;Gmail的意义在于，在2004年的时候，国内外免费邮箱大潮都在回落之际，很多公司关闭了自己的免费邮箱，或者进一步限制容量，只保留收费服务之时，在主流免费邮箱都是2-8M的那一个时间点，推出了一个1G容量的Webmail。&lt;br&gt;&lt;br&gt;没经历那个时间的人会说，1G大又怎们样？错了，主流都是2-8M的时代，大多数的邮箱的Webmail部分是废的，谈用户体验都是白谈。那时候标准的用户行为是，去webmail申请邮箱，然后把pop3和smtp信息填写在自己的客户端软件上，然后用邮件客户端收件，1年不去登陆webmail一次。&lt;br&gt;&lt;br&gt;而Gmail出现以后，容量够大，操作够方便，很多人干脆就抛弃了客户端收件，或者只把客户端当作一个备份（现在很多人连这种备份都放弃了）。&lt;br&gt;&lt;br&gt;回来说前端技术，2004的Gmail绝对是前端技术的顶尖之一。但是这不是Gmail成功的唯一原因。这是Gmail成功的两大原因之一。&lt;br&gt;&lt;br&gt;一个产品好，绝对不是好看，操作起来顺畅就够了，是不是可以给用户带来新的更好的操作模式往往是更重要的。&lt;br&gt;&lt;br&gt;拿微信来说，UI再好，交互再顺，如果只有Mac/Windows版本，就是一个美丽的废物。&lt;br&gt;&lt;br&gt;所以，不要动不动说，我的前端已经世界前十，亚洲前三了，为啥我的网站／应用没人用。&lt;br&gt;&lt;br&gt;至于微软的东西，我很多年不碰了，但是不得不说，微软以前是全面占先机的。现在为什么在某些领域排不到前面呢，不是共军有高达，产品却有其有问题的部分。&lt;br&gt;&lt;br&gt;微软粉丝可以说苹果有粉丝，andorid有粉丝。但是苹果目前在移动领域的地位，不是靠粉丝捧出来的，是产品砸出来的。作为粉丝，有功夫可以研究研究微软的产品为啥有些不受欢迎，比一味的吹捧强。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n最尖端是不是说不好，说句不怕得罪前端届的话，就算真有最尖端又能怎么样？别人真想学也不是学不了。 Gmail的意义在于，在2004年的时候，国内外免费邮箱大潮都在回落之际，很多公司关闭了自己的免费邮箱，或者进一步限制容量，只保留收费服务之时，在主流免…\n\n<a href=\"/question/24598770/answer/83981892\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/24598770/answer/83981892\">发布于 2016-01-29</a></p>\n\n",
    "link": "https://zhihu.com/question/24598770/answer/83981892"
  },
  {
    "question": "\n如何应对网上的喷子？\n",
    "author": "卓钥",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;反正在专家评审会上当木佛，干脆抄起手机答一题算了。&lt;br&gt;\n别的地方不说，知乎上有一种土特产型的类喷子生物。&lt;/p&gt;&lt;p&gt;这帮货上知乎来，唯一的目的就是挑刺儿刷优越感。&lt;br&gt;\n刷优越感是一种生理需求，本身没错，错在他们的着眼点都很无聊无趣，自我感觉都很良好：我戳破你了。&lt;br&gt;\n生平最见不得自视过高的白痴把自己放在臆想中的舞台中央。&lt;br&gt;\n人又不是圆规，也不是刺猬，戳破个毛。&lt;br&gt;&lt;b&gt;\n这些人唯一堪比针尖的，不是犀利言辞也不是狠辣眼光，而是眼界。&lt;/b&gt;&lt;br&gt;\n自己庸庸碌碌，却不相信有别样生活。但凡比自己精彩的，一概斥为抠脚大汉的装逼意淫。&lt;br&gt;\n对付这种人，我以前还会一本正经的驳斥。&lt;br&gt;\n现在，我的办法换了。我上知乎是放松的，不是给自己添堵的。&lt;/p&gt;&lt;p&gt;我没经历过的，不敢乱说，我说了的，信就信，不信就当看故事，调侃两句也没所谓。&lt;/p&gt;&lt;p&gt;但来我这刷优越感扣帽子的，一概删评论+拉黑。&lt;/p&gt;&lt;p&gt;小喷子在我这没有任何表演舞台，想博关注，请加强学习答出牛逼答案。&lt;/p&gt;&lt;p&gt;连我这种小角色的经历都要质疑，我再把认识的真正传奇人物说说，是不是得自杀一票？&lt;/p&gt;&lt;p&gt;\n我就是政治不正确。&lt;br&gt;\n对我好的我会加倍重情义，有评论私信了只要有时间我都会回复。&lt;br&gt;\n但是一点儿家教都没有，莫名跑来挑逗的，就算手段有点无耻，我也会让你把一肚子自以为是的谬论憋臭在肚子里无处发泄。&lt;br&gt;&lt;b&gt;\n如果两个人之间必须有一个不开心，这个人必须不是我。&lt;/b&gt;&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n反正在专家评审会上当木佛，干脆抄起手机答一题算了。 \n别的地方不说，知乎上有一种土特产型的类喷子生物。这帮货上知乎来，唯一的目的就是挑刺儿刷优越感。 \n刷优越感是一种生理需求，本身没错，错在他们的着眼点都很无聊无趣，自我感觉都很良好：我戳破你…\n\n<a href=\"/question/20285684/answer/23805026\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-03-26\" target=\"_blank\" href=\"/question/20285684/answer/23805026\">编辑于 2014-07-01</a></p>\n\n",
    "link": "https://zhihu.com/question/20285684/answer/23805026"
  },
  {
    "question": "\n知乎上前端开发领域有哪些值得推荐的问答？\n",
    "author": "黄喜",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;先定一个小目标，做他一个天猫官网&lt;/b&gt;&lt;br&gt;&lt;br&gt;题主问的是，前端开发领域有哪些值得推荐的问答，那么这个回答就算是&lt;i&gt;&lt;u&gt;毛遂自荐啦&lt;/u&gt;&lt;/i&gt;&lt;br&gt;&lt;br&gt;带了挺多届的学生，发现了一个现象，同学们在学习HTML，CSS，Javascript这些前端基础技术的时候，不会有太大的问题，大概也能分开掌握里面的标签，元素，选择器，函数，对象等等知识点。 但是要综合运用这些知识做一个好看的网站的时候，就犯晕了，不知道该如何布局，如何运用合适的样式，一些稍复杂的效果也不知道怎么下手了。&lt;br&gt;&lt;br&gt;这样我认识到，单纯学习这些分开的样式等知识点，是无法有效的运用他们的。 那么就需要一个前端项目来进行整体的练手。 &lt;br&gt;&lt;br&gt;每个培训学校呢，都会有一个WEB项目来练手，通常都会做一个电商的购物网站，虽然听上去老套，但是确实很典型，各种知识点都会涉及到。 &lt;br&gt;&lt;br&gt;既然如此，就做一个购物网站来让他们跟着做来练手吧，那么做一个什么样的好呢？ 放眼望去，难道还有比&lt;b&gt;天猫官网&lt;/b&gt;更有说服力的吗？ &lt;br&gt;&lt;br&gt;能够&lt;b&gt;从头到尾做一个天猫官网前端&lt;/b&gt;，是非常有价值的。 假如，能够独立的做出来，那么这就意味着，各种典型的场景，布局的思路，相关技术的运用都达到相当熟悉的程度，这个对于找工作，拿offer，更重要的是，技能的提升，是很有用的。&lt;br&gt;&lt;br&gt;说干就干，我就照着天猫官网，做了一个模仿天猫官网: &lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//how2j.cn/tmall/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://how2j.cn/tmall/ &lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;包括里面的取色，布局，javascript交互，尺寸，都统统尽我所能做到跟天猫官网近似。&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;2130&quot; data-rawwidth=&quot;960&quot; src=&quot;https://pic3.zhimg.com/6c7a482e732c7f242012214832660206_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;960&quot; data-original=&quot;https://pic3.zhimg.com/6c7a482e732c7f242012214832660206_r.png&quot;&gt;&lt;br&gt;&lt;img data-rawheight=&quot;3592&quot; data-rawwidth=&quot;960&quot; src=&quot;https://pic2.zhimg.com/b7c03ff05ebf4a0ab9600860e39c5f6d_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;960&quot; data-original=&quot;https://pic2.zhimg.com/b7c03ff05ebf4a0ab9600860e39c5f6d_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;好吧，同学们，就参考这个模仿天猫官网来练手，做一个一模一样的吧！ &lt;br&gt;&lt;br&gt;然而，当我准备把这个项目&lt;b&gt;一股脑&lt;/b&gt;打包给同学们的时候，我就&lt;b&gt;懵逼&lt;/b&gt;了~  &lt;br&gt;&lt;img data-rawheight=&quot;385&quot; data-rawwidth=&quot;580&quot; src=&quot;https://pic2.zhimg.com/49e51876626a0eec0c3346226ab75305_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;580&quot; data-original=&quot;https://pic2.zhimg.com/49e51876626a0eec0c3346226ab75305_r.jpg&quot;&gt;&lt;br&gt;为什么呢？ 因为内容实在是太多了！ 为了实现前端效果，其中光是style.css文件就2200多行。&lt;br&gt;&lt;img data-rawheight=&quot;215&quot; data-rawwidth=&quot;346&quot; src=&quot;https://pic1.zhimg.com/dcfb9454bb9ee06a97926e2971de5c58_b.png&quot; class=&quot;content_image&quot; width=&quot;346&quot;&gt;&lt;br&gt;Html页面也相当复杂，还有各种javascript的交互。 如果就这么一股脑打包给同学们，那么让他们直接去天猫官网看又有什么分别呢？ 对于前端新手，一下子太多太大的信息量，不仅不能被有效地消化掉，还有可能产生副作用——&lt;u&gt;面对大量代码无从学起，强行阅读复杂代码，难以理解与消化，逐渐增加受挫感，最后失去兴趣&lt;/u&gt;&lt;br&gt;&lt;br&gt;为了能够让这些知识变得易于消化和吸收(也不枉我花了2个多月的时间，一点点取色，量取尺寸，翻来覆去规划布局，反复尝试精心制作一样的javascript交互效果，最后做出来的这么20多种模仿天猫官网页面)，我把页面分为如下几类页面：&lt;br&gt;&lt;img data-rawheight=&quot;343&quot; data-rawwidth=&quot;160&quot; src=&quot;https://pic1.zhimg.com/907cbce2c5e4c8ba2804d6f85e72ecdc_b.png&quot; class=&quot;content_image&quot; width=&quot;160&quot;&gt;&lt;br&gt;有的页面比较复杂，就再拆分的小的页面，比如首页又分为导航和轮播，分类和推荐产品，产品列表以及javascript的交互部分。&lt;br&gt;&lt;img data-rawheight=&quot;255&quot; data-rawwidth=&quot;164&quot; src=&quot;https://pic3.zhimg.com/3649b224e4897c6357fc80c892a337ee_b.png&quot; class=&quot;content_image&quot; width=&quot;164&quot;&gt;&lt;br&gt;&lt;br&gt;光是拆分的小的页面也不够啊，在每个个页面知识点的讲解里面，首先展示运行之后的效果&lt;br&gt;&lt;img data-rawheight=&quot;135&quot; data-rawwidth=&quot;768&quot; src=&quot;https://pic4.zhimg.com/93b5677de72849018e66defee2aa38eb_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;768&quot; data-original=&quot;https://pic4.zhimg.com/93b5677de72849018e66defee2aa38eb_r.png&quot;&gt;&lt;br&gt;接着讲解为了达到这个效果要进行如何的布局&lt;br&gt;&lt;img data-rawheight=&quot;574&quot; data-rawwidth=&quot;969&quot; src=&quot;https://pic3.zhimg.com/2ebb7cc2a29ab2e050a357e94db3a06a_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;969&quot; data-original=&quot;https://pic3.zhimg.com/2ebb7cc2a29ab2e050a357e94db3a06a_r.png&quot;&gt;&lt;br&gt;结合布局，无CSS效果的HTML结构就好理解多了&lt;br&gt;&lt;img data-rawheight=&quot;533&quot; data-rawwidth=&quot;859&quot; src=&quot;https://pic1.zhimg.com/1baff1fdeb70dc4e9f85d521dedfefc0_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;859&quot; data-original=&quot;https://pic1.zhimg.com/1baff1fdeb70dc4e9f85d521dedfefc0_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;然后就是样式的讲解，在这里我就犯难了， 样式起作用是和不同的选择器以及元素关联起来的。 怎么样才可以有效的让同学们理解&lt;i&gt;&lt;u&gt;那么多&lt;/u&gt;&lt;/i&gt;的样式以及他们效果呢？ &lt;br&gt;为了更好的把样式的作用阐述出来，做了一个&lt;u&gt;&lt;b&gt;大大提高学习效率&lt;/b&gt;&lt;/u&gt; 的&lt;u&gt;&lt;b&gt; 样式详解&lt;/b&gt;&lt;/u&gt; 功能。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//how2j.cn/frontshowFullStyle%3Fstep.id%3D3135%26tid%3D2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;how2j.cn/frontshowFullS&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;tyle?step.id=3135&amp;amp;tid=2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img data-rawheight=&quot;435&quot; data-rawwidth=&quot;1103&quot; src=&quot;https://pic1.zhimg.com/42d23638eed8d5f447d39c954f02fbec_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1103&quot; data-original=&quot;https://pic1.zhimg.com/42d23638eed8d5f447d39c954f02fbec_r.png&quot;&gt;&lt;br&gt;这个功能。。。怎么用呢~&lt;br&gt;左边是列出了&lt;i&gt;&lt;u&gt;所有的样式&lt;/u&gt;&lt;/i&gt;&lt;br&gt;&lt;img data-rawheight=&quot;586&quot; data-rawwidth=&quot;663&quot; src=&quot;https://pic1.zhimg.com/ace3c5e782766862f275dc330cee804c_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;663&quot; data-original=&quot;https://pic1.zhimg.com/ace3c5e782766862f275dc330cee804c_r.png&quot;&gt;&lt;br&gt;右边一开始是无样式的HTML的效果&lt;br&gt;&lt;img data-rawheight=&quot;109&quot; data-rawwidth=&quot;699&quot; src=&quot;https://pic1.zhimg.com/fae5ec990dd08a77b27f52994f576870_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;699&quot; data-original=&quot;https://pic1.zhimg.com/fae5ec990dd08a77b27f52994f576870_r.png&quot;&gt;&lt;br&gt;通过点击左边的&quot;&lt;i&gt;&lt;u&gt;点击套用&lt;/u&gt;&lt;/i&gt;&quot;，就可以挨个使用每种样式，并且可以在右边立马看到使用这一种样式之后的效果。&lt;br&gt;&lt;img data-rawheight=&quot;554&quot; data-rawwidth=&quot;873&quot; src=&quot;https://pic3.zhimg.com/a90035172292723bfb4ea43cea6ea5ba_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;873&quot; data-original=&quot;https://pic3.zhimg.com/a90035172292723bfb4ea43cea6ea5ba_r.png&quot;&gt;&lt;br&gt;这样就可以达到&lt;u&gt;&lt;b&gt;立竿见影&lt;/b&gt;&lt;/u&gt;呈现这个样式的效果了&lt;br&gt;当然还提供了&lt;i&gt;&lt;u&gt;套用全部样式&lt;/u&gt;&lt;/i&gt;，&lt;i&gt;&lt;u&gt;取消全部样式&lt;/u&gt;&lt;/i&gt;这些功能。&lt;br&gt;&lt;img data-rawheight=&quot;48&quot; data-rawwidth=&quot;203&quot; src=&quot;https://pic3.zhimg.com/694e61a70320de2158a221ef7d75ec96_b.png&quot; class=&quot;content_image&quot; width=&quot;203&quot;&gt;&lt;br&gt;值得一提的，还有这个&lt;i&gt;&lt;u&gt;动态套用&lt;/u&gt;&lt;/i&gt;样式这个功能，hoho，点击之后，每隔一秒钟逐个自动套用左侧的所有样式，通过观察&lt;i&gt;&lt;b&gt;从无样式的HTML演变为有样式的效果这么一个动态过程&lt;/b&gt;&lt;/i&gt;，可以更好的建立整体样式效果观念和理解，这是非常吼的~&lt;br&gt;&lt;img data-rawheight=&quot;304&quot; data-rawwidth=&quot;885&quot; src=&quot;https://pic4.zhimg.com/a961ec021ac2000ef2acb6ba4ff4e41f_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;885&quot; data-original=&quot;https://pic4.zhimg.com/a961ec021ac2000ef2acb6ba4ff4e41f_r.png&quot;&gt;&lt;br&gt;好，通过这么一个流程，同学们就可以对整个样式的理解达到比较好的程度。&lt;br&gt; 但是！ &lt;b&gt;光看是没有用的啊，最后还是要自己写出来才行啊，&lt;/b&gt;&lt;br&gt;&lt;br&gt;所以我又提供了一个&lt;u&gt;&lt;i&gt;练习模式&lt;/i&gt;&lt;/u&gt;。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//how2j.cn/frontpractiseModel%3Fstep.id%3D3135%26tid%3D2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;how2j.cn/frontpractiseM&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;odel?step.id=3135&amp;amp;tid=2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt; 在&lt;u&gt;&lt;i&gt;练习模式&lt;/i&gt;&lt;/u&gt;中，左侧是已经准备好了选择器的样式，右侧是实时显示效果。 根据前面对各种样式的理解和消化，自己动手做一遍。 做的时候，就会&lt;b&gt;犯各种错误，跳各种坑&lt;/b&gt;。 而恰恰就是这些各种错误和各种坑，才是&lt;b&gt;&lt;i&gt;最有价值的经验碎片和能力源泉&lt;/i&gt;&lt;/b&gt;。 &lt;br&gt;&lt;img data-rawheight=&quot;484&quot; data-rawwidth=&quot;776&quot; src=&quot;https://pic1.zhimg.com/4b8fe255705cb989c927bb9eb5070e3c_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;776&quot; data-original=&quot;https://pic1.zhimg.com/4b8fe255705cb989c927bb9eb5070e3c_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;最后，还提供了一个空白页供以练习，在这个空白页里准备好了jquery和bootstrap的导入(因为要用到bootstrap的图标)，还准备了&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt; 标签 &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;标签，以及一个空白的&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;。 &lt;br&gt;&lt;img data-rawheight=&quot;440&quot; data-rawwidth=&quot;1306&quot; src=&quot;https://pic1.zhimg.com/11d9ad02bf003a0a461773c452e41540_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1306&quot; data-original=&quot;https://pic1.zhimg.com/11d9ad02bf003a0a461773c452e41540_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;倘若！ 倘若！ 能够基于空白页，独立地把前面演示的天猫效果做出来，那么我可以说，这个页面所运用到的&lt;b&gt;前端的知识点，你就拿到手了&lt;/b&gt;！ &lt;br&gt;&lt;br&gt;倘若！ 倘若！ 能够把&lt;u&gt;&lt;i&gt;所有的天猫前端页面&lt;/i&gt;&lt;/u&gt;都学习并且掌握，而且能够&lt;u&gt;&lt;i&gt;独立的做出来&lt;/i&gt;&lt;/u&gt;。 那么阁下所掌握的前端技能，不敢说就达到王者，但起码也是&lt;b&gt;&lt;u&gt;&lt;i&gt;白银&lt;/i&gt;&lt;/u&gt;&lt;/b&gt;！&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;100&quot; data-rawwidth=&quot;102&quot; src=&quot;https://pic4.zhimg.com/6325968e8a7eb97c15992020c4941fcf_b.png&quot; class=&quot;content_image&quot; width=&quot;102&quot;&gt;&lt;br&gt;试问，如果你正在找前端工作，又有多少公司对前端页面的要求会超过天猫呢？&lt;br&gt;&lt;br&gt;因为这套学习天猫官网前端的学习系统有一定的复杂性，为了保证学习的高效率性，录制了如何使用这套系统的视频。&lt;br&gt;&lt;img data-rawheight=&quot;360&quot; data-rawwidth=&quot;647&quot; src=&quot;https://pic4.zhimg.com/878d6b838bc455ddf047cd122494511b_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;647&quot; data-original=&quot;https://pic4.zhimg.com/878d6b838bc455ddf047cd122494511b_r.png&quot;&gt;&lt;br&gt;连接：模仿天猫前端学习模块 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//how2j.cn/k/tmall-front/tmall-front-790/790.html%3Ftid%3D2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;how2j.cn/k/tmall-front/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;tmall-front-790/790.html?tid=2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;最后抛出一个优惠码，做这套模仿天猫官网，前后花了2个月的时间，然后又花了1个月的时间制作这么一套可以高学习效率的系统，着实花了不少精力。&lt;br&gt;如果你觉得这套学习系统确能有提升价值的，欢迎使用知乎专用8折优惠码购买：ZHIHU888&lt;br&gt;&lt;br&gt;谢谢支持</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawheight=\"2130\" data-rawwidth=\"960\" src=\"https://pic3.zhimg.com/6c7a482e732c7f242012214832660206_200x112.png\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/6c7a482e732c7f242012214832660206_r.png\">\n<b>先定一个小目标，做他一个天猫官网</b> 题主问的是，前端开发领域有哪些值得推荐的问答，那么这个回答就算是<i><u>毛遂自荐啦</u></i> 带了挺多届的学生，发现了一个现象，同学们在学习HTML，CSS，Javascript这些前端基础技术的时候，不会有太大的问题，大概也能分开掌握里面…\n\n<a href=\"/question/20246142/answer/123135016\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-09-22\" target=\"_blank\" href=\"/question/20246142/answer/123135016\">编辑于 2016-10-12</a></p>\n\n",
    "link": "https://zhihu.com/question/20246142/answer/123135016"
  },
  {
    "question": "\n前端工程师的价值体现在哪里？\n",
    "author": "张克军",
    "content": "\n\n<textarea hidden class=\"content\"> 个人认为前端工程师正慢慢演变为产品工程师。wap app, 响应性UI等以html5技术为基础的开发将成为前端工程师的主要工作内容，解决产品跨平台跨设备的实现问题。Javascript, HTML, CSS这些前端工程师熟悉的，多年使用的语言，作为开放标准将被各种平台所支持。产品形态和数据的分离是形势所趋。移动时代对产品形态多元化的要求虽然可以靠不同技术分别实现，但要付出巨大的成本。这也是html5这个04年就提出来的标准，直到前两年才火爆的原因。&lt;br&gt;&lt;br&gt;现阶段的价值也很大。web产品交互越来越复杂，用户使用体验和网站前端性能优化，这些都需要专业的前端工程师来解决。另外，在项目中还要弥补设计师在交互设计上的不足，前端工程师在开发过程中起着重要的承上启下的作用。一两个前端工程师就可以让整个开发并行起来，让设计到实现的转换更顺利。明智的公司应该贮备前端工程师资源。&lt;br&gt;&lt;br&gt;我不认为前端工程师和产品经理有什么关系。好的前端工程师一定会成为好的交互设计师。前端工程师对信息架构的理解应不亚于专业的交互设计师。 </textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n个人认为前端工程师正慢慢演变为产品工程师。wap app, 响应性UI等以html5技术为基础的开发将成为前端工程师的主要工作内容，解决产品跨平台跨设备的实现问题。Javascript, HTML, CSS这些前端工程师熟悉的，多年使用的语言，作为开放标准将被各种平台所支持…\n\n<a href=\"/question/19589966/answer/12550259\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19589966/answer/12550259\">发布于 2011-05-20</a></p>\n\n",
    "link": "https://zhihu.com/question/19589966/answer/12550259"
  },
  {
    "question": "\n请问学习前端最有效的办法是什么？\n",
    "author": "vczh",
    "content": "\n\n<textarea hidden class=\"content\">有一个前期不是很有效率的傻瓜化的学习方法。就是你什么都不管，先做出来，然后你就知道是什么东西导致你做的很痛苦，想办法解决。循环几次，你就把人家的轮子造出来了。等你有了这个基础之后，你去学习别人的工具，事半功倍。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n有一个前期不是很有效率的傻瓜化的学习方法。就是你什么都不管，先做出来，然后你就知道是什么东西导致你做的很痛苦，想办法解决。循环几次，你就把人家的轮子造出来了。等你有了这个基础之后，你去学习别人的工具，事半功倍。\n\n<a href=\"/question/55058833/answer/142434915\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2017-01-23\" target=\"_blank\" href=\"/question/55058833/answer/142434915\">编辑于 2017-01-23</a></p>\n\n",
    "link": "https://zhihu.com/question/55058833/answer/142434915"
  },
  {
    "question": "\n前端界有哪些越早知道越好的小技巧小知识？\n",
    "author": "戴嘉华",
    "content": "\n\n<textarea hidden class=\"content\">建议大家不要看。&lt;br&gt;写得比较意识流，将就一下。&lt;br&gt;&lt;br&gt;1. 让一个块级元素在某区域内&lt;b&gt;上下左右居中&lt;/b&gt;：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&quot;container&quot;&amp;gt;\n&amp;lt;div class=&quot;box&quot;&amp;gt;&amp;lt;/div&amp;gt;\n&amp;lt;/div&amp;gt;\n\n&amp;lt;style&amp;gt;\n.container {\nborder: 1px solid #000;\nwidth: 300px;\nheight: 300px;\nposition: relative;\n}\n\n.box {\nborder: 1px solid #000;\nwidth: 50px;\nheight: 50px;\n\n/* magic below */\nposition: absolute;\nmargin: auto;\nleft: 0;\nright: 0;\ntop: 0;\nbottom: 0;\n/* magic end */\n}\n&amp;lt;/style&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/63a631bcd571df0664ac8687add218e6_b.png&quot; data-rawwidth=&quot;326&quot; data-rawheight=&quot;320&quot; class=&quot;content_image&quot; width=&quot;326&quot;&gt;&lt;br&gt;&lt;br&gt;根本不用算什么百分比啊margin什么的，本宝宝直接一波 0 0 0 0。&lt;br&gt;&lt;br&gt;（PS：container 宽高甚至可以用百分比，这样 box 会动态居中）&lt;br&gt;&lt;br&gt;UPDATE：有些同学说这是常识，我 CSS 学得比较渣，不要欺负我...&lt;br&gt;UPDATE：原理就是让 box 自己既要往左也要往右，既要往上也要往下。这时候它就不知所措了，只好待在中间。&lt;br&gt;&lt;br&gt;2. Chrome 浏览器给 console.log 加样式：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;console.log('%c我%c爱%c你', 'font-size: 60px;color: red', 'font-size: 40px; color: blue', 'font-size: 20px; color: green')\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;3. 在 Chrome 浏览器的 Elements 里面选中某个元素，按 h 可以隐藏该元素。&lt;br&gt;&lt;br&gt;4. 在 Chrome 的 Sources 里面的里面，ctrl + o 可以打开某个 JS 脚本，并且可以直接修改它，修改的内容在不刷新的情况下是生效的。&lt;br&gt;&lt;br&gt;5. Currying 多多益善：&lt;a href=&quot;https://www.zhihu.com/question/42094770/answer/93689490&quot; class=&quot;internal&quot;&gt;前端使用面向对象式编程 还是 函数式编程 针对什么问题用什么方式 分别有什么具体案例？ - 戴嘉华的回答&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/63a631bcd571df0664ac8687add218e6_200x112.png\" data-rawwidth=\"326\" data-rawheight=\"320\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/63a631bcd571df0664ac8687add218e6_r.png\">\n建议大家不要看。 写得比较意识流，将就一下。 1. 让一个块级元素在某区域内<b>上下左右居中</b>： &lt;div class=\"container\"&gt;\n&lt;div class=\"box\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;style&gt;\n.container {\nborder: 1px solid #000;\nwidth: 300px;\nheight: 300px;\nposition: relative;\n}\n…\n\n<a href=\"/question/43687153/answer/96315694\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-04-22\" target=\"_blank\" href=\"/question/43687153/answer/96315694\">编辑于 2016-07-05</a></p>\n\n",
    "link": "https://zhihu.com/question/43687153/answer/96315694"
  },
  {
    "question": "\n怎么样才算是精通 JavaScript？\n",
    "author": "alienbat",
    "content": "\n\n<textarea hidden class=\"content\">当你真正认识到Javascript是一门无比垃圾的语言之后，你就算是端正态度了。&lt;br&gt;&lt;br&gt;请注意，我说的是端正态度，不是“精通”。因为JS的垃圾，你越“精通”，可能惹的麻烦越大。&lt;br&gt;&lt;br&gt;Javascript所有需要“精通”的技术细节，几乎都来自于其自身的原始缺陷。比如基于Prototype的面向对象，是因为JS并不支持面向对象，需要使用这种晦涩的手段模拟。Undefined和null以及一系列针对null值的弯弯绕，无非是因为其他语言最多只有一种null值，而JS居然有两种（注：null值的设计本身就是一个缺陷，很多语言都试图弥补这个缺陷，比如Swift把nil值纳入编译期检查，这是吸取了Objective C多年的教训）。不支持真正的多线程也没有正规的线程库，所以搞什么generator。面试必问的CommonJS又是怎么回事？因为JavaScript原生没有模块系统，连C都有的东西它没有。还有更多的“面试题技巧”比如[] + [] + ...等奇技淫巧，其本质在于其傻逼到了极点的弱类型系统在操作符上毫无逻辑的自动转换。最搞笑的，连for loop和变量作用域这样在其他语言上理所当然的实现， 在Javascript上都是需要研究的坑。JS这堆不自洽的缺陷堆在一起产生了很多需要“精通”的问题，比如一个多级继承下来的object上使用for loop是什么效果... 对不起，我不知道，也不需要知道。如果你知道，这会是一个减分项而不是加分项，因为这意味着在开发中你居然没有避开这些坑，反而跳了进去并且乐在其中。&lt;br&gt;&lt;br&gt;对这些，正确的态度是什么？好好地学一门正规的面向对象语言比如Ruby或者Python，了解面向对象、类型系统等正常的设计是怎样的。然后仔细学习ES6或者更新的Javascript版本，完了用Babel编译成ES5，至于编译出来的ES5是什么样的奇葩，看都不要去看一眼。&lt;br&gt;&lt;br&gt;不要说自己精通JS，更不要用JS炫技。老老实实地说自己写前端或者Node.JS用了些什么库做了什么项目就行了。&lt;br&gt;&lt;br&gt;P.S 有人说JS prototype不难理解，理解了这个弯弯绕，JS也可以算是面向对象语言。&lt;br&gt;嗯，原来一门语言算不算OO，是相对于用户的理解而言的，没有明确标准。只要用的人牛逼，汇编也可以算是面向对象。真是心中有剑天下无敌啊。&lt;br&gt;&lt;br&gt;这种歪理评论：&lt;br&gt;&lt;br&gt;一级直接删除。&lt;br&gt;二级折叠。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n当你真正认识到Javascript是一门无比垃圾的语言之后，你就算是端正态度了。 请注意，我说的是端正态度，不是“精通”。因为JS的垃圾，你越“精通”，可能惹的麻烦越大。 Javascript所有需要“精通”的技术细节，几乎都来自于其自身的原始缺陷。比如基于Prot…\n\n<a href=\"/question/19657253/answer/141255166\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2017-01-16\" target=\"_blank\" href=\"/question/19657253/answer/141255166\">编辑于 2017-01-17</a></p>\n\n",
    "link": "https://zhihu.com/question/19657253/answer/141255166"
  },
  {
    "question": "\n像这种网站效果，整屏整屏换有没有什么名字？\n",
    "author": "加刘景长",
    "content": "\n\n<textarea hidden class=\"content\">这种叫 &lt;b&gt;视差滚动（&lt;/b&gt;&lt;b&gt;Parallax Scrolling&lt;/b&gt;&lt;b&gt;）&lt;/b&gt;。即多个元素以不同的层次堆叠在一起，并随鼠标滚轮滚动而进行位置移动，进而形成立体的运动效果。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0eded911d455a13f14de39e8e6f26919_b.jpg&quot; data-rawwidth=&quot;670&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;670&quot; data-original=&quot;https://pic2.zhimg.com/0eded911d455a13f14de39e8e6f26919_r.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/4734fd45e25d9a589a8a943bda6533e3_b.jpg&quot; data-rawwidth=&quot;437&quot; data-rawheight=&quot;295&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;437&quot; data-original=&quot;https://pic4.zhimg.com/4734fd45e25d9a589a8a943bda6533e3_r.jpg&quot;&gt;&lt;br&gt;比如这个游戏画面里通过人物马里奥、前景、背景着三个部分的移动速率的不同来实现立体效果。类比网页也是如此。一个滚动视察的网站至少会有以下几层 ：背景层，内容层，贴图层。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/03c36b7efb6f1a0f0607098a72ddaa73_b.jpg&quot; data-rawwidth=&quot;694&quot; data-rawheight=&quot;576&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;694&quot; data-original=&quot;https://pic4.zhimg.com/03c36b7efb6f1a0f0607098a72ddaa73_r.jpg&quot;&gt;&lt;br&gt;类似网站：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//nikebetterworld.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;nikebetterworld.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ianlunn.co.uk/plugins/jquery-parallax/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ianlunn.co.uk/plugins/j&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;query-parallax/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/c072a6571162bf7aadae815948e6c660_b.jpg&quot; data-rawwidth=&quot;1356&quot; data-rawheight=&quot;602&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1356&quot; data-original=&quot;https://pic1.zhimg.com/c072a6571162bf7aadae815948e6c660_r.jpg&quot;&gt;类似Nike for a Better World 产品展示页面的视差滚动效果。&lt;br&gt;源码下载 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1hqssgcc&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1hqssgc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.sequencejs.com/themes/sliding-horizontal-parallax/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;sequencejs.com/themes/s&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;liding-horizontal-parallax/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/72f7850f85022013f1b7bdde7f00ab89_b.jpg&quot; data-rawwidth=&quot;943&quot; data-rawheight=&quot;574&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;943&quot; data-original=&quot;https://pic2.zhimg.com/72f7850f85022013f1b7bdde7f00ab89_r.jpg&quot;&gt;水平方向的视差滚动。&lt;br&gt;源码下载 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1kT5dnbL&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1kT5dnb&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.bit-this.com/eng.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bit This&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;Bit This 是一家位于西班牙马德里的代理公司。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/6de199b5e2f2bdb50740ff449fed2017_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;403&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/6de199b5e2f2bdb50740ff449fed2017_r.jpg&quot;&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.newzealand.com/int/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;New Zealand&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The New Zealand 是一家介绍新西兰旅游的网站。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/3ab503db1c81edb98ca38107b54e2849_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic2.zhimg.com/3ab503db1c81edb98ca38107b54e2849_r.jpg&quot;&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//diablomedia.com/%23home&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Diablo Media&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Diablo Media 是一家线上营销代理公司：为广告主和出版商发布产品和作品。&lt;br&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/f44b121dfc94f9cfaafd8d602cdd8f7d_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;392&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic2.zhimg.com/f44b121dfc94f9cfaafd8d602cdd8f7d_r.jpg&quot;&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.360langstrasse.sf.tv/page/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;360 Long Road Zurich&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.netlash-bseen.be/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Netlash bSeen&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Netlash BSeen 是由 Netlash 创建人和线上营销代理 bSeen 合并之后新创建的一家代理公司。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/088913494388bbada9fc566b65094a09_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic2.zhimg.com/088913494388bbada9fc566b65094a09_r.jpg&quot;&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.itosieceni.pl/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ito Sio Ceni&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.sullivannyc.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sullivan&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iutopi.com/en/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Iutopi&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.culturalsolutions.co.uk/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cultural Solutions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.goup.it/%23goup&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Up&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Go Up 是一家意大利广告代理公司。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/be2351fd337c55534f5b3f660377e892_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic3.zhimg.com/be2351fd337c55534f5b3f660377e892_r.jpg&quot;&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.itosieceni.pl/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ito Sio Ceni&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;p&gt;Ito Sio Ceni 是一家波兰的广播公司，&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/a902cd725cd320104884e37a8e4ea9c3_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;392&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/a902cd725cd320104884e37a8e4ea9c3_r.jpg&quot;&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.sullivannyc.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Sullivan&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;p&gt;Sullivan 是一家提供从各个方面提升用户接触度服务的代理公司。&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/a078867ca87388bb1091f6b014dae811_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic2.zhimg.com/a078867ca87388bb1091f6b014dae811_r.jpg&quot;&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iutopi.com/en/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Iutopi&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;p&gt;Iutopi 是一家品牌、平面设计和网页设计代理公司。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/e7e1c610ee2e369725b1a4d201a5afdf_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;392&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic4.zhimg.com/e7e1c610ee2e369725b1a4d201a5afdf_r.jpg&quot;&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.culturalsolutions.co.uk/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cultural Solutions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;p&gt;Cultural Solutions 是英国的一家企业管理代理公司。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/d98e6719acba3532bfae3ffb406c59fc_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;392&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic1.zhimg.com/d98e6719acba3532bfae3ffb406c59fc_r.jpg&quot;&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.goup.it/%23goup&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go Up&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;p&gt;Go Up 是一家意大利广告代理公司。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/898e468e4a03ce67fa1622736e198f24_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;393&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic1.zhimg.com/898e468e4a03ce67fa1622736e198f24_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;【参考资料】&lt;/p&gt;&lt;p&gt;[1]&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.damndigital.com/archives/37242&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;damndigital.com/archive&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;s/37242&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;[2]&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/lhb25/archive/2011/06/01/parallax-scrolling-in-web-design.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnblogs.com/lhb25/archi&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ve/2011/06/01/parallax-scrolling-in-web-design.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;——————————————————————————————————————&lt;/p&gt;&lt;p&gt;=-=||| 各位说我文不对题的页面，其实是问题提到的网页改版了……之前的确实是视差滚动的。你看我楼下那个早期回答也是这样的类型&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/0eded911d455a13f14de39e8e6f26919_200x112.jpg\" data-rawwidth=\"670\" data-rawheight=\"500\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/0eded911d455a13f14de39e8e6f26919_r.jpg\">\n这种叫 <b>视差滚动（</b><b>Parallax Scrolling</b><b>）</b>。即多个元素以不同的层次堆叠在一起，并随鼠标滚轮滚动而进行位置移动，进而形成立体的运动效果。 比如这个游戏画面里通过人物马里奥、前景、背景着三个部分的移动速率的不同来实现立体效果。类比网页也是如此。一个…\n\n<a href=\"/question/23850985/answer/26007594\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-05-24\" target=\"_blank\" href=\"/question/23850985/answer/26007594\">编辑于 2014-08-27</a></p>\n\n",
    "link": "https://zhihu.com/question/23850985/answer/26007594"
  },
  {
    "question": "\njs中__proto__和prototype的区别和关系？\n",
    "author": "doris",
    "content": "\n\n<textarea hidden class=\"content\">是时候拿出我珍藏多年的这张图了：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/e83bca5f1d1e6bf359d1f75727968c11_b.jpg&quot; data-rawwidth=&quot;520&quot; data-rawheight=&quot;586&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;520&quot; data-original=&quot;https://pic2.zhimg.com/e83bca5f1d1e6bf359d1f75727968c11_r.jpg&quot;&gt;初学javascript的时候也跟题主一样搞不清楚，自己好好总结了一下：&lt;br&gt;&lt;br&gt;首先，要明确几个点：&lt;br&gt;1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。&lt;br&gt;即：对象具有属性__proto__，可称为隐式原型，一个对象的隐式原型指向构造该对象的构造函数的原型，这也保证了实例能够访问在构造函数原型中定义的属性和方法。&lt;br&gt;&lt;br&gt;2.方法(Function)&lt;br&gt;方法这个特殊的对象，除了和其他对象一样有上述_proto_属性之外，还有自己特有的属性——原型属性（prototype），这个属性是一个指针，指向一个对象，这个对象的用途就是包含所有实例共享的属性和方法（我们把这个对象叫做原型对象）。原型对象也有一个属性，叫做constructor，这个属性包含了一个指针，指回原构造函数。&lt;br&gt;&lt;br&gt;好啦，知道了这两个基本点，我们来看看上面这副图。&lt;br&gt;1.构造函数Foo()&lt;br&gt;构造函数的原型属性Foo.prototype指向了原型对象，在原型对象里有共有的方法，所有构造函数声明的实例（这里是f1，f2）都可以共享这个方法。&lt;br&gt;&lt;br&gt;2.原型对象Foo.prototype&lt;br&gt;Foo.prototype保存着实例共享的方法，有一个指针constructor指回构造函数。&lt;br&gt;&lt;br&gt;3.实例&lt;br&gt;f1和f2是Foo这个对象的两个实例，这两个对象也有属性__proto__，指向构造函数的原型对象，这样子就可以像上面1所说的访问原型对象的所有方法啦。&lt;br&gt;&lt;br&gt;另外：&lt;br&gt;构造函数Foo()除了是方法，也是对象啊，它也有__proto__属性，指向谁呢？&lt;br&gt;指向它的构造函数的原型对象呗。函数的构造函数不就是Function嘛，因此这里的__proto__指向了Function.prototype。&lt;br&gt;其实除了Foo()，Function(), Object()也是一样的道理。&lt;br&gt;&lt;br&gt;原型对象也是对象啊，它的__proto__属性，又指向谁呢？&lt;br&gt;同理，指向它的构造函数的原型对象呗。这里是Object.prototype.&lt;br&gt;&lt;br&gt;最后，Object.prototype的__proto__属性指向null。&lt;br&gt;&lt;br&gt;&lt;br&gt;总结：&lt;br&gt;1.对象有属性__proto__,指向该对象的构造函数的原型对象。&lt;br&gt;2.方法除了有属性__proto__,还有属性prototype，prototype指向该方法的原型对象。&lt;br&gt;&lt;br&gt;讲完啦，欢迎各种批评指正完善探讨，共同进步~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/e83bca5f1d1e6bf359d1f75727968c11_200x112.jpg\" data-rawwidth=\"520\" data-rawheight=\"586\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/e83bca5f1d1e6bf359d1f75727968c11_r.jpg\">\n是时候拿出我珍藏多年的这张图了： 初学javascript的时候也跟题主一样搞不清楚，自己好好总结了一下： 首先，要明确几个点： 1.在JS里，万物皆对象。方法（Function）是对象，方法的原型(Function.prototype)是对象。因此，它们都会具有对象共有的特点。 即…\n\n<a href=\"/question/34183746/answer/58155878\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-07\" target=\"_blank\" href=\"/question/34183746/answer/58155878\">编辑于 2015-08-09</a></p>\n\n",
    "link": "https://zhihu.com/question/34183746/answer/58155878"
  },
  {
    "question": "\n如何写一个类似 LESS 的编译工具？\n",
    "author": "郑海波",
    "content": "\n\n<textarea hidden class=\"content\">&lt;blockquote&gt;&lt;b&gt;声明: 这个回答只满足一般前端工作者，但不适合语言实现领域的『专家』&lt;/b&gt;&lt;/blockquote&gt;&lt;br&gt;谢邀: 我之前也造过一个轮子，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/leeluolee/mcss&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - leeluolee/mcss: writing modular css witch mcss&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，如果你抛开对star的成见，忽略它貌似已经被&quot;弃坑&quot;的现状，你其实会发现语言能力上比Less要强一些，而且它确实在公司中数十个产品线中稳定使用了3年以上(不乏考拉、易信等较大的产品线)，所以算是一个成熟的可参考对象，绝非玩具。&lt;br&gt;&lt;br&gt;&lt;br&gt;LESS或者Jade这类css和html的预处理语言，都可以被归类为为DSL， 即&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;DSL( Domain Specific Language ) , 字面翻译为领域受限的编程语言. 它与我们日常使用的一般编程语言不同，是被设计用来解决 &lt;b&gt;特定问题域&lt;/b&gt; 的 &lt;b&gt;语言工具 ，&lt;/b&gt;DSL一般分为内部DSL与外部DSL。这里我们的关注点是&lt;b&gt;外部DSL&lt;/b&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;i&gt;（关于内部DSL和外部DSL就不细讲了，不过我在公司内有一次比较全面的沙龙分享，有兴趣的可以问我要PPT）&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;我先来介绍下，mcss这种compile to css的DSL的实现流水线(所有的compile to js, compile to xx的流水线都大同小异).&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/5abf3cbb00f76e94f2db335753ccb7a6_b.png&quot; data-rawwidth=&quot;934&quot; data-rawheight=&quot;584&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;934&quot; data-original=&quot;https://pic3.zhimg.com/5abf3cbb00f76e94f2db335753ccb7a6_r.png&quot;&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;1. 词法解析Tokenizer or Lexer &lt;/b&gt;&lt;br&gt;&lt;br&gt;作用相当于自然语言的分词，比如 total + number ，total和number此时都会输出类似 Identifier 这样词法元素，并且一些无效的元素比如空格回车缩进(这个取决于语言设计，有些语言是有意义的)会被剔除。它输出的是扁平化结构， 一般是一个token队列结构， 或是一个token Stream 供Parser 使用&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 语法解析Parser: 即将词语根据Grammer组装成语义结构，&lt;br&gt;&lt;/b&gt;&lt;br&gt;通常是输出是一个树形结构，实现上会涉及大量的递归操作。基本常见解决思路有LL和LR两种，LR由于与我们思维的模式有些出入，很难人工书写，所以一般都是靠代码生成来实现。这里我们就更一般的LL做下简单描述。 常见有LL(1), LL(2) , LL(n)等分别，即你向前看多少个『词』(n即代表要查看不定数量)，可以确定他的语法的节点类型，以SASS为例，如function 定义&lt;br&gt;&lt;blockquote&gt;&lt;a data-hash=&quot;10e94fcd48636a4cbed7f011071b94ea&quot; href=&quot;//www.zhihu.com/people/10e94fcd48636a4cbed7f011071b94ea&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@function&quot; data-hovercard=&quot;p$b$10e94fcd48636a4cbed7f011071b94ea&quot;&gt;@function&lt;/a&gt; xx-mixin &lt;/blockquote&gt;当我们碰到 &lt;a data-hash=&quot;10e94fcd48636a4cbed7f011071b94ea&quot; href=&quot;//www.zhihu.com/people/10e94fcd48636a4cbed7f011071b94ea&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@function&quot; data-hovercard=&quot;p$b$10e94fcd48636a4cbed7f011071b94ea&quot;&gt;@function&lt;/a&gt; 时候已经可以判断这会是个 type 为function的 At-rule 的定义, 所以LL(1)即向前看一位的Parser就能解决这个场景 &lt;br&gt;&lt;br&gt;mcss有点特殊，是个LL(n)的解释器，比如在设计中，函数在mcss是 First-class的，可以被返回或传入函数，并保持作用域信息，所以它是一种特殊的值，定义我设计与一般赋值一样。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$size = ($width, $height) { \n// ...\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这里当你不读取到&lt;b&gt;`{ `&lt;/b&gt; 是无法判断 &lt;b&gt;`=`&lt;/b&gt; 后面是函数定义 还是 普通css中的&lt;b&gt; compound values&lt;/b&gt;  . 众所周知参数列表可能无限长，所以必须是LL(n)的Parser才能够解答。 &lt;br&gt;&lt;br&gt;虽然带来一定的性能影响和实现成本(比如回溯、中断)，但是带来语言语法上的一些灵活性。&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 一次或多次的Transformer：&lt;br&gt;&lt;/b&gt;&lt;br&gt;在最终输出前，我们需要对现有的AST做适当调整以满足输出要求。&lt;br&gt;&lt;br&gt;在mcss有 Interpreter, 因为内部需要将所有css之外的语法元素，比如Function, Expression之类的全部解释一遍，输出纯粹的CSS AST. 一般的compile to xx 都不需要interpreter这一步，因为像JS这种目标语言本身就具有完整的语言能力，但CSS是个特例，我们创建css预处理语言就是要增加它的语言能力。在经过这次Interpreter之后，就变成了纯粹的代表CSS语法元素的AST结构，这步之后，我们会在Interpreter上升阶段将其传给一个css_walker的流程提供给插件使用，这样用户只需要关注css相关的语法元素即可实现插件扩展。 和现在postcss暴露给开发者的pugin API类似。使用这种walker可以帮你实现很多有用的功能，比如80行实现一个csscss冗余检测工具(&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/leeluolee/mcss/issues/3&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;80line  implement   more powerful  csscss  (https://github.com/zmoazeni/csscss) version · Issue #3 · leeluolee/mcss · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;) . 图片link替换base64等等功能。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;4.&lt;b&gt; Translator 翻译器：&lt;/b&gt;&lt;br&gt;输出最终的CSS文本，这里输入的AST， 除了原来的语言中除了语法节点原有的信息，其实还包含有position这种位置信息， 在输出时，你同时处理输入和输出的两个位置信息， 就可以实现了&lt;b&gt;source-map&lt;/b&gt;的功能，不想处理map编码可以直接使用 mozilla/source-map ，你只需要传入输入的行列和输出行列即可。&lt;br&gt;&lt;br&gt;&lt;br&gt;流程介绍完毕，那么题主，我假设题主是一个没有任何语言实现基础的前端开发者，那么我觉得优先级应该是: &lt;br&gt;&lt;br&gt;&lt;br&gt;1. 设计一门外部DSL，你首先需要是&lt;b&gt;目标语言的&quot;大师&quot; &lt;/b&gt;，这样你设计的DSL才可能是合理的，是符合问题域的。&lt;br&gt;&lt;br&gt;就我个人而言，我目前至少通读过CSS Syntax和html5 Syntax以及 ES5的完整规范，这用来支持我完成那些开源或非开源的DSL工具。 还有一点就是，对于JS， 你应该把SpiderMonkey的 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Parser API - Mozilla&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 通读几次是基本的，特别是AST节点的Interface定义，这是市面上几乎所有JS parser和 code generator的基石 。&lt;br&gt;&lt;br&gt;2. 合格『&lt;b&gt;够用的』&lt;/b&gt;编译原理前端知识: &lt;br&gt;&lt;br&gt;诚如 &lt;a data-hash=&quot;1b63f47a93cd6f11c160c00927009695&quot; href=&quot;//www.zhihu.com/people/1b63f47a93cd6f11c160c00927009695&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@郝立鑫&quot; data-hovercard=&quot;p$b$1b63f47a93cd6f11c160c00927009695&quot;&gt;@郝立鑫&lt;/a&gt; 所言，一般我们前端领域所碰到的问题，只需要语言实现领域知识的皮毛，并且大部分集中在前端部分(此前端非彼前端)。但即使如此，对于非科班的同学也有一定的学习代价。在这里我不推荐任何龙书之类。我只推荐《编程语言实现模式》，我觉得这本书虽然评价一般，但是是我看到的唯一一本脱离学院派味道的实战书籍。不过在你使用JS实现你的DSL时，由于JS语言非常灵活，抛开性能因素，你可以实现的比JAVA这类语言更加的优雅，其中&lt;b&gt;精通正则表达式，&lt;/b&gt;可以让你在实现中少走很多弯路。然后推荐 Flex 和 Bison这本来了解别人是如何设计语言的, javascript对应的版本 是jison, 比如handlebar等模板引擎都是基于jison实现。&lt;br&gt;&lt;br&gt;3. 理论结合实际的能力，为什么现在科班出身的前端不再少数，但鲜有人在前端DSL领域有过深耕？我觉得一方面是我们教育体制的填鸭教育问题，另一方面公司普遍业务导向，缺乏对人的培养，所有分享等激励措施都流于表面等实际现状脱不了干系。 &lt;br&gt;&lt;br&gt;4. 实际使用的客户群体，论证设计和实现的合理性。这个，相比之下已是老干部的人(比如我)相比入职的新人可能更加有优势些。&lt;br&gt;&lt;br&gt;Parser这个基本领域是个已经被解决的问题，解决方案已经被固化为各种理论支持的Parser Generator方案。 但是在应用层面，如何在特定领域如日新月异的前端开发领域，如何结合特定宿主语言，仍然大有可为。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;其实，每一个写DSL足够多的人，都会非常想去实现一个Parser Generator.&lt;/blockquote&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/5abf3cbb00f76e94f2db335753ccb7a6_200x112.png\" data-rawwidth=\"934\" data-rawheight=\"584\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/5abf3cbb00f76e94f2db335753ccb7a6_r.png\">\n<b>声明: 这个回答只满足一般前端工作者，但不适合语言实现领域的『专家』</b> 谢邀: 我之前也造过一个轮子，<a href=\"//link.zhihu.com/?target=https%3A//github.com/leeluolee/mcss\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GitHub - leeluolee/mcss: writing modular css witch mcss<i class=\"icon-external\"></i></a> ，如果你抛开对star的成见，忽略它貌似已经被\"弃坑\"的现状，你其实会发现语言能力上比Less要…\n\n<a href=\"/question/20140718/answer/114360444\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-01\" target=\"_blank\" href=\"/question/20140718/answer/114360444\">编辑于 2016-08-01</a></p>\n\n",
    "link": "https://zhihu.com/question/20140718/answer/114360444"
  },
  {
    "question": "\n25岁想要辞职去学习编程？\n",
    "author": "初晨寒夜",
    "content": "\n\n<textarea hidden class=\"content\">天哪，竟然破百了，按惯例是不是该更点什么。我想起了在年前看到的一个问题，&lt;br&gt;&lt;br&gt;离开国企很后悔，怎么办？ &lt;a href=&quot;http://www.zhihu.com/question/38882277&quot; class=&quot;internal&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;zhihu.com/question/3888&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;2277&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;br&gt;下面有非常多的人回答，我们不能只看到知乎大牛们各种牛b跳槽，也应该看看更多的普通人的境况。毕竟普通人还是比大牛多的多。&lt;br&gt;&lt;br&gt;我再表明一下我的态度吧，对于提主我们说再多都只是建议而已，最后做决定的都是他自己，如果转行后发现没有原来条件那么好了，但是你就是觉得这样过的快乐，那自然我不会说什么。重要的还是自己要慎重，尽最大努力不要让将来的自己对于自己当初的决定后悔。(当然事情并不是一开始就能考虑周全的)&lt;br&gt;&lt;br&gt;/＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊一条无用的分割线以下是原文＊＊＊＊＊＊＊＊＊＊＊＊/&lt;br&gt;&lt;br&gt;兄弟，每年那么多程序猿从各大院校毕业，你&lt;br&gt;觉得你相较于他们，你的优势在哪里，你能给用人公司哪些选择你的理由。&lt;br&gt;你觉得你是比他们更年轻，还是比他们拥有更高的专业技能，亦或者是你四年的体制内工作经历？这些都没优势。&lt;br&gt;我能理解你的心情，但是人需要明智，你还什么都没有，就先把工作辞了，是不是太草率了点。。。梦想就是应该用来追逐用来实现的，你对梦想的行业还什么都不了解，在这里提问，除了一颗辞职的心再无其他准备工作。这就是你对待梦想的态度嘛？仅仅靠着父母的资源弄来的工作去歃血祭旗？有本事拿自己挣来的资源去任性去挥霍，不然你这行为没有什么值得人佩服的地方。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n天哪，竟然破百了，按惯例是不是该更点什么。我想起了在年前看到的一个问题， 离开国企很后悔，怎么办？ <a href=\"http://www.zhihu.com/question/38882277\" class=\"internal\"><span class=\"invisible\">http://www.</span><span class=\"visible\">zhihu.com/question/3888</span><span class=\"invisible\">2277</span><span class=\"ellipsis\"></span></a> 下面有非常多的人回答，我们不能只看到知乎大牛们各种牛b跳槽，也应该看看更多的普通人的境况。毕竟普通人还是比大牛多的多。 …\n\n<a href=\"/question/46756082/answer/102774832\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-05-26\" target=\"_blank\" href=\"/question/46756082/answer/102774832\">编辑于 2016-05-31</a></p>\n\n",
    "link": "https://zhihu.com/question/46756082/answer/102774832"
  },
  {
    "question": "\nReact 有哪些优秀实用的组件？\n",
    "author": "偏右",
    "content": "\n\n<textarea hidden class=\"content\">推荐一些优秀的套件集：&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//material-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Material UI&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/b&gt;非常高的 star 数，帅气的 Material 设计规范实现，巨量 issue 和贡献者，明星级的项目。激进地全局使用了 inline 样式，可能会让部分人群不适应。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//react-bootstrap.github.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React-Bootstrap&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;bootstrap3 设计，UI 上看着比较陈旧，最近的提交节奏有点慢。 而且 bootstrap4 马上就要出来了。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//www.react-toolbox.com&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React Toolbox&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;同样实现了 Material Design 的后起之秀，使用 css-modules，演示文档内建了一个实时编辑器，非常赞。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//elemental-ui.com/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Elemental UI&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;网站不错，组件太少，设计风格有点像 Bootstrap。&lt;/p&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//lobos.github.io/react-ui/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React ui docs&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;国人开发，样式使用了 yahoo 的 Pure，API 和文档精致。缺点是目前只有一个人开发维护。&lt;/p&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//nikgraf.github.io/belle/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Belle - Configurable React Components with great UX&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;风格素雅的一套 React 组件，组件数量较少。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//touchstonejs.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TouchstoneJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;移动端 hybrid 的组件库，iOS 风格。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//www.muicss.com/docs/v1/react/introduction&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MUI - Material Design React Framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;MUI 同时提供了 angular、react 、webcomponents 等版本的 MD 实现，组件数量较少。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=https%3A//github.com/jquense/react-widgets&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jquense/react-widgets · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;API 文档极其精细，亮点之一是提供了一个属性可视化操作的 playground，值得借鉴。例子：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jquense.github.io/react-widgets/docs/%23/datetime-picker&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React Widgets&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;b&gt;&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//reapp.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reapp - Hybrid apps, fast&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;p&gt;iOS 风格的移动端组件，组件数量多但文档略少，主题定制和动画支持良好。除了组件以外，对移动端开发提供了很多周边模块（路由、数据流管理，请求，服务端支持等）和实践文档。但是最近的提交记录很少。&lt;/p&gt;&lt;br&gt;&lt;p&gt;---&lt;/p&gt;&lt;br&gt;&lt;p&gt;持续补充：&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//reactstrap.github.io&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;reactstrap - React Bootstrap 4 components&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;基于 bootstrap4 的新起之秀，文档清新，推荐尝试。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ui.baifendian.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;BFD UI&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;百分点的 React 套件库，组件很全，风格淡雅，实现质量不错，不知道为什么 star 非常少。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blueprintjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blueprint - A React UI toolkit for the web&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;&lt;p&gt;刚刚推出的质量极好的组件库，用 TypeScript 和 Scss 开发，功能强大，并且有自己的色彩和排版规范，推荐使用。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n推荐一些优秀的套件集： <b><a class=\" wrap external\" href=\"//link.zhihu.com/?target=http%3A//material-ui.com/\" target=\"_blank\" rel=\"nofollow noreferrer\">Material UI<i class=\"icon-external\"></i></a> </b>非常高的 star 数，帅气的 Material 设计规范实现，巨量 issue 和贡献者，明星级的项目。激进地全局使用了 inline 样式，可能会让部分人群不适应。 <b><a class=\" wrap external\" href=\"//link.zhihu.com/?target=https%3A//react-bootstrap.github.io/\" target=\"_blank\" rel=\"nofollow noreferrer\">React-Bootstrap<i class=\"icon-external\"></i></a></b> bootstrap3 设计，UI 上看着比较陈旧，最近的提交节…\n\n<a href=\"/question/39452825/answer/82517594\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-20\" target=\"_blank\" href=\"/question/39452825/answer/82517594\">编辑于 2016-11-24</a></p>\n\n",
    "link": "https://zhihu.com/question/39452825/answer/82517594"
  },
  {
    "question": "\n用 Git 一定要用命令行吗？用命令行一定高贵吗？\n",
    "author": "xlzd",
    "content": "\n\n<textarea hidden class=\"content\">所有用 CLI 就看不起用 GUI 的，用 vim/emacs  就看不起用 IDE 的，用 Linux 就看不起用 Windows 的，用 C/C++ 就看不起用 C#/Java 的，也就只能靠着工具、系统、语言找找存在感了~~~&lt;br&gt;&lt;br&gt;&lt;br&gt;------------&lt;br&gt;one more thing，用命令行不高贵，但是更高效~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n所有用 CLI 就看不起用 GUI 的，用 vim/emacs 就看不起用 IDE 的，用 Linux 就看不起用 Windows 的，用 C/C++ 就看不起用 C#/Java 的，也就只能靠着工具、系统、语言找找存在感了~~~ ------------ one more thing，用命令行不高贵，但是更高效~\n\n<a href=\"/question/50273628/answer/120206639\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-09-02\" target=\"_blank\" href=\"/question/50273628/answer/120206639\">编辑于 2016-09-03</a></p>\n\n",
    "link": "https://zhihu.com/question/50273628/answer/120206639"
  },
  {
    "question": "\n怎样有效地学习 Node.js？\n",
    "author": "寸志",
    "content": "\n\n<textarea hidden class=\"content\">这个回答已经是三年前了，可能没那么准确了，我会找个时间来更新一下。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/22110802?refer=FrontendMagazine&quot; class=&quot;internal&quot;&gt;Node.js 之 log4js 完全讲解 - 前端外刊评论 - 知乎专栏&lt;/a&gt;&lt;br&gt;&lt;br&gt;老的回答&lt;br&gt;-------------------------------------------------------------------------------------------------------------&lt;br&gt; NodeJs现在处于发展阶段，相关资料和书籍不是很多。说开了NodeJs只是JavaScript作为CommonJS的实现，使得JavaScript在服务器端有了用武之地，所以NodeJs从语法层面来说还是JavaScript。但是与客户端的JavaScript又有所区别。注意以下几点：&lt;br&gt;&lt;ul&gt;&lt;li&gt;要学习NodeJs，必须有一定的JavaScript基础，理解事件模型，了解JavaScript的语法和特性，理解JavaScript面向对象编程&lt;/li&gt;&lt;li&gt;学习NodeJs类似于Python等代码组织的方式——包机制，require和exports。&lt;/li&gt;&lt;li&gt;一些基本的操作系统，HTTP等网络通信，数据库（尤其是非关系数据库），Web编程的知识有所了解。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;相关资料虽少，但是也可以罗列一些：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//nodejs.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;nodejs.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 官方网站，最简单的示例，详尽的文档（中文版&lt;a href=&quot;//link.zhihu.com/?target=http%3A//cnodejs.org/cman/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnodejs.org/cman/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;/li&gt;&lt;li&gt;github上的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/joyent/node&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/joyent/node&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;以及各种周边库&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//nodebeginner.org/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Node Beginner Book&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; the node beginner book，深入浅出，做完很有成就感&lt;/li&gt;&lt;li&gt;简单的NodeJs MVC &lt;a href=&quot;//link.zhihu.com/?target=http%3A//cnodejs.org/blog/%3Fp%3D342&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cnodejs.org/blog/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;p=342&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，出自CNODEJS中文社区，上面的其他文章多订阅多看看&lt;/li&gt;&lt;li&gt;Google和订阅，Google各种东西教程资料，好的blog就订阅下，不断学习，比如说&lt;a href=&quot;//link.zhihu.com/?target=http%3A//howtonode.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;howtonode.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;参家一些线下的分享会，多分享多进步&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;github上NodeJs的周边工具很多，如何组织使用是个问题。首先需要明确这些工具或者类库是干什么用的，解决了什么问题，如何使用。&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;npm&lt;/b&gt;：NodeJs包管理器&lt;/li&gt;&lt;li&gt;&lt;b&gt;express&lt;/b&gt;：服务器端比较流行的MVC框架，处理服务请求，路由转发，逻辑处理&lt;/li&gt;&lt;li&gt;&lt;b&gt;mongoose&lt;/b&gt;：mongodb包装，更方便使用数据库&lt;/li&gt;&lt;li&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//socket.io&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;socket.io&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;：实现服务端和客户端socket通信解决方案&lt;/li&gt;&lt;li&gt;&lt;b&gt;backbone&lt;/b&gt;：客户端MVC框架，编写客户端应用（豆瓣说）&lt;/li&gt;&lt;li&gt;&lt;b&gt;coffeescript&lt;/b&gt;：提高JavaScript的可读性，健壮性&lt;/li&gt;&lt;li&gt;&lt;b&gt;zombie&lt;/b&gt;：浏览器子集，编写html解析器，轻形javascript客户端测试&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;知识有限，当然还有很多，只要了解了他们是干什么用的，解决什么问题，就可以组合起来做自己想要的东西。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这个回答已经是三年前了，可能没那么准确了，我会找个时间来更新一下。 <a href=\"https://zhuanlan.zhihu.com/p/22110802?refer=FrontendMagazine\" class=\"internal\">Node.js 之 log4js 完全讲解 - 前端外刊评论 - 知乎专栏</a> 老的回答 -------------------------------------------------------------------------------------------------------------…\n\n<a href=\"/question/19793473/answer/12980526\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-07-31\" target=\"_blank\" href=\"/question/19793473/answer/12980526\">编辑于 2016-08-31</a></p>\n\n",
    "link": "https://zhihu.com/question/19793473/answer/12980526"
  },
  {
    "question": "\nvue、react和angular 2.x谁是2016年的主流？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">谁笑到最后不太好评判，但我前几天回答说，2016年Vue会大放异彩，也就是说，在2016年这一年的时间线里，有些事情是可以作个预测的，我来解释一下这么认为的理由。&lt;br&gt;&lt;br&gt;1. 在2016年，不管是React，Vue，Angular（无论是2还是1），都会处于上升期，注意，甚至Angular 1.x，也还是会上升。&lt;br&gt;&lt;br&gt;以上判断是基于什么作出的呢，是认为整个Web领域仍然在向应用化倾斜。新增前端需求中，应用型的类型比重高于以往，同时，部分传统行业产品的互联网化、适应多种大小的屏幕等需求释放，会导致不少团队脱离ExtJS这类框架，向以上这些东西靠拢，所以，即使是现在大家已经不太看好的Angular 1.x，仍然会保持上升。&lt;br&gt;&lt;br&gt;2. 从上升速度来看，在2016年，Vue应当处于第一位，其次是React。&lt;br&gt;&lt;br&gt;为什么作出这个判断呢：&lt;br&gt;&lt;br&gt;第一：由于Vue的基数小于React用户，毕竟后者已经先火了一年，基数小的，增长率比较容易高。&lt;br&gt;&lt;br&gt;第二：Vue的用户来源比较特别。&lt;br&gt;&lt;br&gt;有一部分人，会从Angular转到Vue这条线，因为这些人可能被Angular 1.x的一些缺点吓到，想要转换路线，到底是转Vue还是转React呢？习惯了Angular思维模式的人，第一反应肯定是转Vue，而不喜欢Angular思维模式的，基本都会往React走。这两种人可以认为均等。&lt;br&gt;&lt;br&gt;另外一部分人，从传统前端转入这个领域，对他们来说，侵入较少的东西更容易接受，所以在这个点上，Vue比其他两者是有优势的。&lt;br&gt;&lt;br&gt;还有一部分人，从后端或者一些非前端领域转入，他们接受Vue和React的可能性差不多，因为各自能找到比较像的东西。&lt;br&gt;&lt;br&gt;第三：Vue比较轻量，所以适用场景更广。&lt;br&gt;&lt;br&gt;除了比较重型的应用，很轻量的页面也可以用Vue。React强制组件化的写法，但有不少比较轻量的页面，甚至一些控制台，都不太适合组件化。Angular 1.x和Vue都是可以选用组件化，也可以不组件化，仅以模板形式与数据结合。&lt;br&gt;&lt;br&gt;今天我面试了一个人，这个人技能不错，他学过很多东西，也思考过很多东西，最近一段时间用React编写了一个云控制台，对组件树的层次感到很苦恼。&lt;br&gt;&lt;br&gt;个人认为，在这种场景下，React是不如Vue和Angular有优势的。因为模型层很扁平，业务场景偏重表格和表单，很少存在前端的模型间的关联，这种大部分代码只不过是Todo那个Demo的堆砌而已，并不需要很组件化，更不需要在组件通信层做太多设计。&lt;br&gt;&lt;br&gt;&lt;b&gt;在2016年，不能使用ES2015/ES2016进行开发的前端技术栈，会是最先停止增长并且走下坡路的！&lt;/b&gt;&lt;br&gt;&lt;br&gt;这三者，都可以使用它们，其中Angular 1.x稍微别扭一些，但也能很好地开发、运行。&lt;br&gt;&lt;br&gt;为什么Angular系列的增幅不如另外两者呢，一方面自身确实因为设计缺陷错过了一些机会，另一方面，宣传没跟上，被React的气势超越了。&lt;br&gt;&lt;br&gt;毛主席教导我们：宣传阵地你不占领，敌人就要占领。所以，你们懂的。&lt;br&gt;&lt;br&gt;3. 从2016年底所能达到的用户量来说，三个系列（其中Angular包括1和2），应当在同一数量级。&lt;br&gt;&lt;br&gt;这三者中，Vue和React的用户会是净流入，Angular会同时是流入和流出方，但流入还是高于流出的，到2017就不太好讲了。&lt;br&gt;&lt;br&gt;从生命周期的角度看，这几个东西很可能同一时间被未来某个东西干掉，但是到底几年后，不知道，所以，谁笑到最后呢？我猜，是大家相爱相杀，笑着手挽手走进历史的车轮下。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谁笑到最后不太好评判，但我前几天回答说，2016年Vue会大放异彩，也就是说，在2016年这一年的时间线里，有些事情是可以作个预测的，我来解释一下这么认为的理由。 1. 在2016年，不管是React，Vue，Angular（无论是2还是1），都会处于上升期，注意，甚至Angu…\n\n<a href=\"/question/38989845/answer/79136270\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-29\" target=\"_blank\" href=\"/question/38989845/answer/79136270\">编辑于 2015-12-29</a></p>\n\n",
    "link": "https://zhihu.com/question/38989845/answer/79136270"
  },
  {
    "question": "\n关于 AngularJS 框架的使用有哪些经验值得分享？\n",
    "author": "墨磊",
    "content": "\n\n<textarea hidden class=\"content\">谢提醒，之前还没注意到这个。&lt;br&gt;&lt;br&gt;最近做的某个项目的 UI 部分 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//googledrive.com/host/0Bwdui5aYcEA9WFB1TThKUWVCS28/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mobile Campus&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（Google Drive 可能需要跨墙）&lt;br&gt;代码：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/morlay/angular-mobile-ui&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/morlay/angul&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ar-mobile-ui&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;然后，说说我的一些做法。可能不够完善，毕竟还在折腾中。&lt;br&gt;&lt;br&gt;&lt;b&gt;## DOM 的整体 or 零散&lt;/b&gt;&lt;br&gt;&lt;br&gt;首先是这篇神贴：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;javascript - How do I &quot;think in AngularJS&quot; if I have a jQuery background?&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;AngularJS 与 jQuery 等传统操作 DOM 的思想有所不同，&lt;br&gt;&lt;br&gt;对于 jQuery 等，一般是先有完整 DOM 然后在这些 DOM 的基础上进行二次调教。&lt;br&gt;而 AngularJS  等框架则是 根据 数据模型 以及其对应的 DOM 模版，然后通过模版像搭积木那样组合页面。&lt;br&gt;&lt;br&gt;显然的，前者在 SEO 上有天然优势；而后者，搜索引擎还只能拿到某个模版，而无内容。&lt;br&gt;暂时没想到有什么特别好的解决方案，或许，对于内容页，可以继续使用传统方式，而只在需要更多交互的地方应用 AngularJS，特别是在移动端应用上。&lt;br&gt;&lt;br&gt;同理适用于各种 前端的 MVC 框架，后端只要为前端提供数据接口，而不再需要为其拼接 HTML.&lt;br&gt;&lt;br&gt;&lt;b&gt;## 模块化&lt;/b&gt;&lt;br&gt;&lt;br&gt;AngularJS 也是遵循 AMD 的。（AMD 是啥，参考：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//justineo.github.io/singles/writing-modular-js/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;使用 AMD、CommonJS 及 ES Harmony 编写模块化的 JavaScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;br&gt;虽然它也可以按照传统代码方式来写（其首页介绍的用法 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//angularjs.org/%23project-js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;AngularJS — Superheroic JavaScript MVW Framework&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），但是，既然都提供了这么一种模块的方法，为何不用上呢 （参考下他已有的较成熟衍生库 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/angular-ui/bootstrap&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/angular-ui/b&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ootstrap&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;angular.module('app', [\n    'moduleA',\n    'moduleB',\n])\n.controller('MainCtrl', [\n    '$scope',\n     function ($scope) {\n\n}]);\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;而且，这种写法还可以方便做代码的合并与压缩，在后面 &lt;b&gt;Grunt 自动化 &lt;/b&gt;一节中，就会提到使用 Nodejs/Grunt 来自动的做这些事情。&lt;br&gt;&lt;br&gt;&lt;b&gt;## 可复用模版 or 业务逻辑模版&lt;/b&gt;&lt;br&gt;&lt;br&gt;今年 Google 开发者大会中 提到的 Polymer（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.polymer-project.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Welcome - \n   Polymer&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;这货让人感觉像是 Angular Directives 的进化。&lt;br&gt;&lt;br&gt;而 Directives 做的事，就是把一堆 DOM 封装为一条或者一组 自定义的 HTML标签，作为可复用的模版，以供组装业务调用。 Demos 可参看：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//angular-ui.github.io/bootstrap/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Angular directives for Twitter's Bootstrap&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;当然，为了方便修改，很多时候在做 directive 的时候需要将 template 用 templateUrl 代替，&lt;br&gt;不用担心文件的碎片化，不利于前端加载 &lt;b&gt;Grunt 自动化 &lt;/b&gt;一节 会提到如何合并这些碎片化的 模版。&lt;br&gt;&lt;br&gt;Directives 是作为可复用的模版，&lt;br&gt;而业务逻辑则是一般是一个业务对应一个 html 及其的 controller.&lt;br&gt;&lt;br&gt;&lt;b&gt;## 作用域间的通信&lt;/b&gt;&lt;br&gt;&lt;br&gt;上节提到了一个 html 及其的 controller，一个完整应用自然会包含很多的业务子块。&lt;br&gt;自然会有很多很多 cotrollers.&lt;br&gt;&lt;br&gt;AngularJS 提供了 方法， $scope 或者 $rootScope 的 $broadcast $emit / $on&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$scope.$emit('eventA',msg); \n$scope.$broadcast('eventA',msg); \n\n\n\n\n$rootScope.$on('eventA',function(event,msg){\n   console.log(msg);\n});\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;至于他们之间的差别，可参考这个 Demo, Chrome F12 ，你可以看到结果。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//googledrive.com/host/0Bwdui5aYcEA9SzN2WDJ4cXZRTTA/index.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;googledrive.com/host/0B&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;wdui5aYcEA9SzN2WDJ4cXZRTTA/index.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;## 数据池&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;除了作用域间的传值外，还有个方法是统一的管理一个数据池，&lt;br&gt;对于没有业务交叉的 controller，若是有公有数据的需要，都从这个数据池中取，&lt;br&gt;而这个数据池更可以直接作为和后端数据的统一交互口，及本地缓存管理的地方。&lt;br&gt;&lt;br&gt;&lt;b&gt;## Grunt 自动化&lt;/b&gt;&lt;br&gt;&lt;br&gt;Grunt（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//gruntjs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Grunt: The JavaScript Task Runner&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）出现以后，我是发现 Git 上面基本上前端相关的项目上都多了个 Gruntfile.js，可见他确实好用。&lt;br&gt;&lt;br&gt;不太喜欢大多数项目中把所有任务都丢在一个文件里的方式。&lt;br&gt;所以，利用 node.js 的特性，将任务集也分解开来。&lt;br&gt;在 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/morlay/angular-mobile-ui&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/morlay/angul&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ar-mobile-ui&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这里可以看到对应的代码。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/508e3e5bc0acf4bdc410d38485436e05_b.jpg&quot; data-rawwidth=&quot;255&quot; data-rawheight=&quot;350&quot; class=&quot;content_image&quot; width=&quot;255&quot;&gt;&lt;br&gt;这里只说说，如何按照 angular module 的依存关系自动合并对应文件。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/morlay/angular-mobile-ui/blob/develop/grunt/subTasks/angular-concat-modules.js&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/morlay/angul&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ar-mobile-ui/blob/develop/grunt/subTasks/angular-concat-modules.js&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;首先是模块的命名，使得它能够和它的路径一致性。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/2b16d7cc6150137c9b6755306a48f6a5_b.jpg&quot; data-rawwidth=&quot;176&quot; data-rawheight=&quot;237&quot; class=&quot;content_image&quot; width=&quot;176&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/33f677405bed253948d797d2856417a4_b.jpg&quot; data-rawwidth=&quot;279&quot; data-rawheight=&quot;151&quot; class=&quot;content_image&quot; width=&quot;279&quot;&gt;看这两张图就明白了。&lt;br&gt;&lt;br&gt;第二，除了特殊的，全局公用的模块外，&lt;br&gt;其他模块在各自业务组件中建立引用关系。&lt;br&gt;避免载入多余的模块。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0826d7d76c90f21c8bc9a4351e70714d_b.jpg&quot; data-rawwidth=&quot;1015&quot; data-rawheight=&quot;298&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1015&quot; data-original=&quot;https://pic2.zhimg.com/0826d7d76c90f21c8bc9a4351e70714d_r.jpg&quot;&gt;比如这里，我只需要把 Grunt 配置中，&lt;br&gt;把 app.main 作为了入口文件，&lt;br&gt;并配置它的全局引用，ngMobile 和 tpls（可复用模版转换而成的 js）&lt;br&gt;&lt;br&gt;通过 `grunt angular-concat-modules` 和 `grunt script-uglify`&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b6fe8ac11b333337989d74d3bb730a0e_b.jpg&quot; data-rawwidth=&quot;1119&quot; data-rawheight=&quot;45&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1119&quot; data-original=&quot;https://pic3.zhimg.com/b6fe8ac11b333337989d74d3bb730a0e_r.jpg&quot;&gt;合并压缩自动完成。&lt;br&gt;&lt;br&gt;当然，这里更是直接做了任务，`grunt release` 一条指令搞定一切。&lt;br&gt;&lt;br&gt;而，对于 angular 模版转换为 js 有现成的 grunt-angular-templates 可用，&lt;br&gt;这里不细说了，详看代码。&lt;br&gt;&lt;br&gt;&lt;b&gt;## &lt;/b&gt;&lt;b&gt;测试工具 &lt;/b&gt;&lt;br&gt;&lt;br&gt;最后的，关于测试工具，官方有提供 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//karma-runner.github.io/0.10/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Karma - Spectacular Test Runner for Javascript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;但没用过，也不知道怎么用，希望有同行给予补充与介绍。&lt;br&gt;&lt;br&gt;其他的，在 API 文档里写得挺详细的。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;P.S.&lt;/b&gt;&lt;br&gt;至于知乎，并非完全 Angular 的方式，&lt;br&gt;希望能够进一步，至少在不需要 SEO 的部分。&lt;br&gt;&lt;br&gt;继续折腾去了，还有很多东西要弄。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/508e3e5bc0acf4bdc410d38485436e05_200x112.jpg\" data-rawwidth=\"255\" data-rawheight=\"350\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/508e3e5bc0acf4bdc410d38485436e05_r.jpg\">\n谢提醒，之前还没注意到这个。 最近做的某个项目的 UI 部分 <a href=\"//link.zhihu.com/?target=https%3A//googledrive.com/host/0Bwdui5aYcEA9WFB1TThKUWVCS28/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Mobile Campus<i class=\"icon-external\"></i></a>（Google Drive 可能需要跨墙） 代码：<a href=\"//link.zhihu.com/?target=https%3A//github.com/morlay/angular-mobile-ui\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/morlay/angul</span><span class=\"invisible\">ar-mobile-ui</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 然后，说说我的一些做法。可能不够完善，毕竟还在折腾中。 <b>## DOM 的整体 or 零散</b> 首先是这篇神贴： <a href=\"//link.zhihu.com/?target=http%3A//stackoverflow.com/questions/14994391/how-do-i-think-in-angularjs-if-i-have-a-jquery-background\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">javascript - How d…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/21497720/answer/18441053\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/21497720/answer/18441053\">发布于 2013-08-19</a></p>\n\n",
    "link": "https://zhihu.com/question/21497720/answer/18441053"
  },
  {
    "question": "\n网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？\n",
    "author": "罗志宇",
    "content": "\n\n<textarea hidden class=\"content\">鉴于有人表示没有看懂。 下面是结论:&lt;br&gt;&lt;ul&gt;&lt;li&gt;题主测试结果反常是因为测试用例构造有问题。&lt;/li&gt;&lt;li&gt;React.js 相对于直接操作原生DOM有很大的性能优势， 背后的技术支撑是基于virtual DOM的batching 和diff.&lt;br&gt;&lt;/li&gt;&lt;li&gt;React.js 的使用的virtual DOM 在Javascript Engine中也有执行效率的优势。&lt;/li&gt;&lt;/ul&gt; 如果想知道解释，请继续阅读。。&lt;br&gt;－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－&lt;br&gt;&lt;br&gt;看了好几个答案感觉都没有答到点子上面。如果一个框架发明出来就是为了提高性能，那就一定要在性能上面有所体现。编程模型类型框架实在是太多太多，React.js仅仅因为这个不可能会那么受好评。 &lt;br&gt;&lt;br&gt;React.js仅仅是做MVC中的View，也就是渲染层，任务其实非常单一的，也没有那么多哲学方面的东西需要承载。 &lt;br&gt;&lt;br&gt;&lt;b&gt;1.题主测试结果反常是因为测试用例构造有问题。&lt;/b&gt;&lt;br&gt;&lt;br&gt;我们来看看题主的测试用例(由于题主问的react.js 和原生，所以其他的我都去掉了).&lt;br&gt;&lt;i&gt;以下所有的代码都在:&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//fredrikluo.github.io/testcases/reactjstest.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;fredrikluo.github.io/te&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;stcases/reactjstest.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/i&gt;&lt;br&gt;&lt;br&gt;原生 (只保留了关键代码，其他都去掉了，这样看得更清楚一点）&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/b94c1db9c8dc910b47ef6f9fdbcb534d_b.png&quot; data-rawwidth=&quot;517&quot; data-rawheight=&quot;352&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;517&quot; data-original=&quot;https://pic2.zhimg.com/b94c1db9c8dc910b47ef6f9fdbcb534d_r.png&quot;&gt;这里看出问题没？\n&lt;br&gt;&lt;br&gt;整个测试用例的模式是：\n&lt;br&gt;&lt;ol&gt;&lt;li&gt;构造一个 String, 包含一个1000个 Tag。&lt;br&gt;&lt;/li&gt;&lt;li&gt;把这1000个 Tag 一次性添加到 DOM 树中。&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;其实，&lt;b&gt;题主的测试用例只做了一次 DOM 操作&lt;/b&gt;。。而且主要问题是，如果你真的做一个WebAPP,  然后直接操作DOM更新，更新的模式完全不是这样子的。&lt;br&gt;&lt;br&gt;在现实中，更新模式更像这个样子滴：&lt;br&gt;同样是 1000 元素需要更新， 你的界面上面分成了20个逻辑区域（或者层，或者 view, 或者whatever 框架取的名字）,  &lt;b&gt;每个区域 50 个元素。在界面需要更新的时候，每个逻辑区域分别操作 DOM Tree 更新&lt;/b&gt;。\n&lt;br&gt;&lt;br&gt;那么代码看起来更像是这样子的:&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/54b8f7da17021f35800e48adeee7b119_b.png&quot; data-rawwidth=&quot;537&quot; data-rawheight=&quot;353&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;537&quot; data-original=&quot;https://pic2.zhimg.com/54b8f7da17021f35800e48adeee7b119_r.png&quot;&gt;&lt;br&gt;然后我们再来看看结果&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/6ef03bab2d7e4612a2a8def8b0796918_b.png&quot; data-rawwidth=&quot;640&quot; data-rawheight=&quot;234&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;640&quot; data-original=&quot;https://pic1.zhimg.com/6ef03bab2d7e4612a2a8def8b0796918_r.png&quot;&gt;&lt;br&gt;天了撸， 发生了什么， 原生的怎么慢这么多。（React.js 并不需要修改，无论如何每个区域都是把新的操作作用在Virtual DOM上面，然后每帧只会调用一次Render)。&lt;br&gt;&lt;br&gt;&lt;b&gt;2. React.js 相对于直接操作原生DOM有很大的性能优势， 背后的技术支撑是基于virtual DOM的batching 和diff。&lt;/b&gt;&lt;br&gt;&lt;br&gt;原生DOM 操作慢吗？&lt;br&gt;&lt;br&gt;做为一个浏览器内核开发人员， 我可以负责任的告诉你，慢。\n&lt;br&gt;你觉得只是改变一个字符串吗？&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/96f472167b8944d42aabe61393c68241_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;400&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic2.zhimg.com/96f472167b8944d42aabe61393c68241_r.jpg&quot;&gt;我们来看看你在插入一个DOM元素的时候，发生了什么.&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/fe8b480c0016fd023b25bd4c4e8f3914_b.png&quot; data-rawwidth=&quot;559&quot; data-rawheight=&quot;225&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;559&quot; data-original=&quot;https://pic1.zhimg.com/fe8b480c0016fd023b25bd4c4e8f3914_r.png&quot;&gt;&lt;br&gt;实际上，浏览器在收到更新的DOM Tree需要立即调用HTML Parser对传入的字符串进行解析，这个，呃，耗的时间可不是字符串替换可以比的哦 .&lt;br&gt;&lt;br&gt;(&lt;i&gt;其实你们已经处于一个好时代了，换做几年前，浏览器还可能会花几秒到几分钟给你Reflow一下）&lt;/i&gt;&lt;br&gt;&lt;br&gt;这个例子还算简单的了，如果你插入的标签里面包括了脚本，浏览器可能还需要即时编译的你脚本(JIT).\n&lt;br&gt;&lt;br&gt;&lt;i&gt;这些时间都算在你的DOM操作中的哦&lt;b&gt;。&lt;/b&gt;&lt;/i&gt;&lt;br&gt;&lt;br&gt;我们再来看看统计。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/93799d4434552f68d7c8fcf9a39bdf6b_b.png&quot; data-rawwidth=&quot;523&quot; data-rawheight=&quot;237&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;523&quot; data-original=&quot;https://pic4.zhimg.com/93799d4434552f68d7c8fcf9a39bdf6b_r.png&quot;&gt;&lt;br&gt;131 ms &lt;b&gt;都花在了Loading 里面(ParseHTML)&lt;/b&gt;。&lt;br&gt;&lt;br&gt;&lt;i&gt;另外注意一些细节，Profiler 报告整个函数使用了418ms, 因为有些时间在JS里面是统计不到的，比如Rendering的时间， 所以， 多用Profiler.&lt;/i&gt;&lt;br&gt;&lt;br&gt;我们再来看一个图， 这个原测试用例的Profiling， 1000 Tag 一次插入&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/3ffd05a65cdafc445226abfb79a04be3_b.png&quot; data-rawwidth=&quot;479&quot; data-rawheight=&quot;194&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;479&quot; data-original=&quot;https://pic4.zhimg.com/3ffd05a65cdafc445226abfb79a04be3_r.png&quot;&gt;&lt;br&gt;呃，如果你还没有看出端倪的话，我提示一下: 这里的解析时间(Loading)降到了13 ms.&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;同样的数据（1000 元素），分20次解析， 每次解析50个，耗时是 一次性解析的 10 倍左右。。也就是说，有9倍开销，都花在了DOM函数，以及背后的依赖的函数本身的开销上了。&lt;/b&gt; DOM 操作本身可能不耗时，但是建立上下文，层层传递的检查的开销就不容小视了&lt;/i&gt;&lt;b&gt;。\n&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个官方称为”API Overhead”.  改变DOM 结构的调用都有极其高的API Overhead.&lt;br&gt;而对于Overhead高的API，标准解决办法就是两个：&lt;br&gt;&lt;br&gt;Batching 和 Diff.&lt;br&gt;&lt;br&gt;Diff 大家都比较了解， Batching是个啥？ &lt;br&gt;&lt;br&gt;想象在一个小山村里面，只有一条泥泞的公路通向市区，公交车班次少，每次要开半个小时，如何保证所有乘客最快到达目的地？\n&lt;br&gt;&lt;br&gt;&lt;i&gt;搜集尽量多的乘客，然后一次性的把它们运往市区， 这个就是Batching.\n&lt;/i&gt;&lt;br&gt;&lt;br&gt;如果你搜下React.js 的文档里面。这里有专门提到：\n&lt;br&gt;&lt;blockquote&gt;“ You may be thinking that it's expensive to change data if there are a large number of nodes under an owner. The good news is that JavaScript is fast and `render()` methods tend to be quite simple, so in most applications this is extremely fast. Additionally, the bottleneck is almost always the DOM mutation and not JS execution. React will optimize this for you using batching and change detection.“\n&lt;/blockquote&gt;&lt;br&gt;&lt;i&gt;这个才是React.js 引入Virtual DOM 的精髓之一， &lt;b&gt;把所有的DOM操作搜集起来，一次性提交给真实的DOM&lt;/b&gt;. &lt;/i&gt;&lt;br&gt;&lt;br&gt;Batching 或者 Diff, 说到底，都是为了尽量减少对慢速DOM的调用。&lt;br&gt;&lt;br&gt;&lt;i&gt;类似技术在游戏引擎里面（对 OPENGL 的Batch), 网络传输方面( 报文的Batch), 文件系统读写上都大量有使用。&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;3. React.js 的使用的virtual DOM在Javascript Engine中也有执行效率的优势&lt;/b&gt;&lt;br&gt;&lt;br&gt;Virtual DOM 和 DOM 在JS中的执行效率比较&lt;b&gt;。&lt;/b&gt;&lt;br&gt;&lt;br&gt;－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－&lt;br&gt;前方高能预警， 一般前端开发不需要了解那么多，不过如果你如果都看懂了，来欧朋浏览器面试吧 :) &lt;br&gt;&lt;br&gt;抛开浏览器内核开销不算， 从Javascript 执行效率来讲，Virtual DOM 和DOM之间到底有多大差别呢？ &lt;br&gt;&lt;br&gt;这个其实可以回答Virtual DOM 到底有多快这个问题上面。 了解这个问题，需要了解浏览器内核，DOM以及网页文档到底都是什么关系。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/40b07ca3f65089ee272d690dd3b10d2b_b.png&quot; data-rawwidth=&quot;582&quot; data-rawheight=&quot;335&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;582&quot; data-original=&quot;https://pic4.zhimg.com/40b07ca3f65089ee272d690dd3b10d2b_r.png&quot;&gt;&lt;br&gt;很吃惊吧。\n&lt;br&gt;&lt;br&gt;其实DOM 完全不属于Javascript (也不在Javascript 引擎中存在).   Javascript 其实是一个非常独立的引擎，DOM其实是浏览器引出的一组让Javascript操作HTML文档的API而已。\n&lt;br&gt;&lt;br&gt;&lt;i&gt;如果你了解Java的话，这个相当于JNI.\n&lt;/i&gt;&lt;br&gt;&lt;br&gt;那么问题就来了,  &lt;b&gt;DOM的操作对于Javascript实际上是外部函数调用&lt;/b&gt;。 每次Javascript 调用DOM时候，都需要保存当前的上下文，然后调用DOM, 然后再恢复上下文。 这个在没有即时编译(JIT)的时代可能还好点。 自从加入即时编译(JIT),  这种上下文开销简直就是。。惨不忍睹。\n&lt;br&gt;&lt;br&gt;我们来顺便写一段Javascript.&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/db43a7ae9e45c53c7246c3839d4a4ee5_b.png&quot; data-rawwidth=&quot;408&quot; data-rawheight=&quot;228&quot; class=&quot;content_image&quot; width=&quot;408&quot;&gt;&lt;br&gt;然后在v8里面跑一跑(直接使用v8 sample中的shell ).  由于v8 单独的Shell中不存在DOM， 我们用print代替， print 是外部函数， 调用它和调用DOM是一回事。&lt;br&gt;&lt;br&gt;调用的堆栈看起来是这样的。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/310b77624852fffe1e2160d7acfed8af_b.png&quot; data-rawwidth=&quot;570&quot; data-rawheight=&quot;236&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;570&quot; data-original=&quot;https://pic4.zhimg.com/310b77624852fffe1e2160d7acfed8af_r.png&quot;&gt;&lt;br&gt;这里可以看到V8是如何执行JIT代码，然后JIT代码调用到Print的过程  (JIT 代码就是没有符号的那一堆，Frame #1 - #5.）&lt;br&gt;&lt;br&gt;我们来看看v8 JIT 生成的代码.&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/87d461d6e5f85a11cb6a99d78a2c0a9b_b.png&quot; data-rawwidth=&quot;583&quot; data-rawheight=&quot;128&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;583&quot; data-original=&quot;https://pic4.zhimg.com/87d461d6e5f85a11cb6a99d78a2c0a9b_r.png&quot;&gt;&lt;br&gt;看到这里还算合理， 一个call调走，不过我们来看看 CallApiAccessorStub是个什么鬼：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/3ad42d89d25a6fc48b3965ad88399892_b.png&quot; data-rawwidth=&quot;257&quot; data-rawheight=&quot;261&quot; class=&quot;content_image&quot; width=&quot;257&quot;&gt;&lt;br&gt;60+ 条额外指令用于保存上下文和堆栈检查。。&lt;br&gt;我靠，我就调个函数，你至于吗..&lt;br&gt;&lt;br&gt;&lt;i&gt;当然，现代的JIT技术已经进步很多了，换到几年前，这个函数直接就不JIT了 (不编译了, 在V8中即不优化，你懂的，慢10到100倍）.&lt;/i&gt;&lt;br&gt;&lt;br&gt;而Virtual DOM的执行完全都在Javascript 引擎中，完全不会有这个开销。&lt;br&gt;&lt;br&gt;什么，你说我第一个测试结果里面两边的速度就差一半嘛（117 ms vs 235 ms)，react.js还只是做了一次DOM操作，原生的可是做了50次哦， 你说的virtual DOM框架完全不会有开销是几个意思？&lt;br&gt;&lt;br&gt;我们来稍微改改测试代码。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/50c0b736b5ae63b0c35c925670ec537e_b.png&quot; data-rawwidth=&quot;576&quot; data-rawheight=&quot;315&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;576&quot; data-original=&quot;https://pic3.zhimg.com/50c0b736b5ae63b0c35c925670ec537e_r.png&quot;&gt;给你们每个条目加个标示符，这样每次更新的DOM都不一样，我看React.js你怎么做Diff, 哇哈哈哈哈哈.&lt;br&gt;&lt;br&gt;然后你可以多点几次React的测试按钮，一般来说来，第二次以后, 你就可以看到性能稳定在这个数字。\n&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/88388ee7e8345d256bed0ee90a942083_b.png&quot; data-rawwidth=&quot;638&quot; data-rawheight=&quot;359&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;638&quot; data-original=&quot;https://pic4.zhimg.com/88388ee7e8345d256bed0ee90a942083_r.png&quot;&gt;&lt;br&gt;这个是个什么情况？ 这个可不是React.js Diff的功劳哦？因为我们每次的更新都是完全不同的，它木有办法占便宜做Diff哦。。\n&lt;br&gt;&lt;br&gt;这个其实是Javascript 引擎的工作特性引起。Javascript 引擎目前用的都是即时编译(JIT). 所以\n&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;&lt;b&gt;第一次点击运行的时候所耗的时间 ＝ 框架被编译的时间(JIT) +  执行时间&lt;/b&gt;&lt;/i&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;&lt;b&gt;之后执行的时间 ＝ 执行时间。&lt;/b&gt;&lt;/i&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;所以, &lt;b&gt;53 ms那个才是Virtual DOM 的真实执行性能哦, 是不是觉得好快呀&lt;/b&gt;。&lt;br&gt;&lt;br&gt;&lt;i&gt;当然, v8的JIT方法还要特殊一些, 他是两次编译的, 第一次粗编译，第二次会把执行很多的函数进行精细编译. 所以第三次以后才是最快的时间。&lt;/i&gt;&lt;br&gt;&lt;i&gt;&lt;br&gt;两次编译虽然很有趣也很有用，鉴于这个帖子实在是太长了，这里就不讲了。 有兴趣看这个:&lt;/i&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//wingolog.org/archives/2011/07/05/v8-a-tale-of-two-compilers&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;v8: a tale of two compilers -- wingolog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;原测试用例在测react第二次运行的时候会很慢（大概4s左右),  原因是这个：&lt;/i&gt;&lt;br&gt;onClick: this.select.bind(null, this.props.data[i])&lt;br&gt;&lt;br&gt;bind 会每次创建一个新的函数对象，于是原测试里面每次点击会创建1000个新的函数对象。恭喜原作者，JS的内存真是不要钱。。&lt;br&gt;我的测试用例里面暂时去掉了，彻底修复可以不用bind, 指向一个函数即可，然后用其他方法为每个列表项保存状态。&lt;br&gt;&lt;br&gt;-------------------------------------------------------------------------------------------------------------&lt;br&gt;回答  @&lt;a href=&quot;http://www.zhihu.com/people/yang-wei-xian&quot; class=&quot;internal&quot;&gt;杨伟贤&lt;/a&gt;&lt;br&gt;&lt;br&gt;你用的技巧称为是 &lt;i&gt;DocumentFragment,  &lt;/i&gt;参见&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/TR/REC-DOM-Level-1/level-one-core.html%23ID-B63ED1A3&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Document Object Model (Core) Level 1&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;这个改善性能技巧早期流行其实主要是防止浏览器在JS修改DOM的时候立即Reflow。(防止你在修改了DOM以后立即取元素大小一类的）。&lt;br&gt;&lt;br&gt;这个技巧在现代浏览器里面基本没有作用，因为，基本上Reflow和Layout都是能延迟就延迟。&lt;br&gt;不相信的话你这样写&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;var tplDom = document.createElement('div');\ncontainer.appendChild(tplDom);\ntplDom.innerHTML = html;\nhtml = '';\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;tplDom先加入global DOM然后在修改，这个算是刷global DOM了吧？&lt;br&gt;在chromium里面没有任何区别的。&lt;br&gt;我更改以后的测试用例里面就是这样写的：）&lt;br&gt;&lt;br&gt;所以，这个和刷不刷global DOM没有任何关系的。你看到的性能提升，其实是避免了&lt;br&gt;container.innerHTML += html;&lt;br&gt;中+=, 因为+= 是其实是一个替代操作，而不是增量操作。&lt;br&gt;&lt;br&gt;另外, 你测出来的只是插入新元素时间而代码里面还需要删掉之前的节点的代码.&lt;br&gt;因为对于react.js&lt;br&gt;第一次运行时间 ＝ JIT时间+插入时间&lt;br&gt;多次以后 = 更新节点时间。 （v8优化器原因）&lt;br&gt;&lt;br&gt;而更新节点 ＝ 删除节点＋插入新的节点 （你也可以用replaceChild, 性能没有能测出来差异）.&lt;br&gt;&lt;br&gt;react.js由于第一次运行带着JIT,所以没有办法剥离出来纯插入时间。于是加入删除之前节点的代码，然后多次运行测试更新节点的时间才是有比较性的。&lt;br&gt;&lt;br&gt;修改后的测试用例在&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//fredrikluo.github.io/testcases/reactjstest-1.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;fredrikluo.github.io/te&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;stcases/reactjstest-1.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;你可以试试，这个是我这里测出来的结果。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/8bb3f203a2c082ef6b1e821d7d7d9a9f_b.png&quot; data-rawwidth=&quot;597&quot; data-rawheight=&quot;192&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;597&quot; data-original=&quot;https://pic4.zhimg.com/8bb3f203a2c082ef6b1e821d7d7d9a9f_r.png&quot;&gt;&lt;br&gt;很接近了是不是？不可否认这是一个非常好的优化，&lt;br&gt;是不是觉得React已经没有什么优势？&lt;br&gt;&lt;br&gt;少年，你太天真了，浏览器这个世界很险恶的，我刚才说Layout和Reflow被怎么了来着？ &lt;br&gt;被延迟了。。&lt;br&gt;&lt;br&gt;我们来看看profiler的输出。&lt;br&gt;React 的性能统计&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/eae5800183ba03b92c54182f0e3cf666_b.png&quot; data-rawwidth=&quot;518&quot; data-rawheight=&quot;235&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;518&quot; data-original=&quot;https://pic3.zhimg.com/eae5800183ba03b92c54182f0e3cf666_r.png&quot;&gt;Raw的性能统计&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/372dd6baf138b3a93ee58a1ccaada0d5_b.png&quot; data-rawwidth=&quot;524&quot; data-rawheight=&quot;234&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;524&quot; data-original=&quot;https://pic2.zhimg.com/372dd6baf138b3a93ee58a1ccaada0d5_r.png&quot;&gt;&lt;br&gt;事实上React的耗用的时间的是80m, 而优化后的Raw也有144 ms,  接近一半的时间。&lt;br&gt;&lt;br&gt;&lt;b&gt;为蜀莫呢？&lt;/b&gt;&lt;br&gt;&lt;br&gt;有个31ms 和95ms的rendering差别，而在这个例子里面， rendering = Recalculate Style 和Layout（参见上面的堆栈，或者你自己也可以试试）。而这个差异，在JS里面是测不到了，因为， 呃，他们被延迟了。。&lt;br&gt;&lt;br&gt;原因也很简单，React 修改的粒度更小。&lt;br&gt;&lt;br&gt;virtual DOM每次用Batch + diff来修改DOM的时候, 假如你有个&amp;lt;span class=''123&quot;&amp;gt; abc&amp;lt;/span&amp;gt;如果只是内容变了，那spanNode.textContent会被换掉, style啥的不会动。 而在原生例子里面，整个spanNode被换掉。&lt;br&gt;&lt;br&gt;&lt;i&gt;浏览器： 你把整个节点都换了，我肯定只能重新计算style和layout了， 怪我咯。&lt;/i&gt;&lt;br&gt;&lt;br&gt;从本质上面讲， react.js 和自己写算法直接操作原生的DOM是这样一个关系：&lt;br&gt;&lt;br&gt;&lt;b&gt;修改的内容 -&amp;gt; React.js -&amp;gt; DOM操作&lt;/b&gt;&lt;br&gt;&lt;b&gt;修改的内容 -&amp;gt; 你的算法 -&amp;gt;  DOM操作&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;React.js 和你的算法最后都是把特定的意图翻译成一组DOM操作，差别只是谁的翻译更加优化而已&lt;/b&gt;&lt;br&gt;&lt;br&gt;而原回答其实想说明的时候，react.js 在使用virtual DOM这套算法以后DOM操作在通常情况下比自己的写是优化非常多的。这个其实是对“使用react.js和（用自己算法）操作DOM哪个快”这个问题的直接回答。 而你当然可以进一步优化算法，在特定的环境下面接近或者超过React, 不过，这个在实际开发中并没有适普性。&lt;br&gt;&lt;br&gt;这个其实和问编译器和手动汇编哪个快是一模一样&lt;br&gt;&lt;br&gt;&lt;b&gt;算法 -&amp;gt; 原代码 -&amp;gt;编译器－&amp;gt;汇编&lt;/b&gt;&lt;br&gt;&lt;b&gt;算法 -&amp;gt;手动翻译-&amp;gt;汇编&lt;/b&gt;&lt;br&gt;&lt;br&gt;而在目前CPU的复杂程度下，手动翻译反而大部分时间比不上编译器， 复杂度越高，需要考虑的变量越多，越容易用算法来实现而人脑总是爱忘东西的。&lt;br&gt;&lt;br&gt;不可否认是原测试用例里面的不管是测raw还是测react的的算法都写得很有问题。所以对原回答中只是尽量不做大的修改来说明问题而已。&lt;br&gt;&lt;br&gt;最后还要感谢你的提问，否则没法讲得这个深度，其实在写virtual DOM JIT那一段的时候我就很犹豫是不是讲得有点过了。&lt;br&gt;-----------------------------------------------------------------------------------------------------------&lt;br&gt;回答  &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt;&lt;br&gt;呃。。你说的这句话是吧 － “发明出来就是为了提高性能” 以及 “没有那么多哲学方面的东西需要承载”。&lt;br&gt;既然我们讨论的是“发明出来”， 我们就来看看原团队的意思咯， 戳这里， 这个原团队的blog post：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//facebook.github.io/react/blog/2013/06/05/why-react.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Why did we build React?&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;－－ 摘要如下：&lt;br&gt;&lt;b&gt;Why did we build React?&lt;/b&gt;&lt;br&gt;There are a lot of JavaScript MVC frameworks out there. Why did we build React and why would you want to use it?&lt;br&gt;&lt;b&gt;React isn't an MVC framework.&lt;/b&gt;&lt;br&gt;....&lt;br&gt;&lt;b&gt;React doesn't use templates.&lt;/b&gt;&lt;br&gt;...&lt;br&gt;&lt;b&gt;Reactive updates are dead simple&lt;/b&gt;&lt;br&gt;React really shines when your data changes over time.&lt;br&gt;....&lt;br&gt;Because this re-render is so fast (around 1ms for TodoMVC), the developer doesn't need to explicitly specify data bindings. We've found this approach makes it easier to build apps&lt;br&gt;....&lt;br&gt;这个才是全文重点, 请再次默念下“&lt;b&gt;really shines&lt;/b&gt;”&lt;br&gt;&lt;br&gt;这篇Post翻译成大白话就是：&lt;br&gt;&lt;b&gt;哥做了一个框架， 有这个功能，还有这个功能，但是最牛逼的功能就是：你的数据变的时候渲染的特别快哦, 快得你们爱怎么搞怎么搞。&lt;/b&gt;&lt;br&gt;&lt;br&gt;真的不是性能嘛？...&lt;br&gt;&lt;br&gt;PS: 虽然我觉得你说得很有道理，他们都是react.js的好处啦，不过就从&quot;why&quot;来说&lt;br&gt;&lt;ul&gt;&lt;li&gt;但是“通过引入函数式思维来加强对状态的管理”， 貌似木有在“why”里面提到？&lt;br&gt;&lt;/li&gt;&lt;li&gt;第三方那个我木有找到引用。&lt;/li&gt;&lt;li&gt;而“Virtual DOM 可以渲染到非 DOM 的后端从而催生 ReactNative”, 是在：“Because React has its own lightweight representation of the document, we can do some pretty cool things with it:” &lt;br&gt;&lt;/li&gt;&lt;/ul&gt;      听起来貌似是：&lt;br&gt;     “React really shines when your data changes over time.&lt;br&gt;&lt;p&gt;     In a traditional JavaScript application, you need to look at what data changed and imperatively make changes to the DOM to keep it up-to-date. Even AngularJS, which provides a declarative interface via directives and data binding &lt;a href=&quot;//link.zhihu.com/?target=https%3A//code.angularjs.org/1.0.8/docs/guide/directive%23reasonsbehindthecompilelinkseparation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;requires a linking function to manually update DOM nodes&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;      React takes a different approach.”&lt;br&gt;的副产品哦(by-product).</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/b94c1db9c8dc910b47ef6f9fdbcb534d_200x112.png\" data-rawwidth=\"517\" data-rawheight=\"352\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/b94c1db9c8dc910b47ef6f9fdbcb534d_r.png\">\n鉴于有人表示没有看懂。 下面是结论: 题主测试结果反常是因为测试用例构造有问题。React.js 相对于直接操作原生DOM有很大的性能优势， 背后的技术支撑是基于virtual DOM的batching 和diff. React.js 的使用的virtual DOM 在Javascript Engine中也有执行效率…\n\n<a href=\"/question/31809713/answer/54833728\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-13\" target=\"_blank\" href=\"/question/31809713/answer/54833728\">编辑于 2015-07-22</a></p>\n\n",
    "link": "https://zhihu.com/question/31809713/answer/54833728"
  },
  {
    "question": "\n前端开发中有什么经典的轮子值得自己去实现一遍？\n",
    "author": "方应杭",
    "content": "\n\n<textarea hidden class=\"content\">（光感谢不点赞是什么情况。。）&lt;br&gt;&lt;br&gt;你只要去实现那些每年被重新实现过一遍的轮子就行了。&lt;br&gt;&lt;br&gt;UI 轮子&lt;br&gt;轮播、Tab、懒加载……&lt;br&gt;照着饿了么UI库、Bootstrap 挨个实现就好。&lt;br&gt;做这种轮子比较考验 CSS 功力，你需要用尽量少的代码适应尽量多的场景。&lt;br&gt;&lt;br&gt;流行 UI 模式的实现&lt;br&gt;瀑布流、视差滚动、fullpage等。&lt;br&gt;原理简单又炫酷，何乐不为。&lt;br&gt;&lt;br&gt;DOM 操作的轮子&lt;br&gt;实现得最好的当然就是 jQuery。由于 jQ 这么流行，所以你实现的结果很可能跟 jQ 的 API 一模一样。&lt;br&gt;因此现在很少有人造这个轮子，但是在十年前，大家都是在早 DOM 轮子。&lt;br&gt;这要求你对 DOM 和 API 设计有很多经验。&lt;br&gt;至于 Virtual DOM，你可以在某种程度上认为是一种 DOM API 的封装，不过它的难点其实不在这里。&lt;br&gt;&lt;br&gt;JS 缺失的标准库的实现&lt;br&gt;Date 很烂，所以有了 Moment&lt;br&gt;Array 很烂，所以有了 Underscore Lodash&lt;br&gt;JS 没有加载器，所以有了 require.js 等&lt;br&gt;JS 自定义事件不好用，所以你可以自己造一个&lt;br&gt;有的浏览器不支持 ES5，所以有了 es5shim。&lt;br&gt;移动设备需要滑动事件，你来造一个轮子吧。&lt;br&gt;模板引擎……就一个正则替换还好意思叫引擎，实现这种轮子的第一要务是如何给出漂亮的 debug 信息，至于渲染速度的，我认为只能排在第二位。&lt;br&gt;&lt;br&gt;&lt;br&gt;框架轮子&lt;br&gt;MVC 可以造轮子，虽然不流行了，但对老项目很有用。&lt;br&gt;MVVM 在不考虑 IE 的前提下造一个轮子也绝非难事。&lt;br&gt;FLUX 单向数据流的轮子就更好造了。&lt;br&gt;&lt;br&gt;工程化轮子&lt;br&gt;现在搞前端不会工程化怎么行。&lt;br&gt;基于 Gulp 做一套自动化构建尽显逼格。&lt;br&gt;&lt;br&gt;所以你看，前端搞了这么多年，只不过就是每年把上面轮子重新造一遍而已（逃</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n（光感谢不点赞是什么情况。。） 你只要去实现那些每年被重新实现过一遍的轮子就行了。 UI 轮子 轮播、Tab、懒加载…… 照着饿了么UI库、Bootstrap 挨个实现就好。 做这种轮子比较考验 CSS 功力，你需要用尽量少的代码适应尽量多的场景。 流行 UI 模式的实…\n\n<a href=\"/question/29380608/answer/130729912\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-11-10\" target=\"_blank\" href=\"/question/29380608/answer/130729912\">编辑于 2016-11-11</a></p>\n\n",
    "link": "https://zhihu.com/question/29380608/answer/130729912"
  },
  {
    "question": "\n在你的日常开发中遇到过哪些常用布局是无法用纯 CSS 实现的？\n",
    "author": "一丝",
    "content": "\n\n<textarea hidden class=\"content\">还记得我们第一次在 FrontPage 或者 Dreamweaver 写的第一个页面吗，还记得曾经 box-sizing 都没有的时代吗？躲在学校机房的角落，我们如同孩子捏着泥人一般捏塑着心中的页面，也捏塑着梦想。&lt;br&gt;&lt;br&gt;很多年过去了，CSS 伴随着青涩的我们一起成长，如今也已从一个懵懂泥人变成了亭亭玉立的少女，婀娜多姿。&lt;br&gt;&lt;br&gt;CSS 发展到今天，毫不夸张的说，已经成为最广泛的布局描述语言。从刀耕火种的 Table 布局到今天的 Flex 弹性布局，已经实现从传统的一维排版到真正的二维布局的蜕变。&lt;br&gt;&lt;br&gt;但美好外表下还是有诸多遗憾的，别说话（……）容我一一道来。&lt;br&gt;&lt;br&gt;1. 多行文字溢出显示省略号&lt;br&gt;几乎每个人 「CSS 人」都会遇到的疑惑。我们知道单行的通过 text-overflow: ellipsis 来实现：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.foo {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;但是多行的 CSS 规范中并没有相关的功能。Opera 在非 Blink 内核的版本实现了私有的 &lt;b&gt;text-overflow:-o-ellipsis-lastline&lt;/b&gt;，WebKit 也可以通过一些奇淫技巧来实现，于是有了这个 Demo：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jsbin.com/ufifoq/12/edit%3Fhtml%2Ccss%2Coutput&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JS Bin - Collaborative JavaScript Debugging&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;2.  最大行数&lt;br&gt;&lt;a data-hash=&quot;7df657f88c64f3aa3c9da3bd96ddf032&quot; href=&quot;//www.zhihu.com/people/7df657f88c64f3aa3c9da3bd96ddf032&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@张立理&quot; data-tip=&quot;p$b$7df657f88c64f3aa3c9da3bd96ddf032&quot; data-hovercard=&quot;p$b$7df657f88c64f3aa3c9da3bd96ddf032&quot;&gt;@张立理&lt;/a&gt; 提到控制文字宽度的问题，但更多时候我们更需要一个明确控制文字行数属性，规范中有 &lt;b&gt;max-lines&lt;/b&gt; 属性，但至今仍无浏览器问津。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dev.w3.org/csswg/css-overflow-3/%23max-lines&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Overflow Module Level 3&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;3. 更好用的 Flex&lt;br&gt;Flex 对于最后一行的对齐控制以及显性的间距控制也没有实现，虽然规范作者 Tab 计划在 &lt;b&gt;Flex Level 2&lt;/b&gt; 中添加（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//wiki.csswg.org/spec/css-flexbox-2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wiki.csswg.org/spec/css&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-flexbox-2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），但由于 CSS 战线太长，也是遥遥无期。我之前的提议： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/html/ig/zh/wiki/Flex-spacing&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://lists.w3.org/Archives/Public/www-style/2013Apr/0016.html&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;4. 元素查询（Element Queries）&lt;br&gt;媒体查询远远不能满足未来「精细化响应式」的需求，我们急需一个基于元素的响应式功能。社区中已经有相关讨论和 Polyfill 了（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.smashingmagazine.com/blog/2013/06/25/media-queries-are-not-the-answer-element-query-polyfill/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Media Queries Are Not The Answer: Element Query Polyfill&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），我更喜欢 :media 伪类的语法&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/* 当 header 宽度小于等于500px 时，nav 颜色设置为 #eee*/&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;500px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;nav&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#eee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;5. CSS 分页滚动&lt;br&gt;CSS 在发布之初未曾预料如今的网页有如此多的动画和交互，而放眼望去，幻灯片（轮播）已然遍布大街小巷。虽然微软（业界良心）率先发起的 &lt;b&gt;CSS Scroll Snap Points&lt;/b&gt; 在一定程度上可以实现该需求，但还不能明确控制滚动的动画效果。&lt;br&gt;&lt;br&gt;该规范目前进行了较大的改动：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//drafts.csswg.org/css-snappoints/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Scroll Snap Points Module Level 1&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;img {\n    width:500px;\n}\n.photoGallery {\n    width: 500px;\n    overflow-x: auto;\n    overflow-y: hidden;\n    white-space: nowrap;\n    /* Sets up points to which scrolling\n       will snap along x-axis */\n    scroll-snap-points-x: repeat(100%);\n    /* Requires that scrolling always end at a snap point when\n       the operation completes (hard snap) */\n    scroll-snap-type: mandatory;\n}\n\n&amp;lt;div class=&quot;photoGallery&quot;&amp;gt;\n    &amp;lt;img src=&quot;img1.jpg&quot;&amp;gt;\n    &amp;lt;img src=&quot;img2.jpg&quot;&amp;gt;\n    &amp;lt;img src=&quot;img3.jpg&quot;&amp;gt;\n    &amp;lt;img src=&quot;img4.jpg&quot;&amp;gt;\n    &amp;lt;img src=&quot;img5.jpg&quot;&amp;gt;\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&quot;https://pic1.zhimg.com/c9d4b0952e45ab4b851cc4b0ec96e2cc_b.jpg&quot; data-rawwidth=&quot;1260&quot; data-rawheight=&quot;308&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1260&quot; data-original=&quot;https://pic1.zhimg.com/c9d4b0952e45ab4b851cc4b0ec96e2cc_r.jpg&quot;&gt;&lt;br&gt;6. 非矩形布局&lt;br&gt;&lt;br&gt;随着越来越多的移动化手持设备的流行，CSS 布局已经不单单是矩形布局了，圆形的手表，不规则的汽车显示屏等。我们需要重新思考布局的概念了！当前主流浏览器已经支持了 shape-outside 属性，但对于这些新兴设备，我们更需要 shape-inside 属性。更多请参见：CSS Round Display 草案：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dev.w3.org/csswg/css-round-display/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Round Display Level 1&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;想想以后可以给特斯拉显示屏写个酷炫的仪表盘，也是蛮激动的呢！&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;style&amp;gt;\n    #container {\n        shape-inside: display;\n        // the same as circle(50% at 50%, 50%) in a regular round display\n    }\n    #green-box { float: left; }\n    #blue-box { float: right; }\n&amp;lt;/style&amp;gt;\n&amp;lt;div id=&quot;container&quot;&amp;gt;\n    &amp;lt;p&amp;gt;\n        Some inline content\n        &amp;lt;img id=&quot;green-box&quot; src=&quot;green-box.jpg&quot; /&amp;gt;\n        with a float left and float right, in a\n        &amp;lt;img id=&quot;blue-box&quot; src=&quot;blue-box.jpg&quot; /&amp;gt;\n        simple box with a circle shape-inside.\n    &amp;lt;/p&amp;gt;\n&amp;lt;/div&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&quot;https://pic2.zhimg.com/0bb34f95e769f0c815a834fa112f1e15_b.jpg&quot; data-rawwidth=&quot;517&quot; data-rawheight=&quot;461&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;517&quot; data-original=&quot;https://pic2.zhimg.com/0bb34f95e769f0c815a834fa112f1e15_r.jpg&quot;&gt;&lt;br&gt;（关于题主的疑惑，如果搜索过后，短时间内依然无法想出用 CSS 的解决方案，那就用 JS 吧。）&lt;br&gt;&lt;br&gt;先写这么多吧，超过 100 赞再补充哈。&lt;br&gt;&lt;br&gt;2015-11-30 更新：&lt;br&gt;&lt;br&gt;8. 流式 Grid 布局&lt;br&gt;&lt;br&gt;CSS Grid Layout 规范极大的增强了 CSS 二维布局的能力，但是该规范的特性更多的是偏向固定行列的布局。如果要实现响应式的流体布局，还得依靠 CSS3 Media Queries。&lt;br&gt;&lt;br&gt;例如，一个4列2行间距 10px 的布局，用 CSS Grid 可以这样来描述：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;430px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n  &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;150px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#D0C2F5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&quot;https://pic2.zhimg.com/034370e1c797a83c54dcfb23efaa49a1_b.png&quot; data-rawwidth=&quot;472&quot; data-rawheight=&quot;367&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;472&quot; data-original=&quot;https://pic2.zhimg.com/034370e1c797a83c54dcfb23efaa49a1_r.png&quot;&gt; 如果当 视口宽度变为 350px 时我需要显示为3列，目前只能通过 Media Queries 显性的设置 「grid-template-columns」为3列来实现。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;350px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/0e5c84e7984852949fbd1513321d9e2b_b.png&quot; data-rawwidth=&quot;344&quot; data-rawheight=&quot;385&quot; class=&quot;content_image&quot; width=&quot;344&quot;&gt;&lt;br&gt;所以从这点来看，CSS Grid 并不能很好的解决响应式流式布局，断点来适配还是一件比较繁琐的 事情。&lt;br&gt;&lt;br&gt;为了解决这个非常常见的布局场景，规范中后来增补了 repeat( [ auto-fill &lt;a href=&quot;//link.zhihu.com/?target=https%3A//drafts.csswg.org/css-values-3/%23comb-one&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;|&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; auto-fit ]&lt;a href=&quot;//link.zhihu.com/?target=https%3A//drafts.csswg.org/css-values-3/%23comb-comma&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;,&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ) [1]这个函数，我们可以直接这样写：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.grid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;n&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;repeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;minmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1em&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;可惜的是目前还没有浏览器支持，所以这种流式布局我觉得还是放在上文的 Flex 2 中来解决比较方便。&lt;br&gt;&lt;br&gt;1:  &lt;a href=&quot;//link.zhihu.com/?target=https%3A//drafts.csswg.org/css-grid/%23typedef-auto-repeat&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;drafts.csswg.org/css-gr&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;id/#typedef-auto-repeat&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/c9d4b0952e45ab4b851cc4b0ec96e2cc_200x112.jpg\" data-rawwidth=\"1260\" data-rawheight=\"308\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/c9d4b0952e45ab4b851cc4b0ec96e2cc_r.jpg\">\n还记得我们第一次在 FrontPage 或者 Dreamweaver 写的第一个页面吗，还记得曾经 box-sizing 都没有的时代吗？躲在学校机房的角落，我们如同孩子捏着泥人一般捏塑着心中的页面，也捏塑着梦想。 很多年过去了，CSS 伴随着青涩的我们一起成长，如今也已从一个…\n\n<a href=\"/question/31863128/answer/54025549\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-06\" target=\"_blank\" href=\"/question/31863128/answer/54025549\">编辑于 2015-11-30</a></p>\n\n",
    "link": "https://zhihu.com/question/31863128/answer/54025549"
  },
  {
    "question": "\nSea.js作者发布微博:\n应该给 Sea.js 和 KISSY 也树一块墓碑了。\n为啥啊?过时了吗?\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">因为过时了。&lt;br&gt;&lt;br&gt;所谓的过时，并不是指现在就不能用了，而是说出现了明显更加先进的理念（或者标准），这会导致未来它的使用场景大为减少，整体趋势已经步入衰落。&lt;br&gt;&lt;br&gt;随着Web相关标准的推进，有很多框架（库）都过时了。比如：&lt;br&gt;&lt;br&gt;JavaScript新的模块标准导致了SeaJS和RequireJS的过时&lt;br&gt;原生选择器的良好支持，导致人们对jQuery不再那么依赖&lt;br&gt;Array和Object上面一些新特性的出现，导致underscore和lodash的作用减弱&lt;br&gt;&lt;br&gt;与此同时，一些专注于做shim或者polyfill的库反倒会比较时髦，因为它们的定位非常明确：扶上马，送一程。&lt;br&gt;&lt;br&gt;然后，Angular，Backbone，Knockout，这一大票东西，除非革自己的命，否则全部过时了。&lt;br&gt;&lt;br&gt;再来看看Kissy，这也是一个时代的产物，在同一个时期，都很多类似YUI或者jQuery UI的东西，然而，它们都衰落了，不再适应新的时代。我们将来不需要用那样的方式编写前端框架，不需要用那样的方式编写界面组件，永远不要停下自己的脚步。&lt;br&gt;&lt;br&gt;中堂大人教导我们：一代人做一代人的事情。上一代前端框架/库都已经基本完成使命了，让我们默默记住并怀念它们。&lt;br&gt;&lt;br&gt;（再次强调，过时、衰落，都代表着下降趋势，而不是说你现在就不能用了，仍然会有合适的场景，比如你要支持ie6之类，在你的场景没有与时俱进之前，技术选型也是不能与时俱进的。将来宣传上有偏差，是要负责任的……）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n因为过时了。 所谓的过时，并不是指现在就不能用了，而是说出现了明显更加先进的理念（或者标准），这会导致未来它的使用场景大为减少，整体趋势已经步入衰落。 随着Web相关标准的推进，有很多框架（库）都过时了。比如： JavaScript新的模块标准导致了SeaJ…\n\n<a href=\"/question/34756861/answer/59764534\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/34756861/answer/59764534\">发布于 2015-08-18</a></p>\n\n",
    "link": "https://zhihu.com/question/34756861/answer/59764534"
  }
]