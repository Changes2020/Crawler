[
  {
    "question": "\n一份优秀的前端开发工程师简历是怎么样的？\n",
    "author": "拔赤",
    "content": "\n\n<textarea hidden class=\"content\">简历不仅仅是履历，它的重要作用是&lt;u&gt;&lt;b&gt;展示能力&lt;/b&gt;&lt;/u&gt;！！！&lt;br&gt;&lt;br&gt;在阿里常年招聘，筛过各式各样的简历，每到招聘季，筛简历、面试过程非常耗精力，当然，原因之一是我想招非常优秀的人，宁可多花些时间，另一方面，除了那些不合格的简历之外，还有好多简历语焉不详，不得不在电面时反复确认，同时为了兼顾应聘者感受，又要装作很职业的样子跟他做一些互动，往往这部分有大量被筛掉的人，这侵占了我的大片时间。为了提高这部分人的简历通过（面试）的效率，列几点建议：&lt;br&gt;&lt;br&gt;&lt;b&gt;第一，自荐简历一定要署名&lt;/b&gt;&lt;br&gt;&lt;br&gt;招聘季的招聘信息发出去后，邮箱会收到大量简历，邮件标题和附件基本上一大半都是不署名的。简历评估+电面之后，不会每个简历都会写完整评价录入系统，特别是一些拿不准的简历，想 Hold 一下，等处理完全部之后再翻出来看看，但当 review 这些简历时，从邮件列表中看到的往往是这样的：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/e68b6542497a963a0f8bc8d2863c9193_b.png&quot; data-rawwidth=&quot;1082&quot; data-rawheight=&quot;1016&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1082&quot; data-original=&quot;https://pic4.zhimg.com/e68b6542497a963a0f8bc8d2863c9193_r.png&quot;&gt;&lt;br&gt;早就不记得哪个邮件放的是谁的简历，再挨个去翻附件（有的是PDF，有的是Word，有的是 HTML，有的干脆是一个 zip，有的是一个网址，有的干脆把简历粘贴在邮件正文。。。）去对当初写的评价，很耗时，效率奇低。即使最后翻到要找的简历，也已经大大减分了。所以，如果自荐简历的话，一定要在邮件标题、简历附件文件名上写清楚，谁、应聘什么岗位、建议层级（初级、资深、专家），好歹我下载完附件之后不用再重命名了。&lt;br&gt;&lt;br&gt;&lt;b&gt;第二，务必要有 word 或 pdf 文件的简历&lt;/b&gt;&lt;br&gt;&lt;br&gt;现在好多人简历直接挂网上，或者是 HTML 的，这种简历我处理起来很费劲。阿里内部的招聘系统支持 word 和 pdf 格式支持的最好，我在录入系统时，上传完附件后好多字段直接就被系统读出来了，HTML 的简历支持的最差，传完附件我还要一个个手工去填，花精力在这上面是完全没意义的，而且从我的经验来看，一页 HTML 简历源码能表现的东西实在有限，毕竟我们现在不招初级（P5及以下）前端了，所以 word 和 pdf 格式的载体足够了，多花精力放在简历内容上。&lt;br&gt;&lt;br&gt;&lt;b&gt;第三，简历要表现出亮点，最好有作品&lt;/b&gt;&lt;br&gt;&lt;br&gt;前端技术现在也分化的厉害，不严格划分的话，有 NodeJS、H5、Hybrid、架构和业务研发等方向，现在库和规范很多，但每个分支的难度、技术基线都类似（比如达到资深所消耗的时间都差不多），所以全栈通才固然好，每个方向都深入有点太难为人，但至少某一个方向要非常精钻非常深入。所以简历里要重点标出这个长处。实际上九成的简历里的“技能”部分几乎都是一样的，都差不多把前端用到的技术罗列一遍，毫无意义的占据简历中的黄金地段。&lt;br&gt;&lt;br&gt;所以，既然全栈不易，不如把自己最擅长的那个语言或技术高亮加粗出来，面试的时候我就直接绕过其他，专从这个“高亮加粗”部分来做一些技术探底了，以此来引导面试官来问你擅长的部分，更有利于你扬长避短。&lt;br&gt;&lt;br&gt;技术探底一般怎么做？看作品！如果擅长 Node，就看看 NPM 上提交的模块，install 下来演示下，讲讲核心代码。如果是一个组件，就直接看 Demo，讲设计封装思路。如果是一套脚手架工具，直接画架构图，讲原理和适用场景。如果是项目，那就 show 下你作为 PM 发的 Release 邮件！作品不仅仅是这些，也可以是技术专利、设计方案、成功的带人案例、成功的团建案例等，只要内容充实接地气，脉略（可以是代码、也可以是一件事）清晰，show 的过程中两眼放光唾沫星子乱飞，有这个感觉就对了。所以，简历里要适当带有这些储备好的作品，备着面试时狂秀一下。&lt;br&gt;&lt;br&gt;&lt;b&gt;第四，突出重点，展示能力&lt;/b&gt;&lt;br&gt;&lt;br&gt;现在招一个能干活的人不难，难的是招一个能解决问题的。特别是像阿里这种业务性的研发，既要从业务方那领需求，又要警惕需求陷阱，准确识别出刚性需求，出方案，推执行，Release 结果。所以，应对这每个环节所需的技能，最好在简历里有所表现。具体说就是描述每个项目时，不仅要有背景、过程，还要有&lt;b&gt;你为这个项目带来的结果&lt;/b&gt;。比如这样描述项目：&lt;br&gt;&lt;blockquote&gt;我做了 XX 项目重构，用了 XX 技术方案，克服了 XX 的困难，最终让 XX 这类需求变更可以短平快的被消化，极速研发、快速上线、且数据采集也做到了标准化，研发成本大大降低，数据积累增长迅速，比如 XX ，最后在 XX 产品线中开始推广。&lt;/blockquote&gt;在面试时，这种描述很容易引出有针对性的话题来聊，也正因为简历里有这些铺垫，可以节省大量的面聊时间，更快做出判断。&lt;br&gt;&lt;br&gt;相比之下，这种描述就不好：&lt;br&gt;&lt;blockquote&gt;XX 项目前端研发，用了 AngluarJS，整个项目独立完成，包括整个 Boss 系统的受理收费、商品零售、小灵通短信群发、有线电视代收费、营业员/营业点结账等模块。&lt;/blockquote&gt;这段描述只传达出一个信息，就是你用过 AngularJS。至于当初面临多少种技术选型，如何做取舍选择了 AngluarJS，这些系统模块之间如何基于 AngularJS 进行耦合，有没有涉及前端架构，AngularJS 用的有多深，项目成员分工怎样，如何并行研发？遇到过哪些你认为有价值的问题，并针对此提出应对方案，是代码解决还是组织解决？这个过程要靠面试的时候问答大半天才能搞清楚，问不出来的，基本也就跳过了。要是简历里表达出来，脑子里很嘹喨，面聊也不会很拖沓，能力评价自然会很高。&lt;br&gt;&lt;br&gt;再补充一个，有好多人有写博客写总结的习惯，这个习惯非常好，如果某个总结能和简历里做的项目结合起来，就更好了。&lt;br&gt;&lt;br&gt;&lt;b&gt;第五，全绿的 Github 提交记录&lt;/b&gt;&lt;br&gt;&lt;br&gt;简历里附上 Github，最好提交记录那里泛绿的厉害，如果进到 Github 首页就想点开项目列表，找项目去读，如果看到有那种长时间维护的、Readme 写的清楚的、一本正经的写上“转载注明出处的”，基本上抓起电话就开聊了，结果基本上不会差。&lt;br&gt;&lt;br&gt;&lt;b&gt;第六，其他关注和不关注&lt;/b&gt;&lt;br&gt;&lt;br&gt;关注：每次换工作的离职原因，可量化的工作成果，能代表你最高水平的项目要写详细，标红加粗下划线，在简历中强调出来。&lt;br&gt;&lt;br&gt;不关注：证书、四六级、了解的编程语言（如果不精通就不要写）、你不擅长什么、个人简介。&lt;br&gt;&lt;br&gt;&lt;b&gt;第七，典型问题&lt;/b&gt;&lt;br&gt;&lt;br&gt;技术探底的问题肯定会问一些，此外面试每个人多会问：&lt;br&gt;&lt;br&gt;1. 哪个项目让你最满意、代表你的最高水平？如何做的？&lt;br&gt;2. 让你印象最深刻的一个（技术）难点，害的你搞了很久，最后怎么解的，有什么心得？&lt;br&gt;3. 你做的时间最久的一个项目（或产品），你看到这个项目有哪些问题，你能做什么？&lt;br&gt;4. 你能给我们团队或者产品带来什么？&lt;br&gt;&lt;br&gt;这些问题不是硬性的，主要看平时是不是除了技术还琢磨点别的，特别是在阿里好多 BU 产品基本形态成型的基础上，要做试错、创新、提效、求精、找方向，这种情况下，只具备（完成刚性需求的）技术能力已经远不够了，而更需要辩证的执行。&lt;br&gt;&lt;br&gt;&lt;b&gt;最后&lt;/b&gt;&lt;br&gt;&lt;br&gt;当然，上面这些都是建议，不管你觉得有没有用，坚持一个原则，那就是“简历不仅仅是履历（你做过什么），它的重要作用是&lt;u&gt;展示能力&lt;/u&gt;（你能做好什么）！！！”&lt;br&gt;&lt;br&gt;以上~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/e68b6542497a963a0f8bc8d2863c9193_200x112.png\" data-rawwidth=\"1082\" data-rawheight=\"1016\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/e68b6542497a963a0f8bc8d2863c9193_r.png\">\n简历不仅仅是履历，它的重要作用是<u><b>展示能力</b></u>！！！ 在阿里常年招聘，筛过各式各样的简历，每到招聘季，筛简历、面试过程非常耗精力，当然，原因之一是我想招非常优秀的人，宁可多花些时间，另一方面，除了那些不合格的简历之外，还有好多简历语焉不详，不得…\n\n<a href=\"/question/23150301/answer/88400359\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-02-28\" target=\"_blank\" href=\"/question/23150301/answer/88400359\">编辑于 2016-02-28</a></p>\n\n",
    "link": "https://zhihu.com/question/23150301/answer/88400359"
  },
  {
    "question": "\nREST 架构该怎么生动地理解？\n",
    "author": "覃超",
    "content": "\n\n<textarea hidden class=\"content\">相同问题一起答了！&lt;br&gt;&lt;br&gt;我觉得问题很好，我自己去年创业的时候去学习REST和尝试着设计RESTful API，一直觉得它的文档晦涩难懂，国内也没有找到太好文章。后来一年内反复琢磨了好几遍，和FB+Square的朋友讨论过好几次，有了一个比较清晰的总结。分享如下：&lt;br&gt;&lt;br&gt;&lt;a data-hash=&quot;6ef2e77274cb0719253a577665cf690e&quot; href=&quot;//www.zhihu.com/people/6ef2e77274cb0719253a577665cf690e&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Ivony&quot; data-tip=&quot;p$b$6ef2e77274cb0719253a577665cf690e&quot; data-hovercard=&quot;p$b$6ef2e77274cb0719253a577665cf690e&quot;&gt;@Ivony&lt;/a&gt; 老师的一句话概括很精辟：&lt;br&gt;&lt;b&gt;URL定位资源，用HTTP动词（GET,POST,DELETE,DETC）描述操作。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;--- 简洁版 ---&lt;/b&gt;&lt;br&gt;&lt;br&gt;0. REST不是&quot;rest&quot;这个单词，而是几个单词缩写。但即使那几个单词说出来，也无法理解在说什么 -_-!! （不是要贬低人，是我自己也理解困难）；&lt;br&gt;1. REST描述的是在网络中client和server的一种交互形式；REST本身不实用，实用的是如何设计 RESTful API（REST风格的网络接口）；&lt;br&gt;2. Server提供的RESTful API中，URL中只使用名词来指定资源，原则上不使用动词。“资源”是REST架构或者说整个网络处理的核心。比如：&lt;br&gt;&lt;blockquote&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/newsfeed&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/newsfeed&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 获取某人的新鲜; &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/friends&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 获取某人的好友列表;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/profile&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/profile&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 获取某人的详细信息;&lt;/blockquote&gt;3. 用HTTP协议里的动词来实现资源的添加，修改，删除等操作。即通过HTTP动词来实现资源的状态扭转：&lt;br&gt;&lt;blockquote&gt;GET 用来获取资源，&lt;br&gt;POST 用来新建资源（也可以用于更新资源），&lt;br&gt;PUT 用来更新资源，&lt;br&gt;DELETE 用来删除资源。&lt;/blockquote&gt;比如：&lt;br&gt;&lt;blockquote&gt;DELETE &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://api.qc.com/v1/&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;friends: 删除某人的好友 （在http parameter指定好友id）&lt;br&gt;POST &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/friends&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://api.qc.com/v1/&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;friends: 添加好友&lt;br&gt;UPDATE &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/profile&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/profile&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;: 更新个人资料&lt;br&gt;&lt;br&gt;禁止使用： GET &lt;a href=&quot;//link.zhihu.com/?target=http%3A//api.qc.com/v1/deleteFriend&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.qc.com/v1/deleteFri&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/blockquote&gt;图例：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_b.jpg&quot; data-rawwidth=&quot;1328&quot; data-rawheight=&quot;702&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1328&quot; data-original=&quot;https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_r.jpg&quot;&gt;&lt;br&gt;4. Server和Client之间传递某资源的一个表现形式，比如用JSON，XML传输文本，或者用JPG，WebP传输图片等。当然还可以压缩HTTP传输时的数据（on-wire data compression）。&lt;br&gt;5. 用 HTTP Status Code传递Server的状态信息。比如最常用的 200 表示成功，500 表示Server内部错误等。&lt;br&gt;&lt;br&gt;主要信息就这么点。最后是要解放思想，Web端不再用之前典型的PHP或JSP架构，而是改为前段渲染和附带处理简单的商务逻辑（比如AngularJS或者BackBone的一些样例）。Web端和Server只使用上述定义的API来传递数据和改变数据状态。格式一般是JSON。iOS和Android同理可得。由此可见，Web，iOS，Android和第三方开发者变为平等的角色通过一套API来共同消费Server提供的服务。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;--- 详细版 ---&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;先说REST名称&lt;/b&gt;&lt;br&gt;REST：REpresentational State Transfer = 直接翻译：表现层状态转移。这个中文直译经常出现在很多博客中。尼玛谁听得懂“表现层状态转移”？这是人话吗？&lt;br&gt;首先，之所以晦涩是因为前面主语被去掉了，全称是 Resource Representational State Transfer：通俗来讲就是：资源在网络中以某种表现形式进行状态转移。分解开来：&lt;br&gt;&lt;blockquote&gt;Resource：资源，即数据（前面说过网络的核心）。比如 newsfeed，friends等；&lt;br&gt;Representational：某种表现形式，比如用JSON，XML，JPEG等；&lt;br&gt;State Transfer：状态变化。通过HTTP动词实现。&lt;/blockquote&gt;&lt;br&gt;&lt;b&gt;REST的出处&lt;/b&gt;&lt;br&gt;Roy Fielding的毕业论文。这哥们参与设计HTTP协议，也是Apache Web Server项目（可惜现在已经是 nginx 的天下）的co-founder。PhD的毕业学校是 UC Irvine，Irvine在加州，有着充裕的阳光和美丽的海滩，是著名的富人区。Oculus VR 的总部就坐落于此（虚拟现实眼镜，被FB收购，CTO为Quake和Doom的作者 John Carmack）。&lt;br&gt;众说周知，论文都是晦涩难懂的。当年在CMU读书的时候，很多课程都会安排每周两篇的Paper review。现在回想起来每次写Paper review都是我最为痛苦的时候。REST这篇博士论文毫无疑问更甚。&lt;br&gt;论文地址：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ics.uci.edu/%7Efielding/pubs/dissertation/top.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Architectural Styles and the Design of Network-based Software Architectures&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;REST章节：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ics.uci.edu/%7Efielding/pubs/dissertation/rest_arch_style.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Fielding Dissertation: CHAPTER 5: Representational State Transfer (REST)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;REST那章我初读了，整个论文没有读完 =_=&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic3.zhimg.com/11cdfc60bde58e8545bafe42f0af79ca_r.jpg&quot;&gt;&lt;br&gt;&lt;b&gt;RESTful API&lt;/b&gt;&lt;br&gt;实用的是如何正确地理解 RESTful架构和设计好RESTful API。&lt;br&gt;&lt;br&gt;&lt;b&gt;首先为什么要用RESTful结构呢？&lt;/b&gt;&lt;br&gt;大家都知道&quot;古代&quot;网页都是前端后端融在一起的，比如之前的PHP，JSP等。在之前的桌面时代问题不大，但是近年来移动互联网的发展，各种类型的Client层出不穷，RESTful可以通过一套统一的接口为 Web，iOS和Android提供服务。另外对于广大平台来说，比如Facebook platform，微博开放平台，微信公共平台等，它们不需要有显式的前端，只需要一套提供服务的接口，于是RESTful更是它们最好的选择。在RESTful架构下：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/06ee404783540f0af299042057738a99_b.jpg&quot; data-rawwidth=&quot;550&quot; data-rawheight=&quot;250&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;550&quot; data-original=&quot;https://pic2.zhimg.com/06ee404783540f0af299042057738a99_r.jpg&quot;&gt;&lt;br&gt;&lt;b&gt;Server的API如何设计才满足RESTful要求?&lt;/b&gt;&lt;br&gt;首先是简洁版里面的那几点。外加一些附带的 best practices：&lt;br&gt;1. URL root:&lt;br&gt;&lt;blockquote&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//example.org/api/v1/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;example.org/api/v1/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;*&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//api.example.com/v1/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;api.example.com/v1/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;*&lt;/blockquote&gt;2. API versioning:&lt;br&gt;可以放在URL里面，也可以用HTTP的header：&lt;br&gt;&lt;blockquote&gt;/api/v1/&lt;br&gt;&lt;/blockquote&gt;3. URI使用名词而不是动词，且推荐用复数。&lt;br&gt;BAD&lt;br&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;/getProducts&lt;/li&gt;&lt;li&gt;/listOrders&lt;/li&gt;&lt;li&gt;/retrieveClientByOrder?orderId=1&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;GOOD&lt;br&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;GET /products : will return the list of all products&lt;/li&gt;&lt;li&gt;POST /products : will add a product to the collection&lt;/li&gt;&lt;li&gt;GET /products/4 : will retrieve product #4&lt;/li&gt;&lt;li&gt;PATCH/PUT /products/4 : will update product #4&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;4. 保证 HEAD 和 GET 方法是安全的，不会对资源状态有所改变（污染）。比如严格杜绝如下情况：&lt;br&gt;&lt;blockquote&gt;GET /deleteProduct?id=1&lt;br&gt;&lt;/blockquote&gt;5. 资源的地址推荐用嵌套结构。比如：&lt;br&gt;&lt;blockquote&gt;GET /friends/10375923/profile&lt;br&gt;UPDATE /profile/primaryAddress/city&lt;/blockquote&gt;6. 警惕返回结果的大小。如果过大，及时进行分页（pagination）或者加入限制（limit）。HTTP协议支持分页（Pagination）操作，在Header中使用 Link 即可。&lt;br&gt;7. 使用正确的HTTP Status Code表示访问状态：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/Protocols/rfc2616/rfc2616-sec10.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTTP/1.1: Status Code Definitions&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;8. 在返回结果用明确易懂的文本（String。注意返回的错误是要给人看的，避免用 1001 这种错误信息），而且适当地加入注释。&lt;br&gt;9. 关于安全：自己的接口就用https，加上一个key做一次hash放在最后即可。考虑到国情，HTTPS在无线网络里不稳定，可以使用Application Level的加密手段把整个HTTP的payload加密。有兴趣的朋友可以用手机连上电脑的共享Wi-Fi，然后用Charles监听微信的网络请求（发照片或者刷朋友圈）。&lt;br&gt;如果是平台的API，可以用成熟但是复杂的OAuth2，新浪微博这篇：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//open.weibo.com/wiki/%25E6%258E%2588%25E6%259D%2583%25E6%259C%25BA%25E5%2588%25B6%25E8%25AF%25B4%25E6%2598%258E&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;授权机制说明&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;各端的具体实现&lt;/b&gt;&lt;br&gt;如上面的图所示，Server统一提供一套RESTful API，web+ios+android作为同等公民调用API。各端发展到现在，都有一套比较成熟的框架来帮开发者事半功倍。&lt;br&gt;&lt;br&gt;-- Server --&lt;br&gt;推荐： Spring MVC 或者 Jersey 或者 Play Framework&lt;br&gt;教程：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//spring.io/guides/gs/rest-service/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Getting Started · Building a RESTful Web Service&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- Android --&lt;br&gt;推荐： RetroFit ( &lt;a href=&quot;//link.zhihu.com/?target=http%3A//square.github.io/retrofit/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrofit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ) 或者 Volley ( &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/mcxiaoke/android-volley&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mcxiaoke/android-volley · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; Google官方的被block，就不贴了 ) &lt;br&gt;教程：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//futurestud.io/blog/retrofit-getting-started-and-android-client/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Retrofit โ Getting Started and Create an Android Client&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/angeldevil/p/3757335.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;快速Android开发系列网络篇之Retrofit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- iOS --&lt;br&gt;推荐：RestKit ( &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/RestKit/RestKit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RestKit/RestKit · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; )&lt;br&gt;教程：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//code.tutsplus.com/tutorials/restkit_ios-sdk--mobile-4524&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Developing RESTful iOS Apps with RestKit&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;-- Web --&lt;br&gt;推荐随便搞！可以用重量级的AngularJS，也可以用轻量级 Backbone + jQuery 等。&lt;br&gt;教程：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.javachen.com/2015/01/06/build-app-with-spring-boot-and-gradle/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;blog.javachen.com/2015/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;01/06/build-app-with-spring-boot-and-gradle/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;参考：&lt;br&gt;[1]: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//bourgeois.me/rest/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Some REST best practices&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[2]: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.github.com/v3/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub API v3&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[3]: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/tlhunter/consumer-centric-api-design&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;tlhunter/consumer-centric-api-design · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;最后附带一个彩蛋：&lt;br&gt;Facebook台球表演: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//v.youku.com/v_show/id_XMzYyOTIxMTI4.html%3Ffrom%3Dy1.7-2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;台球1—在线播放&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_200x112.jpg\" data-rawwidth=\"1328\" data-rawheight=\"702\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/7405939b62a73f28846533de08db3a80_r.jpg\">\n相同问题一起答了！ 我觉得问题很好，我自己去年创业的时候去学习REST和尝试着设计RESTful API，一直觉得它的文档晦涩难懂，国内也没有找到太好文章。后来一年内反复琢磨了好几遍，和FB+Square的朋友讨论过好几次，有了一个比较清晰的总结。分享如下： <a data-hash=\"6ef2e77274cb0719253a577665cf690e\" href=\"//www.zhihu.com/people/6ef2e77274cb0719253a577665cf690e\" class=\"member_mention\" data-editable=\"true\" data-title=\"@Ivony\" data-tip=\"p$b$6ef2e77274cb0719253a577665cf690e\" data-hovercard=\"p$b$6ef2e77274cb0719253a577665cf690e\">@Ivony</a>…\n\n<a href=\"/question/27785028/answer/48096396\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-17\" target=\"_blank\" href=\"/question/27785028/answer/48096396\">编辑于 2015-05-17</a></p>\n\n",
    "link": "https://zhihu.com/question/27785028/answer/48096396"
  },
  {
    "question": "\n什么叫组件化开发?\n",
    "author": "aloo",
    "content": "\n\n<textarea hidden class=\"content\">我来答一下这个吧&lt;br&gt;&lt;br&gt;　　从第一代码农写下第一行代码开始到上个世纪的80年代的软件危机，码农一直在考虑一个问题，怎么让写代码容易。抛开找大牛，大神程序员这条路(你以为大牛，大神那么容易找啊)，最后自然而然形成的一套思路就是大团队的协同合作(如同cpu发展史一样，从飙主频到飙核数)。&lt;br&gt;　　协同合作？----- 这个可就麻烦了。。。。团队。。。。还合作。。。。&lt;br&gt;　　几乎所有的码农开始代码的时候(我强调了几乎，不是全部，我强调了开始，不是所有时候)写代码的都是以自我为中心的。怎么解释这种情况呢，就是cow code---牛仔代码，代码风格随意看心情。这就导致了写代码协作起来极为麻烦，为什么呢？我写代码的时候 ，我和上帝知道什么我写的什么，过了一个月就只有上帝知道写的什么了。这个问题在前端领域尤其严重，原因有如下几点：&lt;br&gt;&lt;ol&gt;&lt;ol&gt;&lt;li&gt;因为这个领域没多少年&lt;/li&gt;&lt;li&gt;html/js/css发明出来的时候就只玩玩而已的工具，技术栈非常不成熟。&lt;/li&gt;&lt;li&gt;这个领域人员水平参差不齐。&lt;/li&gt;&lt;li&gt;这个最坑爹了：JS是单线程的，CSS是全局的。。。尼玛。。。。几个人一起搞，一个bug全家玩完。。。&lt;/li&gt;&lt;/ol&gt;&lt;/ol&gt;&lt;br&gt;　　你这让人怎么干活。。。。活那么多。。。。人那么多。。。。相互坑不出活，老板会fire掉大家的。&lt;br&gt;&lt;br&gt;　　很早就有人来想办法解决这个问题，在软代时代就已经有解决这个问题的法宝－－组件化。当然那时候不是那么叫的，是通过两个原则来规范这个问题的，这两个原则就是：内聚性和耦合性。&lt;br&gt;　　意思就是：哥，我想按时回家哄妹子！！！你怎么写代码我不管，你的功能全在这你这儿实现（内聚性），不要让我还帮写你那块功能。另外，哥，求你了，你代码不要block(影响)我的代码（低耦合性）。&lt;br&gt;&lt;br&gt;　　既然解决问题的思路在这儿，前端大牛一代代前赴后继的在这条路上狂奔下去。&lt;br&gt;&lt;b&gt;第一代：YUI&lt;/b&gt;&lt;br&gt;　　200X年的时候，这个框架火啊。把JS的坑都填了以后，比较low的事情就差不多解决完了。就直扑组件化，当时一派盛世，仿佛从此以后，前端界一马平川，大家再也不用一行行代码去写了。&lt;br&gt;　　YUI已经已经给了大家全部。。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/637b96a56b37ef8d95ba7e89aad85bfd_b.png&quot; data-rawwidth=&quot;707&quot; data-rawheight=&quot;431&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;707&quot; data-original=&quot;https://pic2.zhimg.com/637b96a56b37ef8d95ba7e89aad85bfd_r.png&quot;&gt;　　你要写个切换头图----new Y.SlideShow，你要写个时间取值----new Y.Timepicker。&lt;br&gt;　　但是YUI还是倒在历史的车轮下（jquery UI也类似），为什么呢？&lt;br&gt;&lt;br&gt;　　YUI解决了组件化的问题，但是太过于学院派。要求每个用这个程序员如同学校里的好学生一样要熟悉整套UI规范和使用规范。就是你还是要熟悉YUI的CSS，HTML，JS，这样才能用非常爽。这就如同你如果你是个学渣，学霸把卷子给你抄了，如果你没好好听过课，给你抄你都会把&lt;img src=&quot;//www.zhihu.com/equation?tex=%5Cdelta+&quot; alt=&quot;\\delta &quot; eeimg=&quot;1&quot;&gt;抄成8，会把&lt;img src=&quot;//www.zhihu.com/equation?tex=%5Csum_%7Ba%7D%5E%7Bb%7D%7Bx%7D+&quot; alt=&quot;\\sum_{a}^{b}{x} &quot; eeimg=&quot;1&quot;&gt;抄成Eba。&lt;br&gt;&lt;br&gt;&lt;b&gt;第二代 ExtJS&lt;/b&gt;&lt;br&gt;　　ExtJS是踩着YUI的尸体走过来的，第一版的extjs完全是拿yui改的。我第一次写ExtJS写东西的时候，我哭了。。。我感觉我要失业了。太特么，太特么，太特么好用了。这完全是给后端程序员的大大的礼物，看着一个个Java码农写着自己的业务逻辑，顺带着把前端全搞定，而且还比你们一个个前端码农还搞得好得多的时候，完完全全的失落感啊，好像世界已经完全不需要前端了，整个世界都变黑了。。。。。。&lt;br&gt;　　extjs比YUI进步在那儿呢，首先它表面上有一套漂亮的UI。这个实质上就是你不用写CSS了，它帮你写好了。另外你HTML也不用写了，它也帮你写好了。这不对啊，前端页面怎么可以没有HTML和CSS呢----------------extjs都帮你封装到js里了。。。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/a05e918f2c3a057ee5a3067af2961ba7_b.png&quot; data-rawwidth=&quot;103&quot; data-rawheight=&quot;98&quot; class=&quot;content_image&quot; width=&quot;103&quot;&gt;&lt;br&gt;　　这就如同你是个学渣，学霸把卷子给你抄了，而且这回的卷子还都是选择题....&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/532a09bb7dc1b134a23a44b35ef792ce_b.png&quot; data-rawwidth=&quot;192&quot; data-rawheight=&quot;187&quot; class=&quot;content_image&quot; width=&quot;192&quot;&gt; 　　这回是送分啊。。。。。&lt;br&gt;&lt;br&gt;　　可是PM、老板不是吃素的。。。大家都有一身好手艺啊，难分高下啊，那来个附加题吧-----这一块不太好看啊，加个闪闪的效果，那一块左右动动吧。。。。。。。。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/84e0712b10da046e3723243b08bf8b80_b.jpg&quot; data-rawwidth=&quot;241&quot; data-rawheight=&quot;220&quot; class=&quot;content_image&quot; width=&quot;241&quot;&gt;　　extjs用是很简单，定制的话。。。。。。还是改错一处，全局。。。。。&lt;br&gt;&lt;br&gt;&lt;b&gt;      第三代：web component&lt;br&gt;&lt;/b&gt;　　w3c，google什么的都突然有一天发现。iphone一出，我们的数钱数得手抽筋的好日子是快完了吧。以后感觉没web什么事了额。。。。。砸帅哥，霉女一见面都问装啥app，都不用电脑，笔记本，更谈不上看网页了呢。。。。&lt;br&gt;　　gg一想，&quot;不行啊&quot;，然后google买了android，&quot;还是不行啊，我现在这么容易挣这么多钱，我就是把android养大了也不见得挣现在这么多钱额。我还是得把web这块保住啊”，w3c赶紧附和道：“对，对，对”。然后大家都知道了chrome 拼命刷版本从1~47没用几年吧。。。。web的规范是一波波的出啊， es4,5,6,7全出来了。&lt;br&gt;　　然后就有了web component横空出世，带着四个小弟shadow dom/custom element/template/import。&lt;br&gt;&lt;br&gt;　　这回组件化的卷子又有什么不同呢？&lt;br&gt;　　学校太差要被撤，学霸学渣站一条线上了，即然大家都要完，我们一起拼一把吧。&lt;br&gt;　　“好”：学霸，学渣异口同声&lt;br&gt;　　然后学霸帮学渣把卷子都做好了，然后对学渣说：“哥，你写上你名字吧！“&lt;br&gt;&lt;br&gt;　　这次的组件化完完全全不一样了，custom element的出来的组件，可以是以前任意的东西，然后注册成任意一个名字的组件，可以就&amp;lt;niubi-xxxcomponent&amp;gt;，也可叫&amp;lt;my-cat&amp;gt;，反正你想叫啥，就叫啥，然后小伙伴(host)把你的组件(element)直接import进去了以后，完全不会影响大家的开发。注意，是完全不会影响，css只是组件局部，js也是只管自己的。终于实现了大家一起出力，各干各的，完全不会相互影响。。。。这可是真正的齐头并进啊。&lt;br&gt;&lt;br&gt;      来个例子：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;banner.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;phones.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;list.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;t-listBox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;t-banner&amp;gt;&amp;lt;/t-banner&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;t-phone&amp;gt;&amp;lt;/t-phone&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&amp;lt;t-list&amp;gt;&amp;lt;/t-list&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;　　这是前端代码么，怎么这么少。。。。。&lt;br&gt;       这可是妥妥一个完整的界面啊，有banner，电话输入框，和电话列表啊。&lt;br&gt;　　这是要闹那样，代码往那里写，代码往那里写啊。。。。&lt;br&gt;　　这正是奥妙之所在，可以三个同学同时写&amp;lt;t-banner&amp;gt;&amp;lt;t-phone&amp;gt;&amp;lt;t-list&amp;gt;三个组件，然后直接import进来以后就可以直接用了。。。&lt;br&gt;       高内聚，低耦合 &lt;br&gt;       ~bingo~&lt;br&gt;       世界顿时好美好 T_T&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/5968dfe5c0fd20d998b5d3b7bfadd36a_b.png&quot; data-rawwidth=&quot;447&quot; data-rawheight=&quot;284&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;447&quot; data-original=&quot;https://pic3.zhimg.com/5968dfe5c0fd20d998b5d3b7bfadd36a_r.png&quot;&gt;&lt;br&gt;　　但是。。。&lt;br&gt;　　但是。。。&lt;br&gt;　　但是。。。&lt;br&gt;&lt;br&gt;　　但是一般都是是故事的。。。。&lt;br&gt;&lt;br&gt;　　这规范到不成熟，到处是坑啊，我会跟你说么 T_T&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/2ecce489b015e62a4deb0bd872870bf1_b.png&quot; data-rawwidth=&quot;86&quot; data-rawheight=&quot;117&quot; class=&quot;content_image&quot; width=&quot;86&quot;&gt;&lt;br&gt;　　说个简单的，这一个个组件都是独立的，那样式不受外部影响，通用的样式怎么办。。。。。怎么办啊，难道一个个组件去改么。。。&lt;br&gt;       我不会告诉你，有::shadow和/deep/这么奇怪的选择器，而且没用几天就被deprecated(废止)了，虽然现在还能用，但是不知道那一天取消支持，这也太让人忐忑了。&lt;br&gt;&lt;br&gt;　　当然，组件化的时代已经开启，为了填原生的坑，已经有无数勇士已经又踩着前者的尸体冲上来了&lt;br&gt;　　他们是：&lt;br&gt;&lt;ul&gt;&lt;ul&gt;&lt;li&gt;Angular Directives&lt;/li&gt;&lt;li&gt;Ember Components&lt;/li&gt;&lt;li&gt;React Components&lt;/li&gt;&lt;li&gt;KnockoutJS Components&lt;/li&gt;&lt;li&gt;Vue.js Components&lt;/li&gt;&lt;li&gt;Backbone Components&lt;/li&gt;&lt;li&gt;CanJS Components&lt;/li&gt;&lt;li&gt;Famous Components&lt;/li&gt;&lt;li&gt;Anything.JS Components?&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic4.zhimg.com/4b8274e3273344358ea4681de0160637_b.png&quot; data-rawwidth=&quot;589&quot; data-rawheight=&quot;396&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;589&quot; data-original=&quot;https://pic4.zhimg.com/4b8274e3273344358ea4681de0160637_r.png&quot;&gt;&lt;br&gt;　　未完，有感兴趣的，我接着写。。。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/637b96a56b37ef8d95ba7e89aad85bfd_200x112.png\" data-rawwidth=\"707\" data-rawheight=\"431\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/637b96a56b37ef8d95ba7e89aad85bfd_r.png\">\n我来答一下这个吧 从第一代码农写下第一行代码开始到上个世纪的80年代的软件危机，码农一直在考虑一个问题，怎么让写代码容易。抛开找大牛，大神程序员这条路(你以为大牛，大神那么容易找啊)，最后自然而然形成的一套思路就是大团队的协同合作(如同cpu发展…\n\n<a href=\"/question/29735633/answer/90873592\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-03-15\" target=\"_blank\" href=\"/question/29735633/answer/90873592\">编辑于 2016-03-16</a></p>\n\n",
    "link": "https://zhihu.com/question/29735633/answer/90873592"
  },
  {
    "question": "\n若想学 HTML，应从哪里入手？\n",
    "author": "珊姗是个小太阳",
    "content": "\n\n<textarea hidden class=\"content\">和题主一样大三公共事业管理，文科妹子，无编程基础，一个月之内做了个还算漂亮的官网~&lt;br&gt;分享一下我的入门经历吧！&lt;br&gt;&lt;b&gt;step1：&lt;/b&gt;&lt;br&gt;首先我看了这道题目的回答，咨询了一些前端工程师们，决定从经典的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3school.com.cn&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;w3school.com.cn&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 入手，把上面的课程刷一遍！&lt;br&gt;刷到一半的时候心里没底了。。什么时候能看完呢？而且感觉概念这么多，就算刷完了也不记得几个啊！&lt;br&gt;怎么办！&lt;br&gt;&lt;br&gt;&lt;b&gt;step2：&lt;/b&gt;&lt;br&gt;接着，改变学习轨迹的恩人出现了！在 &lt;a data-hash=&quot;3d5b47d91b2d8283e9189c96e75b554e&quot; href=&quot;//www.zhihu.com/people/3d5b47d91b2d8283e9189c96e75b554e&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@彭猫&quot; data-tip=&quot;p$b$3d5b47d91b2d8283e9189c96e75b554e&quot; data-hovercard=&quot;p$b$3d5b47d91b2d8283e9189c96e75b554e&quot;&gt;@彭猫&lt;/a&gt; 老师的指点下我决定把这个教程看一遍！ &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//webdesign.tutsplus.com/courses/30-days-to-learn-html-css&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;30 Days to Learn HTML &amp;amp; CSS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[这里是视频打包下载的地址：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iplaysoft.com/30days-to-learn-html-css.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;学习网站开发必备推荐！30天学会HTML和CSS基础入门视频教程 (免费精品课程)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;]&lt;br&gt;一天的时间边看边开着 sublime跟着同步做，同时用 evernote 做笔记。&lt;br&gt;&lt;br&gt;基础知识差不多了，但是还觉得不太牢固，于是又刷了一遍书&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/1472137/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Head First HTML with CSS &amp;amp; XHTML (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;书的开头序中提到了「元认知」这个概念，就觉得这本书赞赞哒！看完之后果然符合认知心理学学习的原理。&lt;br&gt;发现两个东西的授课本质是一样的！&lt;br&gt;&lt;br&gt;在这期间，无意间下了一个app 叫「Lrn」，卡片式地教你几种语言的基础知识。于是每晚和男神聊微信的间隙就顺手把html和css又刷了一遍（喂和男神聊天还这么不专心！！）&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/cb6783a92f74f56df4ae6cb72ed251ca_b.jpg&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic3.zhimg.com/cb6783a92f74f56df4ae6cb72ed251ca_r.jpg&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/6765ab79c66a6ff46d8d1eaa08f63e73_b.jpg&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/6765ab79c66a6ff46d8d1eaa08f63e73_r.jpg&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/1c028a76fa7965ab38be59304f4d7da0_b.jpg&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;1334&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic1.zhimg.com/1c028a76fa7965ab38be59304f4d7da0_r.jpg&quot;&gt;UI设计也很棒！推荐没事的时候也可以刷一下！&lt;br&gt;&lt;br&gt;&lt;b&gt;step3:&lt;/b&gt;&lt;br&gt;基础知识差不多啦，可以直接上手做项目了！&lt;br&gt;（我当时因为要做官网，还先用 bootstrap 做了一个，被嫌弃太丑就毙掉了= =）&lt;br&gt;你又问了，做什么项目呢？&lt;br&gt;&lt;br&gt;最简单的就是搭一个自己的博客啦，或者是一个简单的静态展示类网页。一般的公司官网都可以哦~&lt;br&gt;依托于 github pages，这个入门教程可以参看我昨天的回答&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/20070065/answer/79557687?group_id=666682661279907840&quot; class=&quot;internal&quot;&gt;怎样使用 GitHub？ - 珊姗是个小太阳的回答&lt;/a&gt;&lt;br&gt;接着就是：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（这个教程还是感觉不够小白，我会再写一个哒）&lt;br&gt;其实真的没有想象中那么难，初期就是看别人的网站很好，右键「检查元素」&lt;br&gt;直接把人家的代码复制粘贴过来就可以了。。。&lt;br&gt;像这样子！&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/52db1290ffddd1464bc023093cac0ba0_b.png&quot; data-rawwidth=&quot;1133&quot; data-rawheight=&quot;722&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1133&quot; data-original=&quot;https://pic1.zhimg.com/52db1290ffddd1464bc023093cac0ba0_r.png&quot;&gt;在不断地复制粘贴中你不仅搭起来了自己的博客，还学会了80%以上的 HTML ！&lt;br&gt;&lt;br&gt;所以说，学编程最好的途径不是看一堆资料，而是&lt;br&gt;&lt;blockquote&gt;Just do it！&lt;br&gt;&lt;/blockquote&gt;哦对了，最后这个教程也很推荐！！！&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.codecademy.com/zh/learn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;学习 | Codecademy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;祝大家新年快乐~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/cb6783a92f74f56df4ae6cb72ed251ca_200x112.jpg\" data-rawwidth=\"750\" data-rawheight=\"1334\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/cb6783a92f74f56df4ae6cb72ed251ca_r.jpg\">\n和题主一样大三公共事业管理，文科妹子，无编程基础，一个月之内做了个还算漂亮的官网~ 分享一下我的入门经历吧！ <b>step1：</b> 首先我看了这道题目的回答，咨询了一些前端工程师们，决定从经典的<a href=\"//link.zhihu.com/?target=http%3A//w3school.com.cn\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">w3school.com.cn</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> 入手，把上面的课程刷一遍！ 刷到一半的…\n\n<a href=\"/question/19753196/answer/79655149\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-02\" target=\"_blank\" href=\"/question/19753196/answer/79655149\">编辑于 2016-01-02</a></p>\n\n",
    "link": "https://zhihu.com/question/19753196/answer/79655149"
  },
  {
    "question": "\n如何看待天猫彻底抛弃PHP？\n",
    "author": "ngot",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;利益相关：天猫员工，天猫node核心开发者。&lt;/p&gt;&lt;br&gt;&lt;p&gt;作为天猫php迁移node的主要推动者之一，我来回答一下这个问题。首先，解释一些疑问：关于使用范围，天猫之前php主要用于前端渲染这块业务，后台业务过去和现在一直都是Java为主，node替换的仅是前端渲染层；天猫在2015年之前，前端代码基本都跑在php系统上，直到2016年初，才彻底下线了所有的php业务。&lt;/p&gt;&lt;br&gt;&lt;p&gt;各位可能要问了，为啥要换呢？php不是世界上最好的语言吗？php当然是世界上最好的语言，只是不适合天猫。这个得从当时的背景谈起。天猫的业务场景非常特别，每年的双11需要非常强的系统稳定性和非常高效率的开发效率。原先的php系统设计年代非常久远(9年多前)，设计之初，没有现今双11这种压力高并发和高效率开发的压力，当时的前端开发体系也没有如今这般完善。可以说，到了2014年，前端还是使用这一套开发系统去撸业务，简直就是刀耕火种，效率上远远满足不了双11的海量需求。以2015年双11为例，总共上线了超过1000个活动页面，如果前端一个页面一个页面地去写，得耗费大量的人力，再算上需求变更带来的返工，耗费的时间又是一笔巨大的成本。更重要的，在php系统上系统做前端开发，前端开发人员需要同时掌握php，js和css，技术体系上存在隔离，大部分前端对php掌握程度不足，写出的页面性能非常糟糕，以天猫首页为例，php版本在25核的实体机上，只能跑出300QPS。在这样的历史背景下Node刚好能够比较好的解决上面的问题。其实早在2014年，天猫的首页就开始试点Node方案，并完美的度过了当年的双11，性能和稳定性完全满足业务的需要。同时目前前端的各种工程化方案大多基于Node平台。所以在这样的特定的历史条件下，天猫选择使用Node重构原有的PHP系统。&lt;/p&gt;&lt;br&gt;&lt;p&gt;php和node没有谁好谁坏，php依旧是世界上最好的语言；天猫选择了Node来重构新的前端渲染系统只是各种因素的综合考量的结果，不能说最好，但肯定是最合适的。技术方案只有能够快速有效的解决业务问题，为公司创造价值，才能够活下去。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n利益相关：天猫员工，天猫node核心开发者。 作为天猫php迁移node的主要推动者之一，我来回答一下这个问题。首先，解释一些疑问：关于使用范围，天猫之前php主要用于前端渲染这块业务，后台业务过去和现在一直都是Java为主，node替换的仅是前端渲染层；天猫…\n\n<a href=\"/question/41913568/answer/95778872\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/41913568/answer/95778872\">发布于 2016-04-18</a></p>\n\n",
    "link": "https://zhihu.com/question/41913568/answer/95778872"
  },
  {
    "question": "\n尤雨溪等非cs转前端的大神是怎么学到编译这个地步的？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">首先，实不相瞒我对编译原理的了解很粗浅，Vue 里面编译相关的部分也都是很基础的东西，跟编译领域前沿的研究完全沾不上边，跟比如R大 &lt;a data-hash=&quot;a06cfb38e37dac1658e6457df4d7f032&quot; href=&quot;//www.zhihu.com/people/a06cfb38e37dac1658e6457df4d7f032&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@RednaxelaFX&quot; data-hovercard=&quot;p$b$a06cfb38e37dac1658e6457df4d7f032&quot;&gt;@RednaxelaFX&lt;/a&gt; 研究的东西就更加不能比了。cs 里面随便一个领域单独拿出来，水都可以深得超过外行的想象，但在工程的场景下，更重要的是投入恰到好处的技能点去实现你现阶段的目标。&lt;br&gt;&lt;br&gt;其次，不要妄自菲薄。我觉得很多非科班出身的程序员经常会潜意识里给自己划定范围，啊这个是科班出身的人才懂的东西，我没希望了。你之前学了啥跟你以后能学啥没有什么本质联系吧。我本科学的是艺术史，只意味着我本科的时间大部分花在了艺术史上而已，不代表我以后不能再花时间在 CS 的东西上。其实很多所谓科班出身的人对于编译原理的理解跟你的差别也就是三个多月一门课而已... 如果真的觉得编译原理是自己的瓶颈了，那就下决心去学呗，可能并没你想象的那么可怕。&lt;br&gt;&lt;br&gt;当然了，大学里面那种可以什么都不管就闷头学东西的状态，在你毕业以后就很难有这种机会了，所以在学校的时候好好珍惜吧！说到这点我还挺羡慕学生的，要加强学习时的集中力，考试的压力比什么都有用，工作以后自我鞭策很难有这么强的效果....</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n首先，实不相瞒我对编译原理的了解很粗浅，Vue 里面编译相关的部分也都是很基础的东西，跟编译领域前沿的研究完全沾不上边，跟比如R大 <a data-hash=\"a06cfb38e37dac1658e6457df4d7f032\" href=\"//www.zhihu.com/people/a06cfb38e37dac1658e6457df4d7f032\" class=\"member_mention\" data-editable=\"true\" data-title=\"@RednaxelaFX\" data-hovercard=\"p$b$a06cfb38e37dac1658e6457df4d7f032\">@RednaxelaFX</a> 研究的东西就更加不能比了。cs 里面随便一个领域单独拿出来，水都可以深得超过外行的想象，但在工程的场景…\n\n<a href=\"/question/53539039/answer/135410564\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-12-12\" target=\"_blank\" href=\"/question/53539039/answer/135410564\">编辑于 2016-12-12</a></p>\n\n",
    "link": "https://zhihu.com/question/53539039/answer/135410564"
  },
  {
    "question": "\n如何看待民工叔跳槽 Teambition？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">其实我觉得在知乎上讨论过于私人的话题是不太好的，不过既然变成这样了，也趁此机会说说心里话吧……&lt;br&gt;&lt;br&gt;我觉得，前端氛围这个东西，本质上靠的还是互联网氛围，没有互联网，前端绝无可能发展到现在的这个样子。所以，南京前端氛围跟其他城市有差距，根源上还是南京的互联网氛围跟其他城市有差距。这种局面，我们身在其中，当然也期望有所改变，所以才作了一些力所能及的努力。&lt;br&gt;&lt;br&gt;在苏宁正好两年时间，14年3月刚入职的时候，整个公司的前端从一个整体的30人团队，拆分到各业务部门，比如网购，移动，金融，开放平台，门店，智能家居等，唯独我在基础技术体系，从组织架构上就隔了很远。我入职的时候他们刚拆完。&lt;br&gt;&lt;br&gt;前端团队的分与合，是各有利弊的。全部在一起的时候，大家很有归属感，也便于共同交流学习，但弊端在于，那些比较弱势的业务部门很难得到支撑。但是按照业务线划分之后，必然会有一些小业务，只有2-3个人，这些人的发展和学习是个大问题，而且这些人的上级肯定都不是前端了，大部分是设计师带的。绝大部分设计师，或者说是前端领域之外的人，对于前端的职责，或者前端领域在发生什么变化，面临什么问题，是缺乏认识的，这也就非常容易造成这部分前端的心理状态很不稳定，流失率非常高。&lt;br&gt;&lt;br&gt;有鉴于此，我从6月底开始筹划搞了一个前端技术协会，无论职位身份，只要是对前端感兴趣的都可以参加，然后组织一些积极分子，每周4晚上搞技术分享，都是比较小的主题，有时候隔1-2个月，搞个大点的主题，参与者会多一些，这类主题一般我讲。&lt;br&gt;&lt;br&gt;通过这些活动，我认识了一些人，并且也得到了很多反馈，还因此接触到了当时的首席IBM顾问，现在可能是类似CTO之类角色的乔老师，经过交流，改变了不少人对前端的看法。在此之前，大部分高层，或者技术经理们，对前端的认识还是那种静态模板，要么就是ExtJS或者GWT，一种对外，一种对内。至于说从前端的角度，需要去优化什么，流程有什么问题，技术选型有什么新形势，为什么要做前端资源管控，为什么要有前端构建和发布流程，绝大多数人是一无所知的。&lt;br&gt;&lt;br&gt;14年中，我去参加公司的技能等级认证，选的架构师线，但其实我的主题跟传统的架构师是有差别的，所以评委产生了争议，后来乔老师还特地找过我，说他觉得我讲到的东西很有价值，是之前他们关注不到的，是对整个应用架构体系的一个补充，可以作为一种specialist。&lt;br&gt;&lt;br&gt;有不少人听到我架构师头衔前面带着一个“前端”，流露出来的表情，可想而知是怎样的，但那半年时间还是坚持下来了，为了鼓励大家来参加分享，每次分享后我都会抽奖三本书，赠送给参与者，希望能够吸引到更多人，去学习，去感受，去改变氛围。&lt;br&gt;&lt;br&gt;后来14年底，我跟负责校园招聘的同事联系，希望一起去一些大学校园做技术交流，之前我搞过大学生送书活动，送出去了一些书，也因此认识了一些学生朋友，后来组织一些同事去南京信息工程大学和南京邮电大学跟学生交流，尤其在南邮，看着满满一教室学生，心里的感觉还是挺好的。当时我们的想法是，前端难招聘，既然池子里面没有鱼，那我们可以从学生开始慢慢去培养，去引导。&lt;br&gt;&lt;br&gt;所以，整个14年下半年，进展还是挺不错的，这时候的主要原因是我自身业务压力不算大，一直没有带团队，所在体系也完全没前端，搞过一阵云盘，然后又负责了公有云的前端开发工作，带着几个Java开发人员搞，那几个小伙伴都还是不错的，很努力好学，也肯吃苦耐劳。&lt;br&gt;&lt;br&gt;所以14年底，我统计了一下，我们这个前端协会大概进行过20多次分享，大家普遍都觉得是往好的方面发展的。&lt;br&gt;&lt;br&gt;但15年，由于业务部门调整，我负责云计算部门的前端，几乎光杆司令，一直拼凑，到年底总共有了10个人，有应届生，社招，转岗的，这一年特别忙，几乎从来没休息过，每天到家9-10点，不停在不同项目之间奔波，就像Github那个猫，很多手，按下葫芦浮起瓢。感谢团队的小伙伴们，你们也陪我一起顶住了压力，这一年，大家都有成长，彼此信任，彼此扶持，相亲相爱，还不断互黑，苦中作乐。&lt;br&gt;&lt;br&gt;（这一年时间，我基本上也就没有能顾及技术协会的事情了，也没有别的人组织，就停了……哎）&lt;br&gt;&lt;br&gt;虽然艰苦，而且整个人情绪也非常糟糕，（我心理承受力其实不太好，遇到事情容易悲观绝望，放不下的东西太多）我都没那么想离开，后来出了一件事，公司高层让人事的同事经常巡查，看大家是否在努力工作，此事大大刺激了我，也刺激了前端群的很多人，我后来在朋友圈写了一句话，大意是：技术人员为了生存有时候会不得不低头，但不代表能够容忍无底线的挑衅。&lt;br&gt;&lt;br&gt;这事是真事，上班西装那个不是，那是我入职之前的一段时间，近两年没有要求，我这两年也就穿过三次，入职和年会的时候，还都自拍了照片发在朋友圈的……&lt;br&gt;&lt;br&gt;后来巡查这事几乎直接造成了消费者体系，也就是负责苏宁易购那边的前端部门leader离职，还有不少骨干流失，我也因此开始接触一些外面的机会。苏宁前端群最多有过100人左右，从此不断流失，到我离职时候，只剩70多了，现在不知怎样。&lt;br&gt;&lt;br&gt;年后休息了大半个月，来了Teambition，让很多人意外了，我内心深处是多么渴望一家小而美的公司啊！况且tb的前端，其实也面临技术方案升级等一些事情，对我来说，是一种很有价值的挑战。昨天入职的，这两天感受很好，公司氛围让我很开心，希望后面能努力把重要的事情完成。除了Teambition之外还有其他几个Offer，都非常好，很抱歉没有能跟你们一起工作。&lt;br&gt;&lt;br&gt;我们这种35-40岁的人，有很多都会焦虑，周围不少朋友这样，我焦虑得非常严重，主要是想不清自己人生应该是怎样的，但又不甘心这么死在沙滩上，所以拼命扑腾，人这一生，很短暂的，多年后当你回首往事，看到自己是那么庸庸碌碌而又可笑，那该多么悲哀啊！每念及此，毛骨悚然！&lt;br&gt;&lt;br&gt;所以这次背井离乡来上海，算是走出了自己迟迟迈不开的一步，我想跟年轻有活力的朋友们一起认真做些事情，想要自己老去的时候不那么遗憾。对于南京的前端氛围，我努力过，虽然没起到多大作用，但真的尽力了。&lt;br&gt;&lt;br&gt;这两年时间，所认识的苏宁，途牛，焦点，西祠，yoho，那么等公司的朋友们，也在用他们的努力为这个城市的前端环境而添砖加瓦，他们都是值得尊敬的人。&lt;br&gt;&lt;br&gt;认识Teambition的人其实挺早的，2年多了，那时候还没去苏宁，后来一直在跟严清有联系，后来还认识了寸志，题叶，都是很不错的人，挺喜欢题叶的，觉得我俩有些方面很像。不过遗憾的是题叶也刚离开这边，踏上了新的征程了，祝福他。&lt;br&gt;&lt;br&gt;顺便谈谈苏宁前端的一些技术上的状况吧，在每个这类公司，各系统都是大致两类，一类是展示页面多，大量的模板，比如购物的那片，另外一类是管控型，面向商家和企业用户，比如开放平台，OA，云平台，两者选型是不同的。&lt;br&gt;&lt;br&gt;这两种东西的差别我以前也说过，像阿里这样的公司，对于前者，是用nodejs做中间层，服务端模板让前端控制，当时负责易购的同事也想这么搞，但当时我对此是有些保守，因为觉得这需要大量的熟练js开发人员，在苏宁这种人很少，熟悉Java的比较多。后来他们自己作了一些尝试，也挺不容易的，这方面我参与得少。&lt;br&gt;&lt;br&gt;后面这种，一般现在是用Angular，React，Vue这种东西做比较合适，云这边用的是Angular，主要考虑的是参与者几乎都是Java背景，上手比较容易，组件化程度也不必那么高，有相对固定模式，我本来期望是把开放平台商家那边也推动的，因为人力状况达不到，所以没有去做。&lt;br&gt;&lt;br&gt;移动端那边有些场景开始用Vue，还有楼下有个前同事，当时也在自己学这个，爱学习爱折腾的年轻人还是不少，比如用CSS画的苏宁小狮子之类，还有另外几个同事做的一些动画，都不错。&lt;br&gt;&lt;br&gt;看了一下其他答案，非常感谢你们的支持和认同。我对自己的定位，应该还是比较清楚的，就是我个人签名这段话：三流程序员，二流架构师。我的技术水平其实是有较大缺陷的，这方面自己心里很清楚，其他方面，也说不上来，觉得至少算个真诚的人吧。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/people/ghugo&quot; class=&quot;internal&quot;&gt;泡泡&lt;/a&gt; 同学提到的，“据说他之前在阿里面试，p7也达不到啊。。。”，这句话，应该是指13年面试聚划算的时候，我一共面试过阿里体系三次，13年下半年聚划算p5+，支付宝p7-，还有15年底阿里云p8-。聚划算那次，技术线不太合，我长期以来一直做偏重型应用的，所以知识点差别比较多，当时还不知道jsonp，反正很多小知识点都欠缺。这些事情都是有据可查的，也没什么不好意思的，确实有这些知识欠缺。&lt;br&gt;&lt;br&gt;两年前没有选择支付宝那边，有个很大原因是觉得还是离不开南京，想要花三年时间作点努力。去苏宁之前，我曾经有个比喻，把全国各大公司的前端人员比喻成武侠门派，我认为当时的苏宁处于三流的水平，希望这三年能变成二流，遗憾的是我只坚持了两年。&lt;br&gt;&lt;br&gt;这些年时常回顾自己的知识体系，看得到很多问题，有些事情我想得比较多一点，但总的来说，还是学得太少，基本功不扎实，有几年时间脱离社区，掉队了很多东西。&lt;br&gt;&lt;br&gt;所以最近几年还是花了一些努力去突破自己的瓶颈，常常出外听同行分享，跟不同的人交流，也写了一些东西，希望在互联网的大潮里，不会落下太远。&lt;br&gt;&lt;br&gt;与大家共勉。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n其实我觉得在知乎上讨论过于私人的话题是不太好的，不过既然变成这样了，也趁此机会说说心里话吧…… 我觉得，前端氛围这个东西，本质上靠的还是互联网氛围，没有互联网，前端绝无可能发展到现在的这个样子。所以，南京前端氛围跟其他城市有差距，根源上还…\n\n<a href=\"/question/41870563/answer/92864497\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-03-29\" target=\"_blank\" href=\"/question/41870563/answer/92864497\">编辑于 2016-03-30</a></p>\n\n",
    "link": "https://zhihu.com/question/41870563/answer/92864497"
  },
  {
    "question": "\n热炒的前端什么时候能冷静下来？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;~~~增评第3栏~~~\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;我曾经跟过一个老大，我记得有一次在我研究commonjs到底是个什么高端货时，他路过并打断我，并跟我说：“commonjs是个规范，你研究它干啥！你会用seajs就完了”。但是我属于那种&quot;叛逆&quot;的人，自己坚持琢磨为啥要有这么个规范？&lt;b&gt;否者怎么去判断我在前端技术浪潮中处于什么位置&lt;/b&gt;？我不求能研读一次seajs源码，但是起码我也应该知道我为什么要去用它吧。不过作为新人的我在出去面试时，我还是会告诉别人我会用seajs，backbone（PS：心里潜台词：“牛逼吧，我会这么多听起来的高端货”），可我其实一点不了解这些东西诞生在什么技术大环境，以及大致的实现原理，还有他们将来要去何方。当时如果面试官要是行家的话，问我这些，我估计我就懵逼了。&lt;b&gt;一个领导如果仅仅以KPI为出发点去使用员工，那我觉得他对上负责，但是坑手下&lt;/b&gt;。&lt;br&gt;2010年的那个时候seajs还是前端最前卫的模块工具。后来我看了好多材料，都类似“&lt;b&gt;SeaJS是一个遵循&lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/view/9194056.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CommonJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;规范的JavaScript模块加载框架，可以实现JavaScript的模块化开发及加载机制&lt;/b&gt;”这样架在一个高空的答案，对于一个新人理解起来相当困难。不过看了玉伯前辈seajs宣传视频之后，玉伯从最基本的讲起，我才恍然大悟。意思大概就是：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;假如一个页面已有三个js文件a.js、b.js、c.js，大家一起维护这个页面 ：&lt;br&gt;&lt;br&gt;讲这个demo的情况下 假设新人知道全局污染（很容易懂）、页面渲染原理（我所说的基础概念中的）、耦合内聚（基础）、模块（基础）、状态改变（基础）、继承组合（设计模式，此案例中模块之间用的是组合方式）等，这样更利于理解。&lt;br&gt;&lt;br&gt;———&amp;gt; abc可能分属不同的人写的 &lt;br&gt;———&amp;gt; 现在产品要在这个页面迭代开发一个新业务模块D （具体场景：例如你做的 D 是微博显示关注的联系人列表）&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/b21e078816bcc3c5987d65ee29b93288_b.png&quot; data-rawwidth=&quot;241&quot; data-rawheight=&quot;336&quot; class=&quot;content_image&quot; width=&quot;241&quot;&gt;&lt;br&gt;———&amp;gt; 但是你开发的新功能的脚本文件d.js中有一部分接口是a.js可以提供的，并且a.js已经封装好tip实现。（具体场景：假如说是简单的tip提示，鼠标滑过联系人提示联系人具体信息—姓名、年龄、公司、个人爱好等）&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0c62926fba06308eca09258dec70d8a5_b.png&quot; data-rawwidth=&quot;391&quot; data-rawheight=&quot;341&quot; class=&quot;content_image&quot; width=&quot;391&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;———&amp;gt; 那你肯定用现成的，并且根据JS加载顺序，你的d.js 在页面script标签 是不是应该写在a.js的script标签后面？这样你就能调用到需要的接口功能了吧&lt;br&gt;———&amp;gt; 接着又一个同学开发了一个新业务模块E，这个E跟你的D有业务关联，例如e.js引发公共状态改变后，你d.js也需要实时更新（具体场景：例如E有个微博关注功能，e.js里面有一个取消了对某人的关注状态的功能，那你做的显示关注联系人列表也将删除相应的、刚取消关注的联系人）。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/15b3d7ce45d6b20834d339bf7889fefe_b.png&quot; data-rawwidth=&quot;134&quot; data-rawheight=&quot;116&quot; class=&quot;content_image&quot; width=&quot;134&quot;&gt;&lt;br&gt;&lt;br&gt;———&amp;gt; 最后问题来了，假如这种迭代带来业务越来越复杂的情况下，页面有几十个js文件，如果手动去管理依赖关系直接带来很多trouble。并且几十个文件定义的功能不做模块封装，那全局污染将不可避免。所以首先得搞个模块，但是每个人都搞一套模块方式（后果参考浏览器大战），所以seajs主要做两件事，定义一套模块规范，另外管理依赖。&lt;/blockquote&gt;&lt;br&gt;所以你要是安利某些新技术，这样讲是否更有信服力、说服力、更直观？&lt;br&gt;别太不接前端这个地气儿了，说些云里雾里甚至是你们公司业务逻辑场景下的套话儿，&lt;b&gt;高尔夫球、马术有多好玩？真的有那么好玩吗？但是你普通老百姓就是玩不起，一个纯血种马多少钱啊？但我就是要设置些壁垒来炫耀我是上流社会。&lt;/b&gt;我对一些词语特别敏感“维护挺麻烦的”、“维护没有这么容易”、“大幅度提高效率”、“超强的维护性”等，这些观点最好建立在一个有说服力的案例下（表述最好用业务原型+code+已经公认的开发术语），否则就是无病呻吟。&lt;b&gt;说实话当我看到这样的语句，我真不无法想像这些代表程度的名词怎么还原成具体的场景和代码&lt;/b&gt;。所以当你想那样说话的时候，记得最好清晰解释清楚，没有明确上文的下文，我是不愿意看的。就好像写代码一样，你直接省略a定义（例如：你项目“维护性”产生的背景）和计算（例如：你项目“维护性”没有那么容易的证明过程）过程，直接给我return a（项目维护性没有这么容易）; 我肯定会在想“我次奥这个神秘的a哪冒出来的？（PS：假如我脑残的认同你观点我会想出一万种可能为你辩护）”。很多人想为angular代言，但是却没有真真的拿出料子，只不过说些 毫无痛痒的，甚至连自己都无法说服 的 “神”话（ps：突然让我想起了那句话“坚持马XXXXXXXX想，XXXXXX论、XXXXX表、XXXXXX观，围XXXXXXX”）。&lt;br&gt;我看过《ruby元编程》（此书给我很大震撼）、《编码的奥秘》、《图解密码技术》、《head first设计模式》。当然答主还看过好多NB书籍（PS：哈哈），不过就这4本是属于从大脑中搜索到跟&amp;lt;不需要太厚实的基础也可以学的九阳神功&amp;gt;有关的，并且第一反应想到的书籍，不管哪个热爱技术的人看到后都会觉得相见恨晚。我个人觉得好书的作者对整体的脉络把握很清晰，对技术的理解也很深，看的很透。我对好的科技书的概念就是：能把一个复杂领域的话题 做到最大可能的 受众面。好的评论，好的博客，好的论文等等不管任何载体任何平台的文章，也是同理。你也可以叫深入浅出（PS：好邪恶的成语）&lt;br&gt;——————————————————————————————————————————————&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;~~~增评第2栏~~~\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;有反对声音很好，说明有人思考了、认真了，也说明我的文字起作用了。&lt;b&gt;感谢顶我的明白人（你们不是顶我，你们是在顶您自己，因为我只不过把你们心里想的说出来了，更多的是鄙人的部分观点跟您产生了共鸣）&lt;/b&gt;，当然我也希望顶我的朋友看看其他答案，然后通过个人理性思考，得到对你有帮助的那部分，没有白花几十分钟。我也认真看了所有答案，其中很多很有道理，抛开对我个人误解，其他说的很敬佩，起码他们看待技术的角度是我思维方式的死角。此言论给前端泼了冷水，对沉溺在前端神坛上的您造成不舒服，但是有些自己的话我必须说，我不想人云亦云的推波助澜。也许我大赞各种前端涌现的新玩意，也不会招致敌对之声，不过那样就没意思了。不要太在意对错，就像对待技术一样，不要在意技术产生的背景（不管大A爹是google，也别管react的爹是非死不可），也不要盲目听信别人说某项技术多好多坏，自己去品，品到的是你自己的，不然你只是盲目崇拜。&lt;b&gt;对任何事物都不是说非爱即恨，非恨即爱。为何就不能是既爱又恨呢。&lt;/b&gt;我说过您要来撕逼，那您赢了。&lt;b&gt;我只能说您的思维方式和看技术的角度也没有错。因为正是这个不同他人的想法才是您立足的本钱。去动摇您对待技术的看法&lt;/b&gt;&lt;b&gt;我也不想而且我也做不到&lt;/b&gt;&lt;b&gt;。&lt;/b&gt;&lt;br&gt;&lt;br&gt;——————————————————————————————————————————————&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt; ~~~增评第1栏~~~\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;谢谢大家，我没有吐槽angular，只不过拿angular作为一个例子，请不要错误解读。我也没有否认第二种技术带来价值，我只不过提醒大家怎么去看待新技术。以及对新技术把握的程度。有人觉得答主就推崇jquery然后搞定所有了的人。哎，您这么说我真心觉得您没懂我想说什么。&lt;b&gt;对于jquery我的态度就是认为她是前端做过最大贡献的库没有之一（想想那个无数ie678陪伴的夜晚吧）&lt;/b&gt;。&lt;br&gt;本人不提倡全程序员皆架构师（每个人都得能搞出一套东西）。更不提倡全民皆富翁。当然少数精英理性看待本文，或许不适合您。&lt;b&gt;我记得琼恩瑞瑟（john resig）说“我把舞台的屎收拾干净了，您们可以在上面玩了”。可惜有些人还是想再清理一次一样的屎。&lt;/b&gt;这屎不是一天清理的，也不是出于为了锻炼他能力而清理的。看过jquery诞生的过程，其实不过日积月累的过程，总结的过程，最后拼装。不过jQuery帮你解决了什么问题，必须得清楚。&lt;br&gt;&lt;br&gt;有朋友觉得答主没有了解过任何mv**技术，您可就错喽，angular，backbone，react，vue，spine，ember都玩过。要是您只跟我说他们的好处，那您有从批判性角度看待下它们嘛？衡量过落地时的利与弊的比重嘛？能预测到将来的问题吗？还真如我说的，全盘接收了？你们很多提可维护性和提高效率（&lt;b&gt;无可量化的数据支持&lt;/b&gt;），但是代码最重要是稳定性。有测过稳定性吗？你们线上跑了N年的代码，久经用户考验的代码。&lt;b&gt;您用新技术重构时候有考虑稳定性吗&lt;/b&gt;。万一新技术有个重大缺陷被您们踩了呢？&lt;br&gt;&lt;br&gt;任何对技术的观点，只要您过分解读，带着撕逼心理还有一挣高下之分，那就变味了。&lt;b&gt;每个人都有自己的技术理念，求同存异吧。如果你非得跟我争个高低贵贱之分。那答主我可就，可就直接gg。没有意义，很对事情没有对错之分的，只有立场不同。&lt;/b&gt;就像同事称赞js语言内省机制我都忍住没说ruby的元编程能力一样（说了肯定撕逼，最后不欢而散）。&lt;b&gt;有人说多样性是好事，的确互联网造成了去中心化，把权威干掉了，最后诞生无数作品，我记得凯文凯利在失控中说过，以后我们发现或者选择一本书如同创造一本一样困难。但对于爆发式的多样性我持观望态度。以后的选择如同创造一样困难&lt;/b&gt;，所以呢，通篇更多重点告诫大家选者要慎重。而不是说新的作品起了反作用。去中心化的比特币值的思考。咱们谈论问题，别脱离真实环境，要把时间这个最大成本加进去。站着说话不腰疼，王健林跟你说，小伙子咋不开车回家呢？你看着漏洞的破鞋心理什么滋味。&lt;br&gt;&lt;br&gt;有人觉得尝试是好事，可惜当爆炸式的涌现，当技术诞生速度快于你熟练掌握它们的速度，你会疲于奔波在这个过程中。尤其工作饱和，甚至高负荷情况下。理想情况下你每天只关注技术，还就是前端技术，连其他诸如离散数学、算法、设计模式、http协议、安全等经典核心技术都无暇顾及。其他优秀的动态语言是否需要学习下？除了这一领域，相信大家还会接着看些例如：失控，人类简史，信息简史，自私基因，黑客与画家、编程珠玑等等科技著作。听听罗辑思维、晓松奇谈、吴晓波、百家讲坛等节目。最重要你要考虑吃饭睡觉，老婆孩纸。其他生活中的各种。当然如果您是除了工作就搞前端，没其他生活的geek另当别论。&lt;b&gt;疲惫追求前卫的新人不如高效利用时间学习内功。以不变应万变。时间也可以当成“货币”，如何高性价比的使用这种货币。前端开发和工作占你人生多大比？&lt;/b&gt;&lt;br&gt;&lt;br&gt;对于新人我的态度是：他们连基础都没掌握明白，怎么谈论如何选择学哪项技术？这不误人子弟吗？你让新人你去用angular，最后你让他脱离mvxx框架，正常写一个，他顿时懵逼，我刚毕业有人告诉我你去看java编程思想。现在我真恨那个前辈。我都不会走，你告诉我“run，forrest run！”。待到基础打牢时，一切水到渠成。另外推荐新人多看看张鑫旭的博客。比较佩服耐得住寂寞的前端布道者。&lt;br&gt;&lt;br&gt;咱们稍微再扯的远点。有人说时代不同了，可时代再不同《&lt;b&gt;仁义礼智信&lt;/b&gt;》咱不能丢。技术再变更，可基础我们还是要把握，你不能为了追求前卫把《代码大全》忽视了，把前端最基础的（例如：DOM、BOM操作的API）给扔了。我记得前些日子看《老炮儿》冯导教训后辈说那句：“&lt;b&gt;这叫规矩，懂吗？&lt;/b&gt;”，你可以开着法拉利恩佐，可你不能不懂规矩，不能撞我们小百姓后逃逸。&lt;br&gt;——————————————————————————————————————————————————&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;~~~以下是正文~~~\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;本人不才，09年开始做前端开发，刚入行之前不懂什么是编程，只是大学学过一门叫数据结构和算法的课程。直到现在也是菜鸟。这不是&lt;b&gt;谦虚&lt;/b&gt;的说辞，&lt;b&gt;的&lt;/b&gt;确&lt;b&gt;是&lt;/b&gt;个&lt;b&gt;菜&lt;/b&gt;鸟。&lt;br&gt;&lt;br&gt;2010年开始才听说过jQuery，backbone。后来陆续知道前端还有prototype，extjs，YUI，requirejs、seajs。之间后就是angular、ember、vue、react、grunt、gulp、sass、coffee、less、typescript。最近一年内知道browerify、webpack、ES6、babel。&lt;b&gt;然而说实话直到现在我也只最拿手如何使用jQuery&lt;/b&gt;。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMzAxODE2MjM1MA%3D%3D%26mid%3D401255024%26idx%3D1%26sn%3D1bae058a1a47190b368a896992f87e9c%26scene%3D0%23wechat_redirect&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript 资源大全中文版&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。这里面一坨。我都简略看了下。说实话很多我不了解。很多技术我只略略知道原理是什么，理念是什么，为什么应用，应用后会带来什么好处坏处。&lt;br&gt;&lt;br&gt;我只说我自己应用过哪些，我用过的jQuery、requirejs、seajs、grunt、underscorejs、hightchar、moment、bootstrap、zepto、handlebars模板等。&lt;br&gt;&lt;br&gt;说实话这几年前端的技术爆炸式发展，&lt;b&gt;2009年&lt;/b&gt;的时候我记得面试的时候很多都是问些浏览器事件啊，JavaScript基础啊，css样式问题啊，布局问题。&lt;b&gt;现在&lt;/b&gt;面试主要问，用过vue和react吗？用过什么自动化工具？var a = b ={c:12}; a.c = d = {c:1};console.log(a.c)//输出值是什么？还有的问些使用过canvas吗？有做过响应式布局吗？等等。从面试的问题也已经感觉到了前端的发展。但是请回忆下你日常的开发工作中，&lt;b&gt;你每天code的时候主要在搞定哪些问题？？是09年那些还是现在的那一坨。&lt;/b&gt;&lt;br&gt;&lt;br&gt;我仍然记得当时backbone出来的时候何等风光，angular诞生的时候何等风光，&lt;b&gt;react出来的时候大家把未来的必然之路和皇冠黄袍都披在了react身上，如同当年大家寄托在angular和backbone身上一样&lt;/b&gt;。每项前端新技术出现的时候，国内前端都不过脑子的全盘接受，然后大肆放言，一个新的新星诞生，一个拯救前端的神器诞生。国内前端学国外前端，而国外前端直接借鉴传统软件行业发展成熟的方案。&lt;br&gt;&lt;br&gt;国内的前端还有一个有意思的现象，你去面试的时候，面试官会问你的多半是新的技术，尤其是那种刚产生还热乎乎的，我去年的时候找了段时间工作，面试官的水平参差不齐，但是都会提及自动化方向、MV**、flux的react，甚至问你如何实现一个requirejs。哦，对了，还有一个nodejs。我对于nodejs的回答都是：“JavaScript被增加了些新技能新权限（可以调用系统底层api）”。我觉得面试官，更多的是想听到我是否能用node的一些web服务器框架来做些小工具，甚至在node下给grunt开发插件或者是给gulp，甚至希望我能对html js css文件做些预编译的处理。sorry，的确没做过。&lt;b&gt;老板天天让我搞定页面的BUG，搞业务开发的我着实没时间去做那些。闲暇时间陪家人，闲暇时间都觉得不够用。&lt;/b&gt;&lt;br&gt;&lt;br&gt;我还要提醒大家别过分解读node，java语言为什么没有一个对应的名词呢？而JavaScript有一个呢。所以别拿node跟人家装逼，本质就是JavaScript语言，不过是插了翅膀。说白了，你用node那玩意，就好像一个穷逼（做的是事件驱动、异步编程、非阻塞IO小买卖赚的钱）进入了上层社会，那个装逼的过程。而当了好多年上层人士的java和C++，python等觉得你是个后进入圈子的暴发户。你们前端走的路，包括es6（国外有些大神对es6也有反对态度）、包管理器、加载器、打包工具、测试框架、QA 工具、MVC 框架和库、基于 Node 的 CMS 框架、模板引擎等。都是人家十几年前玩剩下的。而前端最值得装逼的本钱，那种java、C++等望而却步，就是你觉得很土逼的css、html，那个你觉得毫无高大上感觉的结构层和表现层，还有操作DOM、BOM的能力。后台开发永远会觉得你很牛逼，看看他们那无比崇拜你的小眼神，尤其看到你分析页面渲染过程，使用PS过程，切出页面效果，还有兼容问题处理。而当你跟人家谈论管理包、打包工具、测试工具、MVC，人家只能呵呵。看看前端MVC多么的挫，本来仅仅是整个网站架构的view层，自己居然分化出了所谓的MVC。你以为只有node下用gulp和grunt能开发出牛逼的自动化工具？人家java等是二货？只不过前端熟悉JavaScript，自己的工具用自己的环境造罢了。&lt;b&gt;我这么说不是要灭自己威风，助他人气势。我只不过要提醒大家我们的核心价值所在。&lt;/b&gt;&lt;br&gt;&lt;br&gt;我还见过一个面试官问我requirejs怎么动态分析依赖的，我说通过function.tostring方法，然后字符串正则匹配require关键词。然后又问我如何实现define。我说我不知道。然后他又问我如何实现require.config。最后面试官说让我先回家，我就懂什么意思了。回来之后痛恨自己为什么不看看requirejs的源码。后来一位大师安慰我，不要灰心，那个面试官只不过在你身上找点存在感。&lt;br&gt;&lt;br&gt;哔哔了好多没用的，回到正题上，我还是抛出来一个问题，技术能解决什么问题？互联网能解决什么问题？前端新技术都能解决什么问题？&lt;br&gt;&lt;b&gt;技术能改变世界，互联网能改变信息对称。&lt;/b&gt;&lt;br&gt;&lt;b&gt;前端的新技术呢？我觉得分两种一种是制定标准改变用户体验（面向普通用户）&lt;/b&gt;，&lt;b&gt;另外一种改变开发效率降低开发成本提高可维护性（面向开发者）&lt;/b&gt;。&lt;br&gt;改变用户体验的有哪些？css3,、html5、http2.0、web socket。&lt;br&gt;改变开发效率的有哪些？es6（国外有些大神对es6也有反对态度）、包管理器、加载器、打包工具、测试框架、QA 工具、MVC 框架和库、基于 Node 的 CMS 框架、模板引擎等。&lt;br&gt;&lt;br&gt;&lt;b&gt;大家都说angular好，好在哪，不要跟我说双向绑定、依赖注入、过滤器、超强指令集、可扩展指令集等，这都是手段，没有数据意义，回到最终结果来谈。你也不要告诉我react模式好，别从视觉感觉角度告诉我这个框架有多牛逼，从数据角度告诉我它到底做了些什么？到底提高了xx%效率，XX%扩展性，降低了多少XX%率。没有这些综合的数据意义扯再多，都是意淫。talk is cheap，show me the fucking code and fucking data。&lt;/b&gt;&lt;br&gt;&lt;br&gt;我仍然记得刚入行不久，别人告诉我耦合性好与不好，我真的不懂，怎么理解，后来同事写了个demo指导给我看。先用一个反模式，然后写了个正模式。遂懂了。今天你告诉我某个技术牛逼，那既然进化了。肯定老的有问题，那么把老的代码暴露的问题总结下，然后用新的重构下。然后对比diff下，对比新旧优缺点，平衡下取最优的。而不是别人说，angular可维护性强，扩展性好，效率高，可测试性等。这些词听起来很美，可惜不够直观。你给大家出几套常用方案，对比N套方案优劣你给出结果。最好可量化数据。要不我觉得ember也不错。为啥？emberjs也是Xx性好、Xx性好。人云亦云呗，那些所谓显得出高大上层次的，谁都会说，还是严谨点带着质疑态度审视。这样新技术经受住质疑下更站的住脚。不要陷入先入为主的坑。更不要看大A的爹是谷爸爸，就全都是好的。市面mv*何其之多。&lt;br&gt;&lt;br&gt;你告诉我当初Google用angular重构了他们的项目，减少了多少多少行代码？&lt;br&gt;2010年的时候，Misko Hevery参与Google Feedback项目。项目团队使用GWT进行开发，在花了6个月的时候以后，编写了17000行代码。随后，Misko Hevery花了3周将这17000行代码的程序使用AngularJS重写，结果是压缩成了令人吃惊的1500行，不到原来的十分之一。这引起了Google的重视，公司也开始资助其团队全职从事开发AngularJS。这是angular故事的版本，先不验证故事的真实性和故事里面具体的数据可靠性。这看起来真的给人很多surprise。提升了如此开发效率，降低了如此高的开发成本，带了那么好的扩展性。为何2016年大家渐渐忘了angular，反而react上台了？？？这背后的问题您是否考虑过呢？？&lt;b&gt;大家还记得我刚说的吗？前端技术无非两种好处，angular很显然第二种，既然带来那么多的好处为何被市场抛弃了？是落地没落好还是框架死板性能后期差亦或者angular通用性适应性有局限？留给看官思考下。（大家可以结合angular国内使用普及率，对照下jQuery的使用率）&lt;/b&gt;&lt;br&gt;&lt;br&gt;咱们换个角度考虑前端问题，从国内前端开发的需求量来看，小伙伴们有注意到你们身边是否有前端开发被裁员吗？或者是你们业务扩大的情况下停止招聘？我猜你们给我的回答肯定是“NO”。那我就很奇怪了，前端发展了好几年，那种提高开发效率的工具可不少啊。为什么这些工具没有给前端这么火爆的市场降温？？&lt;b&gt;您看Google的angular让17000行代码减少到1500行，且不论17000行代码和1500行代码的质量比，最保守来说效率提高5倍，那就是说5个人干的活现在一个就能干了。&lt;/b&gt;但是前端开发还是没有减少啊。当然我猜下哈，是否在大众创业全民创新的浪潮推波助澜下导致的？抛开大环境让我把镜头缩小点，放到一个应用了很多新技术并且业务无明显扩张的某大互联网公司团队，最近猎头频繁打电话给这个团队增招前端人手。某某大的互联网公司凤巢业务我看冻结招聘的情况下还在继续招聘前端开发。&lt;br&gt;&lt;br&gt;我的确没有拿到太多数据，我也想查下去年前端需求量和今年前端需求量具体数据。可惜没找到。以上也都是我个人观察到的现象，肯定有误，不过也请大家思考下。这些新的框架到底能帮助我们多少？我不求别人认同我，我只想求大家能反思下，国内这么热衷的跟风运动是否可以冷静下？&lt;b&gt;我始终相信一件事，你看过一万本书不及你写出来一本书收获大。你看100个牛逼框架的源码，不如你自己写一个有点创意的“糟糕”的框架。&lt;/b&gt;国内这么跟风（研究阅读源码以及盲目崇拜）这些新技术新工具，不如冷静下来打造一个有差异化的我们自己的工具。不要看国外做MVVM复合模式的框架，然后你也造一个一样的轮子。最后颠覆MVVM的还是米国的FLUX。&lt;b&gt;起码后者能给我们带来积累沉淀，而前者你始终逃不出被牵着走的命运。我的意思就是做一个有创新（哪怕创新点不高的）的东西，也不要学着做出人家已经搞出的创意。这一点我觉得支付宝的seajs、百度FEX的fis就比较成功（在这里请两个做出贡献的团队大牛收下小人的膝盖）。相反人家搞了一个jQuery、YUI，我们要搞个tangram、kissy。虽然fis和seajs在国外影响力不如国内，起码我们走出了自己的道了。&lt;/b&gt;其实我自己也懂这其中的难处，可难也得这么想这么做。&lt;br&gt;&lt;br&gt;现在很多前端把经历放在工程化方向，ES6，REACT等。我觉得您真不如冷静下看待这些工具，到底是为了做什么？不要脱离你的业务框架空谈技术。干好你手上的工作，不要那么浮躁，不要谈论某个技术的好坏，尤其是没有实际应用场景下和使用经验下去跟别人高谈阔论。&lt;b&gt;你们公司都不用react你却要求一个候选人必须会这项技术。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;我不否认新技术带来的好处（此处强调过没有排斥任何新技术，真的没有，真心没有），可你要知道轻重缓急，你要调研下带着疑问去考察它，如果正命中你们痛点那很好，如若抛开现实环境（公司业务、rd支持、技术架构等）。一旦决定，就好像姑娘嫁人。开发两年最后发现很多问题，再推翻重构那可就不是一块钱的事儿了。而是两块钱了。哈哈。我记得爱因斯坦得诺奖，正好比这种场景。&lt;b&gt;没有经过市场和时间考验的，您要慎重选择，这是对工作和公司负责，公司不是您的实验室。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;总结下自己的观点：&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;外来了一项技术，我们是否需要跪舔；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;需要跪舔的，为我所用的，我需要掌握到什么程度？（是否真的需要达到能写出一个一样的？或者是必须得看它源码？）；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;面试的过程中，面试官你们要根据自己实际情况来面试候选人，否则对候选人就是种不尊重。（你们公司不需要react，就不要要求人家必须会react；你们公司招的是做业务的，就不要拿框架工程师卡对方）；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;造一个别人造过的轮子，不如造一个有差异化（微创新）的轮子；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;最好拿数据说话，不要空谈一个技术的好与坏；（例如我们做性能优化的时候，我们都会在模拟的网络情况下看快了多少毫秒）；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;不要把公司业务去套新技术，二是看看业务架构什么样子的，然后选择适合的技术。如果后期有变，在时刻更新技术架构。切勿给一个10岁的孩纸穿个盔甲，他会很累的；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;jQuery是个好东西啊，不管怎么说，虽然他容易上手，而且简单易用，导致新手也会用，所以大家觉得用jQuery的分不出阶层来，遂觉得jQuery很LOW；&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;最重要的是，如何选择技术集，不要看什么流行套什么？而是看你想要什么去找什么。要从优缺点去审视某一类技术集里面的某一个。说Google的XXX好，那直接拿过来。有想过是否有更合适的？更贴身的？（大A适用场景真的太特么窄了，最适用处理数据增删改查、不讲求太多页面体验的、不考虑灵活的需求变化的、性能忍受度强的管理系统。再一次“黑”这斯一次；&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;再好听再好看的技术都不过是技术不过是手段，毕竟手段不是目的，开发嘛。技术无非4种最终目的：0、解决某一领域问题（互联网技术）；1、解决开发成本（MV**框架）；2、解决性能问题（http协议升级）；3、提高用户体验效果（html5、canvas、bootstrap）；&lt;br&gt;web开发各个环节都有相应的技术，无非都为了上面四个目的，你们又何必太在乎手段而忘了他本身的用处。你们大部分人眼界都放在了目的1上面了。想想是不是？&lt;br&gt;技术达到目的又是干嘛的？不就为了老板节省成本多赚钱吗？&lt;br&gt;nodejs干嘛的自己归归类，angular干嘛的、react干嘛的等等自己归归类，webpack、browserify等等自己都想想是干嘛的。&lt;br&gt;没有必要嘛，你知道promise你非得问我它的api，我没看过我肯定不知道的啦，但是我知道promise是干毛的应该具备哪些必备接口功能不就行了，点到为止，问些我没看过的记忆性东西有意思吗？&lt;br&gt;&lt;i&gt;//&lt;/i&gt;&lt;b&gt;在下技术格局有限，说的不对之处，看在也是为了前端开发着想的好意下，请多多见谅。&lt;/b&gt;&lt;br&gt;/*&lt;br&gt;最后一个就是倡导大家尽量分清楚库、框架、架构、模块、插件、组件、类、对象、动态语言、静态语言、服务器语言、脚本语言、函数式、命令式、设计模式、设计模式5种原则、API、DOCK、中间层、shim、pollyfill、patch、数据结构、算法、SPA、web前端、native前端、http协议、tcp协议 等等名词，我发现一件很头疼的事情，就是很多时候我跟一些同行的大家交流，他们分不清楚库和框架的却别，框架和架构的区别，分不清楚组件和插件区别。 导致每次看大家技术讨论，都给我带沟里去。有些名词如果你不是很确定，你换个方式去解释，千万别按自己的理解去说。&lt;br&gt;*/&lt;br&gt;&lt;br&gt;&lt;b&gt;!!难得在知乎上面认真一次，发泄一次。以前根本都没回答过问题。排版排的不好请见谅！&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n~~~增评第3栏~~~\n我曾经跟过一个老大，我记得有一次在我研究commonjs到底是个什么高端货时，他路过并打断我，并跟我说：“commonjs是个规范，你研究它干啥！你会用seajs就完了”。但是我属于那种\"叛逆\"的人，自己坚持琢磨为啥要有这么个规范？<b>否者怎么去判…</b>\n\n<a href=\"/question/39659771/answer/82457812\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-20\" target=\"_blank\" href=\"/question/39659771/answer/82457812\">编辑于 2016-02-18</a></p>\n\n",
    "link": "https://zhihu.com/question/39659771/answer/82457812"
  },
  {
    "question": "\n网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">这里面有好几个方面的问题。&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 原生 DOM 操作 vs. 通过框架封装操作。&lt;/b&gt;&lt;br&gt;&lt;br&gt;这是一个性能 vs. 可维护性的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操作更快，因为框架的 DOM 操作层需要应对任何上层 API 可能产生的操作，它的实现必须是普适的。针对任何一个 benchmark，我都可以写出比任何框架更快的手动优化，但是那有什么意义呢？在构建一个实际应用的时候，你难道为每一个地方都去做手动优化吗？出于可维护性的考虑，这显然不可能。框架给你的保证是，你在不需要手动优化的情况下，我依然可以给你提供过得去的性能。&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 对 React 的 Virtual DOM 的误解。&lt;/b&gt;&lt;br&gt;&lt;br&gt;React 从来没有说过 “React 比原生操作 DOM 快”。React 的基本思维模式是每次有变动就整个重新渲染整个应用。如果没有 Virtual DOM，简单来想就是直接重置 innerHTML。很多人都没有意识到，在一个大型列表所有数据都变了的情况下，重置 innerHTML 其实是一个还算合理的操作... 真正的问题是在 “全部重新渲染” 的思维模式下，即使只有一行数据变了，它也需要重置整个 innerHTML，这时候显然就有大量的浪费。&lt;br&gt;&lt;br&gt;我们可以比较一下 innerHTML vs. Virtual DOM 的重绘性能消耗：&lt;br&gt;&lt;ul&gt;&lt;li&gt;innerHTML:  render html string &lt;b&gt;O(template size)&lt;/b&gt; + 重新创建所有 DOM 元素&lt;b&gt; O(DOM size)&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Virtual DOM: render Virtual DOM + diff &lt;b&gt;O(template size) &lt;/b&gt;+ 必要的 DOM 更新 &lt;b&gt;O(DOM change)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;Virtual DOM render + diff 显然比渲染 html 字符串要慢，但是！它依然是纯 js 层面的计算，比起后面的 DOM 操作来说，依然便宜了太多。可以看到，innerHTML 的总计算量不管是 js 计算还是 DOM 操作都是和整个界面的大小相关，但 Virtual DOM 的计算量里面，只有 js 计算和界面大小相关，DOM 操作是和数据的变动量相关的。前面说了，和 DOM 操作比起来，js 计算是极其便宜的。这才是为什么要有 Virtual DOM：它保证了 1）不管你的数据变化多少，每次重绘的性能都可以接受；2) 你依然可以用类似 innerHTML 的思路去写你的应用。&lt;br&gt;&lt;br&gt;&lt;b&gt;3. MVVM vs. Virtual DOM&lt;/b&gt;&lt;br&gt;&lt;br&gt;相比起 React，其他 MVVM 系框架比如 Angular, Knockout 以及 Vue、Avalon 采用的都是数据绑定：通过 Directive/Binding 对象，观察数据变化并保留对实际 DOM 元素的引用，当有数据变化时进行对应的操作。MVVM 的变化检查是数据层面的，而 React 的检查是 DOM 结构层面的。MVVM 的性能也根据变动检测的实现原理有所不同：Angular 的脏检查使得任何变动都有固定的 &lt;b&gt;O(watcher count) &lt;/b&gt;的代价；Knockout/Vue/Avalon 都采用了依赖收集，在 js 和 DOM 层面都是&lt;b&gt; O(change)&lt;/b&gt;：&lt;br&gt;&lt;ul&gt;&lt;li&gt;脏检查：scope digest &lt;b&gt;O(watcher count) &lt;/b&gt;+ 必要 DOM 更新 &lt;b&gt;O(DOM change)&lt;/b&gt;&lt;/li&gt;&lt;li&gt;依赖收集：重新收集依赖 &lt;b&gt;O(data change)&lt;/b&gt; + 必要 DOM 更新 &lt;b&gt;O(DOM change)&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;可以看到，Angular 最不效率的地方在于任何小变动都有的和 watcher 数量相关的性能代价。但是！当所有数据都变了的时候，Angular 其实并不吃亏。依赖收集在初始化和数据变化的时候都需要重新收集依赖，这个代价在小量更新的时候几乎可以忽略，但在数据量庞大的时候也会产生一定的消耗。&lt;br&gt;&lt;br&gt;MVVM 渲染列表的时候，由于每一行都有自己的数据作用域，所以通常都是每一行有一个对应的 ViewModel 实例，或者是一个稍微轻量一些的利用原型继承的 &quot;scope&quot; 对象，但也有一定的代价。所以，MVVM 列表渲染的初始化几乎一定比 React 慢，因为创建 ViewModel / scope 实例比起 Virtual DOM 来说要昂贵很多。这里所有 MVVM 实现的一个共同问题就是在列表渲染的数据源变动时，尤其是当数据是全新的对象时，如何有效地复用已经创建的 ViewModel 实例和 DOM 元素。假如没有任何复用方面的优化，由于数据是 “全新” 的，MVVM 实际上需要销毁之前的所有实例，重新创建所有实例，最后再进行一次渲染！这就是为什么题目里链接的 angular/knockout 实现都相对比较慢。相比之下，React 的变动检查由于是 DOM 结构层面的，即使是全新的数据，只要最后渲染结果没变，那么就不需要做无用功。&lt;br&gt;&lt;br&gt;Angular 和 Vue 都提供了列表重绘的优化机制，也就是 “提示” 框架如何有效地复用实例和 DOM 元素。比如数据库里的同一个对象，在两次前端 API 调用里面会成为不同的对象，但是它们依然有一样的 uid。这时候你就可以提示 track by uid 来让 Angular 知道，这两个对象其实是同一份数据。那么原来这份数据对应的实例和 DOM 元素都可以复用，只需要更新变动了的部分。或者，你也可以直接 track by $index 来进行 “原地复用”：直接根据在数组里的位置进行复用。在题目给出的例子里，如果 angular 实现加上 track by $index 的话，后续重绘是不会比 React 慢多少的。甚至在 dbmonster 测试中，Angular 和 Vue 用了 track by $index 以后都比 React 快: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//vuejs.github.io/js-repaint-perfs/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dbmon&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; (注意 Angular 默认版本无优化，优化过的在下面）&lt;br&gt;&lt;br&gt;顺道说一句，React 渲染列表的时候也需要提供 key 这个特殊 prop，本质上和 track-by 是一回事。&lt;br&gt;&lt;br&gt;&lt;b&gt;4. 性能比较也要看场合&lt;/b&gt;&lt;br&gt;&lt;br&gt;在比较性能的时候，要分清楚初始渲染、小量数据更新、大量数据更新这些不同的场合。Virtual DOM、脏检查 MVVM、数据收集 MVVM 在不同场合各有不同的表现和不同的优化需求。Virtual DOM 为了提升小量数据更新时的性能，也需要针对性的优化，比如 shouldComponentUpdate 或是 immutable data。&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;初始渲染：Virtual DOM &amp;gt; 脏检查 &amp;gt;= 依赖收集&lt;/li&gt;&lt;li&gt;小量数据更新：依赖收集 &amp;gt;&amp;gt; Virtual DOM + 优化 &amp;gt; 脏检查（无法优化） &amp;gt; Virtual DOM 无优化&lt;/li&gt;&lt;li&gt;大量数据更新：脏检查 + 优化 &amp;gt;= 依赖收集 + 优化 &amp;gt; Virtual DOM（无法/无需优化）&amp;gt;&amp;gt; MVVM 无优化&lt;/li&gt;&lt;/ul&gt;不要天真地以为 Virtual DOM 就是快，diff 不是免费的，batching 么 MVVM 也能做，而且最终 patch 的时候还不是要用原生 API。在我看来 Virtual DOM 真正的价值从来都不是性能，而是它 1) 为函数式的 UI 编程方式打开了大门；2) 可以渲染到 DOM 以外的 backend，比如 ReactNative。&lt;br&gt;&lt;br&gt;&lt;b&gt;5. 总结&lt;/b&gt;&lt;br&gt;&lt;br&gt;以上这些比较，更多的是对于框架开发研究者提供一些参考。主流的框架 + 合理的优化，足以应对绝大部分应用的性能需求。如果是对性能有极致需求的特殊情况，其实应该牺牲一些可维护性采取手动优化：比如 Atom 编辑器在文件渲染的实现上放弃了 React 而采用了自己实现的 tile-based rendering；又比如在移动端需要 DOM-pooling 的虚拟滚动，不需要考虑顺序变化，可以绕过框架的内置实现自己搞一个。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这里面有好几个方面的问题。 <b>1. 原生 DOM 操作 vs. 通过框架封装操作。</b> 这是一个性能 vs. 可维护性的取舍。框架的意义在于为你掩盖底层的 DOM 操作，让你用更声明式的方式来描述你的目的，从而让你的代码更容易维护。没有任何框架可以比纯手动的优化 DOM 操…\n\n<a href=\"/question/31809713/answer/53544875\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-07-02\" target=\"_blank\" href=\"/question/31809713/answer/53544875\">编辑于 2016-02-08</a></p>\n\n",
    "link": "https://zhihu.com/question/31809713/answer/53544875"
  },
  {
    "question": "\n如何评价阿当的文章《当我说前端基础时，我在说什么》？\n",
    "author": "Johnny Wu",
    "content": "\n\n<textarea hidden class=\"content\">作为一个非前端开发人员，看完这篇文章后我的感受是：&lt;b&gt;认认真真，系统科学地学好计算机基础课是多么重要的一件事情&lt;/b&gt;。计算机的基础课程里会教你：&lt;br&gt;&lt;br&gt; - 如何做一门 DSL 语言 ( css )&lt;br&gt; - 如何在屏幕上正确的显示像素 ( html layout and rendering, canvas, webgl, svg )&lt;br&gt; - 一门编程语言长什么样子 ( javascript )&lt;br&gt; - 数据结构是什么，我们平常解决问题会用哪些算法 ( virtual DOM, DOM, Render Tree )&lt;br&gt; - 进程，线程，~~携程~~协程都是神马&lt;br&gt; - 从外部存储器读取数据到内存中是怎样一种体验&lt;br&gt; - 还有很多...&lt;br&gt;&lt;br&gt;然后 web-browser 做的事情就是帮助你把这些东西用比较通用的方法包装好，让你可以在掌握了固有基础知识的前提下，很灵活的运用他去做一些创新和拓展。&lt;br&gt;&lt;br&gt;所以，当你掌握了基础知识后，看待前端那些“技术”时，你会和这些技术的开发者们产生共鸣而不是排斥或抵触。你会欣赏其他人的解决方案，或者会因为他们的奇思妙想而衍生出新的灵感，从而触动你产生自己的解法。&lt;br&gt;&lt;br&gt;比如 css，从一开始的 less，sass，stylus 到 postCSS 以及 w3c 近几年对 CSS next 的提案。大家努力的重心从来没变过，就是如何做好一门 DSL。你理解本质需求，就不会害怕这些衍生品，反正大家思路都差不多，思路古怪的，政治不正确的，你凭借自己的科班能力早就判断出来了。&lt;br&gt;&lt;br&gt;再比如 MV* 和 Flux，都是在努力解决数据流向和数据展示的问题。而我从来没觉得这些框架的推出是“追新”，反而是因为 CPU/GPU 发展使得过去因为机能限制，浏览器优化不够，市场占有率等问题而不能去普及的技术方案，可以在现有背景下重新去尝试和推广。当你看到诸如 React 这样的框架推出的时候，你应该感到兴奋而不是像这篇文章的作者那样去抵触和害怕。兴奋什么呢？如果你的计算机基础学科知识扎实，你会兴奋大家过去几年都想到一块去了，很多“如果 (what if)”的美好愿景竟然有了这般实现。&lt;br&gt;&lt;br&gt;再比如 Canvas，WebGL，过去我需要从非常底层去搭建图形程序的周边，才能开始进行一些图形编程的实验，现在都有了非常方便的方式方法，我会由衷地感谢标准委员会和为此努力的厂商和程序员们，而不是如作者说的那样：&lt;br&gt;&lt;blockquote&gt;而近些年，随着前端越来越被重视，越来越多的server端或者其它GUI技术(flash、webgl等)转做了前端，这种情况发生了根本性变化，无论在国内还是在国外。这一波新前端们，对编程是熟悉的，对框架是熟悉的，而对css和html是相对陌生的。&lt;/blockquote&gt;这个观点太可笑了，我一个对前端编程完全不懂，但比较认真学计算机基础学科的人，只要你跟我说 css 是一门 Layout + Rendering 的 DSL，我至少就懂个三分了。然后我肯定问你呀，Layout 是怎么计算的？你告诉我浏览器坐标系是 Screen Space，原点在左上角，Y 轴向下，我懂四分了。然后你跟我说，除了固定坐标定位还可以根据节点高宽来动态定位，定位时也会根据文字数据做处理，我懂五分了。然后我问你 Rendering 是什么鬼？你告诉我浏览器也就能画矩形，贴图片和渲染文字。我肯定问你渲染优化策略是什么，你说 Tiling + Dirty Rect 我大概就懂六分了。然后我问你能用矩阵么？你说有 Transform，不计入排版。我问你能伸缩么，你说有 Flex 但父节点高宽必须能推算出来。我问你能拉曲线么，你说有 SVG。我问你能打点么，你说有 Canvas。你不用说了，我知道怎么画东西了。到此你已经懂七分了。剩下三分，真的觉得细节不懂，你只要去看一看开源的浏览器实现，比如 Webkit 或者 Gecko 中关于 Reflow/Layout 部分的实现即可，有什么难理解的？干嘛一定这么高冷的认为只有一小戳的人才能玩某个圈子？&lt;br&gt;&lt;br&gt;所以啊，同学们，我跟你们讲，&lt;b&gt;大学的时候认认真真的学好计算机基础课程&lt;/b&gt;，即使你以后只是像我这样做个打杂的民工，也不至于因为技术日新月异的变化而感到害怕和焦虑。不过是狗熊所见略同而已，就是比比谁的爸爸好，谁的时间多。&lt;br&gt;&lt;br&gt;吐槽结束，继续潜水。。。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n作为一个非前端开发人员，看完这篇文章后我的感受是：<b>认认真真，系统科学地学好计算机基础课是多么重要的一件事情</b>。计算机的基础课程里会教你： - 如何做一门 DSL 语言 ( css ) - 如何在屏幕上正确的显示像素 ( html layout and rendering, canvas, webgl, …\n\n<a href=\"/question/39659757/answer/82553316\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-01-20\" target=\"_blank\" href=\"/question/39659757/answer/82553316\">编辑于 2016-01-21</a></p>\n\n",
    "link": "https://zhihu.com/question/39659757/answer/82553316"
  },
  {
    "question": "\n在做 iOS 和 Android 的 HTML5 开发时，你都掉到过哪些坑里？\n",
    "author": "么么小新",
    "content": "\n\n<textarea hidden class=\"content\">我来说一个所遇到的诡异的坑。严格地讲不算是坑，但是比坑更坑100倍，因为你一旦遇到了，压根就没辙。&lt;br&gt;&lt;br&gt;事情是这样的，公司有一个H5开发的游戏。开发、测试、运营一切正常。不久联运了，联运在合作方的平台上。谁想一上平台就不对了，具体的问题是完全找不出问题！在我们的服务器上一切工作正常，但是到合作方的服务上，在手机里怎么刷新就是不工作。由于生产版本是混淆并压缩的，所以在手机上调试及其痛苦。折腾了好几天一直还是黑屏。简直见了鬼了。老大做了好几年游戏，他说以前用主机托管的时代，开服都要给机器烧了香再送去机房。现在这个云服务器年代，没法给云服务器烧香开光啊，咋整？！&lt;br&gt;&lt;br&gt;没法整，为了收入只能硬着头皮继续查。&lt;br&gt;&lt;br&gt;终于一天，调试的小弟在safari 的远程console里面发现有一个js文件404了。但是这个js文件在CDN上存在的好好的，查了和刷了CDN节点，单独访问这个JS文件一切正常。 这个JS文件在我们自己的生产版本中也工作一起正常。就是在合作方的渠道里，用手机打开就404了。 把 404 具体错误信息 dump 下来，发给CDN供应商核对。CDN那里反馈挺快的，答：&lt;b&gt;那个IP不是他们服务器！&lt;/b&gt;&lt;br&gt;&lt;br&gt;见了鬼了！&lt;br&gt;&lt;br&gt;把js文件改名，问题依旧，&lt;b&gt;见了大鬼了&lt;/b&gt;。&lt;br&gt;&lt;br&gt;又折腾了一天，实在没辙了。死马当活马医，把JS 嵌到页面里，工作正常了。 然后反查那个404的 ip，发现对应托管网站是广告联盟。 但是我们压根没在游戏里面查广告啊。 &lt;br&gt;实在摸不着头脑，问了各路朋友。有一个做PC页游的老大哥一语道破天机：&lt;br&gt;&lt;br&gt;他说：“&lt;b&gt;谁叫你们运营域名的名字里带 game 的。 被电信劫持了。&lt;/b&gt;”&lt;br&gt;&lt;br&gt;合作方的&lt;b&gt;运营域名命中电信的劫持条件&lt;/b&gt;，我们的程序js文件被重定向到电信广告系统下的一个服务器上去。那个服务器在回吐这个js文件内容之前，会插一堆广告js代码到页面中。由于我们的游戏是用了一个 z-index:9999 的 canvas 绘制的。所以之前电信插入的广告被挡住了，谁也没发现。 直到那个广告服务坏掉的那天，页面就拉不出来了。&lt;br&gt;&lt;br&gt;不要脸的电信！！！！&lt;br&gt;&lt;br&gt;从此之后，我们所有的 js 文件全部改后缀名叫 css, 改 mimetype 叫 text/plain</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我来说一个所遇到的诡异的坑。严格地讲不算是坑，但是比坑更坑100倍，因为你一旦遇到了，压根就没辙。 事情是这样的，公司有一个H5开发的游戏。开发、测试、运营一切正常。不久联运了，联运在合作方的平台上。谁想一上平台就不对了，具体的问题是完全找不出…\n\n<a href=\"/question/34556725/answer/60484635\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-23\" target=\"_blank\" href=\"/question/34556725/answer/60484635\">编辑于 2015-08-23</a></p>\n\n",
    "link": "https://zhihu.com/question/34556725/answer/60484635"
  },
  {
    "question": "\n如何评价 Google 的新 Logo 及 VI ？\n",
    "author": "诺北",
    "content": "\n\n<textarea hidden class=\"content\">&lt;img src=&quot;https://pic3.zhimg.com/1617b366d01c8c83bb8fd882dfc20816_b.jpg&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic3.zhimg.com/1617b366d01c8c83bb8fd882dfc20816_r.jpg&quot;&gt;&lt;br&gt;你们发的什么我没看懂，我看到的是这样的。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/1617b366d01c8c83bb8fd882dfc20816_200x112.jpg\" data-rawwidth=\"440\" data-rawheight=\"500\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/1617b366d01c8c83bb8fd882dfc20816_r.jpg\">\n你们发的什么我没看懂，我看到的是这样的。\n\n<a href=\"/question/35247399/answer/61917748\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/35247399/answer/61917748\">发布于 2015-09-02</a></p>\n\n",
    "link": "https://zhihu.com/question/35247399/answer/61917748"
  },
  {
    "question": "\n如何评价 React Native？\n",
    "author": "鬼道",
    "content": "\n\n<textarea hidden class=\"content\">UPDATE list：&lt;br&gt;2015.9.21 React Native Android 9.15 提前发布，补充AppStore审核政策变化。&lt;br&gt;2015.5.23 Slide：上海前端技术峰会，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//yunpan.taobao.com/s/GeUkc7lAfI&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;yunpan.taobao.com/s/GeU&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;kc7lAfI&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;2015.4.24 Slide：QCon北京2015，“&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.stuq.org/ppt/show/95/5c28db3ecf661208387127be8878aed3%23/1&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;stuq.org/ppt/show/95/5c&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;28db3ecf661208387127be8878aed3#/1&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;”&lt;br&gt;2015.4.17 天猫前端@横天同学发表的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/tmallfe/tmallfe.github.io/issues/19&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;react-native 之布局篇&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;对&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/facebook/css-layout&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;css-layout&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的布局能力做了一些实验，给出了一些有价值的结论，如：react 宽度基于pt为单位；flex能实现网格系统需求，且网格能够各种嵌套无bug；padding 设置在Text元素上所有padding变成了marginBottom...&lt;br&gt;2015.4.11 风险，iOS6 javascriptCore.framework 为私有，可以通过&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/darionco/JavaScriptCore-iOS&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScriptCore-iOS · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这个库代替。&lt;br&gt;&lt;br&gt;&lt;br&gt;------&lt;br&gt;&lt;blockquote&gt;本文首发于 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/tmallfe/tmallfe.github.io/issues/18&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React Native概述：背景、规划和风险 · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/blockquote&gt;Facebook在2015.3.26 F8大会上开源了React Native（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//facebook.github.io/react/blog/2015/03/26/introducing-react-native.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Introducing React Native&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），本文是对React Native的技术背景、规划和风险的概述。看得比较仓促，问题处请直接回复。&lt;br&gt;&lt;br&gt;组里的同学于2015.4.2完成了天猫iPad客户端“猜你喜欢”业务的React Native改造（4月中发版）。本周开始陆续放出性能/体验、稳定性、扩展性、开发效率等评估结果。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/58e9092803334d1d3397274aec39d9ce_b.jpg&quot; data-rawwidth=&quot;618&quot; data-rawheight=&quot;468&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;618&quot; data-original=&quot;https://pic3.zhimg.com/58e9092803334d1d3397274aec39d9ce_r.jpg&quot;&gt;&lt;br&gt;图1 - 4.2已完成React Native改造的业务&lt;br&gt;&lt;br&gt;&lt;b&gt;一、背景&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;为什么需要 React Native？&lt;/b&gt;&lt;br&gt;&lt;blockquote&gt;What we really want is the &lt;b&gt;&lt;i&gt;user experience&lt;/i&gt;&lt;/b&gt; of the &lt;b&gt;&lt;i&gt;native mobile&lt;/i&gt;&lt;/b&gt; platforms, combined with the &lt;b&gt;&lt;i&gt;developer experience&lt;/i&gt;&lt;/b&gt; we have when building with &lt;b&gt;&lt;i&gt;React&lt;/i&gt;&lt;/b&gt; on the web.&lt;/blockquote&gt;摘自2015.3.26 React Native的发布稿（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//facebook.github.io/react/blog/2015/03/26/introducing-react-native.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Introducing React Native&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），加粗的关键字传达了React Native的设计理念：&lt;i&gt;&lt;b&gt;既拥有Native的用户体验、又保留React&lt;/b&gt;&lt;b&gt;的开发效率&lt;/b&gt;&lt;/i&gt;。这个理念似乎迎合了业界普遍存在的痛点，开源不到1周github star破万，目前是11000+。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/2b00a7740af11c1072bcbb0b1418cbb6_b.jpg&quot; data-rawwidth=&quot;1260&quot; data-rawheight=&quot;102&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1260&quot; data-original=&quot;https://pic3.zhimg.com/2b00a7740af11c1072bcbb0b1418cbb6_r.jpg&quot;&gt;&lt;br&gt;图2 - &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/facebook/react-native/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;facebook/react-native · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;React Native项目成员Tom Occhino发表的React Native: Bringing modern web techniques to mobile（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;墙外地址&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）详细描述了React Native的设计理念。Occhino认为尽管Native开发成本更高，但现阶段Native仍然是必须的，因为Web的用户体验仍无法超越Native：&lt;br&gt;&lt;br&gt;1. Native的原生控件有更好的体验；&lt;br&gt;2. Native有更好的手势识别；&lt;br&gt;3. Native有更合适的线程模型，尽管Web Worker可以解决一部分问题，但如图像解码、文本渲染仍无法多线程渲染，这影响了Web的流畅性。&lt;br&gt;&lt;br&gt;Occhino没提到的还有Native能实现更丰富细腻的动画效果，归根结底是现阶段Native具有更好的人机交互体验。&lt;b&gt;&lt;i&gt;笔者认为这些例子是有说服力的，也是React Native出现的直接原因&lt;/i&gt;&lt;/b&gt;。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/7d5f4a4b5778d79282db620d4bfaa25e_b.jpg&quot; data-rawwidth=&quot;1164&quot; data-rawheight=&quot;1062&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1164&quot; data-original=&quot;https://pic3.zhimg.com/7d5f4a4b5778d79282db620d4bfaa25e_r.jpg&quot;&gt;&lt;br&gt;图3 - Occhino在ReactJS Conf分享了React Native（Keynote）&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;Learn once, write anywhere&lt;/blockquote&gt;“Learn once, write anywhere”同样出自Occhino的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//code.facebook.com/posts/1014532261909640/react-native-bringing-modern-web-techniques-to-mobile/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;文章&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。因为不同Native平台上的用户体验是不同的，React Native不强求一份原生代码支持多个平台，所以不提“Write once, run anywhere”（Java），提出了“Learn once, write anywhere”。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/cfb59019fd8ca0eca353fdbcdfe22bcc_b.jpg&quot; data-rawwidth=&quot;1132&quot; data-rawheight=&quot;642&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1132&quot; data-original=&quot;https://pic1.zhimg.com/cfb59019fd8ca0eca353fdbcdfe22bcc_r.jpg&quot;&gt;&lt;br&gt;图4 - “Learn once, write anywhere”&lt;br&gt;&lt;br&gt;这张图是笔者根据理解画的一张示意图，自下而上依次是：&lt;br&gt;&lt;br&gt;1. React：不同平台上编写基于React的代码，“Learn once, write anywhere”。&lt;br&gt;2. Virtual DOM：相对Browser环境下的DOM（文档对象模型）而言，Virtual DOM是DOM在内存中的一种轻量级表达方式（原话是lightweight representation of the document），可以通过不同的渲染引擎生成不同平台下的UI，JS和Native之间通过Bridge通信（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.cnbang.net/tech/2698/%3Ffrom%3Dgroupmessage%26isappinstalled%3D1&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React Native通信机制详解 «  bang’s blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。&lt;br&gt;3. Web/iOS/Android：已实现了Web和iOS平台，Android平台预计将于2015年10月实现（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//facebook.github.io/react/blog/%23when-is-react-native-android-coming&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Blog | React&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。&lt;br&gt;&lt;br&gt;前文多处提到的React是Facebook 2013年开源的Web开发框架，笔者在翻阅其&lt;a href=&quot;//link.zhihu.com/?target=http%3A//facebook.github.io/react/blog/2013/06/05/why-react.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;发布稿&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;时，发现这么一段：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/641f0124561c4a1c3eafdfe10eabe2cb_b.jpg&quot; data-rawwidth=&quot;1302&quot; data-rawheight=&quot;452&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1302&quot; data-original=&quot;https://pic4.zhimg.com/641f0124561c4a1c3eafdfe10eabe2cb_r.jpg&quot;&gt;&lt;br&gt;图5 - 摘自React发布稿（2013）&lt;br&gt;&lt;br&gt;1. 加亮文字显示2013年已经在开发React Native的原型，现在也算是厚积薄发了。&lt;br&gt;2. 最近另一个比较火的项目是&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Flipboard/react-canvas&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flipboard/react-canvas · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（详见 @rank），渲染层使用了Web Canvas来提升交互流畅性，这和上图第一个尝试类似。&lt;br&gt;&lt;br&gt;React本身也是个庞大的话题不再展开，详见&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/facebook/react/wiki/Complementary-Tools&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;facebook/react Wiki · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;br&gt;笔者认为“Write once, run anywhere”对提升效率仍然是必要的，并且和“Learn once, write anywhere”也没有冲突，我们内部正在改造已有的组件库和HybridAPI，让其适配（补齐）React Native的组件，从而写一份代码可以运行在iOS和Web上，待成熟后开源出来。&lt;br&gt;&lt;br&gt;&lt;b&gt;二、规划&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;下图展示了业务和技术为React Native所做的改造：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/a523eab21566ed967f4f449f33bc8d35_b.jpg&quot; data-rawwidth=&quot;1406&quot; data-rawheight=&quot;948&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1406&quot; data-original=&quot;https://pic2.zhimg.com/a523eab21566ed967f4f449f33bc8d35_r.jpg&quot;&gt;图6 - 业务和技术改造&lt;br&gt;&lt;br&gt;自下而上：&lt;br&gt;&lt;br&gt;1. React Node：React支持服务端渲染，通常用于首屏服务端渲染；典型场景是多页列表，首屏服务端渲染翻页客户端渲染，避免首次请求页面时发起2次http请求。&lt;br&gt;2. React Native基础环境：&lt;br&gt;    2.1. Framework集成：尽管React Native放出了&lt;a href=&quot;//link.zhihu.com/?target=http%3A//facebook.github.io/react-native/docs/embedded-app.html%23content&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Integration with Existing App&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;文档，集成到现有复杂App中仍然会遇到很多细节问题，比如集成到天猫iPad客户端就花了组里iOS同学2天的时间。&lt;br&gt;    2.2. Networking改造：主要是重新建立session，而session通常存放于http header cookie中，React Native提供的网络IO &lt;a href=&quot;//link.zhihu.com/?target=https%3A//fetch.spec.whatwg.org/%23forbidden-header-name&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fetch&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;和XMLHttpRequest不支持改写cookie。所以要不在保证安全的条件下实现fetch的扩展，要么由native负责网络IO（已有session机制）再通过HybridAPI由JS调用，暂时选择了后者。&lt;br&gt;    2.3. 缓存/打包方案：只要有资源从服务器端加载就避免不了这个话题，React Native也是如此，缓存用于解决资源二次访问时的加载性能，打包解决的是资源首次访问时的加载性能。&lt;br&gt;3. MUI是一套组件库，目前会采用向React Native组件补齐的思路进行改造。&lt;br&gt;4. HybridAPI是阿里一组Hybrid API，此前也在多个公开场合（如&lt;a href=&quot;//link.zhihu.com/?target=http%3A//luics.com/demo/hybrid-api/hangjs/%23/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;传感器 @杭JS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）分享过不再累述，React Native建立了自己的通信机制，看起来更高效（未验证），改造成本不大。&lt;br&gt;5. 最快的一个业务将于4月中上线，通过最初几个业务改造推动整体系统的改造，如果效果如预期则会启动更大规模的业务改造。&lt;br&gt;&lt;br&gt;&lt;blockquote&gt; 更多详细规划和进展，以及性能、稳定性、扩展性的数据随后放出。 &lt;/blockquote&gt;&lt;br&gt;&lt;b&gt;三、风险&lt;/b&gt;&lt;br&gt;&lt;br&gt;1. 尽管Facebook有3款App（Groups、Ads Manager、F8）使用了React Native，随着React Native大规模应用，Appstore的政策是否有变不得而知，我们只能往前走一步。&lt;br&gt;    * 更新：&lt;img src=&quot;https://pic4.zhimg.com/df4ba5537bef779ba4a0b9cabe8ef5bb_b.png&quot; data-rawwidth=&quot;766&quot; data-rawheight=&quot;162&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;766&quot; data-original=&quot;https://pic4.zhimg.com/df4ba5537bef779ba4a0b9cabe8ef5bb_r.png&quot;&gt;&lt;br&gt;&lt;i&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//adcdownload.apple.com/Documentation/License_Agreements__Apple_Developer_Program/Apple_Developer_Program_Agreement_20150728.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2015.7.28 AppStore审核政策调整&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：&lt;/i&gt;&lt;i&gt;允许运行于JavascriptCore的动态&lt;/i&gt;&lt;i&gt;加载&lt;/i&gt;&lt;i&gt;代码，下图是此前的审核政策，对比加亮部分的改变。&lt;/i&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/7abbb3ddb2ca61692664d49d975431ec_b.png&quot; data-rawwidth=&quot;478&quot; data-rawheight=&quot;220&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;478&quot; data-original=&quot;https://pic1.zhimg.com/7abbb3ddb2ca61692664d49d975431ec_r.png&quot;&gt;&lt;br&gt;2. React Native Android 已于2015.9.15发布，第一个使用RN开发的Android App（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//play.google.com/store/apps/details%3Fid%3Dcom.facebook.adsmanager&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Facebook Adverts Manager&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）2015.6.29已上架Play了。&lt;br&gt;3. iOS6 javascriptCore.framework 为私有，如在iOS6上使用有拒审风险。（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//stackoverflow.com/questions/23514579/javascriptcore-framework-availability-on-ios&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;stackoverflow.com/quest&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ions/23514579/javascriptcore-framework-availability-on-ios&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），可以通过&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/darionco/JavaScriptCore-iOS&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScriptCore-iOS · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这个库代替，涉及改动较多，只在实验阶段支持了iOS6。&lt;br&gt;4. ListView 性能问题需要持续关注（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/facebook/react-native/issues/499&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ListView renders all rows? · Issue #499 · facebook/react-native · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;br&gt;React Native相对于Webview和Native的优势和劣势 @berg 也给出了较详细的描述，可以相互参照。&lt;br&gt;&lt;br&gt;鬼道  &lt;br&gt;2015.4.6</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/58e9092803334d1d3397274aec39d9ce_200x112.jpg\" data-rawwidth=\"618\" data-rawheight=\"468\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/58e9092803334d1d3397274aec39d9ce_r.jpg\">\nUPDATE list： 2015.9.21 React Native Android 9.15 提前发布，补充AppStore审核政策变化。 2015.5.23 Slide：上海前端技术峰会，<a href=\"//link.zhihu.com/?target=http%3A//yunpan.taobao.com/s/GeUkc7lAfI\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">yunpan.taobao.com/s/GeU</span><span class=\"invisible\">kc7lAfI</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 2015.4.24 Slide：QCon北京2015，“<a href=\"//link.zhihu.com/?target=http%3A//www.stuq.org/ppt/show/95/5c28db3ecf661208387127be8878aed3%23/1\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">stuq.org/ppt/show/95/5c</span><span class=\"invisible\">28db3ecf661208387127be8878aed3#/1</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a>” 2015.4.17 天猫前端@横天同学发表的<a href=\"//link.zhihu.com/?target=https%3A//github.com/tmallfe/tmallfe.github.io/issues/19\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">react-…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/27852694/answer/43990708\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-04-06\" target=\"_blank\" href=\"/question/27852694/answer/43990708\">编辑于 2016-02-14</a></p>\n\n",
    "link": "https://zhihu.com/question/27852694/answer/43990708"
  },
  {
    "question": "\n有哪些经常被误用的 HTML、JavaScript、CSS 的元素、方法和属性？\n",
    "author": "一丝",
    "content": "\n\n<textarea hidden class=\"content\">泻药！&lt;br&gt;仅说一下 CSS 方面的吧。&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;float:left/right 或者 position: absolute 后还写上 display:block，画蛇添足（三者关系：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/TR/CSS2/visuren.html%23dis-pos-flo&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Visual formatting model&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/9dd53ac490a42e46a5c34af771937e2e_b.jpg&quot; data-rawwidth=&quot;720&quot; data-rawheight=&quot;540&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic3.zhimg.com/9dd53ac490a42e46a5c34af771937e2e_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;不分场景的使用 overflow:hidden 来闭合浮动（详见：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iyunlu.com/view/css-xhtml/55.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;那些年我们一起清除过的浮动&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/0813d7456eef59086696a644f190342a_b.jpg&quot; data-rawwidth=&quot;579&quot; data-rawheight=&quot;334&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;579&quot; data-original=&quot;https://pic3.zhimg.com/0813d7456eef59086696a644f190342a_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;为了让 Chrome 这个脑残支持小于12px 的文字，在 html 设置 -webkit-text-size-adjust:none; (最新的桌面版该属性已经被删除了，变更集：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//trac.webkit.org/changeset/145168&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Changeset 145168&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;认为 px 是一个&lt;b&gt;绝对单位（px 是相对单位）&lt;/b&gt;，整个页面都是 px，line-height 也用 px，全家都是 px&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/e7e8dfbda252f732616c00777b2fc4ff_b.jpg&quot; data-rawwidth=&quot;623&quot; data-rawheight=&quot;325&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;623&quot; data-original=&quot;https://pic4.zhimg.com/e7e8dfbda252f732616c00777b2fc4ff_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;习惯性不分场景的去除 a 标签 focus 时候的焦点&lt;/li&gt;&lt;li&gt;认为布局就是 Float，所有的地方都是 Float，全家都是 Float！（试试 inline-block &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iyunlu.com/view/css-xhtml/64.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;inline-block 前世今生&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 吧，试试 Flexbox 吧）&lt;/li&gt;&lt;li&gt;满页面都是用 .clearfix 来闭合浮动，如果已经有了BFC为嘛还要在闭合浮动呢？毒害不浅，某浪微博为例，102个 .clearfix&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/a7a11fa8753bd56ac241780abb3dd212_b.jpg&quot; data-rawwidth=&quot;363&quot; data-rawheight=&quot;25&quot; class=&quot;content_image&quot; width=&quot;363&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;好吧我还是说点其他的吧：&lt;br&gt;&lt;ol&gt;&lt;li&gt;搞不拎清 PNG 的分类，认为 PNG24 支持透明，不知道 PNG8 也支持 α 透明（可以看看：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iyunlu.com/view/Front-end/60.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;PNG的秘密&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;我又要吐槽 Label 不加 for ，或者 for 属性加的不对的问题（请看：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iyunlu.com/view/lenovo/73.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;雅安地震，前端开发者可以做什么？&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;看到&lt;a class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; data-tip=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;老湿说道 ul，ol 滥用的问题，我举一个本来应该用 ol 却写成 ul 的例子：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//weiba.weibo.com/%3Ftopnav%3D1%26wvr%3D5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 | 微吧 一起扎堆吧！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;找反面教材，都去渣浪吧，渣浪你承认不？&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/47e58d739b6c52d9b3cb0070ba3b4bb5_b.jpg&quot; data-rawwidth=&quot;213&quot; data-rawheight=&quot;531&quot; class=&quot;content_image&quot; width=&quot;213&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;查看源码，满屏都是 div 的就不多说了吧……&lt;/li&gt;&lt;/ol&gt;好吧，&lt;b&gt;我已经原谅你们了，或许你遇到了学习瓶颈：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/0941994325f072c876d037845a9d0edc_b.jpg&quot; data-rawwidth=&quot;384&quot; data-rawheight=&quot;354&quot; class=&quot;content_image&quot; width=&quot;384&quot;&gt;图片来源：《CSS 进阶之路》&lt;a href=&quot;//link.zhihu.com/?target=https%3A//skydrive.live.com/%3Fid%3D4817543FE4BCFC5E%21107%26cid%3D4817543fe4bcfc5e%23%21/view.aspx%3Fcid%3D4817543FE4BCFC5E%26resid%3D4817543FE4BCFC5E%2521108%26app%3DPowerPoint&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;skydrive.live.com/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;id=4817543FE4BCFC5E!107&amp;amp;cid=4817543fe4bcfc5e#!/view.aspx?cid=4817543FE4BCFC5E&amp;amp;resid=4817543FE4BCFC5E%21108&amp;amp;app=PowerPoint&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;延伸阅读：&lt;a href=&quot;http://www.zhihu.com/question/19588854&quot; class=&quot;internal&quot;&gt;在 CSS 布局中，用 float 好还是用 position 好？分别有什么优势？&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;以上都是片面或者不对的！&lt;/b&gt;&lt;br&gt;&lt;b&gt;一丝&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/0941994325f072c876d037845a9d0edc_200x112.jpg\" data-rawwidth=\"384\" data-rawheight=\"354\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/0941994325f072c876d037845a9d0edc_r.jpg\">\n泻药！ 仅说一下 CSS 方面的吧。 float:left/right 或者 position: absolute 后还写上 display:block，画蛇添足（三者关系：<a href=\"//link.zhihu.com/?target=http%3A//www.w3.org/TR/CSS2/visuren.html%23dis-pos-flo\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Visual formatting model<i class=\"icon-external\"></i></a>） 不分场景的使用 overflow:hidden 来闭合浮动（详见：<a href=\"//link.zhihu.com/?target=http%3A//www.iyunlu.com/view/css-xhtml/55.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">那些年我们一起清除过的浮动<i class=\"icon-external\"></i></a>） 为了让 Chrome 这个…\n\n<a href=\"/question/20979831/answer/16788400\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-04-23\" target=\"_blank\" href=\"/question/20979831/answer/16788400\">编辑于 2016-06-01</a></p>\n\n",
    "link": "https://zhihu.com/question/20979831/answer/16788400"
  },
  {
    "question": "\n前端界有哪些越早知道越好的小技巧小知识？\n",
    "author": "毛文强",
    "content": "\n\n<textarea hidden class=\"content\">某日，某大公司要做一个网站，一群专家、老鸟、菜鸟、前端、后台、全栈们汇集一堂讨论技术框架。&lt;br&gt;&lt;br&gt;后台框架的选型讨论略显沉闷，“SpringMVC + MyBatis + Redis”，几个后台老鸟互相给了个眼色，白纸黑字写了下来。本想有所作为的全栈们似乎想要说些什么，奈何自己势单力薄，欲言又止。&lt;br&gt;&lt;br&gt;前端框架的选型开始了。几个全栈前端撸了撸袖子，意欲大干一场。&lt;br&gt;“用ng吧，google的产品，质量有保证！”老A抛出了一个烫手的山芋。&lt;br&gt;“ng是什么？”前端菜鸟小B小声问旁边的师父C。&lt;br&gt;“就是Angular.js，老A就不会说人话。”老C跟小B说。&lt;br&gt;“笑话！ng用哪个版本？1版问题太多快要被抛弃，2版刚从娘胎里出生走路都还不会呢，谁敢用？”作为全栈代表的老D毫不留情地回击老A。&lt;br&gt;“还是backbone好，结合marionette，代码写起来还是很爽的！”用惯了backbone的菜鸟小E勇敢地提出了自己的想法。&lt;br&gt;“backbone框架也太简单点了吧？要写好多代码，做好多重复性工作。”刚被浇了一盆冷水的老A重新挺直了腰板发表意见。&lt;br&gt;“支持国产，用一下vue.js？”&lt;br&gt;几个老鸟纷纷摇头，“没怎么用过不太熟悉啊！”&lt;br&gt;“react？”&lt;br&gt;“貌似学习曲线有点高啊！”&lt;br&gt;“Extjs吧，我用着还是蛮好用的。”众人纷纷投之以鄙夷的眼神。&lt;br&gt;“GWT呢？”众人哄堂大笑&lt;br&gt;&lt;br&gt;“我建议这个框架选型问题我们先放一边，我们先来选择一下用什么来写？js？coffeeScript？es6？”一个后台老鸟看不下去了。&lt;br&gt;“当然是js啊！”&lt;br&gt;“别老土了，看过2016年的前端流行趋势没？以后是es6的天下，我们要有点远见不是？”&lt;br&gt;“coffeeScript我觉得也挺好啊，有点小清新的感觉~”&lt;br&gt;“要不我们试试TypeScript？”&lt;br&gt;“TypeScript的模块加载机制很怪啊。”&lt;br&gt;“用ES6 webpack就可以。”&lt;br&gt;“不习惯，前端还是用requirejs的好！”&lt;br&gt;“seajs多简洁啊，阿里出品，玉伯发起的，我还是他的粉丝呢~”&lt;br&gt;&lt;br&gt;眼见还是争执不下，PM过来维护了一下秩序：“这样讨论下去也不是个事儿，我提议这样，让这次承担开发任务的X组组长会议之后做一次技术方案出来，然后大家有针对性的讨论。正好现在也到饭点了，大家要不先去吃饭去吧？”&lt;br&gt;&lt;br&gt;众人作罢。&lt;br&gt;&lt;br&gt;“backbone + jQuery2.1 + requirejs + grunt + mocha” X组组长提出了这一整套技术方案。&lt;br&gt;“为什么用jQuery2，不考虑兼容性吗？”&lt;br&gt;“jQuery太大了，用zepto代替吧”&lt;br&gt;“这个网站不是主要在移动端展示嘛，cash体积最小，很合适的！”&lt;br&gt;“grunt太笨重，gulp多简洁”&lt;br&gt;“jasmine测试也不错”&lt;br&gt;……&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;最后，由于项目经理对开发周期的要求，前端选型不得不告一段落，最终的网站只用到了jQuery等几个简单的js库。由于大家对jQuery都很熟悉，所以开发效率很高，再加上几个前端老鸟的性能调优，整个网站呈现效果颇让人满意。&lt;br&gt;&lt;br&gt;&lt;br&gt;本故事纯属事实，如有雷同，赏个赞呗！&lt;br&gt;&lt;br&gt;&lt;br&gt;前端的开源和共享的本质造就了前端资源的空前繁荣，同样也会逼死选择困难症患者。同时，前端发展这么快，新框架后浪推前浪，想要对每个框架都了如指掌是很困难的。所谓前端熟手大多数情况下只能对自己熟悉的几个框架做出合理的评价。然而只是作为框架使用者是很难达到顶尖前端的程度。&lt;br&gt;如果一定要说一个越早知道越好的小知识：&lt;br&gt;&lt;br&gt;&lt;b&gt;在你确定需要框架之前，不要迷恋框架，不要过度设计。简单的往往是最好的。有了扎实的基础做根蒂，框架不过是浮华云烟。&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n某日，某大公司要做一个网站，一群专家、老鸟、菜鸟、前端、后台、全栈们汇集一堂讨论技术框架。 后台框架的选型讨论略显沉闷，“SpringMVC + MyBatis + Redis”，几个后台老鸟互相给了个眼色，白纸黑字写了下来。本想有所作为的全栈们似乎想要说些什么，奈…\n\n<a href=\"/question/43687153/answer/96313461\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-04-22\" target=\"_blank\" href=\"/question/43687153/answer/96313461\">编辑于 2016-04-23</a></p>\n\n",
    "link": "https://zhihu.com/question/43687153/answer/96313461"
  },
  {
    "question": "\n码农如何从零开始做出有设计感的app？\n",
    "author": "郦橙 锦妖",
    "content": "\n\n<textarea hidden class=\"content\">（iPad答题，请容忍糟糕排版&amp;gt;_&amp;lt;）&lt;br&gt;&lt;br&gt;这个问题其实有两个思路，你是现在就想做个美美哒app，还是像先变成设计师再做美美哒app，如果是后者，请参考其他答案～&lt;br&gt;&lt;br&gt;【高亮】我为什么要写这个？因为我喜欢做产品，也喜欢做设计，我只差一个程～序～员～有意向的请私信我，我们可以分享一下对产品的想法，两边都觉得好的就你出代码我出设计，把app做起来～【高亮就这么结束了】&lt;br&gt;&lt;br&gt;职业之间的信息不对称啊，你以为设计师都是一个像素一个像素从头搭的吗，不不不，我们也是有偷懒的诀窍的。。。读完此篇，只要你有ps或者sketch，知道图层的概念，可以把元素导出为所需格式，app的活儿你就能一个人干了。&lt;br&gt;&lt;br&gt;你的设计难度会从 ---&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;500&quot; data-rawheight=&quot;328&quot; src=&quot;https://pic4.zhimg.com/9c5157f64a6602cbda212ef2fb187997_b.jpeg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic4.zhimg.com/9c5157f64a6602cbda212ef2fb187997_r.jpeg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;变成 ---&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;600&quot; data-rawheight=&quot;337&quot; src=&quot;https://pic4.zhimg.com/0716acc4bf06fd81e03c58757ac4f58f_b.jpeg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic4.zhimg.com/0716acc4bf06fd81e03c58757ac4f58f_r.jpeg&quot;&gt;&lt;br&gt;--- 提纲 ---&lt;br&gt;&lt;br&gt;1. 做app需要图标，我又不会画，怎么办？搜到一些现成的，但质量又不高，怎么办？图标不成套怎么办？&lt;br&gt;&lt;br&gt;2. 没有审美怎么办？&lt;br&gt;&lt;br&gt;3. 心里有个app想法，但是线框图画不出来怎么办？&lt;br&gt;&lt;br&gt;4. iOS那么多尺寸，Android尺寸更吓人，全都要记住吗，导出@1x@2x@3x点九图什么的是不是很麻烦？&lt;br&gt;&lt;br&gt;5. 说了这么多，还是要我从空白画布上画吗？！没有美术基础啊！当然不是啦～&lt;br&gt;&lt;br&gt;6. 还有什么问题可以提问哈。&lt;br&gt;&lt;br&gt;--- 正文 ---&lt;br&gt;&lt;br&gt;&lt;br&gt;1. 图标苦手怎么办&lt;br&gt;&lt;br&gt;就算是设计师，一个一个画图标也是很累的。&lt;br&gt;这时候，如果有钱，请到选项到A；如果没钱或者不想花钱，请到选项B。&lt;br&gt;&lt;br&gt;A 如果非常有钱，请直接把钱给我，我把图标给你哈哈哈。如果有一点钱，可以去&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.shutterstock.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;shutterstock.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 或者 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.pixeden.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pixeden.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 买，图标站还有很多，先列这两个，反正你们更想看免费的对不对。&lt;br&gt;&lt;br&gt;B &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.flaticon.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;flaticon.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 是你的好朋友，最好的朋友之一。虽然最近突然改版，变得有点难用，但海量，成套，免费，你还图啥？缺点可能是风格比较单一，想要fancy一点的怎么办？smashing magazine帮助你，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.smashingmagazine.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;smashingmagazine.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 只要搜索freebie即可，最早几年的icon质量不太行，也过时了，越是新帖质量越好。&lt;br&gt;&lt;br&gt;举个栗子，随便点开一个。&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;1000&quot; data-rawheight=&quot;1080&quot; src=&quot;https://pic1.zhimg.com/77203fc64a1ae7a5079b05227e4248c0_b.jpeg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic1.zhimg.com/77203fc64a1ae7a5079b05227e4248c0_r.jpeg&quot;&gt;&lt;br&gt;&lt;br&gt;可以调大小，可以改颜色，可以调线条粗细，用上这些，是不是b格噌得就上天了！这些都是顶级设计师放出来的免费资源，你花钱雇的设计师未必画得出来。。。&lt;br&gt;&lt;br&gt;2. 没有审美怎么办？&lt;br&gt;&lt;br&gt;这个就没有特效药了。据我的观察，没有审美天赋的人，可以判断好看和不好看，但无法判断好看和更好看，这时候如果你有个设计师朋友，请付费或者请吃饭，向他咨询咨询吧。&lt;br&gt;&lt;br&gt;疗程缓慢的办法有：多看dribbble（eye candy多，但可以了解趋势和审美取向），多用好评和获奖的app，“最美应用”你下载了吗？“豌豆荚设计奖”你看了吗？（&lt;a href=&quot;//www.zhihu.com/people/c6e85ba5d5999df4c5ce2f2903b1ce0e&quot; data-hash=&quot;c6e85ba5d5999df4c5ce2f2903b1ce0e&quot; class=&quot;member_mention&quot; data-tip=&quot;p$b$c6e85ba5d5999df4c5ce2f2903b1ce0e&quot; data-hovercard=&quot;p$b$c6e85ba5d5999df4c5ce2f2903b1ce0e&quot;&gt;@马力&lt;/a&gt;请点赞～）每年app store 的盘点你都关注了吗？&lt;br&gt;&lt;br&gt;3. 构思不好app流程怎么办？&lt;br&gt;&lt;br&gt;$1 prototype大法，来自一本同名书，我刚看完个开头，所以以下是我根据它的目录和我的经验编的。。。具体就是“场景” - “过程” - “界面”。&lt;br&gt;&lt;br&gt;先想象用户在什么情况下用，涉及几个用户，他们在干什么。比如，yelp，是用户需要找地方吃饭，所以一般只有一个用户（相对于uber两方用户，群聊n方用户），输入是一些查询条件，输出是在哪儿有饭吃。&lt;br&gt;&lt;br&gt;现在细化过程，用户从打开app到达到目标，有哪些步骤。还是yelp，一般情况就是打开app，输入查询条件，看到结果，筛选，满意的话查看商家详情，不满意的话可能重新搜索可能更改筛选条件。这是主线剧情，还有些支线剧情，比如看到一个用户的评价很好，查看用户的其他评价，follow用户；还有自己身在餐馆，拍了菜单拍了菜，上传到yelp。把所有的剧情，都在流程图上画出来。&lt;br&gt;&lt;br&gt;期间可能会遇到一些细节。用户先输入什么呢，是餐厅类型，还是只要能吃就可以？距离这个信息是gps给还是用户自己输，或者其实距离无所谓，反正用户有车呢？价格是什么时候出现？是搜索的时候就限定价格，还是结果出来以后再筛选？这些都不怕，反正也是要改的。。。而且一般自己想做的app也没有这么复杂。&lt;br&gt;&lt;br&gt;你有一个流程图了，界面就简单了。把元素往界面上摆一摆，推荐用手机大小的便利贴，拿铅笔画上去，有很多东西玩app多了都有经验，搜索结果是啥，不就map view和list view么，怎么筛选，放一个漏斗icon在标题栏里呗，酱酱酿酿就好了。接下来就是把亲朋好友拉过来，让他们玩一下这个paper prototype，发现不对的地方再改。&lt;br&gt;&lt;br&gt;有两个软件推荐，一个&lt;a href=&quot;//link.zhihu.com/?target=https%3A//popapp.in&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;popapp.in&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 好久不用，希望它还是免费的。一个&lt;a href=&quot;//link.zhihu.com/?target=https%3A//marvelapp.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;marvelapp.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 免费无限量project，真良心，我一直期待它被adobe收购，结果adobe既没有收它，也没有invision，而是准备自己做一个comet。。。真傲娇。&lt;br&gt;&lt;br&gt;4. 尺寸记不住怎么办？&lt;br&gt;&lt;br&gt;就不要用ps了，sketch做为生产力工具，真的不贵，都不是按月按年subscribe的，一次买一生，有什么舍不得的，买吧。以后用它直接新建画板，就不用记住那么多尺寸了，导出图片也特别方便，ps切图再见。&lt;br&gt;&lt;br&gt;5. 面对空白画布下不去手怎么办？&lt;br&gt;&lt;br&gt;前面提到了invision，这家公司的marketing很牛，设计也很牛，市场部为了宣传他们的产品，让设计师做了很多的高质量免费模版给其他设计师下载。&lt;br&gt;&lt;br&gt;举个栗子。&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;1430&quot; data-rawheight=&quot;628&quot; src=&quot;https://pic1.zhimg.com/683695de805a1232ac79b44fa156a628_b.jpeg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1430&quot; data-original=&quot;https://pic1.zhimg.com/683695de805a1232ac79b44fa156a628_r.jpeg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;再举一个。&lt;br&gt;&lt;br&gt;&lt;img data-rawwidth=&quot;2754&quot; data-rawheight=&quot;2516&quot; src=&quot;https://pic1.zhimg.com/8987d5df7629dcdd3f21e58479eff418_b.jpeg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2754&quot; data-original=&quot;https://pic1.zhimg.com/8987d5df7629dcdd3f21e58479eff418_r.jpeg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;这些全是一整套，一整套啊，意味着登陆界面，dashboard，阅读文章的界面，购物车，天气，聊天对话各种界面都很可能有。格式一般都有ps，sketch两种，有时有ai，和设计师打包给你的成品差距不大，你可能需要一个切图仔，或者自己来。&lt;br&gt;&lt;br&gt;这些不够怎么办？&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//graphicburger.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;graphicburger.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//freebiesbug.com/psd-freebies/ui-kits/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;freebiesbug.com/psd-fre&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ebies/ui-kits/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//ui8.net/categories/freebies&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ui8.net/categories/free&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;bies&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;这样总行了吧。&lt;br&gt;&lt;br&gt;6. 其他问题。&lt;br&gt;&lt;br&gt;应该没有其他问题了吧。结尾再高亮一下。&lt;br&gt;&lt;br&gt;【高亮】如果你有个人项目的app idea，欢迎和我沟通，如果我感兴趣我会出设计，你出代码。如果你想写app但“就差一个idea了”也欢迎私信，我可以跟你谈谈我的想法。【高亮卒】</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawwidth=\"500\" data-rawheight=\"328\" src=\"https://pic4.zhimg.com/9c5157f64a6602cbda212ef2fb187997_200x112.jpeg\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/9c5157f64a6602cbda212ef2fb187997_r.jpeg\">\n（iPad答题，请容忍糟糕排版&gt;_&lt;） 这个问题其实有两个思路，你是现在就想做个美美哒app，还是像先变成设计师再做美美哒app，如果是后者，请参考其他答案～ 【高亮】我为什么要写这个？因为我喜欢做产品，也喜欢做设计，我只差一个程～序～员～有意向的请私…\n\n<a href=\"/question/36813390/answer/87029428\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-02-19\" target=\"_blank\" href=\"/question/36813390/answer/87029428\">编辑于 2016-02-19</a></p>\n\n",
    "link": "https://zhihu.com/question/36813390/answer/87029428"
  },
  {
    "question": "\n想成为前端工程师，那么在大学期间应该如何规划？\n",
    "author": "雨戟",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;为了能让大家第一眼阅读到最新内容，更新就写到上面了。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;背景介绍：一个注重美学的WEB&lt;/b&gt;&lt;b&gt;工程师，&lt;/b&gt;&lt;b&gt;可能擅长php+js&lt;/b&gt;&lt;br&gt;&lt;br&gt;这篇文章写于12年年初，到现在有三年多了，截至到现在赞同数549，被收藏 1290 次，不算多。前端近几年发展太快，原回答已经不是很符合意境了，所以我还是继续补充了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;目录&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;旧文（&lt;b&gt;2014年前&lt;/b&gt;）&lt;/b&gt;&lt;/li&gt;&lt;br&gt;&lt;li&gt;&lt;b&gt;大学规划：&lt;/b&gt;&lt;b&gt;培养习惯和拓宽视野（&lt;b&gt;2015年11月1日&lt;/b&gt;）&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;前端的两个流派：&lt;/b&gt;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;切图流（&lt;b&gt;2015年10月31日&lt;/b&gt;）&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;技术流（&lt;b&gt;2016年1月18日 - &lt;/b&gt;&lt;b&gt;1月22日&lt;/b&gt;）&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;旧文&lt;/b&gt;&lt;br&gt;&lt;br&gt;前端是近几年发展起来的职业，很多新人对前端的认识比较模糊，因此开篇我有必要介绍一番，大众眼中的前端分为多个方面：前端偏美工是视觉设计，前端偏用户是用户体验，前端偏目标导向是交互设计，前端偏技术才是大家口中的前端工程师。&lt;br&gt;&lt;br&gt;有的前端需要熟悉 PS，AI 等设计师作图工具，有的人需要熟悉HTML+CSS，比较难的就是JavaScript了。很多人上来就直接建议这个建议那个，在此之前不妨先了解一下大前端的一些细节。&lt;br&gt;&lt;br&gt;我们经常在一些社区评论留言，留言的过程：&lt;br&gt;&lt;br&gt;1. 打开留言页面&lt;br&gt;2. 输入留言内容&lt;br&gt;3. 点击提交按钮&lt;br&gt;4. 留言显示在留言列表上&lt;br&gt;&lt;br&gt;我这里不解释这个过程的实现原理，我们先来简单的梳理前端工程师、视觉设计师、用户研究工程师、交互设计师的理职位区别或者说他们思考的角度：&lt;br&gt;&lt;br&gt;&lt;strong&gt;前端工程师：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;留言框代码怎么写？&lt;/strong&gt;留言框的显示、一些JS动态效果的显示（可能涉及异步请求）。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;视觉设计师：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;什么样的留言框最漂亮？&lt;/strong&gt;用什么色彩还是需要做一些纹理？&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;用户研究工程师：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;用户怎么留言最舒服？&lt;/strong&gt;很多人可能会和用户体验师混淆在一起，其实这两种人有着本质的区别，用户研究更侧重的是方法论，注重问卷调查访谈等等行为来了解用户的潜在行为习惯，而用户体验是一种行为，更侧重的是体验之后的实际感受。&lt;br&gt;&lt;br&gt;&lt;strong&gt;交互设计师：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;场景布局，留言过程中的反馈？&lt;/strong&gt;输入错误后的提示，留言成功后的反馈等等。交互设计可以理解为人机对话，交互设计侧重和用户交流之后，引导用户有效操作，比如鼠标放在超链接上字体变颜色，有title提示，用户点击超链接，我们就可以称这次交互是成功的，因此交互设计的重点在于目标向导。&lt;br&gt;&lt;br&gt;这些分工十分细微，如果留言本是一个项目的话，需要从几个不同的角度来分析留言框，一个大型的项目比如社交网站、门户网站、行业网站这些职位都必须明确分工才能把整个项目做好，但是实际上即使条理清晰在项目开展过程中还会出现诸多意想不到的问题。&lt;br&gt;&lt;br&gt;现在你还认为你理解意义上的前端是前端吗？我以前以为前端是美工，但是后来我发现很多前端博客都在研究各种js框架，相比较而言我更喜欢视觉设计，但是我依旧也是一个前端，因为前端多姿多彩。&lt;br&gt;&lt;br&gt;&lt;b&gt;2015年11月1日续写....&lt;/b&gt;&lt;br&gt;&lt;br&gt;我极其不赞同那些发一大篇大而全知识结构图，那种回答然并卵，对于普遍大学生来说，太技术的东西他们根本看不懂，在我看来&lt;b&gt;大学生更重要的是培养习惯和拓宽视野。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;题主提到的是大学时期的规划，那就说说大学可以干的一些事情。&lt;/b&gt;内容不局限在某个特定职位，你可能做不到全部，这些能力也不可能一蹴而就，但只要坚持做到几点，对以后职业生涯是受益匪浅。&lt;br&gt;&lt;br&gt;&lt;b&gt;先学会科学上网再说&lt;/b&gt;&lt;br&gt;之前培训新人给他们分享过很多文章链接他们都访问不了，沟通大受局限，因此我把科学上网摆在第一位，之后分享的链接有部分人可能无法访问，需自学科学上网，这里就不多说了。&lt;br&gt;&lt;br&gt;&lt;b&gt;学好英语&lt;/b&gt;&lt;br&gt;除了团队内部沟通用中文外，大量时间都是在和英文打交道。从事技术不会英语等同于文盲，尤其在技术进阶阶段英语的重要性毋庸置疑。三点：&lt;br&gt;1. 读懂英文技术文档（文档的重要性和时效性超过书籍）。&lt;br&gt;2. 可以用英文进行交流（社交网络 &amp;amp; IM等聊天工具）。&lt;br&gt;3. 读懂代码（除英文外，还需要懂编程语言）。&lt;br&gt;&lt;br&gt;&lt;b&gt;从书本里解脱出来&lt;/b&gt;&lt;br&gt;书非借而不读也，个人比较建议大学生多去图书馆看书，但不必沉溺，目前市面上的现有的大部分技术书籍质量不高，相比较技术书籍，我更愿意新人学会看文档，甚至到达一定水准，直接看代码就知道该怎么用一些技术了。&lt;br&gt;&lt;br&gt;说一些日常发现的比较多的问题，我发现即使很多文档写的条理清晰、Demo齐全，新人读起来还是非常吃力。一方面某些技术的涵盖的范围很广，新人知识结构比较片面，很难理解一些概念；另一方面新人大多是看书和课后习题出来的，文档读的太少了，不能理解文档的意图。&lt;br&gt;&lt;br&gt;分享两个我至今还一直在参考的文档网站：&lt;br&gt;&lt;br&gt;入门级：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3school 在线教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3schools.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3schools.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;参考书：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Web 技术文档&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;Demo平台，你可以在这里运行你的Demo。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CodePen - Front End Developer Playground &amp;amp; Code Editor in the Browser&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jsfiddle.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Create a new fiddle&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;你要了解的两个窗口：浏览器和编辑器&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 浏览器&lt;/b&gt;&lt;br&gt;&lt;b&gt;Safari &lt;/b&gt;Webkit&lt;br&gt;&lt;b&gt;Chrome &lt;/b&gt;Blink（Webkit分支）&lt;br&gt;&lt;b&gt;Opera &lt;/b&gt;Webkit（Opera已死，早先的Presto就不拿来说了）&lt;br&gt;&lt;b&gt;Firefox &lt;/b&gt;Gecko&lt;br&gt;&lt;b&gt;IE &lt;/b&gt;Trident 注 微软已经放弃 IE 11 以下版本更新了&lt;br&gt;&lt;b&gt;Edge&lt;/b&gt; EdgeHTML （Trident 分支）&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 编辑器&lt;/b&gt;&lt;br&gt;&lt;b&gt;Sublime Text&lt;/b&gt; 首推&lt;br&gt;&lt;b&gt;vim/emacs&lt;/b&gt; 太极端了&lt;br&gt;&lt;b&gt;IDE&lt;/b&gt; 太笨重了&lt;br&gt;&lt;br&gt;浏览器 &amp;amp; 编辑器 会是你以后最重要的两个伙伴了，学会和她们相处，对工作效率的提升不是一丁半点。怎么相处？那是你的事儿了。&lt;br&gt;&lt;br&gt;&lt;b&gt;加入校内Web团队，找兼职工作或者去有意的公司实习&lt;/b&gt;。&lt;br&gt;不同团队，不同项目所用到的技术栈都不一样，你可以从校园内部开始，逐渐把目光放的更长远，你可以关注一些意向公司的动态，了解他们的需求，可以关注他们的微博，你可以用寒暑假的时间去不同公司感受前端在不同公司的不同之处，对于拓宽视野非常有帮助。&lt;br&gt;&lt;br&gt;&lt;b&gt;关注开源项目、技术社区和技术博客。&lt;/b&gt;&lt;br&gt;&lt;br&gt;日常根本没有太多时间关注太多东西，以下只推荐几个我平时经常关注的平台：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub · Where software is built&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;Github可以是搜索引擎、可以是社交平台、可以是项目托管平台。你可以近距离的看到世界级的精英都怎么写代码的。我平时大量时间都泡在Github上看代码了，我的编程水平也不高，但是我知道怎么去欣赏一个项目，这是一种享受，跟看了一本小说一样。&lt;br&gt;&lt;br&gt;多说几句：我很少看技术书籍，我学编程不是从语法开始的，我喜欢直接看整体项目，然后自我感悟。再带着问题去Google解决自己的疑问。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//stackoverflow.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Stack Overflow&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;除了Github外，Stack Overflow也帮我解决了诸多平时项目中遇到的坑。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//css-tricks.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS-Tricks&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;不得不说CSS Tricks上有很多高质量的文章，但对我自己来说，我更多的是来凑个热闹，看看文章，看看评论，学习下英文不亦乐乎。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//segmentfault.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;SegmentFault&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;除了看每周精选外，我很少在SegmentFault上搜东西。但是作为从Typecho关注过来的人，还是特别希望SegmentFault能有好发展。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阮一峰的网络日志&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ruanyf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ruanyf (Ruan YiFeng) · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;国内技术博客第一人，无他。避免歧义还是说明下，其实他的博客并非都是技术文，而且很多关于技术的文章更多的科普和人文，但是一个人能长期用心坚持十几年写博客非常不易。&lt;br&gt;&lt;br&gt;同样的比如 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//coolshell.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;酷壳 – CoolShell.cn&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 陈浩的文章相对就更技术型，内容生涩难懂，对于小白人群就望尘莫及了。&lt;br&gt;&lt;br&gt;&lt;b&gt;参与开源项目的维护与开发&lt;/b&gt;&lt;br&gt;&lt;br&gt;到达这个层次的大学生较少，这个阶段你会学会git的精髓，这方面就不多说了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;--------------------------------------------------------------------&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2015年10月31日续写......&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个话题实在太大，我尝试分几点把这个大话题讲的稍微明白一些。&lt;br&gt;&lt;br&gt;大学的职业规划，最终也是为了进入职场，&lt;b&gt;从业务角度前端根据人的特点可以分为两个流派：切图流、技术流&lt;/b&gt;&lt;b&gt;。&lt;/b&gt;&lt;br&gt;&lt;br&gt;一般来说懂平面设计的人做前端切图会更细腻一些，懂设计的前端也只在切图时候会体现出一些优势，设计公司会更偏好切图流派，对于重视技术流的前端公司，懂不懂设计对他们来说不是重点，甚至切图占有的比重都很小。技术流派甚至不会切图，他们的大把时间都消耗在专研技术里了，什么技术，这些之后再说。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;一、切图流&lt;/b&gt;&lt;br&gt;&lt;br&gt;切图需要熟悉PS和AI的切图技能，简单说就是把设计稿的web元素导出为jpg/png/svg等等，结合这些元素把设计稿转化成web页面。切图是个非常需要耐心的工作，需要把设计稿&lt;b&gt;精确&lt;/b&gt;的转化成页面，需要解决浏览器的各种&lt;b&gt;兼容性&lt;/b&gt;问题、&lt;b&gt;响应&lt;/b&gt;问题。&lt;b&gt;如果你只是在国内某些大包大揽的建站公司做切图，那是灾难，而且会养成很多陋习。&lt;/b&gt;如果有幸和国外的优秀的设计团队合作，会是一种享受。但是设计师们对页面细节要求非常苛刻，如果你只懂得HTML+CSS技能根本不足以支撑你完成一份高质量的切图。&lt;br&gt;&lt;br&gt;国内大公司前端都比较技术流，没有那么多精致的设计稿让你切，国内建站公司的切图又太垃圾，所以如果做切图去一些面向国外的小团队体验一下吧。&lt;br&gt;&lt;br&gt;&lt;b&gt;切图的基础工作：PSD2HTML和AI2HTML，PSD2CMS，PSD2BACKEND。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;PSD2HTML和AI2HTML&lt;/b&gt;：主要负责把设计稿精确的转化成html页面。&lt;br&gt;&lt;b&gt;PSD2CMS&lt;/b&gt;：直接转化为cms的主题，需要比较懂cms系统，比如WordPress，Drupal之类。&lt;br&gt;&lt;b&gt;PSD2BACKEND&lt;/b&gt;：直接套到某个后端语言的框架里。这个难度级别比较高。&lt;br&gt;&lt;br&gt;在一个专业的团队里，切图主要负责的工作就是&lt;b&gt;PSD2HTML和AI2HTML，&lt;/b&gt;这一类人一般水平比较局限，需要掌握基本的html+css技能，如果懂js就更好了。&lt;br&gt;相比较 &lt;b&gt;PSD2CMS &amp;amp; PSD2BACKEND &lt;/b&gt;一般都是偏fullstack的比较多，多见于全职soho。&lt;br&gt;&lt;br&gt;&lt;b&gt;切图的另一项重点：动画。&lt;/b&gt;&lt;br&gt;&lt;br&gt;素材由设计师提供，一般这类设计师都比较时尚，有些设计团队是从flash转来的，对页面效果特别有追求，跟这类设计师合作是个技术活。比如Google的动态Logo（并非指 gif 动画），可以堪称动画的代表作（自成体系的动画）。&lt;br&gt;&lt;br&gt;页面动画效果一般来说&lt;br&gt;&lt;br&gt;CSS3中比较简单的transition和transform，难的有keyiframes的animation，最难的是CSS和JS结合（可以是jquery插件，也可以是angular这类插件）。涉及面太广暂不深入讨论了，感兴趣的自行github，给大家发一个动画库，是基础也是精髓。&lt;br&gt;&lt;br&gt;Animate动画集合看个够&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/daneden/animate.css&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/daneden/anim&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ate.css&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;切图工作者的进阶技能&lt;/b&gt;&lt;br&gt;&lt;br&gt;HTML重构和页面模块化。&lt;br&gt;在此基础上了解怎么使用Sass/Stylus/Less等CSS预编译器。&lt;br&gt;&lt;br&gt;切图能好这点技能已经相当牛逼了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;--------------------------------------------------------------------&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2016年1月18日续写，1月22日修改&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;二、技术流&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;包管理器：&lt;/b&gt;npm、bower、component、spm&lt;br&gt;&lt;b&gt;前端构建工具：&lt;/b&gt;grunt、gulp&lt;br&gt;&lt;b&gt;模块加载&lt;/b&gt;&lt;b&gt;器&lt;/b&gt;&lt;b&gt;：&lt;/b&gt;requirejs、webpack、jspm（systemjs）&lt;br&gt;&lt;b&gt;代码规范：&lt;/b&gt;ES5/ES6、Commonjs、AMD&lt;br&gt;&lt;b&gt;语法糖：&lt;/b&gt;Coffeescript、Typescript、Dart...&lt;br&gt;&lt;b&gt;CSS预编译器：&lt;/b&gt;Sass、Stylus、Less、PostCSS&lt;br&gt;&lt;b&gt;DOM操作：&lt;/b&gt;JQuery、Zepto...&lt;br&gt;&lt;b&gt;浏览器引擎：&lt;/b&gt;Webkit、Gecko、Trident...&lt;br&gt;&lt;b&gt;前端&lt;/b&gt;&lt;b&gt;框架：&lt;/b&gt;Backbone、Ember、Angular、Flux（React）、Vuejs&lt;br&gt;&lt;b&gt;后端框架：&lt;/b&gt;Express、Meteor&lt;br&gt;&lt;b&gt;模版引擎：&lt;/b&gt;handlebars、swig、nunjucks、ejs、jade...&lt;br&gt;&lt;b&gt;WEBAPP&lt;/b&gt;: SPA、Isomorphic&lt;br&gt;&lt;b&gt;协议：&lt;/b&gt;http、websocket...&lt;br&gt;&lt;br&gt;各技术栈的发展历程：&lt;br&gt;&lt;br&gt;&lt;b&gt;包管理器：npm、bower、component、spm（国产）&lt;/b&gt;&lt;br&gt;&lt;br&gt;npm 刚出来的时候多用于 node 模块管理，spm 和 bower 是前端模块管理器，component 是TJ大神的作品，已淡出视线，不讨论了。&lt;br&gt;&lt;br&gt;&lt;b&gt;如今&lt;/b&gt;&lt;br&gt;bower宣告终止开发，前端模块管理全面移向npm。&lt;br&gt;spm 从 3.9 开始将不再管理组件的生命周期, 即不再有 spmjs.io. 所以相应的逻辑全部去除. 请使用 npm 来管理组件.&lt;br&gt;npm从此统一了前后端js模块管理&lt;br&gt;&lt;br&gt;各种语言对比&lt;br&gt;&lt;br&gt;python有pip&lt;br&gt;ruby有gem&lt;br&gt;php有composer&lt;br&gt;javascript有npm、bower、component、spm但是在2016后javascript只有npm了，这是时代的进步。包管理器的出现，javascript才真正的开始像一门编程语言了&lt;br&gt;&lt;br&gt;&lt;b&gt;问题：&lt;/b&gt;&lt;br&gt;包管理器是啥？&lt;br&gt;javascript为什么有这么多包管理器？&lt;br&gt;&lt;br&gt;&lt;b&gt;前端构建工具：grunt和gulp&lt;/b&gt;&lt;br&gt;&lt;b&gt;CLI：requirejs、webpack、jspm&lt;/b&gt;&lt;br&gt;&lt;br&gt;目前前端的发展趋势：&lt;br&gt;&lt;br&gt;3年前的项目用 requirejs&lt;br&gt;2年前的项目用 grunt&lt;br&gt;1年前的项目用 gulp&lt;br&gt;现在的项目用 npm + webpack&lt;br&gt;&lt;br&gt;requirejs 是前端技术发展的分水岭，如今也已经退出历史舞台了&lt;br&gt;grunt 一堆繁杂的 config，令人望而生叹，官方已经停止维护了&lt;br&gt;gulp 没那么火了，不过作为流式构建工具，有它独到的好处&lt;br&gt;jspm 从关注到现在一直在掉粉，star不升反降。原因就等那些有心人自己去探讨吧。&lt;br&gt;&lt;br&gt;推荐阅读&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//medium.com/%40housecor/browserify-vs-webpack-b3d7ca08a0a9&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Browserify vs Webpack&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;问题：&lt;/b&gt;&lt;br&gt;前端构建是啥？&lt;br&gt;为什么需要前端构建工具？&lt;br&gt;&lt;br&gt;&lt;b&gt;代码规范：ES5/ES6、Commonjs、AMD&lt;/b&gt;&lt;br&gt;&lt;b&gt;语法糖：Coffeescript、Typescript、Dart...&lt;br&gt;&lt;/b&gt;&lt;br&gt;和其他语言不一样 javascript 受限于浏览器，官方标准滞后不前，导致出现各种语法标准，甚至出现了很多语法糖.......在 ES6 推出之前 Coffeescript 被很多人推崇，现在 ES6 被炒的火热。&lt;br&gt;&lt;br&gt;ECMAScript 的历史感兴趣可以拜读这里 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/%23docs/intro%23ECMAScript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://es6.ruanyifeng.com/#docs/intro&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;Commonjs 作为官方鸡肋的 ES5 标准无法满足 nodejs 需求，提出的一种针对服务端的标准，在browserify 出来之后，commonjs 标准在浏览器端也普及起来。&lt;br&gt;AMD 是 requirejs 提出来的最初针对浏览器端的一种规范，如今已经不再提倡了。&lt;br&gt;&lt;br&gt;Coffeescript、Typescript、Dart 这类语法糖更像是给后端程序员用的语法标准&lt;br&gt;Coffeescript -&amp;gt; Python/Ruby&lt;br&gt;Typescript -&amp;gt; C#&lt;br&gt;Dart -&amp;gt; Java&lt;br&gt;ES5/ES6 -&amp;gt; Javascript&lt;br&gt;&lt;br&gt;如今ES6/7逐渐完善，Commonjs =&amp;gt; ES6 标准正在变得主流&lt;br&gt;&lt;br&gt;学习参考的网站：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//kangax.github.io/compat-table/es6/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 6 compatibility table&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ECMAScript 6入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/airbnb/javascript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;airbnb/javascript · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;问题：&lt;/b&gt;&lt;br&gt;CoffeeScript 当年为什么流行？&lt;br&gt;为什么javascript会出现这么多标准和语法糖？&lt;br&gt;&lt;br&gt;&lt;b&gt;CSS预编译器：&lt;/b&gt;&lt;b&gt;Less、&lt;/b&gt;&lt;b&gt;Sass、Stylus、PostCSS&lt;/b&gt;&lt;br&gt;&lt;br&gt;SASS 2007年诞生，由ruby编写，后来受Less影响，退出scss规范。&lt;br&gt;LESS 2009年诞生，由更接近CSS语法，因Bootstrap支持，被大家熟知。&lt;br&gt;Stylus 2010年诞生，来自 node 社区，可以很好的和JavaScript项目紧密联系起来。&lt;br&gt;PostCSS 2015年 由 Twitter 推出的一款css预处理工具。&lt;br&gt;&lt;br&gt;PostCSS 的个人见解：和上面三种不一样之处，它可以很灵活的操作和调度css，尤其在 isomorphic app 中，当然还有各种好玩之处，有待大家发觉。&lt;br&gt;&lt;br&gt;推荐一篇写的还不错的文章：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//efe.baidu.com/blog/revisiting-css-preprocessors/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;再谈 CSS 预处理器&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;最后说一点 Less、Sass、Stylus&lt;b&gt;、&lt;/b&gt;PostCSS 不是四选一，他们之间都可以共存于一个项目中。&lt;br&gt;&lt;br&gt;&lt;b&gt;问题：&lt;/b&gt;&lt;br&gt;为什么使用预编译器？好处在哪里？&lt;br&gt;如何更好的使用预编译器？&lt;br&gt;&lt;br&gt;&lt;b&gt;浏览器引擎&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Safari &lt;/b&gt;Webkit&lt;br&gt;&lt;b&gt;Chrome &lt;/b&gt;Blink（Webkit分支）&lt;br&gt;&lt;b&gt;Opera &lt;/b&gt;Webkit（Opera已死，早先的Presto就不拿来说了）&lt;br&gt;&lt;b&gt;Firefox &lt;/b&gt;Gecko&lt;br&gt;&lt;b&gt;IE &lt;/b&gt;Trident 注微软已经放弃 IE 11 以下版本更新了&lt;br&gt;&lt;b&gt;Edge&lt;/b&gt; EdgeHTML&lt;br&gt;&lt;br&gt;IE 9 尤其 IE 11版本之后很多css/js标准逐渐统一，大批量js插件停止维护更新了。可预想不久的将来，在浏览器标准越来越统一的未来，很多这几年推崇的技术都将没落。&lt;br&gt;&lt;br&gt;&lt;b&gt;DOM操作：JQuery、Zepto&lt;br&gt;&lt;/b&gt;&lt;br&gt;Zepto 不需要考虑IE兼容性，代码精炼很多&lt;br&gt;JQuery 2.x 已经不支持 IE8 及以下 IE 浏览器&lt;br&gt;&lt;br&gt;很多 JQuery 插件已经不再更新，过去一年大量 Github 搜索之后的总结&lt;br&gt;&lt;br&gt;JQuery 在处理兼容性问题上下了很大功夫，但在浏览器标准逐渐统一之后，很多插件都没有存在的必要了。尤其前端业务越来越复杂化的时代，JQuery 的适用范围逐渐在减少。&lt;br&gt;&lt;br&gt;在前端框架盛行的这几年，JQuery 还能如此坚挺，但 JQuery 的适用范围在缩小，在IE8还没退出历史舞台前，它还会有很大的作用。&lt;br&gt;&lt;br&gt;&lt;b&gt;前端框架：Backbone、Ember、Angular、Flux（React）、Vuejs&lt;/b&gt;&lt;br&gt;&lt;b&gt;后端框架：Express、Meteor&lt;br&gt;&lt;/b&gt;&lt;br&gt;框架概念被大家炒的火热，但框架并不是万能的，任何脱离实际项目的技术讨论都是耍流氓，任何项目都非一门技术就可以搞定，甚至项目的发展取决于多方面因素，我就不多说了。&lt;br&gt;&lt;br&gt;&lt;b&gt;模版引擎：handlebars、swig、nunjucks、ejs、jade...&lt;br&gt;&lt;/b&gt;&lt;br&gt;在前端提倡 ui 组件化之际，模版引擎进化为了ui组件的服务端渲染。React 之类的 UI 组件变得流行。以前的这些模版引擎....&lt;br&gt;&lt;br&gt;&lt;b&gt;一些说明&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;感慨万千，前端近几年的爆发式增长，很多技术的迭代太快了，如果你是技术狂人，这是个非常值得折腾的年代，如果你不喜欢折腾，就静静的关注前端的发展吧，JavaScript 作为前端脚本语言正变得越来越有意思了，各方面的完善，更像一门编程语言了，尤其在 webapp 里扮演着越来越重要的角色。但不否认很多公司对 JavaScript 的重视程度并不一样，应用场景也不一样，甚至在传统的大项目里，有些技术虽然不火了，但是并不代表技术就不需要了，尤其历史遗留的项目还都使用着以上各种技术，&lt;b&gt;大家不要盲目追随，按需学习即可。&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>为了能让大家第一眼阅读到最新内容，更新就写到上面了。</b> <b>背景介绍：一个注重美学的WEB</b><b>工程师，</b><b>可能擅长php+js</b> 这篇文章写于12年年初，到现在有三年多了，截至到现在赞同数549，被收藏 1290 次，不算多。前端近几年发展太快，原回答已经不是很符合意境了，所…\n\n<a href=\"/question/19838787/answer/14145774\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2012-03-31\" target=\"_blank\" href=\"/question/19838787/answer/14145774\">编辑于 2016-01-30</a></p>\n\n",
    "link": "https://zhihu.com/question/19838787/answer/14145774"
  },
  {
    "question": "\n如何使用JavaScript生成lowpoly风格图像？\n",
    "author": "羡辙",
    "content": "\n\n<textarea hidden class=\"content\">===== 更新 =====&lt;br&gt;算法已发表论文：&lt;br&gt;Zhang, Wenli; Xiao, Shuangjiu; Shi, Xin, &quot;Low-poly style image and video processing,&quot; in &lt;i&gt;Systems, Signals and Image Processing (IWSSIP), 2015 International Conference on&lt;/i&gt; , vol., no., pp.97-100, 10-12 Sept. 2015&lt;br&gt;URL: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ieeexplore.ieee.org/stamp/stamp.jsp%3Ftp%3D%26arnumber%3D7314186%26isnumber%3D7313917&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;IEEE Xplore Abstract&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;==============&lt;br&gt;&lt;br&gt;被邀请挺久了，一直忍着没答！&lt;br&gt;在做完 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/baidu-ife/ife&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;百度 IFE&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Ovilia/Polyvia&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ovilia/Polyvia · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 项目之后，在 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//zhangwenli.com/blog/2015/06/25/polyvia/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;小结博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 里也没细说算法，因为我当时正准备在发论文。现在论文已经被接收了（等正式发表了我来补引用和 PDF），所以来仔细说说我的算法，也正好让大家提提改进的意见，因为我觉得还有很大改进空间。&lt;br&gt;&lt;br&gt;本文主要就算法层面进行讨论，不涉及具体的 WebGL 实现细节和着色器编程知识，希望有点编程经验的同学都能无障碍阅读。&lt;br&gt;&lt;br&gt;&lt;b&gt;不允许转载，保留所有权利。不允许未经许可以任何形式使用本文的图。&lt;/b&gt;&lt;br&gt;&lt;br&gt;题目的描述比较模糊，首先明确一下解决的问题。其他答案中给出的 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/wagerfield/flat-surface-shader&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wagerfield/flat-surface-shader · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/qrohlf/trianglify&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;qrohlf/trianglify · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这些项目，都是针对生成带有渐变效果的 low-poly 图，更像是纹理生成。而我研究的是，如何通过一张输入图像，输出其对应的 low-poly 图，这一问题显然比纹理生成难得多。&lt;br&gt;比如对于以下输入图（摄影作者： &lt;a data-hash=&quot;f9c2264de8167dbe789ad4c300182dc6&quot; href=&quot;//www.zhihu.com/people/f9c2264de8167dbe789ad4c300182dc6&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@正一&quot; data-hovercard=&quot;p$b$f9c2264de8167dbe789ad4c300182dc6&quot;&gt;@正一&lt;/a&gt; 是论文三作）&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/ec0ea35d834f9c81c37734b341859d4f_b.png&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;800&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;800&quot; data-original=&quot;https://pic4.zhimg.com/ec0ea35d834f9c81c37734b341859d4f_r.png&quot;&gt;输出的效果是：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/dc4b88a92043b2bbca309140c2584176_b.png&quot; data-rawwidth=&quot;627&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;627&quot; data-original=&quot;https://pic3.zhimg.com/dc4b88a92043b2bbca309140c2584176_r.png&quot;&gt;当然，仔细看可以看到很多瑕疵，比如左边靠下蓝绿色中间的边缘没有很好地被保留下来等等。但是整体的效果应该还算比较美观的，对于细节比较丰富的地方，取的三角形比较多，反之则反。&lt;br&gt;&lt;br&gt;在我做这个项目之前已经发现了一些类似的实现，其中我觉得最有效的是：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/timbennett/delaunay&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;timbennett/delaunay · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，我觉得从结果上来说已经比较接近完美了，那还有什么做的必要呢？我当时也是这么问作为 IFE 导师的  &lt;a data-hash=&quot;fb7778642d82a5ac551250fc707480f0&quot; href=&quot;//www.zhihu.com/people/fb7778642d82a5ac551250fc707480f0&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@沈毅&quot; data-hovercard=&quot;p$b$fb7778642d82a5ac551250fc707480f0&quot;&gt;@沈毅&lt;/a&gt; 的，我不记得他当时的回答了……反正就记得不是很有说服力哈哈。然后过了几天我想到，可以做一个在浏览器内获取本地摄像头图像处理后的视频版，于是我就开始做这个项目了。&lt;br&gt;为了回答这个问题，我特地跟 timbennett 的效果图对比了一下（想要试玩的话在 GitHub 上下载他的项目放在本地服务器下，他给的链接挂了），用的还是上面的输入图，同样取 1000 个点组成三角形，他的输出是这样的：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/57fcc8c940a25e5a42a1084e9638edeb_b.png&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;800&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;800&quot; data-original=&quot;https://pic4.zhimg.com/57fcc8c940a25e5a42a1084e9638edeb_r.png&quot;&gt;看起来还是我的算法略胜一筹捏哈哈~（我的评价标准是边缘信息更好地被保留下来，且具有更好的艺术性。可能还是有一定主观因素在内，但是我想应该还是我的效果更好一点吧？）&lt;br&gt;&lt;br&gt;聪明的同学已经发现了，效果的好坏主要取决于选了什么位置的点组成三角形。如果你是完全随机选的，那么效果就可能是这样的：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/4a2b6b17251a76e7984341449faf5485_b.png&quot; data-rawwidth=&quot;627&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;627&quot; data-original=&quot;https://pic2.zhimg.com/4a2b6b17251a76e7984341449faf5485_r.png&quot;&gt;&lt;br&gt;看我算法的效果图应该可以猜到，取图像边缘上的点更容易获得更好的效果，这是因为如果边上的两个点被选中了，那么丢给后面的 Delaunay 三角化步骤生成的三角形的一条边就会在边缘上，那就没有上图随机取点造成的这种感觉了。&lt;br&gt;&lt;br&gt;好，既然我们要取边缘上的点，那么很容易想到可以先用 Sobel 之类的边缘检测算法获取边缘，得到的结果是这样的：（使用 WebGL 着色器加速运算：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Ovilia/Polyvia/blob/gh-pages/vendor/three.js.EdgeShader.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Polyvia/three.js.EdgeShader.js at gh-pages · Ovilia/Polyvia · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/17fff2763a2ccfa7d465552313182663_b.png&quot; data-rawwidth=&quot;1268&quot; data-rawheight=&quot;1258&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1268&quot; data-original=&quot;https://pic4.zhimg.com/17fff2763a2ccfa7d465552313182663_r.png&quot;&gt;&lt;br&gt;那么怎么取边缘上的点呢？显然不能每个点都取，否则就太多了，low-poly 本来就是要取更少的点达到更抽象的效果。这里我觉得是我可以改进的地方，因为我的方法比较简单粗暴，就是在边缘上随机取点，这样的方法实现起来简单，效果也不差。但是如果能够更有规律地取点，还是可以有效改善最终效果的，这点稍后再说。&lt;br&gt;&lt;br&gt;能不能只取边缘上的点作为组成三角形的点呢？&lt;br&gt;通常这不是一个好主意。因为它使得很多三角形退化成非常尖锐的锐角三角形。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/f85a7ca819e11cf4dfb256a4148628c7_b.png&quot; data-rawwidth=&quot;1252&quot; data-rawheight=&quot;1254&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1252&quot; data-original=&quot;https://pic4.zhimg.com/f85a7ca819e11cf4dfb256a4148628c7_r.png&quot;&gt;&lt;br&gt;为什么这里说退化呢？这是因为后面一步的 Delaunay 三角化的作用就是将输入的一组点尽可能地避免变成锐角三角形，从而达到更好的视觉效果。&lt;br&gt;所以，除了边缘上的点有一定概率会被选作组成三角形之外，我们另外以一个更小的概率在全图中随机取点。这样就非常有效地避免了非常锐的锐角三角形出现。下图为选中的点的位置。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/2099f053e19115110c48b19686f01e61_b.png&quot; data-rawwidth=&quot;512&quot; data-rawheight=&quot;512&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;512&quot; data-original=&quot;https://pic2.zhimg.com/2099f053e19115110c48b19686f01e61_r.png&quot;&gt;&lt;br&gt;然后，我们使用 Delaunay 三角化将选中的点组成一个个三角形。Delaunay 三角化是图形学中一种比较常用的算法，具体细节我不展开了，总之它的作用上文已经提到了，就是使得生成的三角形们尽量不是非常锐的锐角三角形。下图为 Delaunay 算法得到的三角形们。使用的 Delaunay 算法是第三方库：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/ironwallaby/delaunay&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ironwallaby/delaunay · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b0bdd6566cc15709f1e4104fec3d1b9e_b.png&quot; data-rawwidth=&quot;627&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;627&quot; data-original=&quot;https://pic3.zhimg.com/b0bdd6566cc15709f1e4104fec3d1b9e_r.png&quot;&gt;&lt;br&gt;最后，就到了给三角形上色的阶段了。当然像 k-means 这种可以获取三角形颜色类别的方法更高大上，但是为了满足实时性需求，我们还是使用简单粗暴的办法就好，而且效果也非常不错。具体的做法就是使用每个三角形重心处的颜色作为三角形的颜色。重心位置的计算是非常简单的，只要把三个顶点的位置求平均数就可以了。然后就能得到上面的结果图了。&lt;br&gt;&lt;br&gt;这么说下来的逻辑应该挺清楚的吧？不清楚的话再来看这张整体流程图。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/33c9b8fc74fb39173d7c3a69aac98614_b.png&quot; data-rawwidth=&quot;1370&quot; data-rawheight=&quot;780&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1370&quot; data-original=&quot;https://pic1.zhimg.com/33c9b8fc74fb39173d7c3a69aac98614_r.png&quot;&gt;&lt;br&gt;以上，就是图像处理的全部流程了，知道原理后其实也不难对吧？我搜来搜去没找到发表的 low-poly 论文，想着可以做鼻祖了！然而评委评论意见里告诉了我这篇 2015 年 4 月份发表的论文：&lt;br&gt;&lt;blockquote&gt;Gai, Meng, and G. Wang. &quot;Artistic Low Poly rendering for images.&quot; The Visual Computer (2015): 1-10&lt;br&gt;&lt;/blockquote&gt;然后我对比了一下，发现这篇论文的效果比我厉害多了……&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/d656115d244ca5484520994dd9ba65a8_b.png&quot; data-rawwidth=&quot;996&quot; data-rawheight=&quot;890&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;996&quot; data-original=&quot;https://pic1.zhimg.com/d656115d244ca5484520994dd9ba65a8_r.png&quot;&gt;&lt;br&gt;(a) 是输入图像；(b) 是  &lt;a href=&quot;//link.zhihu.com/?target=https%3A//itunes.apple.com/cn/app/art-cameratrigraff/id646603902&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;iTunes 的 App Store 中的“Art camera TRIGRAFF”&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  这个软件生成的结果；(c) 是这篇论文的效果；(d) 是我的算法的效果。（前三张图来自这篇论文）&lt;br&gt;相形见拙啊！！！&lt;br&gt;&lt;p&gt;主要还是在选择组成三角形的点的算法上，我的随机算法虽然不错，但是跟人家有目的性地在边缘上选取点的方法还是弱了不少的。（这篇论文我还没细看，回头再仔细研究研究）&lt;/p&gt;&lt;p&gt;但是！！！你知道这篇论文生成 500x800 左右的图要多少时间么？4.7 秒！我的呢？0.3 秒！所以呢，也并没有输的那么惨烈对吧~&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;以上就是图像方面的算法了。下面讲视频相关部分。&lt;/p&gt;&lt;br&gt;&lt;p&gt;视频的每一帧当作图像处理就好了吗？那我也太水了……&lt;/p&gt;&lt;p&gt;主要的问题在于，由于我的点是随机取的，所以每帧取到的点不一样，就表现为屏幕一直在闪烁，因为三角形的位置和颜色变化非常大。为了解决这一问题，我们就希望上一帧被选中的点，如果在这一帧中仍然在边缘，则它被选中的概率将大得多。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这似乎能比较有效地消抖，但是又带来一个新的问题，就是随着时间的进行，越来越多的边缘点被保留下来，那么留给其他地方的点就越来越少了。具体表现为，如果背景有个沙发抱枕，我人在前面晃悠，结果沙发抱枕边缘上的点越取越多，我的脸就变得一片模糊了，因为没多少点留给我的脸了。（欧，我的脸~~你能想象我把这样的图放到论文里去了么……）&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/b0eaef7a0a981a43de244fff1247f93e_b.png&quot; data-rawwidth=&quot;1656&quot; data-rawheight=&quot;1240&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1656&quot; data-original=&quot;https://pic3.zhimg.com/b0eaef7a0a981a43de244fff1247f93e_r.png&quot;&gt;&lt;br&gt;&lt;p&gt;解决方法是，设一个 5% 左右的淘汰率，对于上一帧被选中，并且这一帧仍然在边缘上的点，仍然有 5% 的概率在这一帧不被选中，这样就保证了点的流通性，同时也能排除一些抖动的干扰。&lt;/p&gt;&lt;p&gt;说是这么说啦，但实际效果是，抖动的消除还是不是很理想。有兴趣的话你可以自己玩玩看：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//zhangwenli.com/Polyvia/video.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Polyvia&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;最后，放一些由于篇幅不够没能放到论文中的效果图。（顺便夸一下 &lt;a data-hash=&quot;f9c2264de8167dbe789ad4c300182dc6&quot; href=&quot;//www.zhihu.com/people/f9c2264de8167dbe789ad4c300182dc6&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@正一&quot; data-hovercard=&quot;p$b$f9c2264de8167dbe789ad4c300182dc6&quot;&gt;@正一&lt;/a&gt; 找的原图很棒~ 原图都是 Public Domain 的）&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/9fc9234e9d98ca2172ba9a49df498adc_b.png&quot; data-rawwidth=&quot;930&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;930&quot; data-original=&quot;https://pic1.zhimg.com/9fc9234e9d98ca2172ba9a49df498adc_r.png&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/e1e053ee7d150922ecf75008f1b29ca9_b.png&quot; data-rawwidth=&quot;1064&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1064&quot; data-original=&quot;https://pic2.zhimg.com/e1e053ee7d150922ecf75008f1b29ca9_r.png&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/3bf6e67f1eab8227bdccbd624c52eff3_b.png&quot; data-rawwidth=&quot;1256&quot; data-rawheight=&quot;1256&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1256&quot; data-original=&quot;https://pic4.zhimg.com/3bf6e67f1eab8227bdccbd624c52eff3_r.png&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/1d6004da497ebdd7b7ca984d4b83968b_b.png&quot; data-rawwidth=&quot;1103&quot; data-rawheight=&quot;627&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1103&quot; data-original=&quot;https://pic4.zhimg.com/1d6004da497ebdd7b7ca984d4b83968b_r.png&quot;&gt;你自己也来试试吧：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//zhangwenli.com/Polyvia/image.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Polyvia&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;如果对于算法方面有些建议的话，欢迎给我反馈：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Ovilia/Polyvia/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Issues · Ovilia/Polyvia · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 或邮件我 me at zhangwenli.com。&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;写知乎回答比写论文顺畅多了，论文大概就是故意写得让人看不懂的吧……&lt;br&gt;等我论文正式发表了，如果心情好的话，可以考虑放视频（里面有我真人解说！深 js 上已经剧透过了啦……不过！还有我的配音！！保证不让你们失望！）。心情好的途径包括第一次回答一个点赞数上万的问题啦，GitHub star 过两百啦 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Ovilia/Polyvia&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Ovilia/Polyvia · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ~\\(^o^)/~ &lt;br&gt;&lt;br&gt;最后，再次感谢  &lt;a data-hash=&quot;fb7778642d82a5ac551250fc707480f0&quot; href=&quot;//www.zhihu.com/people/fb7778642d82a5ac551250fc707480f0&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@沈毅&quot; data-hovercard=&quot;p$b$fb7778642d82a5ac551250fc707480f0&quot;&gt;@沈毅&lt;/a&gt; 在这个项目中对我的悉心指导，以及  &lt;a data-hash=&quot;f9c2264de8167dbe789ad4c300182dc6&quot; href=&quot;//www.zhihu.com/people/f9c2264de8167dbe789ad4c300182dc6&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@正一&quot; data-hovercard=&quot;p$b$f9c2264de8167dbe789ad4c300182dc6&quot;&gt;@正一&lt;/a&gt; 的各种帮忙~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/ec0ea35d834f9c81c37734b341859d4f_200x112.png\" data-rawwidth=\"800\" data-rawheight=\"800\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/ec0ea35d834f9c81c37734b341859d4f_r.png\">\n===== 更新 ===== 算法已发表论文： Zhang, Wenli; Xiao, Shuangjiu; Shi, Xin, \"Low-poly style image and video processing,\" in <i>Systems, Signals and Image Processing (IWSSIP), 2015 International Conference on</i> , vol., no., pp.97-100, 10-12 Sept…\n\n<a href=\"/question/29856775/answer/57668656\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-08-04\" target=\"_blank\" href=\"/question/29856775/answer/57668656\">编辑于 2015-11-11</a></p>\n\n",
    "link": "https://zhihu.com/question/29856775/answer/57668656"
  },
  {
    "question": "\n设计师如何学习前端？\n",
    "author": "黄玄",
    "content": "\n\n<textarea hidden class=\"content\">谢 &lt;a data-hash=&quot;e414339bca7ce9081980e0ba149dfaff&quot; href=&quot;//www.zhihu.com/people/e414339bca7ce9081980e0ba149dfaff&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@冯天然&quot; data-tip=&quot;p$b$e414339bca7ce9081980e0ba149dfaff&quot; data-hovercard=&quot;p$b$e414339bca7ce9081980e0ba149dfaff&quot;&gt;@冯天然&lt;/a&gt; 邀，这个问题大概的确适合我答……（好久没正经答题了 - -）&lt;br&gt;&lt;br&gt;笔者的经历在知乎就可以看到，大学专业是数字媒体艺术，大一实习过动效设计师，大二拿到了人生第一个大公司 offer 是阿里的交互设计，后来转岗到淘宝旅行的前端团队，现在在微信电影票做前端研发。&lt;br&gt;&lt;br&gt;也是走过了不少野路子，不过还好有小右哥 &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-tip=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt; 这样艺术/设计转前端的大神在前面做典范，也证明这条路是玩的通的 ;)&lt;br&gt;&lt;br&gt;接下来就说说自己的学习建议吧，一个小教程，也是自己走过的流程，仅供参考哈&lt;br&gt;&lt;br&gt;------------&lt;br&gt;&lt;br&gt;&lt;b&gt;背景篇&lt;/b&gt;&lt;br&gt;&lt;br&gt;在这个时代学习新东西，一定要善于使用 Bing/Google 等搜索引擎…网络上的资源非常丰富，自学能力也尤为重要，尤其是对于学习技术！&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;入门篇（HTML/CSS）&lt;/b&gt;&lt;br&gt;&lt;br&gt;说起设计师希望学前端的初衷，大概还是因为各种华丽的网页特效/交互太过吸引人，这种感觉大概就是：“Hey，我的设计可以做成网页访问了呢！”&lt;br&gt;好在，“展示”对于前端技术来说反而是最简单的部分。所以，放下你对“编程”两个字的恐惧，&lt;b&gt;从“称不上是编程语言”的 HTML/CSS 开始，先做点有成就感的东西出来吧！&lt;/b&gt;&lt;br&gt;&lt;br&gt;对于设计师来说，最有成就感的一定是“可以看到的东西”，而 HTML/CSS 正是用来干这个的，HTML 就是一堆非常简单的标签，而 CSS 无非就是把你画画的流程用&lt;b&gt;英语&lt;/b&gt;按一定的格式写出来而已：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;p&amp;gt; p is paragraph! &amp;lt;/p&amp;gt;\n\n&amp;lt;style&amp;gt;\np { color: red;}\n&amp;lt;/style&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;是不是非常容易，就跟读英语一样！&lt;br&gt;接下来，你就需要开始自学啦，比如常用 HTML 标签的意思，各种 CSS 的属性，还有 CSS 的盒模型、优先级、选择器……放心，它们都很容易；能玩得转 PS/AI/Flash/Axure/AE/Sketch 的设计师们，学这个洒洒水啦&lt;br&gt;&lt;br&gt;推荐几个资源：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3school 在线教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; (中文，一个很 Low 但是又很好的入门学习网站）&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Learn to code&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; (Codecademy，如果你英文 OK，&lt;b&gt;强烈建议&lt;/b&gt;你使用它进行交互式的学习！里面从 HTML/CSS 到搭建网站的课程都有，免费，生动直观）&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;这个阶段的练习主要是“临摹”：用代码画出你想画的网站，越多越好。&lt;/b&gt;&lt;br&gt;&lt;br&gt;对于书，我&lt;b&gt;非常不推荐&lt;/b&gt;上来就去看各种厚厚的入门/指南书，没必要！这一个阶段应该快速上手，培养兴趣，培养成就感。先做出可以看的东西再说，掌握常用的 HTML/CSS 就够用了&lt;br&gt;&lt;br&gt;如果完成的好，这个阶段过后你大概就可以写出一些简单又好看的“静态网页”了，比如这个作品集/简历：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/portfolio/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Portfolio - 黄玄的博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; （好久没更新了…丢人现眼）&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;入门篇（JavaScript/jQuery）&lt;/b&gt;&lt;br&gt;&lt;br&gt;想要在网页上实现一些交互效果，比如轮播图、点击按钮后播放动画？那你就必须要开始学习 JavaScript 了！JavaScript 是一门完整、强大并且非常热门的编程语言，你在浏览器里看到的所有交互或者高级功能都是由它在背后支撑的！&lt;br&gt;&lt;br&gt;举个小栗子：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;alert(&quot;Hello World!&quot;)\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;就这一行，就可以在浏览器里弹出 Hello World 啦！&lt;br&gt;&lt;br&gt;在了解一些基础的 JavaScript 概念（变量、函数、基本类型）后，我们可以直接去学习 jQuery，你不用知道它具体是什么（它是一个 JavaScript 代码库），你只要知道它可以显著地降低你编写交互的难度就好了：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;$('.className').click(function(){\n    alert(&quot;Hello jQuery&quot;)\n})\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;通过 jQuery，我们可以继续使用在 CSS 中学到的“选择器”&lt;br&gt;&lt;br&gt;对于没有编程基础的人来说，想要完全掌握它们两并不容易。作为设计师，很多时候我们可以先不必深究它们的原理，而是尝试直接应用它！这样成就感会来得很快，并且你可以通过实际应用更加理解 JavaScript 是用来做什么的。&lt;br&gt;&lt;br&gt;我仍然推荐你使用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3school 在线教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  与 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codecademy.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  进行学习。另外，你可以看一看诸如《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/10792216/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;锋利的jQuery (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》 这一类非常实用的书籍，可以让你很快上手做出一些简单的效果来！&lt;br&gt;&lt;br&gt;如果学习得顺利，你还可以尝试使用各种丰富的  jQuery 插件，你会发现写出支持用户交互的网站也没有那么困难～很多看上去很复杂的功能（比如轮播图、灯箱、下拉菜单），搜一搜然后看看文档（教程）、改改示例代码就好了。&lt;br&gt;&lt;br&gt;比如说，配合 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Huxpro/jquery.HSlider · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这样的轮播图插件，你可以很轻松的写出 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HSlider | Demo&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这样的网页相册或者 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/jquery.HSlider/demo-weather-app/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HSlider | Weather&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这样的手机端 App 原型～&lt;br&gt;&lt;br&gt;最后，我想推荐下 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//getbootstrap.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bootstrap · The world's most popular mobile-first and respons&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，这是世界上最知名的前端 UI 框架之一，提供了大量 CSS 样式与 jQuery 插件。它非常容易学习并且中英文教程都非常健全，你并不需要理解它背后的工作原理就能很好的使用它，让你快速达到“可以建站的水平”。有余力的话，你不但可以学习如何使用它，还可以学习它背后的设计思想。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;转职方向一：前端重构 （Web Rebuild）&lt;/b&gt;&lt;br&gt;&lt;br&gt;业内通常把专精 HTML/CSS 的前端从业人员称为重构，而对于注重视觉效果的设计师来说，在掌握基本的 HTML/CSS 后，就可以朝着这个方向发展了。&lt;br&gt;&lt;br&gt;&lt;b&gt;到了这个阶段，你不但要知道怎么写页面，还要知道它们都是为什么，并且知道怎么做更好。这对你理解 Web 世界非常有帮助，并且能帮助你做出更“系统化”的设计。&lt;/b&gt;&lt;br&gt;&lt;br&gt;CSS 的学问很多，你需要开始理解文档流、浮动流等各种定位的方式与原理，理解 CSS 的继承复用思想、理解浏览器的差异、兼容、优雅降级……这里强烈推荐一本书：《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/4736167/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;精通CSS（第2版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》，虽然前端技术突飞猛进，但这本书的思想永远不会过时。&lt;br&gt;&lt;br&gt;HTML 方面，要开始注重语义化、可访问性与结构的合理，你要开始学习“结构与样式的分离”，这里有一本神书将这种分离做到了极致：《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/2052176/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS禅意花园 (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》&lt;br&gt;&lt;br&gt;另外，各种炫酷屌的 CSS 3 属性你一定会喜欢：你可以用媒体查询做响应式网页设计，你可以用 transiton 和 animation 做补间动画与关键帧动画，用 transform 做缩放、旋转、3D变换，还有圆角、渐变、阴影、弹性盒！样样都是设计师的神器！&lt;br&gt;&lt;br&gt;如果你还掌握了 &lt;b&gt;入门篇（JavaScript/jQuery）&lt;/b&gt;的知识，那么&lt;b&gt;恭喜你！你已经可以做出很多有趣的网页了！&lt;/b&gt;很多 minisite 或者微信上的“H5” 小广告，这个程度的你已经可以轻松完成了！&lt;br&gt;&lt;br&gt;配合上你的设计功力，你可以开始尝试创作一些好玩的东西，比如这种富含交互和动画的网站 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/senova/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;绅宝 SENOVA&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，它仍然是基于 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Huxpro/jquery.HSlider&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Huxpro/jquery.HSlider · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  实现的！或者给自己做个小小的个人网站试试&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;转职方向二：前端工程师（Front-end Engineer）&lt;/b&gt;&lt;br&gt;&lt;br&gt;如果你觉得上述的这些都还满足不了你，你渴望做出更多了不起的交互，甚至你已经喜欢上了编程，想要转行做工程师，或者成为一名全栈设计师，那么你可以朝着这个方向继续发展！&lt;br&gt;&lt;br&gt;这个阶段的最大难度，是你必须&lt;b&gt;学会像一名软件工程师一样思考&lt;/b&gt;。你需要踏踏实实学习编程语言，深入理解作用域、对象、类、封装、继承、面向对象编程、事件侦听、事件冒泡等一大堆编程概念，你还需要了解浏览器，学习 DOM、BOM、CSSOM 的 API，你甚至还需要学习一些网络原理，包括域名、URL、DNS、HTTP 请求都是什么…&lt;br&gt;&lt;br&gt;你可能会被这一大堆名词吓到。确实，想要搞定他们并不容易。但是，你要相信只要你肯花功夫它们也没有那么难，而更重要的是，如果你能拿下他们，你所收获的并不只是这些而已，而是真正跨过了一道大坎 —— &lt;b&gt;你的世界将因此打开， 你看待世界的方式将因此改变&lt;/b&gt;&lt;br&gt;&lt;br&gt;对于这个阶段，你可以继续在  &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.codecademy.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;codecademy.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;   上学习，但是 w3school 已经不够用了，遇到不会的语法，我推荐你查阅 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mozilla 开发者网络&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这是少数中英文都有的非常专业且友好的网站。&lt;br&gt;&lt;br&gt;同时，你可能需要看一些书本来帮助你学习 JavaScript ：&lt;br&gt;&lt;ul&gt;&lt;li&gt; 《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/10546125/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript高级程序设计（第3版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 》或 《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/2228378/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript权威指南 (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》，大而全的书只需要一本就够了&lt;/li&gt;&lt;li&gt;如果上面这本你觉得太难，你可以先看 《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/6038371/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript DOM编程艺术 （第2版） (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》来过渡一下，这本书比较容易，它会教给你 “优雅降级、渐进增强”的优秀思想&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;如果你能顺利得渡过了这个阶段，我想你已经能做出很多令你自豪的网站了！试着向身边的工程师朋友询问如何购买域名、配置简单的静态服务器，或者搜搜“Github Pages”，然后把你的作品挂在网络上让大家欣赏吧！&lt;br&gt;&lt;br&gt;你还可以试着用 JavaScript 写写小游戏，这不但能锻炼你的编程水平还非常有趣～比如这是我刚学 JS 不久后 hack 一晚的产物 —— 用 DOM 实现的打飞机：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/aircraft&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hux - Aircraft&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; （不支持手机）&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;入行篇&lt;/b&gt;&lt;br&gt;&lt;br&gt;如果你能完成上述所有的学习，你已经是一名非常出色的前端学徒了！对于只是想要丰富技能的设计师或者产品经理来说，接下来的内容可能会让你感到不适 ;( &lt;br&gt;但如果你铁了心想要真正入行进入大公司从事专职前端开发的工作，那么你可以接着往下看：&lt;br&gt;&lt;br&gt;近几年的前端技术发展迅猛，前端工程师早已不是切切图写写页面做点特效就完事的职位，你需要具备相当完善的工程师素质与计算机知识，成为一名真正的工程师。&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要非常了解 JavaScript 这门语言&lt;/b&gt;，包括 闭包、IIFE、this、prototype 及一些底层实现（ES、VO、AO）、熟悉常用的设计模式与 JavaScript 范式（比如实现类与私有属性）。另外，新的 ES6 已经问世，包括 class, module, arrow function 等等&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要非常了解前端常用的网络及后端知识&lt;/b&gt;，包括 Ajax、JSON、HTTP 请求、GET/POST 差异、RESTful、URL hash/query、webSocket、常用的跨域方式（JSONP/CORS、HTTP 强缓存/协商缓存，以及如何利用 CDN 、静态网站/动态网站区别、服务器端渲染/前端渲染区别等等&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要学习使用进阶的 CSS&lt;/b&gt;，包括熟悉 CSS 3，使用 Scss/Less 等编译到 CSS 的语言，使用 autoprefixer 等 PostCSS 工具，了解 CSS 在 Scope/Namespace 上的缺陷，你还可以学习 CSS Modules、CSS in JS 这些有趣的新玩意&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要非常了解前端的模块化规范&lt;/b&gt;，可能在你学习到这里的时候，Require.js/AMD 已经再见了，但是 CommonJS 与 ES6 Modules 你必须要了解。（你可以观看我的分享《&lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/js-module-7day/%23/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript Modularization Seven Day&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》 来学习 JS 模块化的历史）&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要熟悉 Git 与 Shell 的使用&lt;/b&gt;，包括基于 git 的版本管理、分支管理与团队协作，包括简单的 Linux/Unix 命令、你要知道大部分程序员的工作可以通过 shell 更快更酷的完成，并且很多“软件”只能通过 shell 来使用。你还可以把你的代码放到 github 上与人分享，并且学习 github 上其他优秀的开源代码&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要熟悉并且习惯使用 Node&lt;/b&gt;，包括了解 npm、使用 Grunt/Gulp/Browserify/Webpack 优化你的工作流、对你的代码进行打包、混淆、压缩、发布，你还可以使用 Express/Koa 配合 MongoDB/Redis 涉足到后端领域，或者尝试用 Node 做后端渲染优化你的首屏体验&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要了解各种 HTML 5 的新 API&lt;/b&gt;，包括 &amp;lt;video&amp;gt;/&amp;lt;audio&amp;gt;，包括 Canvas，webGL、File API、App Cache、localStorage、IndexedDB、Drag &amp;amp; Drop、更高级的 DOM API、Fetch API 等等&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要学习 JavaScript 的单线程与异步编程方法&lt;/b&gt;，因为它们非常非常常用、包括 setTimeout/setInterval，回调与回调地狱、事件与event loop、还有 Promise 甚至 Async/Await&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要非常了解浏览器&lt;/b&gt;，包括主流浏览器的名称、内核与差异、包括私有属性与 -webkit- 等厂商前缀，你需要学习如何使用 Chrome DevTool，你需要了解浏览器渲染的 reflow/repaint 来避免 Jank 并进行有针对性的性能优化&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要专门学习 Mobile Web&lt;/b&gt;，因为移动互联网是趋势。包括 viewport、CSS pixel、 touch 事件、iOS/Android 浏览器的差异与兼容、移动端的性能优化、300ms delay 等等…你还需要知道 Hybrid 是什么，包括 Cordova/Phonegap，更复杂的比如和 iOS/Android 通信的机制，比如 URI Scheme 或者 JS Bridge&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要学习一些&lt;/b&gt;&lt;b&gt;非常火热的前端框架/库&lt;/b&gt;，他们不但能帮助你更快的进行开发、更重要的是他们背后所蕴含的思想。包括 Backbone、Angular、Vue、React、Polymer 等等、了解它们背后的双向数据绑定、单向数据流、MVC/MVVM/Flux 思想、Web Component 与组件化等等&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要学习如何构建 web 单页应用&lt;/b&gt;，这是 web 的未来，包括利用 history API 或者 hash 实现路由，包括基于 Ajax + 模版引擎或者其他技术的前端渲染、包括组织较为复杂的软件设计等等&lt;br&gt;&lt;br&gt;&lt;b&gt;我还建议你学习更多的计算机知识&lt;/b&gt;，它们能对你的代码能起到潜移默化的作用，包括简单的计算机体系结构、更广泛的编程知识（面向对象/函数式等）、栈、堆、数组、队列、哈希表、树、图等数据结构、时间复杂度与空间复杂度以及简单的算法等等&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要了解业内的大神并阅读它们的博客/知乎/微博&lt;/b&gt;，比如  &lt;a data-hash=&quot;cfdec6226ece879d2571fbc274372e9f&quot; href=&quot;//www.zhihu.com/people/cfdec6226ece879d2571fbc274372e9f&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@尤雨溪&quot; data-tip=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot; data-hovercard=&quot;p$b$cfdec6226ece879d2571fbc274372e9f&quot;&gt;@尤雨溪&lt;/a&gt;&lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-tip=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;&lt;a data-hash=&quot;3212f9044005e9306aab1b61e74e7ae6&quot; href=&quot;//www.zhihu.com/people/3212f9044005e9306aab1b61e74e7ae6&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@张云龙&quot; data-tip=&quot;p$b$3212f9044005e9306aab1b61e74e7ae6&quot; data-hovercard=&quot;p$b$3212f9044005e9306aab1b61e74e7ae6&quot;&gt;@张云龙&lt;/a&gt;&lt;a data-hash=&quot;c5198d4e9c0145aee04dd53cc6590edd&quot; href=&quot;//www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@徐飞&quot; data-tip=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot; data-hovercard=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot;&gt;@徐飞&lt;/a&gt;&lt;a data-hash=&quot;20fdd386a6e59d178b8fe14e2863cb40&quot; href=&quot;//www.zhihu.com/people/20fdd386a6e59d178b8fe14e2863cb40&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@张克军&quot; data-tip=&quot;p$b$20fdd386a6e59d178b8fe14e2863cb40&quot; data-hovercard=&quot;p$b$20fdd386a6e59d178b8fe14e2863cb40&quot;&gt;@张克军&lt;/a&gt;&lt;a data-hash=&quot;c11336b8607d86bc9090bed90757a34c&quot; href=&quot;//www.zhihu.com/people/c11336b8607d86bc9090bed90757a34c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@玉伯&quot; data-tip=&quot;p$b$c11336b8607d86bc9090bed90757a34c&quot; data-hovercard=&quot;p$b$c11336b8607d86bc9090bed90757a34c&quot;&gt;@玉伯&lt;/a&gt;&lt;a data-hash=&quot;64458d15a75902cd0425732b7b757705&quot; href=&quot;//www.zhihu.com/people/64458d15a75902cd0425732b7b757705&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@拔赤&quot; data-tip=&quot;p$b$64458d15a75902cd0425732b7b757705&quot; data-hovercard=&quot;p$b$64458d15a75902cd0425732b7b757705&quot;&gt;@拔赤&lt;/a&gt;&lt;a data-hash=&quot;0d9b98af12015c94cff646a6fc0773b5&quot; href=&quot;//www.zhihu.com/people/0d9b98af12015c94cff646a6fc0773b5&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@寸志&quot; data-tip=&quot;p$b$0d9b98af12015c94cff646a6fc0773b5&quot; data-hovercard=&quot;p$b$0d9b98af12015c94cff646a6fc0773b5&quot;&gt;@寸志&lt;/a&gt;&lt;a data-hash=&quot;790dccce26904cdcd11b0fad3bac37b7&quot; href=&quot;//www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@题叶&quot; data-tip=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot; data-hovercard=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot;&gt;@题叶&lt;/a&gt;&lt;a data-hash=&quot;85de6407f2219137df29b4249b91cfd5&quot; href=&quot;//www.zhihu.com/people/85de6407f2219137df29b4249b91cfd5&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@郭达峰&quot; data-tip=&quot;p$b$85de6407f2219137df29b4249b91cfd5&quot; data-hovercard=&quot;p$b$85de6407f2219137df29b4249b91cfd5&quot;&gt;@郭达峰&lt;/a&gt; 等等等等，很多思想和新东西只有从他们身上才能学到。我还推荐你多参加技术交流会，多认识一些可以一起学习的小伙伴，你们可以互相交流并且一起成长&lt;br&gt;&lt;br&gt;&lt;b&gt;你需要具备很强的自学能力、对技术有热情并且不断跟进&lt;/b&gt;。因为 JavaScript/前端的社区非常非常活跃，有太多的新东西需要你自己来发现与学习：比如 Universal JavaScript、Isomorphic JavaScript、前端测试、HTML5 页游、WebRTC、WebSocket、CSS 4、SVG、HTTP/2、ES 7、React Native、Babel、TypeScript、Electron 等等等等…&lt;br&gt;&lt;br&gt;&lt;br&gt;虽然一下扯得有点多，但这些确实就是你未来将会遇到的。你并不需要全部掌握它们，但是却多多益善；你也可以专精在某几个方面，这已经足以让你成为非常专业的前端工程师。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;最后，英语英语英语，无论是学习还是工作，这都是一个决定天花板的重要技能。&lt;br&gt;&lt;br&gt;以上。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谢 <a data-hash=\"e414339bca7ce9081980e0ba149dfaff\" href=\"//www.zhihu.com/people/e414339bca7ce9081980e0ba149dfaff\" class=\"member_mention\" data-editable=\"true\" data-title=\"@冯天然\" data-tip=\"p$b$e414339bca7ce9081980e0ba149dfaff\" data-hovercard=\"p$b$e414339bca7ce9081980e0ba149dfaff\">@冯天然</a> 邀，这个问题大概的确适合我答……（好久没正经答题了 - -） 笔者的经历在知乎就可以看到，大学专业是数字媒体艺术，大一实习过动效设计师，大二拿到了人生第一个大公司 offer 是阿里的交互设计，后来转岗到淘宝旅行的前端团队，现在在微信电影…\n\n<a href=\"/question/21921588/answer/69680480\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-10-28\" target=\"_blank\" href=\"/question/21921588/answer/69680480\">编辑于 2016-07-04</a></p>\n\n",
    "link": "https://zhihu.com/question/21921588/answer/69680480"
  },
  {
    "question": "\n完全理解jQuery源代码，在前端方面算什么水平？\n",
    "author": "豪情",
    "content": "\n\n<textarea hidden class=\"content\">依读了2周jQuery源码的人感觉来说，完全理解jQuery，就拿jQuery 1.11这个版本10337行代码来说，水平已经很不错了。谦虚点说，已经入门。骄傲点，国内领先水平。但其码我感觉是js架构之路起行的第一步，完全理解源码，说明有独立构建或组织大型web前端框架的能力和基础。然后看看完全理解jQuery是一个怎么样的状态。&lt;br&gt;看下面几个链接就明白了：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/RubyLouvre/avalon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;RubyLouvre/avalon · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.planeart.cn/demo/artDialog/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;artDialog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/aui/artDialog&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;aui/artDialog · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;(后来的新版代码有所改变)&lt;br&gt;没错，这两个里边，就是在继承jquery的基础上做了自己的创新尝试。&lt;br&gt;然后在看下面这位：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/nuysoft/archive/2011/11/14/2248023.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;[原创] jQuery1.6.1源码分析系列（停止更新）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;是唯一出过jquery源码分析书的一位：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//item.jd.com/11401240.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《jQuery技术内幕：深入解析jQuery架构设计与实现原理》(高云)【摘要 书评 试读】&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;然后在看这位：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/aaronjs/p/3279314.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 2.0.3 源码分析系列&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;是目前一直在更新的一位，通俗有深度且版本比较新。&lt;br&gt;&lt;br&gt;在说一下我2周阅读jquery源码的心得，初看源码写的恶心，再看写的不错，细看写的真是精妙。然后今天在看ext 4.2的源码，真是流畅易读。基本来说，看懂jQuery源码，以后的源码学习之路可以说，平坦。&lt;br&gt;&lt;br&gt;然后说是不是高手，高手只是一个自我定位的心理暗示，是一种人格魅力的体现，是业务与技术的完美结合。个人感觉只能无限的接近，不能在有限的生命里边到达。我们在通往目的地过程中享受一路的风景，这才是生命的意义。&lt;br&gt;&lt;br&gt;然后在说前端，前端的核心是js，外围打酱油的技术太多，不一一列举。&lt;br&gt;&lt;ul&gt;&lt;li&gt;css就像一瓶酒，得品。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;html,css总共就那些标签跟选择器属性什么的，但是要写一个有扩展性，健壮性或维护性的页面不容易。现在写页面基本条件反射，不是如何快速的完成，而是思考如果有前端界面需求修改，怎么在修改代码最少的情况下完成整体需求任务。&lt;br&gt;&lt;ul&gt;&lt;li&gt;js就像一把剑，得磨。&lt;/li&gt;&lt;/ul&gt;js刚开始只是为了较验，随便技术社会的发展，承担的角色越来越重，刚开始玩玩jQuery感觉已经会js了，其实只是冰山一角。随着对js的了解越来越多，他即变态又可爱，即好玩又难控，即有很多兼容问题，但解决兼容是我们基本生存之道。&lt;br&gt;&lt;ul&gt;&lt;li&gt;人生就是一场梦，得作。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;技术只是生活的一部分，曾经雄心斗志，如今低头写码。改变能改变的，接受不能改变的。人生有限，兄争朝夕啊。&lt;br&gt;&lt;br&gt;最后说，什么时候能阅读jQuery源码，我感觉其码是纯js编码一年以上，js基础知识没有盲点。阅读源码，确实能学到很多东西。不只是技术，而是一种生活的态度。一种把一件事情做到极致的态度(糖饼语)。&lt;br&gt;&lt;br&gt;然后下面链接分享一下，是目前阅读研究源码的一部分资源：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//james.padolsey.com/jquery/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery source viewer&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码查询&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/edison1105/archive/2012/07/31/2617518.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这些年、我收集的JQuery代码&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hxq0506.iteye.com/blog/1046334&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jquery1.6中的.prop()和.attr()异同&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/zyj469470971/archive/2012/02/17/2355890.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;第三章《遍历DOM元素》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery选择器&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/sharpxiajun/archive/2011/09/22/2185566.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;javascript笔记：临摹jQuery（一）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/haogj/archive/2010/04/19/1715762.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 的原型关系图&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/170de045928d8d7d6125a55860c71e31_b.jpg&quot; data-rawwidth=&quot;1024&quot; data-rawheight=&quot;519&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1024&quot; data-original=&quot;https://pic2.zhimg.com/170de045928d8d7d6125a55860c71e31_r.jpg&quot;&gt;&lt;br&gt;jquery选择器&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/lovesueee/archive/2012/10/18/2729829.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;【原创】jQuery1.8.2源码解析之jQuery.Callbacks&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/nuysoft/archive/2011/11/14/2248023.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;[原创] jQuery1.6.1源码分析系列（停止更新）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/justany/archive/2013/01/22/2868501.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery event（上）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery事件分析&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/hxling/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;疯狂秀才 - 博客园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jQuery工作原理解析以及源代码示例&lt;br&gt;jquery easyui 作者&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//rapheal.sinaapp.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;raphealguo'blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码阅读&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ccvita.com/121.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery工作原理解析以及源代码示例&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.blog.highub.com/decoding-jquery/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Decoding jQuery&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码阅读英文资料&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/nuysoft/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;nuysoft - 博客园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码阅读，这位作者出了一本书叫jquery技术内幕&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//item.jd.com/1080321026.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery技术内幕&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//adamed.iteye.com/category/207898&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;adamed的博客&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jq源代码阅读 &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//adamed.iteye.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;猫猫的博客 - ITeye技术网站&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码分析&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/krouky/archive/2011/12/27/Krouky.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery1.6.2源码分析（一）框架体系研究&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery框架分析&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/yaozhiyi/archive/2013/01/12/2855583.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 源码：元素位置&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码　元素位置&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.oschina.net/news/46103/10-fresh-and-fantastic-jquery-plugins&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;10 个新鲜奇妙的 jQuery 插件&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;10个jquery插件，里边有个jquery滚动条写的不错。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//bbs.miaov.com/forum.php%3Fmod%3Dviewthread%26tid%3D7385&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;妙味课堂：一起学习jQuery源码【逐行分析jQuery源码的奥秘】&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.miaov.com/2013/miaovideo/miaovideo.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;妙味课堂-视频教程-www.miaov.com&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[知识点类] 妙味课堂：一起学习jQuery源码【逐行分析jQuery源码的奥秘】 &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/aaronjs/p/3310937.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 2.0.3 源码分析Sizzle引擎&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/aaronjs/p/3322466.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 2.0.3 源码分析Sizzle引擎&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery 2.0.3源码分析 分析Sizzle引擎 - 编译函数（大篇幅）&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/mythz/jquip&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mythz/jquip 路 GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery 压缩版&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/aaronjs/p/3342344.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery 2.0.3 源码分析 回调对象&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jQuery 2.0.3 源码分析 回调对象 - Callbacks&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//bbs.miaov.com/forum.php%3Fmod%3Dviewthread%26tid%3D7385&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;妙味课堂：一起学习jQuery源码【逐行分析jQuery源码的奥秘】&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery源码解读-妙味&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//sunnylost.com/article/jquery.core1.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;sunnylost.com/article/j&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;query.core1.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jQuery 源码阅读&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/yangjunhua/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;华子yjh - 博客园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;浅析jQuery基础框架 &lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ihiro.org/sizzle-custom-selector&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Hiro，工作，生活&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;sizzle源码&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/52cik/p/jquery-source-position.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;浅谈 jQuery 事件源码定位问题&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/suprise/p/3622760.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery1.11源码分析(1)-----Sizzle源码概览[原创]&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/baozhifei/article/details/6959392&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery1.0源代码分析之domManip方法（七）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/lihongxun945/article/category/1588879&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jquery 实现原理&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;jquery2.0.4源码分析&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/chyingp/category/546594.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jQuery源码分析系列&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/baochuan/archive/2012/11/21/2781118.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;通过jQuery源码学习javascript（一）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/jikey/p/3613082.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;web前端开发分享&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/170de045928d8d7d6125a55860c71e31_200x112.jpg\" data-rawwidth=\"1024\" data-rawheight=\"519\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/170de045928d8d7d6125a55860c71e31_r.jpg\">\n依读了2周jQuery源码的人感觉来说，完全理解jQuery，就拿jQuery 1.11这个版本10337行代码来说，水平已经很不错了。谦虚点说，已经入门。骄傲点，国内领先水平。但其码我感觉是js架构之路起行的第一步，完全理解源码，说明有独立构建或组织大型web前端框架的…\n\n<a href=\"/question/20521802/answer/25363285\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-05-08\" target=\"_blank\" href=\"/question/20521802/answer/25363285\">编辑于 2014-05-09</a></p>\n\n",
    "link": "https://zhihu.com/question/20521802/answer/25363285"
  }
]