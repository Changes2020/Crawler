[
  {
    "question": "\n国内的前端团队分布和前景是怎样的？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">突然看到这个老问题，一时兴起来歪个楼。&lt;br&gt;&lt;br&gt;国内的前端团队分布，其实可以用金庸武侠小说的门派来类比。&lt;br&gt;&lt;br&gt;阿里系：少林，人才济济，高手如云，应当是国内前端体系建设最完善的了，较早重视前端方向，有完整的前端工程化思路，对Web标准也很重视，node方面更是先驱&lt;br&gt;&lt;br&gt;百度系：武当，同样很多高手，fex跟ecomfe两个团队名声响亮，以fis为代表的前端工程方案和以echarts为代表的数据可视化独树一帜&lt;br&gt;&lt;br&gt;腾讯：丐帮，相对前两个团队，略有些低调，实力也是很强，跟阿里一样，是较早重视前端的企业，移动端、可访问性等方面研究较深&lt;br&gt;&lt;br&gt;360：明教，有月影，jk等高手带领，实力很强，奇舞团名扬天下&lt;br&gt;&lt;br&gt;去哪儿网：嵩山，近年迅速崛起，有司徒正美，杜瑶等高手坐镇&lt;br&gt;&lt;br&gt;新浪：华山，老牌互联网公司，前端建设得很好，人员流失略多&lt;br&gt;&lt;br&gt;网易：衡山，时常能看到一些亮点&lt;br&gt;&lt;br&gt;搜狐：恒山，同上&lt;br&gt;&lt;br&gt;百姓网：泰山，贺老一个人顶一百个，足称泰山北斗，其他还有css魔法等高手&lt;br&gt;&lt;br&gt;豆瓣：逍遥派，克军大神的团队，文艺清新&lt;br&gt;&lt;br&gt;携程：峨眉，重构方向强人多，图解css3作者大漠，css那些事儿作者林小志等等&lt;br&gt;&lt;br&gt;美团：崆峒，从百度，新浪吸引了一些人才，实力不错&lt;br&gt;&lt;br&gt;UC：大理段氏，张云龙在前端工程化方面的领悟，足可比拟六脉神剑，其他还有一些高手&lt;br&gt;&lt;br&gt;京东：青城，逐步完善自己的前端体系，有一定特色&lt;br&gt;&lt;br&gt;苏宁：海沙派，前端建设落后于各主流互联网公司，需奋起直追&lt;br&gt;&lt;br&gt;途牛：巨鲸帮，跟苏宁对门，难兄难弟&lt;br&gt;&lt;br&gt;……&lt;br&gt;&lt;br&gt;我瞎写的，如果冒犯各路高手，不要来打我，没写到的是我孤陋寡闻，只写了自己大致知道的事，有些小的创业团队也很厉害的，不过我这里只写门派，没算世外高人……</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n突然看到这个老问题，一时兴起来歪个楼。 国内的前端团队分布，其实可以用金庸武侠小说的门派来类比。 阿里系：少林，人才济济，高手如云，应当是国内前端体系建设最完善的了，较早重视前端方向，有完整的前端工程化思路，对Web标准也很重视，node方面更是…\n\n<a href=\"/question/20888075/answer/40612027\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-02-26\" target=\"_blank\" href=\"/question/20888075/answer/40612027\">编辑于 2015-02-26</a></p>\n\n",
    "link": "https://zhihu.com/question/20888075/answer/40612027"
  },
  {
    "question": "\n理解 React，但不理解 Redux，该如何通俗易懂的理解  Redux？\n",
    "author": "Wang Namelos",
    "content": "\n\n<textarea hidden class=\"content\">解答这个问题并不困难：唯一的要求是你熟悉React。&lt;br&gt;不要光听别人描述名词，理解起来是很困难的。&lt;br&gt;从需求出发，看看使用React需要什么：&lt;br&gt;1. React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有数据向上回溯的能力，也就是说数据只能单向向下分发，或者自行内部消化。&lt;br&gt;理解这个是理解React和Redux的前提。&lt;br&gt;2. 一般构建的React组件内部可能是一个完整的应用，它自己工作良好，你可以通过属性作为API控制它。但是更多的时候发现React根本无法让两个组件互相交流，使用对方的数据。&lt;br&gt;然后这时候不通过DOM沟通（也就是React体制内）解决的唯一办法就是提升state，将state放到共有的父组件中来管理，再作为props分发回子组件。&lt;br&gt;3. 子组件改变父组件state的办法只能是通过onClick触发父组件声明好的回调，也就是父组件提前声明好函数或方法作为契约描述自己的state将如何变化，再将它同样作为属性交给子组件使用。&lt;br&gt;这样就出现了一个模式：数据总是单向从顶层向下分发的，但是只有子组件回调在概念上可以回到state顶层影响数据。这样state一定程度上是响应式的。&lt;br&gt;4. 为了面临所有可能的扩展问题，最容易想到的办法就是把所有state集中放到所有组件顶层，然后分发给所有组件。&lt;br&gt;5. 为了有更好的state管理，就需要一个库来作为更专业的顶层state分发给所有React应用，这就是Redux。让我们回来看看重现上面结构的需求：&lt;br&gt;a. 需要回调通知state (等同于回调参数) -&amp;gt; action&lt;br&gt;b. 需要根据回调处理 (等同于父级方法) -&amp;gt; reducer&lt;br&gt;c. 需要state (等同于总状态) -&amp;gt; store&lt;br&gt;对Redux来说只有这三个要素：&lt;br&gt;a. action是纯声明式的数据结构，只提供事件的所有要素，不提供逻辑。&lt;br&gt;b. reducer是一个匹配函数，action的发送是全局的：所有的reducer都可以捕捉到并匹配与自己相关与否，相关就拿走action中的要素进行逻辑处理，修改store中的状态，不相关就不对state做处理原样返回。&lt;br&gt;c. store负责存储状态并可以被react api回调，发布action.&lt;br&gt;当然一般不会直接把两个库拿来用，还有一个binding叫react-redux, 提供一个Provider和connect。很多人其实看懂了redux卡在这里。&lt;br&gt;a. Provider是一个普通组件，可以作为顶层app的分发点，它只需要store属性就可以了。它会将state分发给所有被connect的组件，不管它在哪里，被嵌套多少层。&lt;br&gt;b. connect是真正的重点，它是一个科里化函数，意思是先接受两个参数（数据绑定mapStateToProps和事件绑定mapDispatchToProps），再接受一个参数（将要绑定的组件本身）：&lt;br&gt;mapStateToProps：构建好Redux系统的时候，它会被自动初始化，但是你的React组件并不知道它的存在，因此你需要分拣出你需要的Redux状态，所以你需要绑定一个函数，它的参数是state，简单返回你关心的几个值。&lt;br&gt;mapDispatchToProps：声明好的action作为回调，也可以被注入到组件里，就是通过这个函数，它的参数是dispatch，通过redux的辅助方法bindActionCreator绑定所有action以及参数的dispatch，就可以作为属性在组件里面作为函数简单使用了，不需要手动dispatch。这个mapDispatchToProps是可选的，如果不传这个参数redux会简单把dispatch作为属性注入给组件，可以手动当做store.dispatch使用。这也是为什么要科里化的原因。&lt;br&gt;&lt;br&gt;做好以上流程Redux和React就可以工作了。简单地说就是：&lt;br&gt;1.顶层分发状态，让React组件被动地渲染。&lt;br&gt;2.监听事件，事件有权利回到所有状态顶层影响状态。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n解答这个问题并不困难：唯一的要求是你熟悉React。 不要光听别人描述名词，理解起来是很困难的。 从需求出发，看看使用React需要什么： 1. React有props和state: props意味着父级分发下来的属性，state意味着组件内部可以自行管理的状态，并且整个React没有…\n\n<a href=\"/question/41312576/answer/90782136\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/41312576/answer/90782136\">发布于 2016-03-15</a></p>\n\n",
    "link": "https://zhihu.com/question/41312576/answer/90782136"
  },
  {
    "question": "\n怎么判定web前端架构师的能力高低？\n",
    "author": "张云龙",
    "content": "\n\n<textarea hidden class=\"content\">谢邀&lt;br&gt;&lt;br&gt;首先，我们来考虑一下什么是架构：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/view/1147116.htm%3Ffr%3Daladdin&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;软件架构_百度百科&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;blockquote&gt;软件架构（software architecture）是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计。&lt;br&gt;&lt;/blockquote&gt;传统软件架构描述的对象是直接构成系统的抽象组件，侧重于系统的抽象、拆分、组织方式等。所以如果从传统软件架构定义出发，前端架构可能就是指前端项目的系统设计了。在进行系统设计之前，由于前端开发语言缺乏一定的工程能力，所以&lt;b&gt;&lt;u&gt;web前端架构师相比传统软件架构师还应该能提供以下开发基础的支持&lt;/u&gt;&lt;/b&gt;：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;开发规范&lt;/b&gt;：开发规范设计非常重要，设计良好的开发规范应该以实用性为前提，可以提升开发效率，降低维护成本。常见的规范主要是针对模块化开发定义的，想象一下，下面的规范示意图是不是能对开发和维护有极大的帮助：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/60ead9f4b63f42ae8ad6dd2f59783bde_b.jpg&quot; data-rawwidth=&quot;475&quot; data-rawheight=&quot;423&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;475&quot; data-original=&quot;https://pic3.zhimg.com/60ead9f4b63f42ae8ad6dd2f59783bde_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;开发模型&lt;/b&gt;：主要是模块化开发。前端由于编程语言的问题，没有原生的模块化支持，所以架构师在做架构设计之前，要先提供模块开发体系。模块化开发体系设计挺复杂的，完整的模块化体系要统一js、css和模板的模块化处理，此外，js、css模板中的资源（图片等）引用也是要考虑的问题。此外，模块化框架肩负着资源的加载控制，要面对性能优化，所以，好的架构师给出的模块化方案应该是能把性能优化做到框架中，&lt;b&gt;性能是一个工程问题&lt;/b&gt;！&lt;/li&gt;&lt;li&gt;&lt;b&gt;构建工具&lt;/b&gt;：还是由于前端开发语言的问题，前端还需要构建工具配合，才能完成开发规范、开发模型的落地实现。这部分也许有人认为是非必须的，但是我可以给出完整论证证明&lt;b&gt;标准前端项目必须经过构建&lt;/b&gt;，这里就不展开了。总之，前端架构师在给出规范、模型之后，还要给出配套的工具来保证它们的实现。&lt;/li&gt;&lt;/ul&gt;web前端架构师至少要提供以上3项之后才能开展正式的架构设计，我觉得这部分是衡量一个架构师设计能力的重要指标之一。基础搞定了，架构设计的开展才能顺利。没有标准的模块化支持，架构设计很难做。&lt;br&gt;&lt;br&gt;此外，由于web前端的产品模式与传统软件有很大差异，所以我觉得真正的前端架构师还应该能考虑以下问题：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;项目部署&lt;/b&gt;：前端项目部署应该由前端架构师来决定，这里涉及到网络性能优化和开发规范对接的问题，所以前端架构师要理解工程部署的过程，并把开发和部署打通，否则开发受限于部署，架构设计会遇到阻碍。&lt;/li&gt;&lt;li&gt;&lt;b&gt;组件化与组件生态&lt;/b&gt;：由于前端面向的是界面设计，所以在模块化之上还有组件化开发模型需要架构师提供。此外，项目中一些可复用的模块或组件应该有一定的复用渠道，这部分我称之为生态。架构师应该提供这样的渠道来解决多个团队或项目之间的代码复用问题。&lt;/li&gt;&lt;li&gt;&lt;b&gt;前端统计&lt;/b&gt;：前端统计包括性能统计、访问统计、用户行为统计、错误统计、安全监控等，虽然有些统计属于产品指标，但在大数据时代，前端研发的方向应该有一定的数据做指导，前端架构师必须关心统计数据，并能提供统计方案、统计平台是一种衡量指标。&lt;/li&gt;&lt;li&gt;&lt;b&gt;前端安全&lt;/b&gt;：这部分也应该有架构师负责的部分。主要是在开发、统计的过程中对前端安全做保障，比如xss修复、页面脚本注入监控等&lt;/li&gt;&lt;li&gt;&lt;b&gt;系统测试&lt;/b&gt;：很多人总是尝试用API测试方法论中的单元测试来测试前端项目，其实是片面的。前端测试属于GUI测试范畴，前端项目中使用的框架、类库一般由外部提供，已经由API测试做了质量保证，而项目中的测试应该主要集中在GUI测试上，这部分目前没有好的解决方案做支撑，所以也没有什么好的衡量办法。&lt;/li&gt;&lt;/ul&gt;以上就是我觉得衡量前端架构师的基本要求，&lt;u&gt;&lt;b&gt;现在已经不在是“写一个jquery就是架构师”的时代了&lt;/b&gt;&lt;/u&gt;，前端本应该是一个系统化、工程化的理论体系，涉及到很多方面，前端工程师的工程化意识应该加强。&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;或许现在很多企业和团队尚未重视前端工程，或许前端工程在很多人眼里还只是“构建工具”的代名词，又或许未来前端领域的变革使得一切工程问题从根本上得到解决。不管怎样，我只是希望当下能认真的记录自己在前端工程领域的所见所想，与正在经历前端工程化改进，并被此过程困扰的同学交流心得。&lt;/blockquote&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谢邀 首先，我们来考虑一下什么是架构：<a href=\"//link.zhihu.com/?target=http%3A//baike.baidu.com/view/1147116.htm%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">软件架构_百度百科<i class=\"icon-external\"></i></a> 软件架构（software architecture）是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计。 传统软件架构描述的对象是直接构成系统的抽象组件，侧重于系统的抽象、拆分、组织方式等。所以…\n\n<a href=\"/question/26187669/answer/32470493\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-10-26\" target=\"_blank\" href=\"/question/26187669/answer/32470493\">编辑于 2014-10-28</a></p>\n\n",
    "link": "https://zhihu.com/question/26187669/answer/32470493"
  },
  {
    "question": "\n各个编程语言都有哪些“亮点”？\n",
    "author": "LittleCoder",
    "content": "\n\n<textarea hidden class=\"content\">讲一下Python。&lt;br&gt;&lt;br&gt;Python，语言本身&lt;b&gt;写着爽&lt;/b&gt;，有舒适的握把和合适的重量。&lt;br&gt;需要借巨人肩膀一用的时候&lt;b&gt;库不仅强大而且调用简单&lt;/b&gt;。&lt;br&gt;巨人也种类繁多，&lt;b&gt;领域广&lt;/b&gt;。&lt;br&gt;还有很多人和你一起骑着巨人溜达并交流心得体会，他的&lt;b&gt;社区和用户活跃&lt;/b&gt;。&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 写着爽。&lt;/b&gt;&lt;br&gt;&lt;br&gt;动态类型，就是一个变量你想存什么就存什么。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;ditto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;ditto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'diiiiiiiiitto'&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;ditto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;ditto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;语言简练，很少的代码就能把你想做的功能写出来。&lt;br&gt;这个就不举例了，随便写点什么你自然就懂。&lt;br&gt;&lt;br&gt;有各种好用的语法糖，比如交换两数不用另外的变量也不用异或。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python3&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;环境配置也没有那么麻烦，不会环境一小时代码五分钟。&lt;br&gt;pip不行也可以下编译好的包，比如这个网站：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.lfd.uci.edu/%7Egohlke/pythonlibs/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;lfd.uci.edu/~gohlke/pyt&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;honlibs/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 库不仅强大而且调用简单。&lt;/b&gt;&lt;br&gt;&lt;br&gt;想做什么import一下就好了，还有漫画吐槽这件事。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/4e6c238477813abd5335d7bf51b54c15_b.png&quot; data-rawwidth=&quot;518&quot; data-rawheight=&quot;588&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;518&quot; data-original=&quot;https://pic2.zhimg.com/4e6c238477813abd5335d7bf51b54c15_r.png&quot;&gt;这张图的意思是：一个人飞在了天上，而原因是用Python运行了一句命令：“import 反重力”。&lt;br&gt;另外补一句，运行&quot;import antigravity&quot;是真的会有事情发生。&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 领域广。&lt;/b&gt;&lt;br&gt;&lt;br&gt;虽然不至于什么都能做，但也差不多了。&lt;br&gt;&lt;br&gt;下个视频有you-get，&lt;br&gt;抓点数据有requests，&lt;br&gt;写个后台有flask，&lt;br&gt;加个GUI有pyqt，&lt;br&gt;打包成exe有pyinstaller，&lt;br&gt;写个文档有mkdocs，&lt;br&gt;换换环境有pyenv，&lt;br&gt;图像处理opencv，&lt;br&gt;自然语言jieba，&lt;br&gt;深度学习TensorFlow，&lt;br&gt;...&lt;br&gt;&lt;br&gt;还是一个胶水语言。实在有需要别的语言的地方，调用也很方便。&lt;br&gt;&lt;br&gt;&lt;b&gt;4. 社区和用户活跃。&lt;/b&gt;&lt;br&gt;&lt;br&gt;技术分享的文章、各类的群、各种相关网站都很活跃，中文资料也很多。&lt;br&gt;问题能很快被解决。提问经常能找到前人的解答，即使没有也会有野生的大神。&lt;br&gt;学习资料丰富。关键词一搜能找到各类资讯和学习的线路，选一个喜欢的就可以了。&lt;br&gt;&lt;br&gt;项目也会发展较快。&lt;br&gt;就拿自己开发的微信接口来说吧，在开源过程当中碰到了很多用别的语言开发的开发者。&lt;br&gt;项目完整度、文档、易用性都很棒，但是用的人真心少。&lt;br&gt;&lt;br&gt;用户量也在不断增加。&lt;br&gt;各类的语言排行榜中Python的排名都在上升。&lt;br&gt;据说有些学校打算将Python开为基础课程。&lt;br&gt;&lt;br&gt;&lt;b&gt;另，&lt;/b&gt;&lt;br&gt;&lt;br&gt;我当年是怎么喜欢上Python的？&lt;br&gt;就是几个巨人叠着把我抬了上去，我轻轻的挥了一下刚捡到的小武器就切下了星星。&lt;br&gt;真是糟糕的成就感。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/4e6c238477813abd5335d7bf51b54c15_200x112.png\" data-rawwidth=\"518\" data-rawheight=\"588\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/4e6c238477813abd5335d7bf51b54c15_r.png\">\n讲一下Python。 Python，语言本身<b>写着爽</b>，有舒适的握把和合适的重量。 需要借巨人肩膀一用的时候<b>库不仅强大而且调用简单</b>。 巨人也种类繁多，<b>领域广</b>。 还有很多人和你一起骑着巨人溜达并交流心得体会，他的<b>社区和用户活跃</b>。 <b>1. 写着爽。</b> 动态类型，就是一个…\n\n<a href=\"/question/53739562/answer/136368538\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-12-18\" target=\"_blank\" href=\"/question/53739562/answer/136368538\">编辑于 2016-12-19</a></p>\n\n",
    "link": "https://zhihu.com/question/53739562/answer/136368538"
  },
  {
    "question": "\n淘宝和天猫首页都用到了哪些技巧或者技术？\n",
    "author": "Barret李靖",
    "content": "\n\n<textarea hidden class=\"content\">更好的阅读体验，请戳这里：团队博客（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//taobaofed.org/blog/2016/06/02/thing-about-taobao-homepage/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;聊一聊淘宝首页和它背后的一套&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ）或者我的个人网站（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.barretlee.com/blog/2016/06/02/thing-about-taobao-homepage/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;聊一聊淘宝首页和它背后的一套&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。&lt;br&gt;&lt;br&gt;&lt;b&gt;聊一聊淘宝首页和它背后的一套&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;从 14 年双十二结束开始接手淘宝首页，到如今差不多 1 年半时间，不久前完成了首页相关工作的交接。期间经历了两次改版和一次从 PHP 到 Node 的迁移，还是颇有感受，下面给大家分享下。&lt;/p&gt;&lt;br&gt;&lt;p&gt;文章好像有点长，列个大纲会比较好：&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;一、相关背景介绍&lt;br&gt;二、淘宝首页的整理变迁&lt;br&gt;　　1. PHP 下的淘宝首页&lt;br&gt;　　2. PHP 到 Node 的变迁&lt;br&gt;　　3. Node，不一样的模式&lt;br&gt;三、淘宝首页的性能优化&lt;br&gt;　　1. 页面渲染逻辑&lt;br&gt;　　2. 一起来看看淘宝首页的个性化&lt;br&gt;　　3. 淘宝首页性能优化实践&lt;br&gt;四、淘宝首页的稳定性保障&lt;br&gt;　　1. 兜底容灾机制&lt;br&gt;　　2. 监控预警机制&lt;br&gt;　　3. 上线前的自动化检测&lt;br&gt;五、淘宝首页的敏捷措施&lt;br&gt;　　1. 健康检查&lt;br&gt;　　2. 接口 Hub&lt;br&gt;　　3. 快捷通道&lt;br&gt;六、小结&lt;/p&gt;&lt;/blockquote&gt;&lt;br&gt;&lt;b&gt;一、相关背景介绍&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;淘宝首页是淘宝的门面，承载着几乎淘系所有业务的入口，流量很大，量级单位为亿。近几年无线端崛起，业务重点开始向无线终端偏移（目前不能叫偏移，基本以无线为主了），所以淘宝 PC 端首页的流量也有削减，不过即便如此，它的日均 PV 依然相当高。&lt;/p&gt;&lt;br&gt;&lt;p&gt;淘宝首页一向是内部平台和技术的试验田，它一直在变化着。最新的框架和系统都会找淘宝首页试点，可以试想下，如果某一项需要推动的升级或者优化措施在淘宝首页已经上线，并且拿到了良好的数据和稳定性，其他业务还有什么理由不去尝试和更迭呢？同时，去年一年身在淘宝前端的技术架构组，自然而然也会主动去 push 一些实验性的内容到业务上。&lt;/p&gt;&lt;br&gt;&lt;p&gt;淘系的站点页面包括首页、其他频道页和活动页等，这些页面并不都由淘宝前端一行一行的代码码出来，业务如此之多，这种玩法即便人数 double 也忙不过来。事实上，大多数页面都是依托内部的搭建平台——运营或者前端通过模块搭建的方式——构建的，而前端 focus 的重点在于搭建平台的建设自身以及模块的通用性和复用率的保障，当然，还有一些工程化的东西。&lt;/p&gt;&lt;br&gt;&lt;p&gt;使用搭建平台搭建的页面，前端只需要考虑组成页面的原子模块的开发，整体的渲染由搭建平台提供的统一脚本全权负责。而在淘宝首页上，考虑到页面模块数量巨多，加上还有少量跨部门、跨团队的沟通，渲染模型略微不同。&lt;/p&gt;&lt;br&gt;&lt;b&gt;二、淘宝首页的整体变迁&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;背景中提到，淘宝首页依托于内部搭建平台，它的变迁自然也是跟着搭建系统的变化而变化的。&lt;/p&gt;&lt;br&gt;&lt;b&gt;1. PHP 下的淘宝首页&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;接手淘宝首页不久，便遇到了一年一度的改版，那时它还运行在 PHP 环境中。这里需要说明的是，淘宝首页的所有代码完全由前端掌控，前端不会直接跟数据库打交道，其数据来源分为两部分。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;数据来源&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;一是 &lt;em&gt;运营填写的数据。&lt;/em&gt; 采用前端挖坑的形式，预留坑位让运营获取填写数据，如（伪代码）：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name:String:姓名,age:Number:年龄'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'个人信息坑位填写'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n\n&lt;span class=&quot;x&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  Name: &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;, Age: &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;上面的代码会产生一份 PHP 的模板和 info 字段对应的表单坑位，这个过程简称「挖坑」。&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/5ab74aedbc6d118b19a74628a173993f_b.jpg&quot; data-rawwidth=&quot;492&quot; data-rawheight=&quot;336&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;492&quot; data-original=&quot;https://pic4.zhimg.com/5ab74aedbc6d118b19a74628a173993f_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;运营填写这些坑位就会产生这份 PHP 模板对应的数据，最后渲染出来就是一个完整的 HTML 片段（实时性渲染）。&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.\n├── data.json   # 运营数据的来源\n└── index.php   # 装载运营数据的 PHP 模板\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;旧版搭建系统中就是通过这种方式构造一个子模块。我描述得十分简单，但作为一个平台它需要考虑的东西还有很多很多的，比如数据顺序的控制、定时发布、回滚机制、过滤机制、筛选机制、数据的同步、数据的更新、版本控制、权限控制、其他系统的引用等等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;二是 &lt;em&gt;后端或者个性化平台提供的数据。&lt;/em&gt; 不同的业务有不同的诉求。一些业务有自己的后端，他们要求使用自己业务产出的数据；有的业务希望用户看到的内容不一样，千人千面，期望接入算法；一些业务跟卖家直接打交道，期望使用招商数据；而有些业务期望采用运营从数据池筛选出来的数据…总之，淘宝首页需要对接形形色色的系统，接口繁多。后面会提到对动态数据源的整合。&lt;/p&gt;&lt;br&gt;&lt;p&gt;并且这些系统对应的域名是不一样的，JSONP 格式自然也就成了首选。但一些特殊的系统，比如广告，它的渲染并不是一个简单的 JSONP 请求，可能它还要干预整个广告的渲染流程，比如加载他们的 JS，把渲染的控制权交过去。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;页面的架构&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;上面介绍了数据的来源和子模块的结构，那么整个页面又是如何构成的呢？模块的搭建分为两种，一种是可视化搭建，运营或者前端可以将开发好的模块（或者模块库中选取的模块）拖拽到容器内，形成一个页面，&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/66f334eeeae954296b974b02906fdd8d_b.jpg&quot; data-rawwidth=&quot;1680&quot; data-rawheight=&quot;1192&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1680&quot; data-original=&quot;https://pic2.zhimg.com/66f334eeeae954296b974b02906fdd8d_r.jpg&quot;&gt;&lt;p&gt;当然，上图也只是一个模型，作为一个系统需要考虑的问题还有很多很多，如页面的布局、多终端适配、模块的临时隐藏、位置调整、皮肤选择、模块的复制等等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;也可以通过如下源码搭建的方式（伪代码）：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod1ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod2ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod3ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lazyload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod4ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lazyload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod5ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lazyload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;通过模块 id 将模块引入，并且添加一些类似 lazyload 的标记，方便控制渲染节奏和数据入口。源码搭建和模块搭建的区别在于，前者更易于控制模块的结构以及模块的渲染顺序。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;动态数据源&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;首页面对一大堆接口和平台，对接几十个业务方，接口是个很大的问题，由于后台系统的差异，基本没有办法统一数据源的格式，一旦运营哪天心血来潮要换一个他自己觉得用的更爽的或者数据更好的系统，前后端估计又得沟通和对接几次。所以出现了下面这张图：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/f326e6743e5e8bd91593799345fb86b2_b.jpg&quot; data-rawwidth=&quot;1616&quot; data-rawheight=&quot;928&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1616&quot; data-original=&quot;https://pic3.zhimg.com/f326e6743e5e8bd91593799345fb86b2_r.jpg&quot;&gt;&lt;p&gt;平台具备数据源接入的能力，也就是说我们挖的坑不仅仅可以让运营填数据，还可以从各种数据源中直接导入数据，当然，这里需要进行一次数据字段的映射转换。后端提供的接口是这样的：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;nt&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;item_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;item_url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://xxx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;item_pic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://xxx&quot;&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;前端约定的接口形式是:&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;nt&quot;&gt;&quot;info&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;\n    &lt;span class=&quot;nt&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://xxx&quot;&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;那么系统必须提供这种映射的绑定策略：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;info/name -&amp;gt; data/item_name\ninfo/url -&amp;gt; data/item_url\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;绑定之后，数据既可以同步输出，也可以异步输出，这些都是平台提供的能力。这个方案基本上解决了后端系统/接口变化的问题，并且减少了前后端之间的沟通成本。&lt;/p&gt;&lt;br&gt;&lt;p&gt;不过这里需要注意的是，虽然页面上的接口都通过平台统一梳理了一次，这也意味着，页面所有的请求会先流经平台，然后分发到各个后端，平台的抗压能力要求很高。&lt;/p&gt;&lt;br&gt;&lt;b&gt;2. PHP 到 Node 的变迁&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;淘宝首页日均请求的这个量级，不可能是十几二十台台服务器抗得住的，支撑它必须有一个服务集群。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/8beaeb8b3417081a3fd3f20407b94ea2_b.jpg&quot; data-rawwidth=&quot;1392&quot; data-rawheight=&quot;1008&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1392&quot; data-original=&quot;https://pic3.zhimg.com/8beaeb8b3417081a3fd3f20407b94ea2_r.jpg&quot;&gt;&lt;br&gt;&lt;p&gt;每一个 CDN 节点上都具备 PHP 渲染的能力，当页面发布时，我们把该页面所有的模块和数据同步到全部 CDN 节点上，基本模式大概就是如此了。看起来还挺不错，但是经过一段时间的运维，很多安全、性能问题都慢慢浮现出来了：&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;性能问题。&lt;/em&gt; 每个 PHP 页面包含多个子模块，而子模块也有可能引用了其他的子模块，PHP 的include 操作是存在消耗的，每一次引用都是一次磁盘 IO，一个渲染节点上跑了成千上万个类似淘宝首页的 PHP 页面，并发一高其效率可想而知。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;推送机制问题。&lt;/em&gt; 文件同步（图中的 sync 动作）是一种比较恶心的机制，首先，时间上没法控制，一个文件同步到所有的节点，快则几秒钟，慢的话耗时会超过一两分钟；并且同步过程还有可能失败，健康检测的成本也是相当高的。发布比较紧凑时，需要同步的文件也很多，很容易造成队列堆积，加剧同步差的体验。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;em&gt;实时性强需求问题。&lt;/em&gt; 文件在推送之前，还可能经过一些前置系统，发布链路越长，线上生效时间越慢，慢的时候大约五分钟才生效，这样的延时对于实时性要求很高（如秒杀）的需求来说是完全不能接受的。&lt;/p&gt;&lt;br&gt;&lt;p&gt;当然，还有很多其他问题，如运维成本增高、安全风险增高、PHP 资深人才储备不足等等。所以 PHP 渲染容器的命运，就是，被干掉。&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/2836858e8054992359dca8ab92131007_b.jpg&quot; data-rawwidth=&quot;1588&quot; data-rawheight=&quot;1054&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1588&quot; data-original=&quot;https://pic4.zhimg.com/2836858e8054992359dca8ab92131007_r.jpg&quot;&gt;&lt;p&gt;上图改变了下玩法，服务集群为 Cache CDN，它只有静态文件处理能力，没有 PHP/Node 的渲染能力，所以处理效率高，性能也好，抗压能力相当强，并且扛不住的时候还可以花钱买服务，拓展 Cache 集群。&lt;/p&gt;&lt;br&gt;&lt;p&gt;用户访问时，Nginx 转到 Cache CDN，如果命中缓存则直接返回，没有命中便回源到源站服务器。源站服务器是具备模块渲染能力的 Node 服务，它可以做很多事情：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;控制 Cache 响应头，通过 max-age 和 s-maxage 控制页面在客户端的缓存时间以及在 Cache 上的缓存时间，这个缓存时间可以根据需求随时做调整，比如大促的时候调长一些&lt;/li&gt;&lt;li&gt;控制内外网环境，和 AB 测试状态&lt;/li&gt;&lt;li&gt;融合前端相关的工具链，比如检测、压缩、过滤等等&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;它的优势有很多，这里不一一列举了。这个模式中还添加了一层容灾，源站服务器每隔一段时间将数据推送到于 Cache 同机房的备份服务器，一点源站挂了，还能够自动容灾到备份数据上。&lt;/p&gt;&lt;br&gt;&lt;p&gt;模式的变化不仅在运维上有了突破，CDN 被攻击时的安全风险也低了很多，同时也省却了 sync 所需的各种检测机制，每年节约成本也是百万以上，优势还是相当明显。&lt;/p&gt;&lt;br&gt;&lt;b&gt;3. Node，不一样的模式&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;上面 PHP 模块中，我们只说了 HTML 和数据部分，用心的读者应该已经发现，CSS 和 JS 这些静态资源都没提到，那页面是如何渲染的呢？&lt;/p&gt;&lt;br&gt;&lt;p&gt;旧版 PHP 页面中，我们是直接引入了一个 CSS 和一个 JS，淘宝这边采用的是 git 版本迭代发布，这些静态资源都是直接放在一个 git 仓库中。也就是这样：&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&lt;span class=&quot;x&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn/@VERSION@/index.css&quot;&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &amp;lt;script src=&quot;//cdn/@VERSION@/index.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod1ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod2ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod3ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lazyload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod4ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lazyload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Mod5ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'lazyload'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;&lt;/span&gt;\n&lt;span class=&quot;x&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;每次发布完 git 文件，再修改 PHP 的版本号，然后发布 PHP 代码。当然，也做了相关的优化，比如发布 git 时自动更新版本号等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;而新版搭建平台的页面渲染模式与 PHP 的模式不太一样。&lt;/p&gt;&lt;img src=&quot;https://pic1.zhimg.com/9d2f7143bb1cbb6b953922d03aa385b8_b.jpg&quot; data-rawwidth=&quot;2048&quot; data-rawheight=&quot;1253&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2048&quot; data-original=&quot;https://pic1.zhimg.com/9d2f7143bb1cbb6b953922d03aa385b8_r.jpg&quot;&gt;&lt;p&gt;一个模块的 CSS/JS 和模板放在一起，CSS/JS 与页面其他模块的静态资源是相互独立的，目的就是希望单个模块也能够完整的跑起来，更加利于模块的复用。&lt;/p&gt;&lt;br&gt;&lt;p&gt;而模块的挖坑，也从模板中独立了出来，采用 JSON Schema 的形式定义数据格式，&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;.\n├── index.css    # 模块样式\n├── index.js     # 模块渲染脚本\n├── schema.json  # schema 配置\n└── index.xtpl   # 模块的模板\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;搭建平台通过这个 JSON Schema 解析成 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ww4.sinaimg.cn/large/6c0378f8gw1f4g54zdicej20do09cdfy.jpg&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;图一&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 的坑位。那么一个模块的渲染就编程了index.xtpl 和挖坑数据之间的拼装了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;模块之间相互独立隔离，所以会存在一定程度的冗余，不过模块接偶带来的收益要比这点冗余要多得多。事实上，我们是通过一个仓库去管理单个模块的。页面的渲染就比较简单了，源站 Node 容器会将所有的 index.xtpl 合并成一个 page.xtpl，为减少页面请求，css 和 js 也会 combo 成一个文件，如上图所示的 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//cdn/%3F%3Fmod1.css%2Cmod2.css%2Cmod3.css&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cdn/?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;?mod1.css,mod2.css,mod3.css&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;任何模块的更新，页面都会有感知，下次进入系统时，就会提示是否需要升级模块和页面。这里内容比较多，我不细说，感兴趣的可以找我 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//weibo.com/173248656&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;私聊&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;&lt;b&gt;三、淘宝首页的性能优化&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;首页模块众多，如果一口气吐出来，DOM 数量必然超过 4k 个，其结果就是首屏时间极长。按照 TMS 的开发规范，每个 TMS 模块都包含一个 index.js 和 index.css，最后展示出来两个 combo 的 js 和 css。首页加载的时候也不会一口气执行所有 index.js，否则刚开始页面阻塞会十分严重。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;页面的渲染逻辑&lt;/strong&gt;&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/f9c2154809ad7de768530bfbda346141_b.jpg&quot; data-rawwidth=&quot;563&quot; data-rawheight=&quot;711&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;563&quot; data-original=&quot;https://pic2.zhimg.com/f9c2154809ad7de768530bfbda346141_r.jpg&quot;&gt;&lt;p&gt;首页框架的加载逻辑，大致上图所示：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;遍历所有 TMS 模块（包含一个 J_Module 的钩子）&lt;/li&gt;&lt;li&gt;部分 TMS 模块无 JS 内容，但是加载了一个 index.js，为模块添加 tb-pass 的 class，用于跳过该模块 JS 的执行&lt;/li&gt;&lt;li&gt;将页面分为两块，首屏为一块，非首屏整体为第二块，先将首屏模块加入到懒加载监控&lt;/li&gt;&lt;li&gt;待首屏模块加载完成，或者用户处理了页面交互时（滚动、鼠标移动等），将非首屏模块加入到懒加载监控&lt;/li&gt;&lt;li&gt;处理一些特殊模块，它们会在进入视窗之前几百像素就开始加载&lt;/li&gt;&lt;li&gt;监控滚动，按照以上逻辑，渲染模块&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;部分模块即便是被执行了，也不一定渲染出来，因为它的优先级不高，在模块内部加了事件监听，比如等到 mouseover/onload 事件触发的时候再渲染这些内容。&lt;/p&gt;&lt;br&gt;&lt;p&gt;之前写过性能优化相关的文章，复制就没必要了，直接贴地址：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.barretlee.com/blog/2016/03/31/personality-in-taobao-home-page/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《一起来看看淘宝首页的个性化》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.barretlee.com/blog/2016/04/01/optimization-in-taobao-homepage/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《淘宝首页性能优化实践》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;代码的性能优化是一个精细活，如果你要在一个庞大的未经优化的页面上做性能优化，可能会面临一次重构代码。&lt;/p&gt;&lt;br&gt;&lt;p&gt;上面的文章提到的是页面内部的细节优化，但是在开发流程中做的规范化、标准化，以及线上访问通路中的各个环节优化还没有提及。这一块内容可能有点跑题，就不多说了。&lt;/p&gt;&lt;br&gt;&lt;b&gt;四、淘宝首页的稳定性保障&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;在大流量下，任何小问题都会被放大成大问题，所以开发环节遇到的任何偶发性问题都需要引起重视。不过很多偶发性问题在我们的测试环境中是找不到的，比如与地域相关的问题（如上海的某个 CDN 节点挂了），用户属性问题（如 nickname 最后一个为字母 s 的用户页面天窗），浏览器插件问题，运营商广告注入问题等等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;难以在上线之前把所有问题考虑周全，但是有两点是必须做好的：&lt;strong&gt;兜底容灾 + 监控预警。&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;b&gt;1. 兜底容灾机制&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;兜底容灾有两个层面的考虑：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;异步接口请求错误，包括接口数据格式错误，接口请求超时等&lt;/li&gt;&lt;li&gt;同步渲染，源站页面渲染出错&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;异步接口请求，主要涉及到的是后台系统，对接系统较多，各个系统的稳定性和抗压能力各不相同，这方面的保障有多种方案，下面是最常见的：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/b7ea7d4fb972ffde67b95f61125cd40d_b.jpg&quot; data-rawwidth=&quot;737&quot; data-rawheight=&quot;619&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;737&quot; data-original=&quot;https://pic2.zhimg.com/b7ea7d4fb972ffde67b95f61125cd40d_r.jpg&quot;&gt;&lt;p&gt;每次数据请求都缓存到本地，并且为每个接口都提供一个硬兜底。还有一种方案是「重试」，请求一次不成功那就请求第二次。这方面的讨论具体可以看看之前写的这篇文章：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.barretlee.com/blog/2015/09/16/backup-solution-at-big-traffic/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《大流量的下兜底容灾方案》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;对于同步渲染，它只需要页面模板和同步数据，两者中任一种存在错误，源站都会报错，此时回源返回的内容就是一个 error 页面，状态码为 5xx。这个错误不一定是开发者造成的，有可能是系统链路出现同步异常或者断路问题。针对这种问题，我给淘宝首页做了一个镜像页：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/8221afd43d2e6e73995ccca154f5a555_b.jpg&quot; data-rawwidth=&quot;1742&quot; data-rawheight=&quot;998&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1742&quot; data-original=&quot;https://pic2.zhimg.com/8221afd43d2e6e73995ccca154f5a555_r.jpg&quot;&gt;&lt;p&gt;一旦源站任何异常，Nginx 都会转到与 Cache CDN 同机房的首页镜像上去，这个镜像内容就是淘宝首页的 HTML 备份源码。&lt;/p&gt;&lt;br&gt;&lt;b&gt;2. 监控预警机制&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;可以先看看之前写的这篇文章：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.barretlee.com/blog/2015/08/20/cb-fe-monitor/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;《前端代码异常日志收集与监控》&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，介绍了一些监控方法。&lt;/p&gt;&lt;p&gt;监控也有两个层面：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;模块级别的监控，接口请求布点、模块天窗检测等&lt;/li&gt;&lt;li&gt;页面的监控，在页面上添加特殊标记，定时回归所有 CDN 节点，查看特殊标记是否存在&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;模块层面的监控，内容还是相当多的，监控的点越多越详细，到最后定位问题的效率就会越高，比如在一个稍微复杂的模块上，我会埋下这些监控：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;接口请求格式错误、请求失败、请求超时，至少三个埋点&lt;/li&gt;&lt;li&gt;硬兜底数据请求失败埋点&lt;/li&gt;&lt;li&gt;模块 5s 内没有渲染完成统计埋点&lt;/li&gt;&lt;li&gt;模块内链接和图片黑白名单匹配埋点&lt;/li&gt;&lt;/ul&gt;&lt;img src=&quot;https://pic2.zhimg.com/c426f41d22bdf6aa07c82ea257e1fd35_b.jpg&quot; data-rawwidth=&quot;1157&quot; data-rawheight=&quot;380&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1157&quot; data-original=&quot;https://pic2.zhimg.com/c426f41d22bdf6aa07c82ea257e1fd35_r.jpg&quot;&gt;&lt;p&gt;其中部分监控还会自动处理明确的错误，比如 https 页面下出现了 http 的图片，会立即自动处理掉这些问题。&lt;/p&gt;&lt;br&gt;&lt;b&gt;3. 上线前的自动化检测&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这属于淘宝整个工程化环境的一部分，前端自动化测试。一般会在上线之前处理这些问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;检测 HTML 是否符合规范&lt;/li&gt;&lt;li&gt;检测 https 升级情况&lt;/li&gt;&lt;li&gt;检测链接合法性&lt;/li&gt;&lt;li&gt;检测静态资源合法性&lt;/li&gt;&lt;li&gt;检测 JavaScript 报错&lt;/li&gt;&lt;li&gt;检测页面加载时是否有弹出框&lt;/li&gt;&lt;li&gt;检测页面是否调用 console.*&lt;/li&gt;&lt;li&gt;页面 JS 内存记录&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;当然，也可以自己添加测试用例，比如检测接口数据格式、模块天窗问题等。自动化检测也可以设定定时回归，还是比较有保障的。&lt;/p&gt;&lt;br&gt;&lt;b&gt;五、淘宝首页的敏捷措施&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 健康检查&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;页面模块众多，为了能够追踪页面上每一个小点的变化，我在请求、渲染的每一个环节都做了详细的统计，如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic4.zhimg.com/6340efe0816b0269f8770fd0e6ae90df_b.jpg&quot; data-rawwidth=&quot;766&quot; data-rawheight=&quot;598&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;766&quot; data-original=&quot;https://pic4.zhimg.com/6340efe0816b0269f8770fd0e6ae90df_r.jpg&quot;&gt;&lt;p&gt;一旦接口请求失败，或者接口走了容灾逻辑，或者模块渲染超过 5s，控制台都会有黄色警报，当然此时，也已经向服务器发送了警报统计。&lt;/p&gt;&lt;br&gt;&lt;b&gt;2. 接口 Hub&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;接口 Hub 是对数据请求的管理工具，如下图所示：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/ccfe966b5568065ca46711931dea54ea_b.jpg&quot; data-rawwidth=&quot;691&quot; data-rawheight=&quot;463&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;691&quot; data-original=&quot;https://pic3.zhimg.com/ccfe966b5568065ca46711931dea54ea_r.jpg&quot;&gt;&lt;p&gt;页面很多模块的渲染都需要一个以上的数据源，一旦运营反馈页面渲染数据异常，可以直接通过 Hub 找到数据，加速 Bug 定位效率。同时 Hub 也可以用来切换环境，将一个接口的请求切换到日常或者预发环境的接口之中，它是调试的利器。&lt;/p&gt;&lt;br&gt;&lt;b&gt;3. 快捷通道&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;我在页面脚本执行前后都放了一个快捷操作通道，一旦遇到紧急线上问题，比如样式错乱溢出、接口报错导致天窗等，可以通过快捷通道直接修改页面的 CSS 和 JS，两分钟内上线。&lt;/p&gt;&lt;p&gt;不过这类通道只适合紧急问题的修复，毕竟随意插入 JS 代码是存在很大风险的。&lt;/p&gt;&lt;br&gt;&lt;b&gt;六、小结&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;写的好像有点虎头蛇尾（码字和画图都太累），还有很多方面没有延伸拓展开。希望以上可以让你对淘宝首页有一个基本的认识。&lt;/p&gt;&lt;br&gt;&lt;p&gt;可以戳这里（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//taobaofed.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Taobao FED | 淘宝前端团队&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）更多的了解淘宝前端团队。&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/5ab74aedbc6d118b19a74628a173993f_200x112.jpg\" data-rawwidth=\"492\" data-rawheight=\"336\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/5ab74aedbc6d118b19a74628a173993f_r.jpg\">\n更好的阅读体验，请戳这里：团队博客（<a href=\"//link.zhihu.com/?target=http%3A//taobaofed.org/blog/2016/06/02/thing-about-taobao-homepage/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">聊一聊淘宝首页和它背后的一套<i class=\"icon-external\"></i></a> ）或者我的个人网站（<a href=\"//link.zhihu.com/?target=http%3A//www.barretlee.com/blog/2016/06/02/thing-about-taobao-homepage/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">聊一聊淘宝首页和它背后的一套<i class=\"icon-external\"></i></a>）。 <b>聊一聊淘宝首页和它背后的一套</b> 从 14 年双十二结束开始接手淘宝首页，到如今差不多 1 年半时间，不久前完成了首页相关工作的交接…\n\n<a href=\"/question/46149490/answer/103819387\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-06-01\" target=\"_blank\" href=\"/question/46149490/answer/103819387\">编辑于 2016-06-02</a></p>\n\n",
    "link": "https://zhihu.com/question/46149490/answer/103819387"
  },
  {
    "question": "\n网站的美术设计和前端工程师如何沟通？\n",
    "author": "gNahZ tuNlAw",
    "content": "\n\n<textarea hidden class=\"content\">像这样沟通：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/abd27c8c8127c78537c5f31fb56f3802_b.jpg&quot; data-rawwidth=&quot;196&quot; data-rawheight=&quot;150&quot; class=&quot;content_image&quot; width=&quot;196&quot;&gt;（左一为设计师，右一为前端工程师，别问我为什么右边看起来比较帅）&lt;br&gt;&lt;br&gt;好啦。&lt;br&gt;&lt;br&gt;由于题主没什么更详细的情境描述，我只能从前端的角度，按自己理解来写一下了。&lt;br&gt;&lt;br&gt;我的经验是，沟通不是问题( 哪个工程师不想和设计妹子多勾搭勾搭啊 )，规范才是。&lt;br&gt;&lt;br&gt;理想情况下，只要设计出了图，需求和设计评审过了，基本上就没什么需要特别沟通的地方了。前端工程师规划网页结构、切图、下蹄写代码就好。&lt;br&gt;&lt;br&gt;实际工作中遇到的需要沟通的地方有可能是：&lt;br&gt;&lt;ul&gt;&lt;li&gt;设计太高大上，产品急于上线，前端罢工&lt;/li&gt;&lt;li&gt;设计太高大上，兼容性实现上问题很大，前端罢工&lt;/li&gt;&lt;li&gt;设计太高大上，跟现实技术差距太大，前端罢工&lt;/li&gt;&lt;li&gt;设计太丑，前端怕跳槽的时候成为黑历史，前端罢工&lt;/li&gt;&lt;li&gt;设计没问题，但每次设计可复用的元素太少，不成规范和体系，前端被如此搞了数次后罢工&lt;/li&gt;&lt;/ul&gt;前三个问题只能是设计让步，也别在心里骂“妈蛋公司给你发工资结果你丫这也不会那也不会”。相信我，只要有时间，只要有兴趣，前端们不会不想去实现高大上的效果的。但在可用性和可看性之间，一个合格的前端工程师必须向前一个靠拢。&lt;br&gt;&lt;br&gt;第四个问题可能需要俩人打一架然后设计师被开除，不在沟通范围内。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/ae230c26704d761881fff7e153c422e7_b.jpg&quot; data-rawwidth=&quot;105&quot; data-rawheight=&quot;97&quot; class=&quot;content_image&quot; width=&quot;105&quot;&gt;(xiu~)&lt;br&gt;&lt;br&gt;最后一个问题其实才是重中之重啊朋友们。合格的前端工程师们是一群长着11星座的鸟操着处女座的心的家伙，能复用的就复用，能语义的就语义，复用和语义产生矛盾的时候他们能拿键盘砸自己( 真•Emo )，设计团队不同的人或者相同的人每次设计差不多的页面的时候标题大小都不一样， margin 都不一样，padding 都不一样，背景颜色都不一样，button 有时候是空心的有时候是实心的... 如此重复三十遍，直到前端崩塌。这个时候大家就该坐在一起吃吃花生米什么的，制定下规范了（抱歉现在才说到主题）。&lt;br&gt;&lt;br&gt;不管是设计师来驱动还是前端工程师来驱动，早一天规范出来，大家才能早一天都安心，效率才能得到保证。&lt;br&gt;&lt;br&gt;在下所在的公司前段时间刚开始经历了这个过程。由前端提出需要规范的需求，可亲可爱的设计师们进行具体视觉风格的制定，主要有：&lt;br&gt;&lt;ul&gt;&lt;li&gt;基准屏幕 ( 比如 iPhone 5 )&lt;/li&gt;&lt;li&gt;margin&lt;/li&gt;&lt;li&gt;padding&lt;/li&gt;&lt;li&gt;字号&lt;/li&gt;&lt;li&gt;按钮集&lt;/li&gt;&lt;li&gt;色彩集&lt;/li&gt;&lt;li&gt;边框&lt;/li&gt;&lt;li&gt;表单样式&lt;/li&gt;&lt;li&gt;弹出层样式&lt;/li&gt;&lt;li&gt;导航栏等通用组件&lt;/li&gt;&lt;/ul&gt;等...&lt;br&gt;&lt;br&gt;经过这么一搞，前端的代码实现了复用，设计师养成了规范设计的良好习惯，公司产品也会实现视觉风格的伟大统一，想想都乐得不行了呢。还需要沟通什么呢，完全不需要了～&lt;br&gt;&lt;br&gt;。。。等等&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/887af90f40240080d234ac6e58ca1038_b.jpg&quot; data-rawwidth=&quot;48&quot; data-rawheight=&quot;48&quot; class=&quot;content_image&quot; width=&quot;48&quot;&gt;这下怎么勾搭设计妹子！&lt;br&gt;&lt;br&gt;&lt;br&gt;写完了。&lt;br&gt;自此设计师们和前端工程师们的关系就像这样了：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/3d3fe48c5317480c4aa88f55fa6c8893_b.jpg&quot; data-rawwidth=&quot;120&quot; data-rawheight=&quot;60&quot; class=&quot;content_image&quot; width=&quot;120&quot;&gt;(挽</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n像这样沟通： （左一为设计师，右一为前端工程师，别问我为什么右边看起来比较帅） 好啦。 由于题主没什么更详细的情境描述，我只能从前端的角度，按自己理解来写一下了。 我的经验是，沟通不是问题( 哪个工程师不想和设计妹子多勾搭勾搭啊 )，规范才是。 …\n\n<a href=\"/question/23276536/answer/24110468\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-04-04\" target=\"_blank\" href=\"/question/23276536/answer/24110468\">编辑于 2014-04-04</a></p>\n\n",
    "link": "https://zhihu.com/question/23276536/answer/24110468"
  },
  {
    "question": "\n请问这样的界面是如何实现的？\n",
    "author": "刘怜苏",
    "content": "\n\n<textarea hidden class=\"content\">今天下午各种Google之后终于实现了这个界面的各种效果。最终的界面这样的，基本实现了问题里面的所有元素。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/471e3ab039383f885dec597d3cb07d24_b.png&quot; data-rawwidth=&quot;768&quot; data-rawheight=&quot;1280&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;768&quot; data-original=&quot;https://pic1.zhimg.com/471e3ab039383f885dec597d3cb07d24_r.png&quot;&gt;&lt;br&gt;代码在&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/mutexliu/ZhihuAnswer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;mutexliu/ZhihuAnswer · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;画图的过程碰到的问题有：&lt;br&gt;1.画圆角。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lineTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quadTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;radius&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;其中&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;quadTo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;表示添加一条贝塞尔曲线，起点为Path的当前位置，(x1,y1)为贝塞尔曲线控制点，(x2,y2)为贝塞尔曲线的终点。当起点，控制点和终点成直角的时候就会得到一条1/4圆弧。&lt;br&gt;2.圆弧终点的圆角。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawArc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RectF&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oval&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;startAngle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sweepAngle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;useCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;设置Paint的Style为Stroke，之后画出来的结果是这样的&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/20498960b3a6b1bcf1f2bb9793bfa787_b.png&quot; data-rawwidth=&quot;381&quot; data-rawheight=&quot;360&quot; class=&quot;content_image&quot; width=&quot;381&quot;&gt;在圆弧的终点有很尖锐的角度。&lt;br&gt;各种Google之后找到设置笔刷样式的函数&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setStrokeCap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Paint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Cap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;3.圆形渐变色。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF9A9BF8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF9AA2F7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;mh&quot;&gt;0xFF65CCD1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF63D0CD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF68CBD0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF999AF6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0xFF9A9BF8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;\n&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;SweepGradient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mSweepGradient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SweepGradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mArcCenterX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mArcCenterX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;colors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;positions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;n&quot;&gt;mStrokePaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setShader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mSweepGradient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;4.画虚线&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;mLinePaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPathEffect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DashPathEffect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;\n&lt;span class=&quot;n&quot;&gt;canvas&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWidth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yPos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mLinePaint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;DashPathEffect生效需要把硬件加速关掉。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;span class=&quot;n&quot;&gt;setLayerType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LAYER_TYPE_SOFTWARE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/471e3ab039383f885dec597d3cb07d24_200x112.png\" data-rawwidth=\"768\" data-rawheight=\"1280\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/471e3ab039383f885dec597d3cb07d24_r.png\">\n今天下午各种Google之后终于实现了这个界面的各种效果。最终的界面这样的，基本实现了问题里面的所有元素。 代码在<a href=\"//link.zhihu.com/?target=https%3A//github.com/mutexliu/ZhihuAnswer\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">mutexliu/ZhihuAnswer · GitHub<i class=\"icon-external\"></i></a> 画图的过程碰到的问题有： 1.画圆角。 Path path = new Path();\npath.moveTo(left, top);\npath.lineTo(righ…\n\n<a href=\"/question/38523925/answer/76904538\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-15\" target=\"_blank\" href=\"/question/38523925/answer/76904538\">编辑于 2015-12-18</a></p>\n\n",
    "link": "https://zhihu.com/question/38523925/answer/76904538"
  },
  {
    "question": "\n关于后端程序员写前端用什么框架更好？\n",
    "author": "叉叉哥",
    "content": "\n\n<textarea hidden class=\"content\">推荐两个我自己使用&lt;b&gt;颜值很高&lt;/b&gt;的前端框架：&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Admin LTE：&lt;/b&gt;&lt;br&gt;基于Bootstrap的一套后台系统，有很多现成模板可使用，又好看又好用，必须推荐！&lt;br&gt;官网：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.almsaeedstudio.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Free Bootstrap Admin Template&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;预览：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//almsaeedstudio.com/themes/AdminLTE/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;AdminLTE 2 | Dashboard&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;GitHub：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/almasaeed2010/AdminLTE&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;almasaeed2010/AdminLTE · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  （目前star 7000+）&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-983c707d004cb41bce0ad75429517ed3_b.png&quot; data-rawwidth=&quot;750&quot; data-rawheight=&quot;395&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;750&quot; data-original=&quot;https://pic4.zhimg.com/v2-983c707d004cb41bce0ad75429517ed3_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Materialize：&lt;/b&gt;&lt;br&gt;Material设计风格的前端框架，使用起来类似Bootstrap，非常漂亮，写代码的时候看着页面也非常舒服。我的开源项目&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/wucao/JDeploy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - wucao/JDeploy: JDeploy自动化部署平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;就是用的它来做前端的。&lt;br&gt;官网：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//materializecss.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Documentation&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;GitHub：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Dogfalo/materialize&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dogfalo/materialize · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;  （目前star 14000+）&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-38250c7d1470b335ad789b929c2494e3_b.jpg&quot; data-rawwidth=&quot;5120&quot; data-rawheight=&quot;2628&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;5120&quot; data-original=&quot;https://pic4.zhimg.com/v2-38250c7d1470b335ad789b929c2494e3_r.jpg&quot;&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/v2-983c707d004cb41bce0ad75429517ed3_200x112.png\" data-rawwidth=\"750\" data-rawheight=\"395\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/v2-983c707d004cb41bce0ad75429517ed3_r.png\">\n推荐两个我自己使用<b>颜值很高</b>的前端框架： <b>Admin LTE：</b> 基于Bootstrap的一套后台系统，有很多现成模板可使用，又好看又好用，必须推荐！ 官网：<a href=\"//link.zhihu.com/?target=https%3A//www.almsaeedstudio.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Free Bootstrap Admin Template<i class=\"icon-external\"></i></a> 预览：<a href=\"//link.zhihu.com/?target=https%3A//almsaeedstudio.com/themes/AdminLTE/index.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">AdminLTE 2 | Dashboard<i class=\"icon-external\"></i></a> GitHub：<a href=\"//link.zhihu.com/?target=https%3A//github.com/almasaeed2010/AdminLTE\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">almasaeed2010/AdminLTE · GitHub<i class=\"icon-external\"></i></a> （目…\n\n<a href=\"/question/37946473/answer/74325582\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-11-28\" target=\"_blank\" href=\"/question/37946473/answer/74325582\">编辑于 2016-12-22</a></p>\n\n",
    "link": "https://zhihu.com/question/37946473/answer/74325582"
  },
  {
    "question": "\n为什么 react 还比 vue 火？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">高级黑啊...&lt;br&gt;&lt;br&gt;假如题主是认真的话，我建议你别纠结这问题。涉及偏好的问题要是真能说服别人，也不会有这么多编程语言和框架了。&lt;br&gt;&lt;br&gt;Guido van Rossum 说，just do a good job. 把事情做好，喜欢的人自然会喜欢。让所有人喜欢不可能，也不用强求。&lt;br&gt;&lt;br&gt;话说回来，这个问题炸出来的个别答案还是挺让我难受的。做 Vue 的初衷很单纯，不是为了赚大钱，不是为了成为大神，也不是因为我发现了什么不得了的创新点。我只是想做一个我自己会喜欢的框架。很巧，我把我想要的东西做出来以后，也有很多其他人喜欢，所以用户越来越多。我从没说过，也不认为 Vue 比所有其他框架都好（我一直的观点都是开发者偏好的多样性使得多框架/语言的共存有益无害，甚至是必要的）。有些答案指出的社区活跃度不如 React 等等，也是事实。除了开源会议上的演讲（大多是受邀），我也没进行过任何所谓的『营销』（我在知乎回答问题都尽量避免推销 Vue）。即使这样，还是会有人看不惯，对 Vue 的用户群体表示鄙视，甚至对我有着强烈的敌意。或许程序员这个靠脑力吃饭的群体，也多少会有『文人相轻』这样的习性。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n高级黑啊... 假如题主是认真的话，我建议你别纠结这问题。涉及偏好的问题要是真能说服别人，也不会有这么多编程语言和框架了。 Guido van Rossum 说，just do a good job. 把事情做好，喜欢的人自然会喜欢。让所有人喜欢不可能，也不用强求。 话说回来，这…\n\n<a href=\"/question/51690331/answer/127039085\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-10-17\" target=\"_blank\" href=\"/question/51690331/answer/127039085\">编辑于 2016-10-22</a></p>\n\n",
    "link": "https://zhihu.com/question/51690331/answer/127039085"
  },
  {
    "question": "\n如何理解和熟练运用js中的call及apply？\n",
    "author": "杨志",
    "content": "\n\n<textarea hidden class=\"content\">LZ要先明白存在call和apply的原因，才能记得牢一点：&lt;br&gt;    在javascript OOP中，我们经常会这样定义：     &lt;blockquote&gt;function cat(){&lt;br&gt;}&lt;br&gt;cat.prototype={&lt;br&gt;     food:&quot;fish&quot;,&lt;br&gt;     say: function(){&lt;br&gt;           alert(&quot;I love &quot;+this.food);&lt;br&gt;     }&lt;br&gt;}&lt;br&gt;&lt;br&gt;&lt;br&gt;var blackCat = new cat;&lt;br&gt;blackCat.say();&lt;/blockquote&gt; 但是如果我们有一个对象whiteDog = {food:&quot;bone&quot;},我们不想对它重新定义say方法，那么我们可以通过call或apply用blackCat的say方法：blackCat.say.call(whiteDog);&lt;br&gt;&lt;br&gt;所以，可以看出call和apply是为了动态改变this而出现的，当一个object没有某个方法，但是其他的有，我们可以借助call或apply用其它对象的方法来操作。&lt;br&gt;&lt;br&gt;用的比较多的，通过document.getElementsByTagName选择的dom 节点是一种类似array的array。它不能应用Array下的push,pop等方法。我们可以通过：&lt;br&gt;var domNodes =  Array.prototype.slice.call(document.getElementsByTagName(&quot;*&quot;));&lt;br&gt;这样domNodes就可以应用Array下的所有方法了。&lt;br&gt;&lt;br&gt;其他的就不提了，讲多了反而迷惑。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nLZ要先明白存在call和apply的原因，才能记得牢一点： 在javascript OOP中，我们经常会这样定义： function cat(){ } cat.prototype={ food:\"fish\", say: function(){ alert(\"I love \"+this.food); } } var blackCat = new cat; blackCat.say(); 但是如果我…\n\n<a href=\"/question/20289071/answer/14644278\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/20289071/answer/14644278\">发布于 2012-06-13</a></p>\n\n",
    "link": "https://zhihu.com/question/20289071/answer/14644278"
  },
  {
    "question": "\n什么样的前端技术 leader 是称职的？\n",
    "author": "Baku菌",
    "content": "\n\n<textarea hidden class=\"content\">说说我之前公司leader的两件事：&lt;br&gt;&lt;br&gt;第一件事：&lt;br&gt;有一次周会上，他说过这样一段话：“我的职责就是尽量的排除外界对你们的干扰，所以很多不合理的需求，我会把它拦掉，让你们专心的coding，不要被打扰和打断。”&lt;br&gt;&lt;br&gt;第二件事：&lt;br&gt;是我5楼的朋友告诉我的。以前我们前端组托管着5楼的广告后台，因为后端不会用（换过一拨人），所以发布上线都是前端来配置，但是本来应该是广告后端的职责，我们只负责功能的开发和提交代码，不负责配置和发布。后来有一天我们老大去5楼找广告组后端的老大：&lt;br&gt;我们leader：“广告后台系统该交给你们维护了。” &lt;br&gt;对方老大：“这一直都是你们维护啊，一直都是你们前端的人在用，为什么要交给我们？”&lt;br&gt;我们leader：“这本来就是你们职责所在，当时说的是因为你们不会用，所以我们教你们怎么用，现在交还给你们！”&lt;br&gt;对方老大：“但是需要交接啊！”&lt;br&gt;我们leader：“我现在下来告诉你就是交接了啊！”&lt;br&gt;我们leader说完就走了，从此广告后台的锅就回到它该去的地方了&lt;br&gt;&lt;br&gt;(备注：据我了解是提前有过非面对面的沟通，但是效果不佳，所以我们leader被气的下楼去之间找他本人了，因为据我朋友描述，我们leader下去的时候就直接当着好多人问“谁是XXX，怎么就说不明白呢”～估计就是因为后台leader不想接这个锅)&lt;br&gt;&lt;br&gt;       真的是很喜欢这个team，leader会尽量让大家做自己喜欢和擅长的事情。为下属争取利益，很多产品希望加班上的需求在他的沟通之后，我们基本没啥加班，除非是万不得已大领导点名要的，但是加班也会给我们餐补、津贴和调休。已经离职的人还建个了群，把leader、现在的员工和离职的员工拉到一起，在里面有时间约着一起玩，聊聊日常和技术，时不时离职的同事有空还会去搜狐找他们聚聚。组里还有一位低调耐心风趣的大神，是我们组长，从他那里也学到了很多东西～总之整个组的氛围真的很好～</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n说说我之前公司leader的两件事： 第一件事： 有一次周会上，他说过这样一段话：“我的职责就是尽量的排除外界对你们的干扰，所以很多不合理的需求，我会把它拦掉，让你们专心的coding，不要被打扰和打断。” 第二件事： 是我5楼的朋友告诉我的。以前我们前…\n\n<a href=\"/question/31462342/answer/96038049\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-04-20\" target=\"_blank\" href=\"/question/31462342/answer/96038049\">编辑于 2016-04-20</a></p>\n\n",
    "link": "https://zhihu.com/question/31462342/answer/96038049"
  },
  {
    "question": "\n参加网易前端面试，却发生了这样的事，我就没办法了吗？\n",
    "author": "Nick-Atom",
    "content": "\n\n<textarea hidden class=\"content\">整篇帖子没几个人 批评这种 明显是欺骗的行为， 没有人批评网易纵容这种不良风气 是非常低贱的行为。&lt;br&gt;&lt;br&gt;竟然还有几个人批评lz， lz是经验不足， 但lz并没有做错。 涨涨经验 是对自己好， 这种烂HR烂企业 也绝不能不骂， 通过 zhihu 来曝光， 来引起大家讨论 就更是应当被支持的 行为！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n整篇帖子没几个人 批评这种 明显是欺骗的行为， 没有人批评网易纵容这种不良风气 是非常低贱的行为。 竟然还有几个人批评lz， lz是经验不足， 但lz并没有做错。 涨涨经验 是对自己好， 这种烂HR烂企业 也绝不能不骂， 通过 zhihu 来曝光， 来引起大家讨论 …\n\n<a href=\"/question/35951335/answer/65209060\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/35951335/answer/65209060\">发布于 2015-09-25</a></p>\n\n",
    "link": "https://zhihu.com/question/35951335/answer/65209060"
  },
  {
    "question": "\n是什么阻碍了代码的重用？问题是否应该只解决一次即可？\n",
    "author": "ze ran",
    "content": "\n\n<textarea hidden class=\"content\">重用的代码，底层的好写，上层的难写。&lt;br&gt;&lt;br&gt;底层代码抽象的是机器，服务的是程序员。程序员就那么点追求，读写数据，操作数据，要快，要稳，要容易用，满足就行了。&lt;br&gt;&lt;br&gt;上层代码抽象的是需求，服务的是用户。用户的需求各不相同，但每个人都觉得自己的需求特有道理，特正义。你说这个我们做不到，因为用了XX lib，立马被喷。&lt;br&gt;&lt;br&gt;那么多前端库前仆后继，折戟沉沙，却又层出不穷，无非是因为某些需求满足不了。需求总在变，库也跟着花样翻新，但总是差了一两步。说到底，是什么阻止了重用？&lt;br&gt;&lt;br&gt;是人心呐，是变幻莫测得人心。&lt;br&gt;&lt;br&gt;人心是一个 moving target，以固定的 pattern 来揣摩人心，结果就是一段想要解决十个需求，却一个需求都解决不好的代码。&lt;br&gt;&lt;br&gt;所以，底层库可以自顶向下的设计；而面向客户的代码，还要以解决当前问题为先，等到类似的问题多了，再考虑重用。不要刚遇到一个问题，就想写个通用的解法，这样的往往悲剧。&lt;br&gt;&lt;br&gt;长恨人心不如水，等闲平地起波澜。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n重用的代码，底层的好写，上层的难写。 底层代码抽象的是机器，服务的是程序员。程序员就那么点追求，读写数据，操作数据，要快，要稳，要容易用，满足就行了。 上层代码抽象的是需求，服务的是用户。用户的需求各不相同，但每个人都觉得自己的需求特有道理…\n\n<a href=\"/question/21011591/answer/141760205\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/21011591/answer/141760205\">发布于 2017-01-19</a></p>\n\n",
    "link": "https://zhihu.com/question/21011591/answer/141760205"
  },
  {
    "question": "\n前端工程师难道不应该熟悉 HTTP 协议，掌握 ECMAScript 么？\n",
    "author": "欲三更",
    "content": "\n\n<textarea hidden class=\"content\">我觉得基本的知识还是要具备的。除了基本的前端编程，一个严肃的（注意我说的不是高级的，也不是能找到工作的，也不是合格的，我说的是“严肃的”）前端程序员应该了解这些：&lt;br&gt;&lt;br&gt;http 协议，手写请求，看懂 response 头中的每一行（304，301，302，404，500，这些状态码的意思你总该知道吧）。&lt;br&gt;https 协议有什么用，大致流程是什么。&lt;br&gt;使用 wireshark、fiddler 等工具抓包。&lt;br&gt;手写 ajax 请求。&lt;br&gt;手写请求要不要考虑超时，为什么。&lt;br&gt;消息队列及其简单实现。&lt;br&gt;ECMAScript 相关知识（至少能举出一个 es6 的新特性并说明其意义，不过分吧）。&lt;br&gt;基础 javascript 设计模式，简单组件设计和封装（封装个 combo box 总该可以吧）。&lt;br&gt;js 垃圾收集基础知识（至少要有资源、对象、引用、销毁等基本概念吧）。&lt;br&gt;模板引擎简单实现原理。&lt;br&gt;mv* 基本原理以及意义。&lt;br&gt;基础的多线程编程知识。&lt;br&gt;英语四级以上水平。&lt;br&gt;&lt;br&gt;以上这些不是矫情，这些知识点能保证你（必要非充分条件）：&lt;br&gt;&lt;br&gt;写出可维护（俩月之后你自己还能看懂）的代码。&lt;br&gt;能看懂英文文档和官网。&lt;br&gt;使用框架时能迅速掌握原理和用法。&lt;br&gt;方便调试，出了问题有思路排查。&lt;br&gt;有能力从整体上把握一个项目的技术概况。&lt;br&gt;有能力跟进前沿发展，不落伍。&lt;br&gt;与其他组同事平等地展开技术社交。&lt;br&gt;在特殊情况下，可以短时间内转型到其他领域。&lt;br&gt;&lt;br&gt;以上真的有用，绝对不是蒙你。&lt;br&gt;&lt;br&gt;ps：评论里有人说难，其实这些知识点看起来驳杂，实则难度不大（英语除外），仔细看看书，实践几次，就能掌握了。也不要求精通，但是概念要清楚，否则你跟别人没法聊，工作中遇到问题思路也会受限。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我觉得基本的知识还是要具备的。除了基本的前端编程，一个严肃的（注意我说的不是高级的，也不是能找到工作的，也不是合格的，我说的是“严肃的”）前端程序员应该了解这些： http 协议，手写请求，看懂 response 头中的每一行（304，301，302，404，500，…\n\n<a href=\"/question/35143194/answer/61884929\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-09-02\" target=\"_blank\" href=\"/question/35143194/answer/61884929\">编辑于 2016-03-22</a></p>\n\n",
    "link": "https://zhihu.com/question/35143194/answer/61884929"
  },
  {
    "question": "\n如何用通俗易懂的语言解释脚本（script）是什么？\n",
    "author": "涛吴",
    "content": "\n\n<textarea hidden class=\"content\">假设你经常从网上下东西，全都放在 D 盘那个叫做 downloads 的文件夹里。而你有分类的癖好，每周都要把下载下来的图片放到 pic 文件夹里，pdf 放到 book 文件夹里，mp3 和 wma 文件放到 music 文件夹里。手动分了一年之后你终于厌倦了，于是你打开记事本，写了以下的三行字：      &lt;br&gt;&lt;br&gt; copy /Y D:\\download\\*.jpg D:\\pic\\        &lt;br&gt; copy /Y D:\\download\\*.pdf D:\\book\\        &lt;br&gt; copy /Y D:\\download\\*.mp3 D:\\music\\        &lt;br&gt;&lt;br&gt; 然后把它存成一个叫做 cleanupdownload.bat 的文件。想起来的时候你就双击一下这个文件，然后就发现 download 里的三类文件都被拷到它们该去的地方了。这就是个非常简单的脚本。        &lt;br&gt;&lt;br&gt; 类似于演戏时用到的脚本，script 其实就是一系列指令——演员看了指令就知道自己该表演什么，说什么台词；计算机看了指令就知道自己该做什么事情。所以 script 其实就是短小的、用来让计算机自动化完成一系列工作的程序，这类程序可以用文本编辑器修改，不需要编译，通常是解释运行的。       &lt;br&gt;&lt;br&gt; 在网站前端编程的语境下，脚本通常是指在浏览器里运行的小程序，就像剧本一样，它可以用来控制网页上的各类元素该怎么表演给观众看——比如知乎主页右边那个回到页首的小箭头就是个演员，你可以用脚本告诉它只在屏幕下拉到某个特定长度的时候才出现。      &lt;br&gt;&lt;br&gt; （脚本并不是个很好的翻译，问题就出在“脚”这个字上，相当地莫名其妙。Script 一词的词根是“书写”。）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n假设你经常从网上下东西，全都放在 D 盘那个叫做 downloads 的文件夹里。而你有分类的癖好，每周都要把下载下来的图片放到 pic 文件夹里，pdf 放到 book 文件夹里，mp3 和 wma 文件放到 music 文件夹里。手动分了一年之后你终于厌倦了，于是你打开记事本，…\n\n<a href=\"/question/19901542/answer/13298706\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-11-02\" target=\"_blank\" href=\"/question/19901542/answer/13298706\">编辑于 2011-11-02</a></p>\n\n",
    "link": "https://zhihu.com/question/19901542/answer/13298706"
  },
  {
    "question": "\nAngular2与React，前端的未来志向何方？\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">去年年底，我回答过一个问题：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/26644904/answer/33634518&quot; class=&quot;internal&quot;&gt;2014 年末有哪些比较火的 Web 开发技术？ - 徐飞的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;转眼间一年过去了，Angular 2发布了beta版，React如日中天，只有Polymer还是不温不火。&lt;br&gt;&lt;br&gt;这一年时间内，我也经常观察前端界的各种趋势，关注各种创新点，并且跟业内同行进行过一些探讨，最终结论是：这三个框架，代表着前端框架目前的三条路线，仍然是并行发展的，只是在发展过程中互相吸收先进的思想。&lt;br&gt;&lt;br&gt;哪三条路线呢：&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;以Angular，Vue，Aurelia，Avalon为代表的MVVM路线&lt;/li&gt;&lt;li&gt;React以及相关周边&lt;/li&gt;&lt;li&gt;以Polymer，NovaJS等为代表的Web Components路线&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;这三条路线本质上都是前端组件化框架/库，所以，组件化理念是它们的立身之本，虽然大家的实现方式有所不同，但很多理念都是共通的。具体差别在哪里呢？&lt;br&gt;&lt;br&gt;在这里需要先提及三个名词：&lt;br&gt;&lt;br&gt;MVVM，Virtual DOM，Web Components&lt;br&gt;&lt;br&gt;我提这三个词的意思，并不是说它们就对应于刚才三条路线，人们往往会有误解：比如认为MVVM是Angular等框架的专利；除了React，别的框架也就不能有Virtual DOM了。&lt;br&gt;&lt;br&gt;其实不然。&lt;br&gt;&lt;br&gt;MVVM框架们之所以被冠以MVVM的名号，因为他们都是非常侧重于分层的，三层分得一般非常清楚。比如说我们看Vue，它的一个组件中，包含很明显的三层。&lt;br&gt;&lt;br&gt;但是在React的实践中，如果应用的规模增大，数据的组合复杂度高，很可能到最后也搞成了类似VM和M的分层，在这个回答的评论下：&lt;a href=&quot;https://www.zhihu.com/question/31613336/answer/62820523&quot; class=&quot;internal&quot;&gt;如何正确、客观地评价 React？ - 邓欣欣的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;a data-hash=&quot;64ae465bb7c8458591c7d5690f1078fd&quot; href=&quot;//www.zhihu.com/people/64ae465bb7c8458591c7d5690f1078fd&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@墨磊&quot; data-hovercard=&quot;p$b$64ae465bb7c8458591c7d5690f1078fd&quot;&gt;@墨磊&lt;/a&gt; 提到的：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;另，最近一些项目中，在 Flux 或者 类 Flux 的 Store =&amp;gt; View 这一步，&lt;br&gt;因为一些历史原因，依然不得不走向了这样的过程 ModelStore =&amp;gt; ViewModelStore =&amp;gt; View，同样可以视为 MVVM 吧。&lt;/blockquote&gt;&lt;br&gt;所以，MVVM并非MVVM框架们特有，当基于React或者其他框架的项目变大的时候，仍然有可能作为一种实践被用起来。&lt;br&gt;&lt;br&gt;再来看Virtual DOM，目前React是有这个东西的，但MVVM框架的底层一样可以搞起来。好几个框架的底层都部分使用了这种理念，比如大家的track by，都可以把数据和DOM之间的关系索引起来，当一个数组的元素交换了，它们可以借助这些索引关系，不销毁原有DOM树，而是直接把数据交换了设置过去。&lt;br&gt;&lt;br&gt;如果MVVM框架不是使用先生成DOM，再提取模板配置这种方式，而是直接解析模板生成AST，做这层更加容易，而且可以比较容易替换成其他渲染方式，比如在服务端，或者在移动端的Native代码中渲染。&lt;br&gt;&lt;br&gt;再看Web Components，主流的MVVM框架其实都在往这个方向靠拢，而React由于使用工程手段解决了Shadow DOM和Scoped CSS这样的问题，所以对此并不太在意，而且由于它实现的特殊性，要兼容Web Components反而比较难。&lt;br&gt;&lt;br&gt;D2的时候我曾经跟 &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;在这些方面有过交流，他认为MVVM框架们很可能最终跟Polymer合流，整个前端框架领域被React和MVVM流派平分，鹿死谁手尚未可知。&lt;br&gt;&lt;br&gt;我觉得，目前的应用场景是足够大的，每个流派都是可以活得下去的，无所谓东风压倒西风还是反过来，双方都能生存下去。到最后，当形成整体解决方案的时候，很可能两派方案都是殊途同归：&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;视图层实现了Virtual DOM&lt;br&gt;&lt;/li&gt;&lt;li&gt;宏观上组件化，形成组件树&lt;br&gt;&lt;/li&gt;&lt;li&gt;微观上MVVM，并且都应用类似Flux，Redux之类的数据层方案&lt;br&gt;&lt;/li&gt;&lt;li&gt;编程模型吸收Immutable和Rx的&lt;br&gt;&lt;/li&gt;&lt;li&gt;通信层应用Relay或者Meteor之类的方案&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;比较大的区别可能是对Web Components标准的应用程度，MVVM系可能都会使用它，并且相应地采用不同的CSS资源管理和构建方案。&lt;br&gt;&lt;br&gt;去年年底的时候，有一件事情我没有想到，那就是ES6的普及速度，有鉴于此，我认为，未来一两年内，ES新版本会成为各路组件化开发方案的默认配置，并且得到广大开发人员的接受，TypeScript也可能会随之大放异彩。&lt;br&gt;&lt;br&gt;另外有一点我没有考虑到的就是HTTP2，这个经过 &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;指出之后，我觉得很有道理。我总结一下他的观点：之前我们都会考虑代码的合并打包等方案，但是当HTTP2普及之后，这方面很可能不是问题，人们会回归一种只专注于代码本身，而不是着重考虑现有这些类型的优化方式，所以这可能会对各类工程管控优化方案有个颠覆。&lt;br&gt;&lt;br&gt;目前能看到的大致这些，一年后来看看。&lt;br&gt;&lt;br&gt;顺便回答你的问题，1-2年内，Angular 2应该不太会颠覆得动React，甚至要超越自身的1.x版本都比较困难，更详细的见这里：&lt;a href=&quot;https://www.zhihu.com/question/38571416/answer/77067217&quot; class=&quot;internal&quot;&gt;如何评价 Angular 2 发布 Beta 版本？ - 徐飞的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;倒是Vue，在2016年的增长会很令人期待。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n去年年底，我回答过一个问题： <a href=\"https://www.zhihu.com/question/26644904/answer/33634518\" class=\"internal\">2014 年末有哪些比较火的 Web 开发技术？ - 徐飞的回答</a> 转眼间一年过去了，Angular 2发布了beta版，React如日中天，只有Polymer还是不温不火。 这一年时间内，我也经常观察前端界的各种趋势，关注各种创新点，并且跟业内同行…\n\n<a href=\"/question/38576309/answer/78211671\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/38576309/answer/78211671\">发布于 2015-12-23</a></p>\n\n",
    "link": "https://zhihu.com/question/38576309/answer/78211671"
  },
  {
    "question": "\n为什么 Dreamweaver 这类所见即所得的编辑器会生成很多垃圾代码？\n",
    "author": "huangz",
    "content": "\n\n<textarea hidden class=\"content\"> 说Dreamweaver不愿意生成更漂亮的代码，真是太冤枉了，相信我，Adobe的Dreamweaver开发者（乃至世界上所有的WYSIWYG软件开发者）肯定是想尽一切办法让自己软件生成的代码更加漂亮。&lt;br&gt;&lt;br&gt;但这里面有一个根本性问题，就是软件生成的代码也许永远都不可能达到和人类代码相同的水平——很多自动代码生成器，剥开它美丽的外表，隐藏在下面的通常都是肮脏的实现。如果哪一天，人类只需要对软件说出需求，然后软件就能自动生成软件，而且自动生成的代码不但高效，还很漂亮，那全世界的程序员就失业了。（再然后就是科幻小说的剧情：计算机统治了地球，人类沦为电池。。。）&lt;br&gt;&lt;br&gt;Dreamweaver成为众矢之的、屡屡挨批的原因，除了因为受众广泛，很大程度跟使用者对它的定位错误有关：Dreamweaver是一个编辑器，有一个方便的WYSIWYG界面，它还有控件功能，可以只通过拖拖放放就生成一个网站，但这种控件自动生成的代码是用于制作原型的，且仅应该用于制作原型。&lt;br&gt;&lt;br&gt;比如某天你灵感涌现，想出了下一个价值500亿美元的网站，你花了3天把程序写好，然后开始构思界面，但是你拿不准宽度该用960像素，还是1020像素，背景该用蓝色还是绿色，诸如此类，而且你也不想找美工商量，免得他/她只是画几个图就分走你50%的股份，于是你调出Dreamweaver，用控件拖拖放放，改几个属性，拼凑弄出你想象中的设计——在这个过程中，你不关心控件生成的代码是否美观，是否符合W3C标准，因为你只是想要个原型，一个能看的草图，仅此而已。&lt;br&gt;&lt;br&gt;来回几次，你终于把样式决定下来，Dreamweaver的控件功能高效地完成了构建原型的作用，现在它的历史任务完成了，你祭出你的所有装备武装自己：VIM、FIREBUG、十个不同种类的网页阅览器、等等，对着Dreamweaver上的原型小心翼翼地编写一个优美的、符合标准的、使用最新最酷的HTML5和CSS3功能的网页，然后把这个网页用到你的程序上。（如果你喜欢Dreamweaver的语法感知功能，你当然也可以用Dreamweaver来写，但任何时候，你都知道自己不应该依赖控件生成的代码）。&lt;br&gt;&lt;br&gt;之后网站开始上线运营，BETACN、SOLICOM和Counter-Strike DN用大篇幅报道了你的神来之作，10cent和摆渡试图抄袭你，但最终失败，某天你正在DEBUG之际，接到了一个不熟悉的电话，你说你很忙，没有空做采访，电话那一头的家伙说自己开了一个什么工场，你觉得似乎在哪个地方听说过这个名字，于是决定给他三分钟解释自己。。。&lt;br&gt;&lt;br&gt;在城市的最高层建筑上举办上市庆功宴之际，有个无名小记向你请教创业心得，你拒绝了他的采访，可他仍然紧追不舍，你很感动，回忆起自己当初落魄之时，对着录音笔久久不能言语，最后终于开口：&lt;br&gt;&lt;br&gt;“Dreamweaver是一个编辑器，也可以用它的控件来快速制作原型，但千万不要把这两件事搞混了。”&lt;br&gt;&lt;br&gt;小记还想向你索要签名，但你只是挥了挥手，转身离开，这次小记没有再追上来，转而在自己的速记本上写上“当他说完这句话之后，眼睛泛起了泪光，久久不能自已，最后失声痛哭离场，留下一个孤单的背影。。。” </textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n说Dreamweaver不愿意生成更漂亮的代码，真是太冤枉了，相信我，Adobe的Dreamweaver开发者（乃至世界上所有的WYSIWYG软件开发者）肯定是想尽一切办法让自己软件生成的代码更加漂亮。 但这里面有一个根本性问题，就是软件生成的代码也许永远都不可能达到和人…\n\n<a href=\"/question/19554005/answer/12598359\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19554005/answer/12598359\">发布于 2011-05-26</a></p>\n\n",
    "link": "https://zhihu.com/question/19554005/answer/12598359"
  },
  {
    "question": "\nQQ空间的前端技术水平如何？\n",
    "author": "舜子",
    "content": "\n\n<textarea hidden class=\"content\">作为空间前端老司机，看到大家讨论那么激烈。也想分享一下自己的经验，作为空间06年到11年的前端开发，或许可以给大家分享一些当时的技术选型让大家看到空间的技术演进（至于现在为什么变成这样，我不去做评价对错）。&lt;br&gt;&lt;br&gt;1. 06年，还是一个前端技术萌芽的年代，虽然04年google把ajax概念让更多人看到了前端的重要性，但是前端技术还是非常没有标准化的年头。刚接手空间的前端代码，前辈们为了极致的体验，十几号开发（前端，后台，甚至运营开发都有）都在同时改一个文件G4.js，文件数量可达200k（自己脑补有多少行）。&lt;b&gt;当时没有像现在那么多框架，那么多解决方案，更加没有node.js，你从何下手？ &lt;/b&gt;如果你们都觉得文件请求合并为基本原则，那么这个做法是不是就是对的？&lt;br&gt;&lt;br&gt;2. 对于那么大的文件，代码本身的问题就非常多。所以接下来的事情，我想的方式是拆开，&lt;b&gt;模块化&lt;/b&gt;。做这个事情，后来就到了07年，为了让模块化开发方式简单，自己写了压缩合并工具，自己定义模块加载的方式。然而当时能想到最简单的优化就是，把首页用户不需要的内容尽量异步加载。如果回想起来，当时最遗憾的是，并没有把模块化的工作方式，抽象成设计模式。后来做DO分离的时候，&lt;b&gt;我们把前端的工具也慢慢推动形成了公司级的工具，包括发布和压缩，其实也是最早期的前端工程化雏形。&lt;/b&gt;当然工程化还包括了最早的公司web端性能的测速平台&lt;br&gt;&lt;br&gt;3. &lt;b&gt;抓包中你们还能看到qzfl，这个是最早期为了解决开发规范，解决浏览器兼容的产物。&lt;/b&gt;这个框架为空间做了非常多的深度定制，同时也从整个团队来说，让前端开发在生产环节获得效率的提升（当然始终没有提升效率到，我们有时间去做开源，这个深表遗憾）。当然到现在同时看到多个基础库，其实是让我觉得非常痛心的一点，在现在提倡去框架的时代，在空间依旧看到了很多基础库。这个确实需要后辈们想办法，qzfl已经发挥了它最大的价值，是否还能带来更大的价值？&lt;br&gt;&lt;br&gt;4. 前端优化，这个很古老又很赞新的问题。怎么做都没有对错，虽然前端优化也能有一些常规的设计模式去驱动，但是设计模式不见得都是全对的。&lt;b&gt;空间的优化原则是基于数据分析的基础去做的，所以我们会去关注真实用户端的使用情况。&lt;/b&gt;空间多首屏加载做了非常多调整，以及对10%的用户，在网络接入，运营商，使用习惯上做更多的分析。所以我们并不会说直接套用xxx优化原则就认为我们做了优化，优化随着时间推移，随着用户硬件的升级，也在不断调整着策略。&lt;br&gt;&lt;br&gt;当然以上这些优化其实只解决了用户访问的速度问题，并没有解决卡顿的问题。所以我在12年的velocity china上提出了前端的渲染性能优化的分析方法(有兴趣可以百度搜索16毫秒的优化)，希望前端开发通过渲染问题的分析，去优化空间的卡顿。因为空间长期都在和网络较量，对于复杂前端性能，确实看得不够多，特别是运行时的性能。&lt;br&gt;&lt;br&gt;空间的前端技术，也许在现在很多人看起来技术很古老。但是它已经是一个大象级别的项目。另外在业务面前，一个理性的程序员会考虑，我的重构是否对现在的优化还有价值？ 空间当年从10万到百万，到千万访问量的提升的时间段内，各种优化都是值得的。然而到了现在顶峰阶段，去做天翻地覆的改动价值是否得以放大？&lt;br&gt;&lt;br&gt;所以，也建议大家不要以新技术的运用作为判断前端技术是否NB的唯一标准。回想04年ajax诞生，算是新技术？其实只是一个新的设计模式。最后空间前端团队，虽然在开源上没有太多的贡献，但是在腾讯内，给大家创造了非常大的成长空间，创建了腾讯的web前端通道，让前端技术真正在公司内受到重视，做到这点已经足够。心存感激。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n作为空间前端老司机，看到大家讨论那么激烈。也想分享一下自己的经验，作为空间06年到11年的前端开发，或许可以给大家分享一些当时的技术选型让大家看到空间的技术演进（至于现在为什么变成这样，我不去做评价对错）。 1. 06年，还是一个前端技术萌芽的年代…\n\n<a href=\"/question/37905339/answer/74295318\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-11-28\" target=\"_blank\" href=\"/question/37905339/answer/74295318\">编辑于 2015-11-28</a></p>\n\n",
    "link": "https://zhihu.com/question/37905339/answer/74295318"
  },
  {
    "question": "\n作为产品经理如何优雅的与前端工程师们撕逼？\n",
    "author": "陈骁黎",
    "content": "\n\n<textarea hidden class=\"content\">不要去跟技术同学争论“这个有多难或者多简单”&lt;br&gt;产品经理关注的重点永远是“这个有多重要”&lt;br&gt;——这个重要取决于有多少用户需要、有多需求、跟产品核心有多契合等。&lt;br&gt;只要在这个层面上达成了共识，那么问题就自然而然地从“做不做？”变成了“怎么去做”&lt;br&gt;嗯，这个时候请尊重技术同学的意见。&lt;br&gt;&lt;br&gt;如果一个产品经理在“需求的必要性”这一点上都没有说服技术同学&lt;br&gt;那请回过头再仔细想想自己的需求。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n不要去跟技术同学争论“这个有多难或者多简单” 产品经理关注的重点永远是“这个有多重要” ——这个重要取决于有多少用户需要、有多需求、跟产品核心有多契合等。 只要在这个层面上达成了共识，那么问题就自然而然地从“做不做？”变成了“怎么去做” 嗯，…\n\n<a href=\"/question/50481263/answer/122001862\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/50481263/answer/122001862\">发布于 2016-09-14</a></p>\n\n",
    "link": "https://zhihu.com/question/50481263/answer/122001862"
  },
  {
    "question": "\n想要从零学起前端技术，有哪些靠谱的培训学校？\n",
    "author": "甘明",
    "content": "\n\n<textarea hidden class=\"content\">淘宝，9.9元买一套极客学院的视频，看完后做一遍例子，然后再去angularjs官网看几遍文档，再了解一下vue，react。再用H5给自己做一个酷炫的个人简历，手机端、平板、PC都能看，拿着这个简历去找工作。&lt;br&gt;&lt;br&gt;为什么不推荐培训机构？因为学习是一辈子的事，IT行业日新月异，每年都有新技术。而你不能每年都去培训机构读书，养成自学的习惯，练就驱动自己不断进步的自制力才是成功的开始。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n淘宝，9.9元买一套极客学院的视频，看完后做一遍例子，然后再去angularjs官网看几遍文档，再了解一下vue，react。再用H5给自己做一个酷炫的个人简历，手机端、平板、PC都能看，拿着这个简历去找工作。 为什么不推荐培训机构？因为学习是一辈子的事，IT行业…\n\n<a href=\"/question/37155838/answer/70898993\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-11-05\" target=\"_blank\" href=\"/question/37155838/answer/70898993\">编辑于 2015-11-09</a></p>\n\n",
    "link": "https://zhihu.com/question/37155838/answer/70898993"
  }
]