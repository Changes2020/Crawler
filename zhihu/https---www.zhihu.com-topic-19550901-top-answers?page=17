<!DOCTYPE html>
<html lang="zh-CN" dropEffect="none" class="no-js topic-pages">
<head>
<meta charset="utf-8" />

<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="renderer" content="webkit" />
<meta http-equiv="X-ZA-Response-Id" content="000c40ffe2180972">
<meta http-equiv="X-ZA-Experiment" content="default:None">

<title>前端开发 - 话题精华 - 知乎</title>

<meta name="apple-itunes-app" content="app-id=432274380" />


<meta name="description" content="Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？120839个最新问答，点击查看更多>>" />

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta http-equiv="mobile-agent" content="format=html5;url=https://www.zhihu.com/topic/19550901/top-answers">
<meta id="znonce" name="znonce" content="00e7b0c8ee0948228d3b4dc39c483e3b">



<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-152.87c020b9.png" sizes="152x152">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-120.496c913b.png" sizes="120x120">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-76.dcf79352.png" sizes="76x76">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-60.9911cffb.png" sizes="60x60">


<link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">

<link rel="search" type="application/opensearchdescription+xml" href="https://static.zhihu.com/static/search.xml" title="知乎" />
<link rel="stylesheet" href="https://static.zhihu.com/static/revved/-/css/z.96020364.css">





<!--[if lt IE 9]>
<script src="https://static.zhihu.com/static/components/respond/dest/respond.min.js"></script>
<link href="https://static.zhihu.com/static/components/respond/cross-domain/respond-proxy.html" id="respond-proxy" rel="respond-proxy" />
<link href="/static/components/respond/cross-domain/respond.proxy.gif" id="respond-redirect" rel="respond-redirect" />
<script src="/static/components/respond/cross-domain/respond.proxy.js"></script>
<![endif]-->
<script src="https://static.zhihu.com/static/revved/-/js/instant.14757a4a.js"></script>

<link rel="canonical" href="https://www.zhihu.com/topic/19550901" />

</head>

<body class="zhi ">




<div role="navigation" class="zu-top" data-za-module="TopNavBar">
<div class="zg-wrap modal-shifting clearfix" id="zh-top-inner">
<a href="/" class="zu-top-link-logo" id="zh-top-link-logo" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_zhihu_logo">知乎</a>

<div class="top-nav-profile">
<a href="/people/liu-yuan-39-9" class="zu-top-nav-userinfo ">
<span class="name">文刀水原</span>
<img class="Avatar" src="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_s.png" srcset="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_xs.png 2x" alt="文刀水原" />
<span id="zh-top-nav-new-pm" class="zg-noti-number zu-top-nav-pm-count"
style="visibility:hidden" data-count="0">

</span>
</a>
<ul class="top-nav-dropdown" id="top-nav-profile-dropdown">
<li>
<a href="/people/liu-yuan-39-9">
<i class="zg-icon zg-icon-dd-home"></i>我的主页
</a>
</li>

<li>
<a href="/inbox">
<i class="zg-icon zg-icon-dd-pm"></i>私信
<span id="zh-top-nav-pm-count" class="zu-top-nav-pm-count zg-noti-number"
style="visibility:hidden" data-count="0">

</span>
</a>
</li>
<li>
<a href="/settings">
<i class="zg-icon zg-icon-dd-settings"></i>设置
</a>
</li>
<li>
<a href="/logout">
<i class="zg-icon zg-icon-dd-logout"></i>退出
</a>
</li>
</ul>

</div>



<button class="zu-top-add-question" id="zu-top-add-question">提问</button>


<div role="search" id="zh-top-search" class="zu-top-search">
<form method="GET" action="/search" id="zh-top-search-form" class="zu-top-search-form">



<input type="hidden" name="type" value="content">
<label for="q" class="hide-text">知乎搜索</label><input type="text" class="zu-top-search-input" id="q" name="q" autocomplete="off" value="" maxlength="100" placeholder="搜索你感兴趣的内容...">
<button type="submit" class="zu-top-search-button"><span class="hide-text">搜索</span><span class="sprite-global-icon-magnifier-dark"></span></button>
</form>
</div>



<div id="zg-top-nav" class="zu-top-nav">
<ul class="zu-top-nav-ul zg-clear">

<li class="zu-top-nav-li " id="zh-top-nav-home">
<a class="zu-top-nav-link" href="/" id="zh-top-link-home" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_home">首页</a>
</li>



<li class="top-nav-topic-selector zu-top-nav-li current" id="zh-top-nav-topic">
<a class="zu-top-nav-link" href="/topic" id="top-nav-dd-topic">话题</a>
</li>

<li class="zu-top-nav-li " id="zh-top-nav-explore">
<a class="zu-top-nav-link" href="/explore">发现</a>
</li>

<li class="top-nav-noti zu-top-nav-li ">
<a class="zu-top-nav-link" href="javascript:;" id="zh-top-nav-count-wrap" role="button"><span class="mobi-arrow"></span>消息</a>
</li>



</ul>
<div class="zu-top-nav-live zu-noti7-popup zg-r5px no-hovercard" id="zh-top-nav-live-new" role="popup" tabindex="0">
<div class="zu-top-nav-live-inner zg-r5px">
<div class="zu-top-live-icon">&nbsp;</div>
<div class="zu-home-noti-inner" id="zh-top-nav-live-new-inner">
<div class="zm-noti7-popup-tab-container clearfix" tabindex="0">
<button class="zm-noti7-popup-tab-item message">
<span class="icon">消息</span>
</button>
<button class="zm-noti7-popup-tab-item user">
<span class="icon">用户</span>
</button>
<button class="zm-noti7-popup-tab-item thanks">
<span class="icon">赞同和感谢</span>
</button>
</div>
</div>
<div class="zm-noti7-frame-border top"></div>
<div class="zm-noti7-frame">
<div class="zm-noti7-content message">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content user" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content thanks" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
</div>
<div class="zm-noti7-frame-border bottom"></div>
<div class="zm-noti7-popup-footer">
<a href="/notifications" class="zm-noti7-popup-footer-all zg-right">查看全部 &raquo;</a>
<a href="/settings/notification" class="zm-noti7-popup-footer-set" title="通知设置" ><i class="zg-icon zg-icon-settings"></i></a>
</div>
</div>
</div>

</div>

</div>
</div>


<div class="zu-global-notify" id="zh-global-message" style="display:none">
<div class="zg-wrap">
<div class="zu-global-nitify-inner">
<a class="zu-global-notify-close" href="javascript:;" title="关闭" name="close">x</a>
<span class="zu-global-notify-icon"></span>
<span class="zu-global-notify-msg"></span>
</div>
</div>
</div>




<div class="zg-wrap zu-main clearfix "  role="main">
<div class="zu-main-content">
<div class="zu-main-content-inner">


<div itemscope itemtype="https://schema.org/CreativeWork/Topic">
<div class="topic-avatar" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
<div>
<a class="zm-entry-head-avatar-link" href="/topic/19550901" id="zh-avartar-edit-form">
<img alt="前端开发" src="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_m.jpg" class="zm-avatar-editor-preview"></a>
<meta itemprop="image" content="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_l.jpg" />
</div>

<span class="zm-entry-head-avatar-edit-button">修改</span>

</div>
<div class="topic-info">
<div class="topic-name" id="zh-topic-title">
<h1 class="zm-editable-content" data-disabled="1">前端开发</h1>
<div class="zm-editable-editor-wrap" style="display:none">
<input type="text" class="zm-editable-editor-input zg-form-text-input" style="width:150px" />
<span class="zm-command">
<a href="javascript:;" name="save" class="zg-btn-blue" style="margin:0 15px;">完成</a>
<a href="javascript:;" name="cancel" class="zm-command-cancel">取消</a>
</span>
</div>
</div>
<a href="#" class="meta-item share-button zg-right" name="share"><i class="z-icon-share"></i>分享</a>


<div class="zm-topic-topbar">
<div class="zm-topic-topbar-nav clearfix">


<ul class="zm-topic-topbar-nav-list zg-left clearfix">






<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/hot">动态</a>
</li>





<li class="zm-topic-topbar-nav-list-item current">
<span>精华</span>
</li>





<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/unanswered">等待回答</a>
</li>



</ul>

</div>

</div>
</div>
<div class="zm-topic-list-container" itemprop="hasPart" itemscope itemtype="http://schema.org/ItemList/QuestionList">
<div class="zu-top-feed-list" id="zh-topic-top-page-list">
<meta itemprop="questionCount" content="36909" />
<meta itemprop="topAnswerCount" content="999" />
<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="321" data-type="Answer">
<link itemprop="url" href="/question/37379084/answer/74601296">
<meta itemprop="answer-id" content="25263821" />
<meta itemprop="answer-url-token" content="74601296" />
<meta itemprop="answerCount" content="20" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/37379084" target="_blank" data-id="7158556" data-za-element-name="Title">
Node.js 在双十一中有哪些应用，表现如何？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/37379084/answer/74601296">
<!-- <meta itemprop="answer-id" content="25263821">
<meta itemprop="answer-url-token" content="74601296"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>277</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">277</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$dead_horse"
target="_blank" href="/people/dead_horse"
>死马</a></span><span title="https://github.com/dead-horse" class="bio">
<a href="//link.zhihu.com/?target=https%3A//github.com/dead-horse" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">github.com/dead-horse</span><span class="invisible"></span><i class="icon-external"></i></a>
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="277" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">277</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7158556" data-action="/answer/content" data-author-name="死马" data-entry-url="/question/37379084/answer/74601296">

<textarea hidden class="content">&lt;p&gt;文章转载自 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/tmallfe/tmallfe.github.io/issues/28&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;天猫双11前端分享系列（四）：大规模 Node.js 应用 · Issue #28 · tmallfe/tmallfe.github.io · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，评论请到 github 上。&lt;/p&gt;&lt;br&gt;&lt;p&gt;----------------- 分割线 -----------------&lt;/p&gt;&lt;br&gt;&lt;p&gt;在刚刚过去的 15 年天猫双十一中，Node.js（后文简称 node） 大放异彩，不仅帮助前端团队快速、高效的解决双十一各个业务上的页面渲染问题，同时在性能和稳定性上也表现非常出色，大大降低了双十一硬件成本的同时，在整个双十一期间未出现任何一起由 node 引发的线上故障。&lt;/p&gt;&lt;br&gt;覆盖业务&lt;br&gt;&lt;br&gt;&lt;p&gt;天猫内经过一年时间的改造和推进，到 15 年双十一的时候，已经有大量的业务都有了 node 的身影，基本上天猫大部分的 web 页面都是通过 node 渲染出来：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;天猫首页、大部分天猫频道页、双十一会场以及所有天猫的活动页面都全部基于 node 应用提供服务。&lt;/li&gt;&lt;li&gt;商品详情、店铺和搜索页等主流程链路上，以及天猫超市和天猫会员等业务线上的页面渲染。&lt;/li&gt;&lt;li&gt;提供给内部运营小二的天猫页面搭建平台 web 层基于 node 进行开发，双十一期间在此平台上搭建了超过 1000+ 个双十一相关活动页面。&lt;/li&gt;&lt;/ul&gt;工作职责&lt;br&gt;&lt;br&gt;&lt;p&gt;在上述覆盖了 node 的业务中，node 在其中扮演了多种角色：&lt;/p&gt;&lt;br&gt;完整的 web 应用&lt;p&gt;天猫页面搭建平台即是一个由 node 负责整个 web 端包括业务逻辑和模板渲染等工作的应用。基于支付宝的 node web 框架 chair，通过 hsf 调用和淘宝共建的页面数据存储的接口，用 node 完成业务逻辑处理、页面渲染和前端接口。&lt;/p&gt;&lt;br&gt;轻量级的模板渲染容器&lt;p&gt;通过 node 整合前端的天猫组件规范 MUI，开发了一套专注于模板渲染的 node 容器（wormhole），通过这个 node 容器，前端可以专注于展现层的开发，统一前端的本地和线上的代码运行环境，也让后端摆脱了繁琐的套模板工作，专注于提供数据接口。同时这套容器基于天猫的模块化规范，横向打通了各个业务和应用之间的模块共享。&lt;/p&gt;&lt;p&gt;基于这个模板容器，我们完成了商品详情、店铺、搜索页以及超市等业务线上的前后端分离工作，大大提升了前端的开发效率，并有效降低了前后端沟通成本。&lt;/p&gt;&lt;br&gt;页面渲染服务&lt;p&gt;同样基于天猫前端的组件规范 MUI 和模板渲染的 node 容器，我们完成了一套模块化搭建页面的系统，同时开发并运维了一个用来渲染基于模块搭建的页面的服务，同时这个服务和阿里的 cache CDN 打通，在保证满足业务需求的前提下，降低消耗的计算资源。&lt;/p&gt;&lt;p&gt;基于这个服务，在双十一中提供了 900+ 活动页面的渲染，以及天猫首页和各个频道页的渲染工作，天猫的所有营销引流页面基本都由这个服务提供页面。&lt;/p&gt;&lt;br&gt;进入正题&lt;br&gt;&lt;p&gt;上面讲了许多我们用 node 做了什么，以及覆盖了那些业务，现在我们来看看，到底我们是怎样用 node 解决实际的业务需求的。&lt;/p&gt;&lt;p&gt;拿这次双十一的会场页举例：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;用户在不同的终端环境下访问 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//1111.tmall.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;2015双11再见-上天猫，就够了&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这个网址，请求会直接来到 CDN 上。&lt;/li&gt;&lt;li&gt;CDN 对用户的终端环境进行判断，并在内存中找到对应终端的缓存文件返回，若未命中缓存，则继续往下执行。&lt;/li&gt;&lt;li&gt;CDN 将请求转发到 node 渲染服务，根据终端类型选择不同的页面响应（pc 页面，h5 页面， react-native 页面）。CDN 响应用户请求，并缓存页面。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;在上述流程中，我们看到同一个 url 对应到后端其实是完全不同的页面输出内容，为了达到这个目的，我们和 CDN 团队一起做了许多工作：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;开发了一个 tengine-detector 组件，通过请求的 user-agent 以及约定的一些 cookie 信息，判断用户的终端类型。并部署到 CDN 上，让 CDN 拥有了终端判断的能力。&lt;/li&gt;&lt;li&gt;用户请求到 CDN 上之后，CDN 会根据用户的终端类型分类，设置一个请求头，例如: detector: pc 表明这个请求的终端设备是 PC 上的浏览器。&lt;/li&gt;&lt;li&gt;渲染服务获取到这个头之后，根据 url 和设备类型选择不同的页面返回。返回时设置 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/Protocols/HTTP/Issues/vary-header.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vary&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 为detector，保证 CDN 根据不同的设备类型缓存不同页面。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;上面提到会根据终端类型对于同一个 url 返回不同的页面，而这些页面其实都是通过一个基于 node 开发的天猫页面搭建平台用模块搭建的。在这个平台上，超过 95% 的模块都拥有 pc 和无线两个版本，本次双十一所有用到的模块都有 react native 的版本。运营只需搭建 PC 上的页面，就会自动生成无线以及 react native 的页面。基于这套方案，我们通过 70+ 高质量的模块，让运营同学完成了超过 900+ 活动页面的搭建。&lt;/p&gt;&lt;p&gt;再深入一点，我们如何来完成这些页面或者是模块的呢？首先，我们希望让前端开发做什么？&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;编写模板&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;拿到数据(并处理)，和模板进行结合&lt;/li&gt;&lt;li&gt;拿到请求上下文，时间、环境等系统变量来确定不同的展现&lt;/li&gt;&lt;li&gt;管理前端资源和依赖&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们在 xtemplate 模板引擎的基础上进行扩展，让前端通过编写 xtemplate 模板，在 context 中注入一些必需的页面上下文，扩展 xtemplate 的语法，支持引入前端资源。基于这套模板，我们可以在拿到数据后渲染得到完整的页面，基本满足了开发页面在功能上的所有需求。&lt;/p&gt;&lt;p&gt;但是页面中其实有非常多重复性的内容，我们完全可以把他们抽象成一个个的模块，让页面通过模块化的方式来基于模块搭建，在这个过程中我们需要解决几个问题。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;模块版本和静态资源版本的管理：页面可能引用几十个模块，而这些模块依赖的静态资源有重复、有冲突，因此我们会通过一份统一的 seed 来进行依赖版本的管理，每一个模块在发布的时候都会打包好自身的依赖关系，而在将所有的模块组合成页面的时候，将所有模块的依赖表重新进行合并和去重，最终保证页面引用的模块和静态资源唯一。同时我们在模板中通过扩展引入了 FELoader（天猫的静态资源加载器），收集页面的所有静态资源，combo 后插入到页头（css）或者页尾（js）。&lt;/li&gt;&lt;li&gt;模块如何拿到相应的数据：对于模块而言，他并不需要知道被哪个页面引用了，所有的页面在引用模块的时候需要将模块所需的数据传递进去。而所有的模块开发者需要编写一份模块需要数据的 JSON Schema 描述，通过这份描述文件，搭建平台、投放系统以及其他使用这个模块的人都能够知道要为这个模块产生什么格式的数据。&lt;/li&gt;&lt;li&gt;配套的搭建平台和数据投放平台来让运营自由组合所有的模块生成页面，并为页面上的每一个模块进行数据投放。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;解决完上述问题之后，我们将每一个页面都变成了以下几个部分：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;一份页面的描述文件，声明了这个页面依赖的所有模块，以及渲染这些模块所需的数据的地址。&lt;/li&gt;&lt;li&gt;一系列相互独立的模块。&lt;/li&gt;&lt;li&gt;一份包含页面上所有模块需要的数据的数据文件。&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;最终，我们的渲染服务会根据 URL 和请求的终端环境，找到对应的页面描述文件，请求相应的数据，合并所有的模板渲染成为 HTML 页面。&lt;/p&gt;&lt;p&gt;当我们完成了 web 页面的模块化搭建之后回头再看，是不是 react native（RN） 的页面也能够搭建呢？我们只需要所有的模块都有对应的 react native 版本，就可以像搭建 web 的 html 一样搭建渲染出 RN 需要的 js 了！所以本次双十一使用的所有模块都有 RN 版本，并有多个会场采用了 RN 进行搭建，取得了非常不错的效果，在接下来的双十二中，我们所有的会场都会支持 RN，而这一切对于搭建会场的运营来说都是完全透明的。&lt;/p&gt;&lt;br&gt;稳定性保障&lt;br&gt;&lt;p&gt;在阿里，所有的双十一相关应用都需要面临的一个大问题就是稳定性，为了保证能够在几亿用户买买买的时候不掉链子，任何一个应用都需要花很大的精力来保障它的稳定性，node 的应用也一样。&lt;/p&gt;&lt;p&gt;对于 node 应用自身而言，我们首先要保证它有充足的测试，通过 mocha + istanbul ，尽可能让测试覆盖每一个功能点和边缘情况。&lt;/p&gt;&lt;br&gt;&lt;p&gt;需要有完善的监控和报警。在阿里内部，我们已经有了内部的监控系统，对于 node 应用而言，只需要按照要求的格式打印的日志，或者通过自己编写日志采集脚本，就可以轻松的搞定监控和报警。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;错误日志监控：通过采集脚本采集上来并分类，并设置单机报警和阈值和集群报警的阈值，在异常出现时能够及时发现。&lt;/li&gt;&lt;li&gt;系统状态监控：内存、CPU、load 等的监控，并设置报警阈值，当系统状态异常时能够及时发现。&lt;/li&gt;&lt;li&gt;应用状态监控：QPS、响应时间以及所有的远程调用记录，时刻了解系统的负载和各个依赖节点的服务状态。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;同时，对于 node 应用，我们可以使用阿里云团队提供的 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//alinode.aliyun.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;alinode&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，他们可以提供更多 node 的日志和监控，并提供了在线的 profiler 和快照功能，方便排查线上异常和性能优化。&lt;/p&gt;&lt;p&gt;尽管我们可以对自身的代码做各种测试、各种监控，但是在一个复杂的系统中，各种上下游依赖非常复杂，网络情况也很复杂，这个时候为了保证稳定性，我们还有许多的工作要做。&lt;/p&gt;&lt;br&gt;没有单点&lt;br&gt;&lt;p&gt;假设一个机房的光缆被挖断了，或者机房所在的城市大规模断电了，然后整个天猫的大部分页面都不能访问了，这明显不能接受，所以我们需要在多个城市的多个机房部署我们的服务。如果存放模板文件或者数据文件的服务挂了怎么办？多个节点，主备读取，同时对所有的文件都加上磁盘文件容灾。对外提供服务的整条链路上的每一个依赖都不能够出现单点问题。&lt;/p&gt;&lt;br&gt;弱化依赖&lt;br&gt;&lt;p&gt;在排除完单点问题之后，我们再来审视我们的服务，是不是所有的依赖在挂掉后就无法正常服务了？是否我们对于每个依赖异常都有容灾的方案，弱化掉整条链路上的依赖。&lt;/p&gt;&lt;br&gt;预案自动化&lt;br&gt;&lt;p&gt;对于每一个可能出现问题的环节，我们都需要有针对性的预案，如果这个预案需要人工去执行，就需要思考能否做到自动化。在 node 渲染服务中，可能有各个缓解出问题，链路上的所有预案都要能够自动切换：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CDN 回源到多个机房，当某个机房异常时能够通过健康检查自动剔除。&lt;/li&gt;&lt;li&gt;当源站 load 过高时，服务自动切换到静态版本不做渲染。&lt;/li&gt;&lt;li&gt;当模板或者数据的存储节点挂了，通过健康检查自动剔除。&lt;/li&gt;&lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;总结&lt;br&gt;&lt;p&gt;再回过头来看看在天猫我们使用 node 做的事情，不一定很牛逼，但是确实是在天猫现在的业务场景下，一个相对较优的使用方案，不论是在解决前端开发效率、还是提升服务质量方面，都发挥了很重要的作用。而经过了这次双十一的考验，我们也认为它&lt;strong&gt;&lt;em&gt;已经是一个很成熟的工具&lt;/em&gt;&lt;/strong&gt;，可以帮助我们更好的完成我们的工作。&lt;/p&gt;&lt;br&gt;&lt;p&gt;node 只是工具，在每一个具体的业务场景下都有最合适的使用方法，而随着业务的发展，node 能做的事情也在变化，我们期望它能在之后能在更多的场景下落地。：）&lt;/p&gt;</textarea>


<div class="zh-summary summary clearfix">

文章转载自 <a href="//link.zhihu.com/?target=https%3A//github.com/tmallfe/tmallfe.github.io/issues/28" class=" wrap external" target="_blank" rel="nofollow noreferrer">天猫双11前端分享系列（四）：大规模 Node.js 应用 · Issue #28 · tmallfe/tmallfe.github.io · GitHub<i class="icon-external"></i></a> ，评论请到 github 上。 ----------------- 分割线 ----------------- 在刚刚过去的 15 年天猫双十一中，Node.js（后文简称 node） 大放…

<a href="/question/37379084/answer/74601296" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/37379084/answer/74601296">发布于 2015-11-30</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7158556"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>12 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic2.zhimg.com/a366b123d_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="322" data-type="Answer">
<link itemprop="url" href="/question/36069929/answer/67316902">
<meta itemprop="answer-id" content="22345017" />
<meta itemprop="answer-url-token" content="67316902" />
<meta itemprop="answerCount" content="74" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/36069929" target="_blank" data-id="6634848" data-za-element-name="Title">
对于一般程序员来说，怎么防止为了潮流技术 疲于奔命？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/36069929/answer/67316902">
<!-- <meta itemprop="answer-id" content="22345017">
<meta itemprop="answer-url-token" content="67316902"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>277</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">277</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$patr0nus"
target="_blank" href="/people/patr0nus"
>黑暗二叉树</a></span><span title="软件工程师" class="bio">
软件工程师
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="277" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">277</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6634848" data-action="/answer/content" data-author-name="黑暗二叉树" data-entry-url="/question/36069929/answer/67316902">

<textarea hidden class="content">&lt;b&gt;了解这个新技术的出现是为了解决什么问题。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;例如 Angular.js，这门技术还没学明白，看见 React.js 火了，又想去学它，PHP 还没能学明白，看见 Node.js 火了，又想去学它。&lt;br&gt;&lt;/blockquote&gt;一个东西“火”了从来就不应该是学这个东西的动机，顶多算个诱因。什么时候应该去主动学一项新技术呢？一般有这几种情况：&lt;br&gt;&lt;ol&gt;&lt;li&gt;你用现有的技能完成一件事情有困难，于是去 Google，搜到了一个技术正好能解决你的问题，然后果断学它妈的。&lt;/li&gt;&lt;li&gt;某项技术火了，你去看了看它官网，然后一拍脑袋：“我靠，这不正是我一直想要的吗，有了这个技术那以后做 xxx 就方便多了”，然后果断学它妈的。&lt;/li&gt;&lt;li&gt;遇到了一个问题，已经有思路去解决了，想把解决方案抽象成一个库或框架，然后发现已经有类似的了，心里有些小失落，但依然果断学它妈的。&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;一定要带着解决问题的目的去学一个新技术，要不然你会无法理解这个新技术的一些设计和概念，于是会学得很痛苦。&lt;/b&gt;&lt;br&gt;&lt;br&gt;题主举得那两个例子还蛮典型的。对于 React.js 来说，如果你不了解它是解决什么问题的，很有可能会边学着 React.js 边喊“这个 jsx 干嘛要把 HTML 混在 js 里啊，说好的界面渲染与逻辑分离呢”。然而如果你已经意识到渲染也是要有逻辑的，意识到 Angular.js 应对复杂的渲染逻辑和多变的视图状态时会力不从心，那 React.js 学起来将是非常愉悦的，因为它解决了你用 Angular.js 时无法解决的一个问题。&lt;br&gt;&lt;br&gt;至于 Node.js。如果你用 php 在并发方面遇到瓶颈，然后你得知了 Node.js，然后你进一步了解的它的事件循环和异步模型，接下来的学习中就会很理解 Node.js 为什么使用 JavaScript，为什么会有 callback hell，怎么解决 callback hell 等等，学起来很爽，很安心。&lt;br&gt;&lt;br&gt;很多答主说要学好基础，我觉得这是对的，有了基础才能发现并理解一个新技术要解决的问题。&lt;b&gt;但不同的技术，需要的基础是不一样的。&lt;/b&gt;理解 React.js 的目的需要的基础有 DOM 和浏览器渲染机制，理解 Node.js 的目的需要基础则更底层一点，包括计算机网络和操作系统。然而要是反过来，你精通 tcp, udp 的实现，或者写得一手好汇编，也对于 React.js 的学习并没有什么卵用不是吗？&lt;br&gt;&lt;br&gt;强烈反对“前端技术更新快，没有必要追新”的言论。前端的需求井喷，几乎都是实现先行，标准再跟进。新技术的诞生都是有明确的目的的（个人感觉不外乎&lt;b&gt;消除浏览器兼容差异，模块化，组件化&lt;/b&gt;这三点，总之就是向桌面开发看齐），甚至是有被纳入标准的野心的。只要是戳中你痛点的项目，即使还在 beta 阶段也可以学学学。项目可能被废弃，解决问题的思路是忘不掉的。</textarea>


<div class="zh-summary summary clearfix">

<b>了解这个新技术的出现是为了解决什么问题。</b> 例如 Angular.js，这门技术还没学明白，看见 React.js 火了，又想去学它，PHP 还没能学明白，看见 Node.js 火了，又想去学它。 一个东西“火”了从来就不应该是学这个东西的动机，顶多算个诱因。什么时候应该去主…

<a href="/question/36069929/answer/67316902" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/36069929/answer/67316902">发布于 2015-10-12</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6634848"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>17 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="323" data-type="Answer">
<link itemprop="url" href="/question/40149352/answer/85042037">
<meta itemprop="answer-id" content="29448454" />
<meta itemprop="answer-url-token" content="85042037" />
<meta itemprop="answerCount" content="28" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/40149352" target="_blank" data-id="8267107" data-za-element-name="Title">
纯html5+css能写出什么惊人的效果？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/40149352/answer/85042037">
<!-- <meta itemprop="answer-id" content="29448454">
<meta itemprop="answer-url-token" content="85042037"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>276</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">276</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$shi-zhe-ru-si-19"
target="_blank" href="/people/shi-zhe-ru-si-19"
>逝者如斯</a></span><span title="小龙龙 www.puronglong.com" class="bio">
小龙龙 <a href="//link.zhihu.com/?target=http%3A//www.puronglong.com" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">puronglong.com</span><span class="invisible"></span><i class="icon-external"></i></a>
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="276" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">276</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="8267107" data-action="/answer/content" data-author-name="逝者如斯" data-entry-url="/question/40149352/answer/85042037">

<textarea hidden class="content">&lt;a href=&quot;https://www.zhihu.com/question/39907342/answer/83789125?group_id=676202335147409408&quot; class=&quot;internal&quot;&gt;只用css能玩出什么花样？ - 逝者如斯的回答&lt;/a&gt;&lt;br&gt;&lt;b&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;2016.2.11一更&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/b&gt;&lt;br&gt;可以看看这个回答，30种濒危动物那个就做的挺好的&lt;br&gt;&lt;br&gt;先不说3d效果，就论一个平面上的话，&lt;br&gt;&lt;br&gt;只用一行div，无js，就可以画一幅世界名画蒙娜丽莎，CSS博大精深→ _→&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/jaysalvat/pen/HaqBf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Mona Lisa with pure CSS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/93b628b8cddf83652deef756fe92c8d4_b.png&quot; data-rawwidth=&quot;603&quot; data-rawheight=&quot;448&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;603&quot; data-original=&quot;https://pic1.zhimg.com/93b628b8cddf83652deef756fe92c8d4_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;虽然作者不是手写的，但至少另一个角度说明css可以做到这样的效果，画画不只有canvas，svg等。。。&lt;br&gt;&lt;br&gt;下面有小伙伴提到了刚出来时很火的“纯CSS技术画出30个濒危动物图片”，这里一并列出并给出网址，&lt;br&gt;&lt;br&gt;“30个物种，30中碎片拼图。”点开这场展览的网站主页，空灵的背景音乐引入了颜色饱满的多边形图案，配合着30种濒危动物的文字介绍。而之所以叫“30片三角”，是因为James起初在摆弄编程的时候，第一幅成型的作品“夏威夷乌鸦”，刚刚好是30片三角形拼接而成。&lt;br&gt;&lt;br&gt;但这次展览拼的不是技术或着艺术。伴随30只生命样貌的切换，一幅幅几何状组合的破碎，设计师试图展现过去10年来栖息地遭受破坏是如何把动物推向灭绝的边缘——曾是 2014 年巴西世界杯吉祥物的三带犰狳（ Three-Banded Armadillo of Brazil）数量减少了 30%，新几内亚岛上的原针鼹鼠（ Long-Beaked Echidna ）因人类的狩猎而在过去 35-40 年间减少近 80%。&lt;br&gt;&lt;br&gt;&lt;b&gt;官方网址：&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.webhek.com/misc-res/species-in-pieces/%23&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;30个CSS碎片拼图，30种濒临灭绝动物&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;(官网需要fanqiang查看)&lt;br&gt;&lt;br&gt;无论是背景音的选用，还是动物样貌之间的切换，抑或是细节处的动效展现，再加上主题的升华，有技术有内涵，这是一部成功的作品。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/b80d46ba4d80f53216266ddd9af906cd_b.png&quot; data-rawwidth=&quot;566&quot; data-rawheight=&quot;391&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;566&quot; data-original=&quot;https://pic2.zhimg.com/b80d46ba4d80f53216266ddd9af906cd_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;可以闲来无事画画小动物：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/189d9eecd5e6bda2a2d5d163c992de7e_b.png&quot; data-rawwidth=&quot;766&quot; data-rawheight=&quot;284&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;766&quot; data-original=&quot;https://pic3.zhimg.com/189d9eecd5e6bda2a2d5d163c992de7e_r.png&quot;&gt;&lt;br&gt;打打灰机：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/dogagenc/pen/xbRKZx&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Airplane (Pure CSS)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/f693aa75c0df34cf963cb89fbbd315d0_b.png&quot; data-rawwidth=&quot;1149&quot; data-rawheight=&quot;357&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1149&quot; data-original=&quot;https://pic1.zhimg.com/f693aa75c0df34cf963cb89fbbd315d0_r.png&quot;&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/rachel_web/pen/doaPWN&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS Faces&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/a3ee0138dac2feb2327bea44fc0a7d7f_b.png&quot; data-rawwidth=&quot;598&quot; data-rawheight=&quot;313&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;598&quot; data-original=&quot;https://pic4.zhimg.com/a3ee0138dac2feb2327bea44fc0a7d7f_r.png&quot;&gt;&lt;br&gt;这些都是静止的，想想再加上各种动画，也可以做出很多效果出来的。&lt;br&gt;&lt;br&gt;CSS3D苹果笔记本动画：&lt;br&gt;这又是一款超酷的CSS3 3D动画效果，它是一款带有3D视觉效果，并且可以360度旋转的macbook air。这款CSS3 3D动画的笔记本底部有一个逼真的投影，可以跟随图片一起转动，从而凸显其3D效果，是一款很不错的CSS3 3D动画特效&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html5tricks.com/demo/css3-3d-macbook-air/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3 3D 苹果笔记本动画DEMO演示&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/a51c0cd2731b33ef479573abbcc7e67a_b.png&quot; data-rawwidth=&quot;334&quot; data-rawheight=&quot;269&quot; class=&quot;content_image&quot; width=&quot;334&quot;&gt;还有&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html5tricks.com/demo/css3-sector-menu/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS3扇形动画菜单DEMO演示&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/915aca553597e8e589589e22a05d0373_b.png&quot; data-rawwidth=&quot;334&quot; data-rawheight=&quot;312&quot; class=&quot;content_image&quot; width=&quot;334&quot;&gt;&lt;br&gt;&lt;br&gt;HTML5超级玛丽体验:&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html5tricks.com/demo/html5-mario/index.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML5³¬¼¶ÂêÀö&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/54e0fbfe241766c58ba4dd4bb74a37d3_b.png&quot; data-rawwidth=&quot;668&quot; data-rawheight=&quot;534&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;668&quot; data-original=&quot;https://pic4.zhimg.com/54e0fbfe241766c58ba4dd4bb74a37d3_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;2016.3.5三更&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;我们知道js在web方面能做很多事&lt;br&gt;有一句话说：&lt;i&gt;&lt;b&gt;限制你的可选项，会让你重新评估手头上已有的工具。&lt;/b&gt;&lt;/i&gt;&lt;br&gt;如果只让你用css，能完成某项任务吗？而这个任务中，只用一个div，全靠css属性来实现效果，可以吗？&lt;br&gt;可以看看翻译的一篇&lt;br&gt;&lt;b&gt;&lt;i&gt;&lt;a href=&quot;http://zhuanlan.zhihu.com/FrontendMagazine/19854868&quot; class=&quot;internal&quot;&gt;基于单个 Div 的 CSS 绘图 - 前端外刊评论 - 知乎专栏&lt;/a&gt;：&lt;/i&gt;&lt;/b&gt;&lt;br&gt;“为了得到更大的挑战，探索 CSS 的潜力，我给自己定了这个限制，只是用一个 Div。不能直接买一只绿色的笔（添加更多的 Div），我要做的就是尽其所能地结合 CSS 属性来实现我的目的。”&lt;br&gt;&lt;br&gt;以下这些都是基于一个div所做的：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//a.singlediv.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A Single Div&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/1db5952700594b2efe54cafc6516e4ce_b.png&quot; data-rawwidth=&quot;1212&quot; data-rawheight=&quot;8037&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1212&quot; data-original=&quot;https://pic3.zhimg.com/1db5952700594b2efe54cafc6516e4ce_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;2016.7.12四更&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;/b&gt;&lt;br&gt;做一个动态的旋转木马给妹纸，立马少女心泛滥有木有(星星眼)：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/gxash/pen/rLLyvq&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Horse ride carousel flat design by Lina for Zajno (3D animated with CSS3)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/15921878862b63fc874d74a3485a46b8_b.png&quot; data-rawwidth=&quot;846&quot; data-rawheight=&quot;452&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;846&quot; data-original=&quot;https://pic1.zhimg.com/15921878862b63fc874d74a3485a46b8_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;css可以用来做图像，做完图像还可以用css添加动画，能做成什么样还要看你的想象力了。再加上合适的主题，就能做出一件成功的作品。&lt;br&gt;还有动态的车子：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codepen.io/jonsuh/pen/qNOxLK&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bike Season&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/a92369634f14262e66445d3a5d674d82_b.png&quot; data-rawwidth=&quot;755&quot; data-rawheight=&quot;405&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;755&quot; data-original=&quot;https://pic3.zhimg.com/a92369634f14262e66445d3a5d674d82_r.png&quot;&gt;&lt;br&gt;上面两个例子来自can you code this ui&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//stories.uplabs.com/can-you-code-this-ui-4530315290a1%23.65da2m9rs&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;stories.uplabs.com/can-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;you-code-this-ui-4530315290a1#.65da2m9rs&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;css可以用来做图像，做完图像还可以用css添加动画，能做成什么样还要看你的想象力了。再加上合适的主题，就能做出一件成功的作品。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic1.zhimg.com/93b628b8cddf83652deef756fe92c8d4_200x112.png" data-rawwidth="603" data-rawheight="448" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic1.zhimg.com/93b628b8cddf83652deef756fe92c8d4_r.png">
<a href="https://www.zhihu.com/question/39907342/answer/83789125?group_id=676202335147409408" class="internal">只用css能玩出什么花样？ - 逝者如斯的回答</a> <b>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;2016.2.11一更&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</b> 可以看看这个回答，30种濒危动物那个就做的挺好的 先不说3d效果，就论一个平面上的话， 只用一行div，无js，就可以画一幅世界名画蒙娜丽莎，CSS…

<a href="/question/40149352/answer/85042037" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-02-05" target="_blank" href="/question/40149352/answer/85042037">编辑于 2016-07-12</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-8267107"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>19 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="324" data-type="Answer">
<link itemprop="url" href="/question/24373004/answer/27621319">
<meta itemprop="answer-id" content="6386814" />
<meta itemprop="answer-url-token" content="27621319" />
<meta itemprop="answerCount" content="27" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/24373004" target="_blank" data-id="1931056" data-za-element-name="Title">
如何看待 TJ  宣布退出 Node.js 开发，转向 Go？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/24373004/answer/27621319">
<!-- <meta itemprop="answer-id" content="6386814">
<meta itemprop="answer-url-token" content="27621319"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>276</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">276</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$neihan"
target="_blank" href="/people/neihan"
>Bakso</a></span><span title="野生前端" class="bio">
野生前端
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="276" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">276</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1931056" data-action="/answer/content" data-author-name="Bakso" data-entry-url="/question/24373004/answer/27621319">

<textarea hidden class="content">蟹妖。&lt;br&gt;&lt;br&gt;&lt;b&gt;TJ何许人也？&lt;/b&gt;&lt;br&gt;&lt;br&gt;他medium自我介绍：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//medium.com/%40tjholowaychuk&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TJ Holowaychuk&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，程序员兼艺术家，Koa、Co、Express、jade、mocha、node-canvas、commander.js等知名开源项目的创建和贡献者。&lt;br&gt;&lt;br&gt;&lt;b&gt;社区影响：&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//nodejsmodules.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://nodejsmodules.org&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 第一页出现次数最多的那个少年&lt;br&gt;Quora: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.quora.com/TJ-Holowaychuk-1/How-is-TJ-Holowaychuk-so-insanely-productive&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;How is TJ Holowaychuk so insanely productive?&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; —高产到令人发指，Quora上甚至有人猜测TJ不是一个人，而事实上他就是一个人。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/substack/npmtop&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;substack/npmtop&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;：对node npm社区代码贡献截止目前占到整个社区的3.04%&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;rank   percent   packages   author
----   -------   --------   ------
#  1    3.04 %      28      tjholowaychuk
#  2    2.82 %      26      samuraijack
#  3    2.28 %      21      gozala
#  4    1.95 %      18      creationix
#  5    1.85 %      17      isaacs
#  6    1.74 %      16      substack
#  7    1.63 %      15      kriskowal
#  8    1.52 %      14      marak
#  9    1.41 %      13      coolaj86
#  9    1.41 %      13      pkrumins
# 11    1.19 %      11      masylum
# 12    1.09 %      10      TooTallNate
# 13    0.98 %       9      cloudhead
# 13    0.98 %       9      davglass
# 13    0.98 %       9      indexzero
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&quot;https://pic3.zhimg.com/b6c386e5eaf439f4c7a67b0d019dd8fa_b.jpg&quot; data-rawwidth=&quot;510&quot; data-rawheight=&quot;684&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;510&quot; data-original=&quot;https://pic3.zhimg.com/b6c386e5eaf439f4c7a67b0d019dd8fa_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;个人对他的印象：TJ大神、visionmedia、潮男、酷炫、杀马特&lt;br&gt;&lt;/b&gt;&lt;br&gt;TJ绝对是这一两年node社区的“弄潮儿”+“精神领袖”。&lt;br&gt;引用一个知友的话说，&lt;br&gt;&lt;blockquote&gt;任何一个做node.js开发的人, 一定都直接或间接引用过他写的库。这里说的是&lt;b&gt;任何&lt;/b&gt;, everyone! &lt;br&gt;他写一个co, 立马就会有无数叫co-*的项目出现。&lt;br&gt;他写一个koa, 立马就会有无数叫koa-*的项目出现。&lt;/blockquote&gt;&lt;br&gt;他从npm社区诞生之初就开发了&lt;b&gt;commander.js、node-canvas&lt;/b&gt;等著名模块。&lt;br&gt;&lt;br&gt;随后他又开发了&lt;b&gt;Express.js、jade、&lt;/b&gt;&lt;b&gt;EJS&lt;/b&gt;等web开发系列框架和库。&lt;br&gt;&lt;br&gt;最近一段时间，&lt;b&gt;他把精力放在了运用ES6特性解决javascript回调金字塔的问题的Co库和下一代node web开发框架koa，&lt;/b&gt;而这两个模块虽然目前知名度不如express.js，但未来会是红得发紫的技术。&lt;br&gt;&lt;br&gt;他创建并参与的开源项目实在是太多，以至于随便在他github上找个仓库, 就有上千上万的stars。&lt;br&gt;&lt;br&gt;最近随着我在工作中无意得知并使用了co和koa来进行开发web后端开发，越发觉得这位TJ大神真是node社区的明灯，&lt;b&gt;这一两年他在我心目中的地位逐渐上升甚至超过了node核心开发团队，相信很多人内心都有相同的感受&lt;/b&gt;。&lt;br&gt;&lt;br&gt;他在博客上的告别文章，并不意味着他当即完全告别node开发，&lt;b&gt;co和koa这俩大有前途的框架仍会继续维护，其他的项目会转交给别人维护&lt;/b&gt;（言外之意要将其他烂摊子全部丢掉？）。&lt;br&gt;&lt;br&gt;在他的文中，他提到node不再适合当下他开发的软件了，并且他选择了Go：&lt;br&gt;&lt;blockquote&gt;If you’re doing distributed work then you’ll find Go’s expressive concurrency primitives very helpful. We could achieve similar things in Node with generators, but in my opinion generators will only ever get us half way there. Without separate stacks error handling &amp;amp; reporting will be mediocre at best. I also don’t want to wait 3 years for the community to defragment, when we have solutions that work now, and work well.&lt;br&gt;&lt;/blockquote&gt;&lt;br&gt;Go有表现力的原生并发特性对开发分布式任务非常有效，即便是ES6引入的generator也只能满足他一半的需求，node并没有独立的错误处理栈。&lt;b&gt;TJ接下来因为工作需要，要从事分布式软件的开发，显然Go是更合适的选择。&lt;/b&gt;&lt;br&gt;&lt;br&gt;错误处理一直是是JS遗留的比较深的坑了，需要一些时间来填。&lt;b&gt;TJ不愿意花3年的时间等待node社区将坑全部填了，或许还表达出他对node社区和核心开发团队的些许“不满”&lt;/b&gt;。&lt;br&gt;&lt;br&gt;个人认为，稳定、高性能、分布式的纯后台开发，例如交易系统，Go、Java和C++是更佳选择，尤其是专为分布式设计的Go，只是当下人才还比较少；&lt;br&gt;对于主要处理前台展现的web工程，node是不错的选择，毕竟性能也尚可，前端工程师可以“前后通吃”，还是看好&lt;b&gt;node在将来会是前后端分工的分界线&lt;/b&gt;。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/b6c386e5eaf439f4c7a67b0d019dd8fa_200x112.jpg" data-rawwidth="510" data-rawheight="684" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/b6c386e5eaf439f4c7a67b0d019dd8fa_r.jpg">
蟹妖。 <b>TJ何许人也？</b> 他medium自我介绍：<a href="//link.zhihu.com/?target=https%3A//medium.com/%40tjholowaychuk" class=" wrap external" target="_blank" rel="nofollow noreferrer">TJ Holowaychuk<i class="icon-external"></i></a>，程序员兼艺术家，Koa、Co、Express、jade、mocha、node-canvas、commander.js等知名开源项目的创建和贡献者。 <b>社区影响：</b> <a href="//link.zhihu.com/?target=https%3A//nodejsmodules.org/" class=" wrap external" target="_blank" rel="nofollow noreferrer">https://nodejsmodules.org<i class="icon-external"></i></a> 第一页出现次数最多的那个少年 Quora: <a href="//link.zhihu.com/?target=http%3A//www.quora.com/TJ-Holowaychuk-1/How-is-TJ-Holowaychuk-so-insanely-productive" class=" wrap external" target="_blank" rel="nofollow noreferrer">How is T…<i class="icon-external"></i></a>

<a href="/question/24373004/answer/27621319" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-07-06" target="_blank" href="/question/24373004/answer/27621319">编辑于 2014-07-06</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1931056"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>16 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="325" data-type="Answer">
<link itemprop="url" href="/question/53209764/answer/133940181">
<meta itemprop="answer-id" content="49096243" />
<meta itemprop="answer-url-token" content="133940181" />
<meta itemprop="answerCount" content="19" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/53209764" target="_blank" data-id="13502577" data-za-element-name="Title">
前端新人工作中多造轮子对未来的发展是好是坏？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/53209764/answer/133940181">
<!-- <meta itemprop="answer-id" content="49096243">
<meta itemprop="answer-url-token" content="133940181"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>276</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">276</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$excited-vczh"
target="_blank" href="/people/excited-vczh"
>vczh</a></span><span title="《C++Primer 5th》强势审校" class="bio">
《C++Primer 5th》强势审校
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="276" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">276</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="13502577" data-action="/answer/content" data-author-name="vczh" data-entry-url="/question/53209764/answer/133940181">

<textarea hidden class="content">造当然是要造的，但是你造完了要跟别人比一比，你要是发现自己造了好几年的轮子都跟别人地差了几个档次，那就应该停下来，先学习一个。&lt;br&gt;&lt;br&gt;还有，不能做的是重复发明轮子，不是不能重复造轮子，不要听那些居心叵测的人偷偷改了个字眼。世界上大量的优秀的工具都是重复造轮子造出来的。重复造轮子可以带来工程上的巨大的改进，clang++就是其中一个例子。clang++难道解决了什么没解决过的问题吗？并没有。他只是把解决问题变得更容易，这就是重复造轮子的好处。&lt;br&gt;&lt;br&gt;重新发明一遍就会有很多问题，你不仅不能借鉴前人的发展，还闭门造车。人家已经早就弄明白的理论你不知道，去重新推导一遍还弄错了，做出来的项目当然就是屎。&lt;br&gt;&lt;br&gt;想想10年来前端在排版和数据处理上面走的20年前GUI就走过的老路，都还没走完，浪费了巨大的生产力，一个靠谱的工具都没做出来。现在做个好看好用的GUI根本不要求你有多么深厚的编程技巧，稍微训练过的美工拖拉Blend for VS都能搞定，还自动就完美符合MVVM的要求。但是做个好看好用的网页你就得学会超级多东西，让自己的网页符合某些老掉牙的pattern都可以开大型座谈会蹭吃蹭喝，这就是重复发明轮子的代价。</textarea>


<div class="zh-summary summary clearfix">

造当然是要造的，但是你造完了要跟别人比一比，你要是发现自己造了好几年的轮子都跟别人地差了几个档次，那就应该停下来，先学习一个。 还有，不能做的是重复发明轮子，不是不能重复造轮子，不要听那些居心叵测的人偷偷改了个字眼。世界上大量的优秀的工具…

<a href="/question/53209764/answer/133940181" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-12-02" target="_blank" href="/question/53209764/answer/133940181">编辑于 2016-12-02</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-13502577"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>45 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="326" data-type="Answer">
<link itemprop="url" href="/question/51132164/answer/124450796">
<meta itemprop="answer-id" content="45283728" />
<meta itemprop="answer-url-token" content="124450796" />
<meta itemprop="answerCount" content="3" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/51132164" target="_blank" data-id="12670353" data-za-element-name="Title">
JavaScript字符串底层是如何实现的？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/51132164/answer/124450796">
<!-- <meta itemprop="answer-id" content="45283728">
<meta itemprop="answer-url-token" content="124450796"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$rednaxelafx"
target="_blank" href="/people/rednaxelafx"
>RednaxelaFX</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/rednaxelafx#hilightbadge" target="_blank">编程、编译原理、编程语言等 7 个话题优秀回答者</a></span>



<span title="JavaScript引擎研发" class="bio">
Ja…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="12670353" data-action="/answer/content" data-author-name="RednaxelaFX" data-entry-url="/question/51132164/answer/124450796">

<textarea hidden class="content">这问题问的是JavaScript引擎的实现。回答起来非常繁琐，因为每个引擎都不一样。我就先摸摸皮毛然后再补充吧。&lt;br&gt;&lt;br&gt;题主的问题描述说：&lt;br&gt;&lt;blockquote&gt;Java中字符串底层是个char数组，&lt;/blockquote&gt;并不是。Java无论是语言规范还是JVM规范都没有限定java.lang.String的背后一定要用char[]来作为实际的存储容器。只要背后的存储足够支撑java.lang.String表面上的API就可以了：最简单的，想想底下的存储要如何支持String.charAt() / String.codePointAt() 系API，是不是并非一定要有个char[]在背后？&lt;br&gt;&lt;br&gt;事实上光是Sun/Oracle JDK就有几种不同的实现：&lt;br&gt;&lt;ul&gt;&lt;li&gt;用char[]并且支持子串共享：这是Sun JDK 1.0一直到JDK6的默认实现。但是千万留意这不是唯一的做法；&lt;/li&gt;&lt;li&gt;用char[]，但不支持子串共享：这是Oracle JDK7开始的实现方式；&lt;/li&gt;&lt;li&gt;可选用byte[]：这是在Sun JDK6上使用-XX:+UseCompressedStrings时的做法，应对场景是只包含ASCII范围内的字符的字符串；&lt;/li&gt;&lt;li&gt;用byte[]：这是Oracle JDK9开始的实现方式，叫做Compact Strings：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//openjdk.java.net/jeps/254&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JEP 254: Compact Strings&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;另外还有JVM使用把字符串内容直接粘在java.lang.String尾巴上的设计，并不使用独立的char[] / byte[]数组去存储字符内容。&lt;br&gt;当前的HotSpot VM虽然还没有这样做，但是未来很可能会向这个方向发展。.NET的 System.String 类在CLR上则一直是直接把字符串内容粘在对象末尾的，所以CLR上的String是个可变长的特殊对象类型。&lt;br&gt;放俩略相关的传送门：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/50611918/answer/121836050&quot; class=&quot;internal&quot;&gt;JVM/CLR 是否有做过将子对象的结构镶嵌在包含它们的大对象里（如果分析认为可行）的优化？ - RednaxelaFX 的回答&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/48263880/answer/109955899&quot; class=&quot;internal&quot;&gt;.NET的Array是如何向在托管堆中申请大内存块的，或者说Array是如何实现的？ - RednaxelaFX 的回答&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;还可以有很多不同的可能性，不过这帖不是问JVM问题，就不展开说了。&lt;br&gt;&lt;br&gt;于是题主说：&lt;br&gt;&lt;blockquote&gt;JavaScript呢？&lt;/blockquote&gt;ECMAScript规范只规定了String类型要是一个值类型，这个类型要可以存储UTF-16为单元的字符，完全没有规定String类型要如何实现。&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ecma-international.org/ecma-262/6.0/%23sec-terms-and-definitions-string-value&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ecma-international.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ecma-262/6.0/#sec-terms-and-definitions-string-value&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;blockquote&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ecma-international.org/ecma-262/6.0/%23sec-terms-and-definitions-string-value&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;4.3.17&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; String value&lt;p&gt;primitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;NOTE &lt;/b&gt;A String value is a member of the String type. Each integer value in the sequence usually represents a single 16-bit unit of UTF-16 text. &lt;b&gt;However, ECMAScript does not place any restrictions or requirements on the values except that they must be 16-bit unsigned integers.&lt;/b&gt;&lt;/p&gt;&lt;/blockquote&gt;所以各个JavaScript引擎的具体实现就各显神通了。&lt;br&gt;&lt;br&gt;JavaScript引擎的实现多如牛毛，放个传送门：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hllvm.group.iteye.com/group/topic/37596&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;[链接帖] 各JavaScript引擎的简介，及相关资料/博客收集帖&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;而其中的具体做法也是千奇百怪。&lt;br&gt;&lt;br&gt;目前主流的做法是把String值的实现分为5大类使用场景：&lt;br&gt;&lt;ol&gt;&lt;li&gt;已经要查看内容的字符串：使用flat string思路来实现，本质上说就是用数组形式来存储String的内容；&lt;/li&gt;&lt;li&gt;拼接字符串但尚未查看其内容：使用“&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Rope_%28data_structure%29&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;rope&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;”思路或其它延迟拼接的思路来实现。当需要查看其内容时则进行“flatten”操作将其转换为flat string表现形式。最常见rope的内部节点就像二叉树（RopeNode { Left; Right }）一样，但也可以有采用更多叉树的设计的节点，或者是用更动态的多叉树实现；&lt;/li&gt;&lt;li&gt;子串（substring）：使用“slice”思路来实现，也就是说它只是一个view，自己并不存储字符内容而只是记录个offset和length，底下的存储共享自其引用的源字符串；&lt;/li&gt;&lt;li&gt;值得驻留（intern）的字符串：通常也是flat string但可能会有更多的限制，存储它的空间可能也跟普通String不一样。最大的好处是在特殊场景下有些字符串会经常重复出现，或者要经常用于相等性比较，把这些字符串驻留起来可以节省内存（内容相同的字符串只驻留一份），并且后续使用可以使用指针比较来代替完全的相等性比较（因为驻留的时候已经比较过了）；&lt;/li&gt;&lt;li&gt;外来字符串：有时候JavaScript引擎跟外界交互，外界想直接把一个char8_t*或者char16_t*传给JavaScript引擎当作JavaScript字符串用。JavaScript引擎可能会针对某些特殊场景提供一种包装方式来直接把这些外部传进来的字符串当作JavaScript String，而不拷贝其内容。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;在上述5种场景中，涉及存储的时候都可以有&lt;br&gt;&lt;ul&gt;&lt;li&gt;使用UTF-16为单元的最常规做法以及使用Latin-1 / ASCII的压缩版本这两种变种。&lt;br&gt;&lt;/li&gt;&lt;li&gt;对于flat string，直接把字符串内容粘在对象末尾的“内嵌版”，以及把字符串内容放在独立的数组里的“独立数组版”两个变种。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;如果把语言层面的一个String值类型按上述使用场景给拆分成若干种不同的底层实现类型，本质上都是在为内存而优化：要么是减少String的内存使用量（1-byte vs 2-byte、substring等），要么是减少拷贝的次数/长度（rope的按需flatten）。&lt;br&gt;底层实现类型的数量的增多，会使得相关处理的代码都变得多态，不利于编译器对其做优化，所以这里是有取舍的。如果多态换来的内存收益比不上多态的代码开销的话就得不偿失了。显然，众多JavaScript引擎都选择了在String值类型上细分出多种实现类型，反映了多态在这个地方总体来看是有利的。&lt;br&gt;&lt;br&gt; 把上面的场景(1)、(2)、(3)用代码来举例：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rednaxela&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// flat string, string literal&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;               &lt;span class=&quot;c1&quot;&gt;// flat string, string literal&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// rope (&quot;concat string&quot;, &quot;cons string&quot;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// substring / slice&lt;/span&gt;
                             &lt;span class=&quot;c1&quot;&gt;// 这个操作可能会让s3所引用的String值被flatten为flat string&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 同理，如果执行 s3[0] 下标操作也可能会让原本是rope的String值被flatten&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;在有用rope来优化字符串拼接的JavaScript引擎上，使用二元+运算符来拼接字符串其实不会直接导致冗余的字符串内容拷贝，只有在需要使用字符串的内容时才会对它做一次批量的flatten操作，做一次拷贝。所以字符串拼接“要用Array.prototype.join()而忌讳用+运算符”的建议就不那么重要了。&lt;br&gt;&lt;br&gt;=========================================&lt;br&gt;&lt;br&gt;&lt;b&gt;V8&lt;/b&gt;&lt;br&gt;&lt;br&gt;于是让我们来考察一下V8的String都有上述场景的哪些。&lt;br&gt;&lt;br&gt;针对5.5.339版本来看：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/v8/v8/blob/5.5.339/src/objects.h%23L103&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;v8/objects.h at 5.5.339 · v8/v8 · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//     - Name&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       - String&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         - SeqString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - SeqOneByteString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - SeqTwoByteString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         - SlicedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         - ConsString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         - ExternalString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - ExternalOneByteString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - ExternalTwoByteString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//         - InternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - SeqInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//             - SeqOneByteInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//             - SeqTwoByteInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - ConsInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//           - ExternalInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//             - ExternalOneByteInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//             - ExternalTwoByteInternalizedString&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//       - Symbol&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;V8里能表示字符串的C++类型有上面这么多种。其中Name是String（ES String Value）与Symbol（ES6 Symbol）的基类。看看String类下面的子类是多么的丰富 &amp;gt;_&amp;lt;&lt;br&gt;&lt;br&gt;简单说，String的子类都是用于实现ECMAScript的String值类型，从JavaScript层面看它们都是同一个类型——String，也就是说typeof()它们都会得到&quot;string&quot;。&lt;br&gt;其中：&lt;br&gt;&lt;ul&gt;&lt;li&gt;SeqString就是上面的场景(1)（“flat string”）的实现。其中有SeqOneByteString / SeqTwoByteString分别对应使用1-byte ASCII char与2-byte UTF-16的版本。字符串内容都是直接粘在对象末尾的（“内嵌版”）。&lt;/li&gt;&lt;li&gt;ConsString就是上面的场景(2)（“rope”）的实现。本质上就是把还在拼接中的字符串用二叉树（其实是二叉DAG）的方式先存着，直到要查看其内容时再flatten成SeqString。它自身不存储字符内容所以不关心1-byte还是2-byte。&lt;br&gt;&lt;/li&gt;&lt;li&gt;SlicedString就是上面场景(3)（“slice / substring”）的实现。同上它也不存储字符内容，所以1-byte还是2-byte就看引用的底层String是怎样的。&lt;br&gt;&lt;/li&gt;&lt;li&gt;ExternalString就是上面场景(5)（外部传入的字符串）的实现。这个涉及存储，所以也有1-byte与2-byte两个实际实现。&lt;br&gt;&lt;/li&gt;&lt;li&gt;InternalizedString系列就是上面场景(4)（“interned”）的实现。它的子类跟前面列举的几种类型一一对应。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;而String的包装对象类型在V8里则是由StringWrapper来实现：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HeapObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsStringWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IsJSValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JSValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;值得注意的是：虽然ECMAScript的String值是值类型的，这并不就是说“String值就是在栈上的”。&lt;br&gt;正好相反，V8所实现的String值全部都是在V8的GC堆上存储的，传递String值时实际上传递的是指向它的指针。但由于JavaScript的String值是不可变的，所以底层实现无论是真的把String“放在栈上”还是传递指针，对上层应用的JavaScript代码而言都没有区别。&lt;br&gt;ExternalString虽然特殊但也不例外：它实际存储字符串内容的空间虽然是从外部传进来的，不在V8的GC堆里，但是ExternalString对象自身作为一个对象头还是在GC堆里的，所以该String类型实现逻辑上说还是在GC堆里。&lt;br&gt;&lt;br&gt;话说V8除了上述String类型外，还有一些跟String相关的、应用于特殊场景的类型。其中比较典型的有：&lt;br&gt;&lt;ul&gt;&lt;li&gt;ReplacementStringBuilder：用于正则表达式的字符串替换等；&lt;br&gt;&lt;/li&gt;&lt;li&gt;IncrementalStringBuilder：// TODO&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;这个版本的V8对自己字符串拼接实现已经颇有信心，所以 String.prototype.concat 也直接用JavaScript来实现了：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/v8/v8/blob/5.5.339/src/js/string.js%23L36&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;v8/string.js at 5.5.339 · v8/v8 · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// ECMA-262, section 15.5.4.6&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;StringConcat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;other&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* and more */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// length == 1&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;CHECK_OBJECT_COERCIBLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;String.prototype.concat&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TO_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TO_STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这就是直接把传入的参数拼接成ConsString返回出去。&lt;br&gt;V8连标准库函数都用这种代码模式来实现了，同学们也不用担心这样做会太慢啦。&lt;br&gt;&lt;br&gt;而V8里的 Array.prototype.join 则针对稀疏数组的情况有些有趣的优化：&lt;br&gt;它会借助一个临时的InternalArray为“string builder”，计算出拼接结果的length之后直接分配一个合适类型和长度的SeqString作为buffer来进行拼接。而这个InternalArray里的内容可以带有编码为Smi的“下一段要拼接的字符串在什么位置（position）和长度（length）”信息，然后从当前位置到下一个要拼接的位置之间填充分隔符，这样就不会在对稀疏数组的join过程中把数组中无值的位置都填充到“string builder”的实体里去了。这是个run-length encoding的思路。&lt;br&gt;&lt;br&gt;V8还有个有趣的功能：原地缩小对象而不必为了缩小而拷贝。这个有空再具体展开写。&lt;br&gt;&lt;br&gt;=========================================&lt;br&gt;&lt;br&gt;&lt;b&gt;Nashorn&lt;/b&gt;&lt;br&gt;&lt;br&gt;让我们看看&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hg.openjdk.java.net/jdk8u/jdk8u/nashorn/file/bc02dfd3decc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JDK8u112-b04里的Nashorn实现&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;br&gt;它比V8要简单一些，实现ECMAScript String值的类型都是java.lang.CharSequence接口的实现类，其中有：&lt;br&gt;&lt;ul&gt;&lt;li&gt;场景(1)（“flat string”）：直接使用Java原生的 java.lang.String 类型，方便用上JVM对String的优化。在一个JDK/JVM自身就有针对1-byte / 2-byte场景做优化的实现上（例如Oracle JDK9 / OpenJDK9的Compact Strings），Nashorn就会自动获得相应的优化；&lt;/li&gt;&lt;li&gt;场景(2)（“rope”）：不免俗，有个实现了CharSequence接口的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hg.openjdk.java.net/jdk8u/jdk8u/nashorn/file/bc02dfd3decc/src/jdk/nashorn/internal/runtime/ConsString.java&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ConsString&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;类型；&lt;/li&gt;&lt;li&gt;场景(3)（“slice / substring”）：直接用java.lang.String.substring()实现，没有额外优化。Oracle JDK / OpenJDK在JDK7后撤销了java.lang.String的子串共享实现，所以Nashorn里的slice() / substring()在这些JDK上会涉及拷贝开销…orz！&lt;/li&gt;&lt;li&gt;场景(4)（“intern”）：只有少量地方做了intern，是直接用 java.lang.String.intern() 的。&lt;/li&gt;&lt;li&gt;场景(5)（外部传入的字符串）：没有特别的对应支持。Nashorn面向的用户是其它JVM上的语言（例如Java），所以外部传入的字符串最可能的也就是 java.lang.String ，正好Nashorn自身的flat string就是直接用 java.lang.String ，所以也就不用做什么额外工作来支持这些外来字符串了。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;ECMAScript的String包装对象类型则由这个NativeString类型表示：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hg.openjdk.java.net/jdk8u/jdk8u/nashorn/file/bc02dfd3decc/src/jdk/nashorn/internal/objects/NativeString.java&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;NativeString&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，里面就是包装着一个代表String值的CharSequence类型引用。&lt;br&gt;&lt;br&gt;Nashorn在实现 String.prototype.concat() 时没有特别的实现，是直接把参数拼接成一串ConsString然后直接返回没有flatten的ConsString。&lt;br&gt;&lt;br&gt;=========================================&lt;br&gt;&lt;br&gt;&lt;b&gt;SpiderMonkey&lt;/b&gt;&lt;br&gt;&lt;br&gt;这里用FIREFOX_AURORA_51_BASE版代码来考察。&lt;br&gt;总体来说SpiderMonkey里的String的内部实现思路与V8的非常相似。&lt;br&gt;&lt;br&gt;代码里的注释把设计思路讲解得很清楚了：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hg.mozilla.org/mozilla-central/file/fc69febcbf6c/js/src/vm/String.h&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;hg.mozilla.org/mozilla-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;central/file/fc69febcbf6c/js/src/vm/String.h&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * JavaScript strings&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Conceptually, a JS string is just an array of chars and a length. This array&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * of chars may or may not be null-terminated and, if it is, the null character&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * is not included in the length.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * To improve performance of common operations, the following optimizations are&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * made which affect the engine's representation of strings:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - The plain vanilla representation is a &quot;flat&quot; string which consists of a&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    string header in the GC heap and a malloc'd null terminated char array.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid copying a substring of an existing &quot;base&quot; string , a &quot;dependent&quot;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    string (JSDependentString) can be created which points into the base&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    string's char array.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid O(n^2) char buffer copying, a &quot;rope&quot; node (JSRope) can be created&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    to represent a delayed string concatenation. Concatenation (called&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    flattening) is performed if and when a linear char array is requested. In&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    general, ropes form a binary dag whose internal nodes are JSRope string&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    headers with no associated char array and whose leaf nodes are either flat&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    or dependent strings.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid copying the leftmost string when flattening, we may produce an&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    &quot;extensible&quot; string, which tracks not only its actual length but also its&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    buffer's overall size. If such an &quot;extensible&quot; string appears as the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    leftmost string in a subsequent flatten, and its buffer has enough unused&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    space, we can simply flatten the rest of the ropes into its buffer,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    leaving its text in place. We then transfer ownership of its buffer to the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    flattened rope, and mutate the donor extensible string into a dependent&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    string referencing its original buffer.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    (The term &quot;extensible&quot; does not imply that we ever 'realloc' the buffer.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    Extensible strings may have dependent strings pointing into them, and the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    JSAPI hands out pointers to flat strings' buffers, so resizing with&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    'realloc' is generally not possible.)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid allocating small char arrays, short strings can be stored inline&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    in the string header (JSInlineString). These come in two flavours:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    JSThinInlineString, which is the same size as JSString; and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    JSFatInlineString, which has a larger header and so can fit more chars.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid comparing O(n) string equality comparison, strings can be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    canonicalized to &quot;atoms&quot; (JSAtom) such that there is a single atom with a&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    given (length,chars).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid copying all strings created through the JSAPI, an &quot;external&quot;&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    string (JSExternalString) can be created whose chars are managed by the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    JSAPI client.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - To avoid using two bytes per character for every string, string characters&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    are stored as Latin1 instead of TwoByte if all characters are representable&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *    in Latin1.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Although all strings share the same basic memory layout, we can conceptually&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * arrange them into a hierarchy of operations/invariants and represent this&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * hierarchy in C++ with classes:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * C++ type                     operations+fields / invariants+properties&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * ==========================   =========================================&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * JSString (abstract)          get(Latin1|TwoByte)CharsZ, get(Latin1|TwoByte)Chars, length / -&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  | \&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  | JSRope                    leftChild, rightChild / -&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * JSLinearString (abstract)    latin1Chars, twoByteChars / might be null-terminated&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  | \&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  | JSDependentString         base / -&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * JSFlatString                 - / null terminated&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  +-- JSExternalString     - / char array memory managed by embedding&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  +-- JSExtensibleString   tracks total buffer capacity (including current text)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  +-- JSUndependedString   original dependent base / -&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |  +-- JSInlineString (abstract)    - / chars stored in header&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |      |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |      +-- JSThinInlineString       - / header is normal&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |      |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |      +-- JSFatInlineString        - / header is fat&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * JSAtom                       - / string equality === pointer equality&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  |&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * js::PropertyName             - / chars don't contain an index (uint32_t)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Classes marked with (abstract) above are not literally C++ Abstract Base&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Classes (since there are no virtual functions, pure or not, in this&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * hierarchy), but have the same meaning: there are no strings with this type as&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * its most-derived type.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Atoms can additionally be permanent, i.e. unable to be collected, and can&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * be combined with other string types to create additional most-derived types&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * that satisfy the invariants of more than one of the abovementioned&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * most-derived types:&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - InlineAtom     = JSInlineString     + JSAtom (atom with inline chars, abstract)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - ThinInlineAtom = JSThinInlineString + JSAtom (atom with inline chars)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *  - FatInlineAtom  = JSFatInlineString  + JSAtom (atom with (more) inline chars)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Derived string types can be queried from ancestor types via isX() and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * retrieved with asX() debug-only-checked casts.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * The ensureX() operations mutate 'this' in place to effectively the type to be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * at least X (e.g., ensureLinear will change a JSRope to be a JSFlatString).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;可以看到，SpiderMonkey里的 JSString 是表现ECMAScript String值的基类。它下面的子类的层次设计跟V8的颇有相似之处，完全应对了本回答开头提到的5种场景：&lt;br&gt;&lt;ul&gt;&lt;li&gt;场景(1)（“flat string”）：JSFlatString 及其子类。最特别的是它的“inline string”，这是在JSString的共同header里“偷空间”来存储字符内容的设计。这种思路也叫做“small string”优化，我在以前另一个回答里提及过：&lt;a href=&quot;https://www.zhihu.com/question/41691246/answer/98069640&quot; class=&quot;internal&quot;&gt;在stack上做small string或small vector优化比在heap上效率高吗? - RednaxelaFX 的回答&lt;/a&gt;&lt;/li&gt;&lt;li&gt;场景(2)（“rope”）：JSRope 实现了典型的二叉树（二叉DAG）形式的rope。不过它具体用在字符串拼接的时候也有些有趣的优化，上面引用的代码注释以及提到了：flat string下面有一种专门为用作字符串拼接的buffer的类型JSExtensibleString，它可以在拼接过程中有一个比较长的长度，然后等拼接结束确定最终长度后再原地把自己的长度缩短到实际长度。这个功能也跟V8可以原地缩小对象大小的功能类似。&lt;/li&gt;&lt;li&gt;场景(3)（“slice / substring”）：JSDependentString&lt;/li&gt;&lt;li&gt;场景(4)（“intern”）：JSAtom 及其子类 js::PropertyName&lt;/li&gt;&lt;li&gt;场景(5)（外部传入的字符串）：JSExternalString&lt;/li&gt;&lt;/ul&gt;上述所有涉及实际字符串内容的存储的类似都有针对7-bit Latin1与2-byte UTF-16的特化支持。&lt;br&gt;&lt;br&gt;=========================================&lt;br&gt;&lt;br&gt;&lt;b&gt;Chakra / ChakraCore&lt;/b&gt;&lt;br&gt;&lt;br&gt;请参考 &lt;a data-hash=&quot;f12d62dfdf1236e961460798455b1718&quot; href=&quot;//www.zhihu.com/people/f12d62dfdf1236e961460798455b1718&quot; class=&quot;member_mention&quot; data-hovercard=&quot;p$b$f12d62dfdf1236e961460798455b1718&quot;&gt;@Thomson&lt;/a&gt; 大大的回答。回头有空我再写点我的版本。&lt;br&gt;&lt;br&gt;=========================================&lt;br&gt;&lt;br&gt;其它JavaScript引擎的细节回头再更新…</textarea>


<div class="zh-summary summary clearfix">

这问题问的是JavaScript引擎的实现。回答起来非常繁琐，因为每个引擎都不一样。我就先摸摸皮毛然后再补充吧。 题主的问题描述说： Java中字符串底层是个char数组，并不是。Java无论是语言规范还是JVM规范都没有限定java.lang.String的背后一定要用char[]来…

<a href="/question/51132164/answer/124450796" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-10-01" target="_blank" href="/question/51132164/answer/124450796">编辑于 2016-10-02</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-12670353"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>9 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="327" data-type="Answer">
<link itemprop="url" href="/question/41493194/answer/91196402">
<meta itemprop="answer-id" content="31916351" />
<meta itemprop="answer-url-token" content="91196402" />
<meta itemprop="answerCount" content="105" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/41493194" target="_blank" data-id="8804564" data-za-element-name="Title">
如何不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/41493194/answer/91196402">
<!-- <meta itemprop="answer-id" content="31916351">
<meta itemprop="answer-url-token" content="91196402"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$kmxz"
target="_blank" href="/people/kmxz"
>kmxz</a></span><span title="认真贯彻落实面向对象重要思想 切实提高代码重用率" class="bio">
认真贯彻落实面向对象重要思想 切实提高…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="8804564" data-action="/answer/content" data-author-name="kmxz" data-entry-url="/question/41493194/answer/91196402">

<textarea hidden class="content">Array 的不少方法会跳过 undefined 确实是个著名的坑…… &lt;br&gt;&lt;br&gt;直接 map（just copy and paste to try）&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;s1&quot;&gt;'​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Array.fill&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'naive'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;Generator&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;angry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;递归&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wallace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;wallace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;尾递归&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mistake&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mistake&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;我去面试我就给他写个 Y combinator&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;excited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
   &lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;excited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;excited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;excited&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;img src=&quot;https://pic1.zhimg.com/a533385a2d08233f747beecee8f08dc4_b.jpg&quot; data-rawwidth=&quot;188&quot; data-rawheight=&quot;188&quot; class=&quot;content_image&quot; width=&quot;188&quot;&gt;</textarea>


<div class="zh-summary summary clearfix">

Array 的不少方法会跳过 undefined 确实是个著名的坑…… 直接 map（just copy and paste to try） ' '.split('').map(function (v, i) { return i; });
 Array.fill Array(100).fill('naive').map(function (v, i) { return i; });
 Generator function* a…

<a href="/question/41493194/answer/91196402" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-03-17" target="_blank" href="/question/41493194/answer/91196402">编辑于 2016-03-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-8804564"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>62 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="328" data-type="Answer">
<link itemprop="url" href="/question/35703265/answer/64229731">
<meta itemprop="answer-id" content="21107219" />
<meta itemprop="answer-url-token" content="64229731" />
<meta itemprop="answerCount" content="57" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35703265" target="_blank" data-id="6487997" data-za-element-name="Title">
计算机基础知识不牢的前端都是瞎扯淡吗？为什么？对于前端来说哪些计算机基础知识很重要？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35703265/answer/64229731">
<!-- <meta itemprop="answer-id" content="21107219">
<meta itemprop="answer-url-token" content="64229731"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$evanyou"
target="_blank" href="/people/evanyou"
>尤雨溪</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/evanyou#hilightbadge" target="_blank">前端开发、JavaScript、前端工程师话题优秀回答者</a></span>



<span title="为 JavaScript Fatigue 做了一些微小的工作" class="bio">
…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6487997" data-action="/answer/content" data-author-name="尤雨溪" data-entry-url="/question/35703265/answer/64229731">

<textarea hidden class="content">我的计算机基础知识可不牢靠了，大学里上就正经上过一个 CS 入门课。当然也不是说我基础知识啥都不会，七七八八自学了一些，但是跟科班出身的，尤其是我那帮 MIT 毕业的同事比还是比较自卑的... 买了 CLRS 和 SICP 从来没看完...&lt;br&gt;&lt;br&gt;回到主题，我是觉得『前端』这个词现在涵盖的内容也越来越广了，尤其是应用化了以后，俨然前端自己有一个迷你技术栈：&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;纯表现层。用户体验、布局、特效、研究 CSS 各种奇技淫巧（例子：CodePen 上各种无比酷炫但基本靠 hard-code 搞出来的特效）；对于很多设计/前端兼修的人来说，技术层面就到此为止了。他们很多可能一辈子都不会写翻转二叉树，但他们也能搞出一些科班出生的人一辈子也搞不出的用户体验。当然不排除一些走 creative coding / 数据可视化路线的人需要对物理、数学、甚至计算机图形方面的知识进行针对性的强化。&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;应用实现层。可能是大公司初级工程师主要干的活：拿着别人设计好的框架、工具去实现具体的应用逻辑。实话实说这个层面对计算机基础的要求确实不高，只要对 JS、CSS 这些领域专门的东西基础扎实 + 学习能力 ok 就可以了。但是这个层面其实需求巨大，而且有一个独特的需求：开发效率。要提升效率就得对手上的工具了解得非常细致，比如 XX 框架的 N 种优化小窍门之类的... 而这种东西只能靠实战经验去积累，基础再扎实影响也有限。&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;应用架构层。技术选型、开发底层框架、制定开发规范、设计应用结构... 这些东西就涉及到知识的广度和深度了，对业务需求的理解很重要，而且碰到具体的纯技术问题的可能性也大得多。编译原理、算法、数据结构在这里都会派上实际的用处。&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;基础设施层。自动化构建、部署、测试、加载方案、性能优化、代码质量管理等等... 这一层更加技术化了，而且涉及很多所有软件工程共通的东西，并不局限于前端。&lt;br&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;理念层。通过借鉴整个计算机体系中其他领域的思想，从根本上改进前端的开发范式。Facebook 的人现在做的就是这种事情。事实上能做到这一层的人基本不以前端自居了。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;这个问题里现有答案的一些分歧可能就在于『是否人人都应该做大前端』。我的看法是：不看具体业务需求就谈一个前端是不是靠谱都是耍流氓。一个人称不称职，看的是他的技能树和他当前的职责是否匹配。有没有必要学习特定的知识，这是一个要看情况讨论的问题。假如一个人科班出身，基础扎实来做前端，那他可能很快就可以开始涉及架构层和基础设施层的工作，这是比较理想的情况。但如果之前并没有基础，那就看你有没有野心向其他层去发展了，如果你真的有兴趣，在研究过程中自然会发现自己的短板，并且有足够的动力去弥补它。&lt;br&gt;&lt;br&gt;当然，有野心拓展自己的技能树固然好，但我不会因为一个负责搞交互的人不会翻转二叉树就觉得 ta 不靠谱。你让一个科班出身但是一直搞理论研究的人去做 angular 应用，未必效果就比一个半路出家但是写了 3 年 angular 的人来得好。从这个角度讲，玉伯的看法是有一定道理的（可能表达得确实比较模糊）。&lt;br&gt;&lt;br&gt;补充一下：上面的这些层次并不是一个发展路线，不是说是个前端就一定要冲着最高的层次去，这不现实，因为每个层次都可以深入钻研，对于公司来说，尤其是大公司，往往更需要在一个层次深入专精的人而不是每个层次都半桶水的人（对于多层次专精的人的需求也是有的，但是这种一般都是 senior 职位了，不会太多）</textarea>


<div class="zh-summary summary clearfix">

我的计算机基础知识可不牢靠了，大学里上就正经上过一个 CS 入门课。当然也不是说我基础知识啥都不会，七七八八自学了一些，但是跟科班出身的，尤其是我那帮 MIT 毕业的同事比还是比较自卑的... 买了 CLRS 和 SICP 从来没看完... 回到主题，我是觉得『前端…

<a href="/question/35703265/answer/64229731" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-18" target="_blank" href="/question/35703265/answer/64229731">编辑于 2015-09-22</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6487997"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>24 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="329" data-type="Answer">
<link itemprop="url" href="/question/35393465/answer/62859372">
<meta itemprop="answer-id" content="20557409" />
<meta itemprop="answer-url-token" content="62859372" />
<meta itemprop="answerCount" content="6" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35393465" target="_blank" data-id="6363997" data-za-element-name="Title">
拉勾网的前端架构是怎样的？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35393465/answer/62859372">
<!-- <meta itemprop="answer-id" content="20557409">
<meta itemprop="answer-url-token" content="62859372"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$wang-jin-liang-69"
target="_blank" href="/people/wang-jin-liang-69"
>王金亮</a></span><span title="前端工程师" class="bio">
前端工程师
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6363997" data-action="/answer/content" data-author-name="王金亮" data-entry-url="/question/35393465/answer/62859372">

<textarea hidden class="content">先自我介绍下，拉勾的前端程序员，也就是某匿名的那位同学所说的几个渣的程序猿之一。话说真没想到竟然会有人提问拉勾网的前端架构是怎么样的？对支付宝美团这样的大厂小厂来说，我们也就是个作坊吧，笑。&lt;br&gt;言归正传，简单的介绍下拉勾前端的演变过程吧&lt;br&gt;&lt;br&gt;第一个阶段，拉勾网2013年7月上线后大概一年的时间内，那时的业务逻辑很简单，页面也很少，根本谈不上什么架构，基本jquery加上jquery的各种插件就可以搞定，开发的流程也是后端开发完了前端再来的原始方式。&lt;br&gt;&lt;br&gt;第二个阶段，到今年的上半年，拉勾网在这期间快速成长着，拉勾网的业务逻辑也变的越来越复杂，功能越来越多，前端的开发上也暴露出了很多问题，就像上面的那位同学说的，页面有许多能够优化的地方，而且原来的那种后端开发完了前端再来的开发模式也显得越来越低效，跟不上整个拉勾产品的需求。&lt;br&gt;那这个时候，拉勾的前端同学除了埋头于业务线还做了什么呢？我们做了一个可以脱离后端开发的前端集成环境：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Lagou-Frontend/idt&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lagou-Frontend/idt · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，可以提供调试的web服务，可以写mock数据来解析velocity模版，可以打包压缩，使前端能够完全独立于后端并行开发，我们的开发流程变为前后端定接口---独立开发---连调上线，而我们的开发方式也进化为用less作为css预处理器，用amd来进行模块化开发，大量的使用前端模版，开发如弹出框，分页，轮播等等组件，今年上半年拉勾的主要产品：搜索结果页改版，公司主页改版，公司列表页改版都使用了这样的开发模式。&lt;br&gt;&lt;br&gt;第三个阶段，从今天下半年开始，拉勾准备将之前旧模式下开发的页面使用新的开发方式进行拆分，而我们的前端集成解决方案也准备替换为基于fis3的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Lagou-Frontend/normae&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Lagou-Frontend/normae · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，更好的本地调试功能：实时刷新，模拟url转发，更好的页面性能优化：打包，压缩，精灵图合成，更好的发布方式，md5戳非覆盖式的部署，远程部署，而我们所有的静态资源也将发布到static.lagou.com上，我们也正在制定拉勾的UI规范，搭建组件库，让拉勾前端的整个工作流程更加的规范高效。&lt;br&gt;当然了，我们要做的远不止于此，拉勾的C端B端拆分后，我们会尝试MV*框架，最近也一直在进行技术选型，是最流行的angular，还是朴实实用的mvvm框架，抑或是大胆的尝试下React？对了，我们还有大前端的野心，用node做中间层，我们自己来搞定view层，再也不用纠结什么前后端模版了。当然这个目标还稍显遥远，目前node在拉勾前端还仅限于一些构建工具的搭建。&lt;br&gt;&lt;br&gt;因为各种各样的原因吧，拉勾目前接近10人的前端团队还是非常年轻的，我们知道拉勾网的页面有许多待优化的问题，也懂得我们也许应该尝试更好的架构，但是可惜拉勾并不是一个技术驱动的公司，应该说是产品驱动吧，在以前，我们可能真的没有时间进行大量的基础性技术建设，用昨天开会时eric的话说，就是我们需要一边开车一边修车，笑。但是随着我们team的壮大，开发效率的提高，我们接下来要真的去做很多事了。而且我相信在拉勾网整个前端优化的过程中，我们的团队也将获得很大的成长。&lt;br&gt;&lt;br&gt;至于说我们渣不渣什么的，在我看来真的不重要，现在做得不好就是做的不好，但是我们依然在努力着，我们相信就算是作坊，只要用心有一天也能做出漂漂亮亮的东西，话又说回来说不定哪天就不是作坊了呢？</textarea>


<div class="zh-summary summary clearfix">

先自我介绍下，拉勾的前端程序员，也就是某匿名的那位同学所说的几个渣的程序猿之一。话说真没想到竟然会有人提问拉勾网的前端架构是怎么样的？对支付宝美团这样的大厂小厂来说，我们也就是个作坊吧，笑。 言归正传，简单的介绍下拉勾前端的演变过程吧 第一…

<a href="/question/35393465/answer/62859372" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-08" target="_blank" href="/question/35393465/answer/62859372">编辑于 2015-09-22</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6363997"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>63 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="330" data-type="Answer">
<link itemprop="url" href="/question/19647719/answer/16843974">
<meta itemprop="answer-id" content="1870399" />
<meta itemprop="answer-url-token" content="16843974" />
<meta itemprop="answerCount" content="33" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/19647719" target="_blank" data-id="38996" data-za-element-name="Title">
怎样下载 Youtube 视频的字幕？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/19647719/answer/16843974">
<!-- <meta itemprop="answer-id" content="1870399">
<meta itemprop="answer-url-token" content="16843974"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$1c78"
target="_blank" href="/people/1c78"
>郑诚</a></span><span title="http://www.onereco.com/u/1c7" class="bio">
<a href="//link.zhihu.com/?target=http%3A//www.onereco.com/u/1c7" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://www.</span><span class="visible">onereco.com/u/1c7</span><span class="invisible"></span><i class="icon-external"></i></a>
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="38996" data-action="/answer/content" data-author-name="郑诚" data-entry-url="/question/19647719/answer/16843974">

<textarea hidden class="content">&lt;b&gt;【第1步】&lt;/b&gt;：&lt;br&gt;    安装 &lt;strong&gt;Chrome 浏览器&lt;/strong&gt;&lt;strong&gt;（网址需翻墙）&lt;/strong&gt;&lt;strong&gt;：&lt;/strong&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.google.com/chrome/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;google.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;strong&gt;【第2步】&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;安装 Tampermonkey 扩展（网址需翻墙）：&lt;/strong&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo%3Fhl%3Den&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;google.com 的页面&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;【第3步】：&lt;/b&gt;&lt;br&gt;    使用下面这 2 个链接安装，( 这是一键安装地址，点进去之后点击绿色按钮 &quot;安装此脚本&quot; ）&lt;br&gt;（2 个链接的原因是这是 2 个程序）&lt;br&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//greasyfork.org/zh-CN/scripts/5368-youtube-subtitle-downloader-v2&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;greasyfork.org/zh-CN/sc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ripts/5368-youtube-subtitle-downloader-v2&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//greasyfork.org/zh-CN/scripts/5367-youtube-auto-subtitle-downloader&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;greasyfork.org/zh-CN/sc&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ripts/5367-youtube-auto-subtitle-downloader&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;点击绿色安装按钮之后，会显示下图：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-45ab303fad32246bdc3142b4b491c958_b.png&quot; data-rawwidth=&quot;2652&quot; data-rawheight=&quot;1602&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2652&quot; data-original=&quot;https://pic1.zhimg.com/v2-45ab303fad32246bdc3142b4b491c958_r.png&quot;&gt;点击“安装”即可。&lt;br&gt;&lt;br&gt;可以了，现在你可以直接访问想下载的视频，就有下载按钮了。&lt;br&gt;&lt;br&gt;说明：&lt;br&gt;Youtube 有【完整字幕】和【自动字幕】，两种。装了俩程序之后，就都能下载了。&lt;br&gt;&lt;br&gt;俩程序都安装后长这样：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/fe3ab5c87d3230731d68260f56de86e1_b.jpg&quot; data-rawwidth=&quot;899&quot; data-rawheight=&quot;531&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;899&quot; data-original=&quot;https://pic2.zhimg.com/fe3ab5c87d3230731d68260f56de86e1_r.jpg&quot;&gt;&lt;br&gt;-----&lt;br&gt;&lt;br&gt;&lt;i&gt;最后（此节适合程序员看）&lt;/i&gt;&lt;br&gt;( 没时间做 Firefox + Greasemonkey 扩展 的兼容。抱歉。 )&lt;br&gt;( 要是有人改进了程序，修复了 Firefox 兼容性问题，麻烦给个 pull request ，感谢！&lt;br&gt;Github 地址：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/1c7/Youtube-Auto-Subtitle-Download&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;1c7/Youtube-Auto-Subtitle-Download · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; )&lt;br&gt;&lt;br&gt;常见问题：&lt;br&gt;1. Mac 是否可以安装？&lt;br&gt;答案：Windows, Mac, Linux 均可使用，和操作系统无关。只要用 Chrome 浏览器就行&lt;br&gt;&lt;br&gt;2. 我为什么不能用？&lt;br&gt;答案：把 Youtube 视频连接留言给我，我测一下，然后帮你排除问题。最后让你能用。&lt;br&gt;&lt;br&gt;--- 使用注意&lt;br&gt;根据用户 &lt;a href=&quot;http://www.zhihu.com/people/tan-jing-tian&quot; class=&quot;internal&quot;&gt;谭景天&lt;/a&gt; 反馈：国产广告拦截插件 adsafe，会拦截下载字幕插件，请使用了 adsafe 插件的朋友使用时下载字幕插件前，先将adsafe关闭。&lt;br&gt;&lt;br&gt;&lt;br&gt;备注2：下图这种字幕是内嵌到视频里的，无法下载是正常情况。&lt;br&gt;例子的视频连接：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3DEgqQmupSvGk%26list%3DPLGWFylhfxv0T6B5VS4HypSZ73ZPFlEJcU%26index%3D1&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;youtube.com/watch?&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;v=EgqQmupSvGk&amp;amp;list=PLGWFylhfxv0T6B5VS4HypSZ73ZPFlEJcU&amp;amp;index=1&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-314fbd33af08e63dbc87cd9df926c72b_b.png&quot; data-rawwidth=&quot;2282&quot; data-rawheight=&quot;1350&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2282&quot; data-original=&quot;https://pic4.zhimg.com/v2-314fbd33af08e63dbc87cd9df926c72b_r.png&quot;&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic1.zhimg.com/v2-45ab303fad32246bdc3142b4b491c958_200x112.png" data-rawwidth="2652" data-rawheight="1602" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic1.zhimg.com/v2-45ab303fad32246bdc3142b4b491c958_r.png">
<b>【第1步】</b>： 安装 <strong>Chrome 浏览器</strong><strong>（网址需翻墙）</strong><strong>：</strong><b><a href="//link.zhihu.com/?target=https%3A//www.google.com/chrome/" class=" wrap external" target="_blank" rel="nofollow noreferrer">google.com 的页面<i class="icon-external"></i></a></b> <strong>【第2步】</strong> <strong>安装 Tampermonkey 扩展（网址需翻墙）：</strong><b><a href="//link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo%3Fhl%3Den" class=" wrap external" target="_blank" rel="nofollow noreferrer">google.com 的页面<i class="icon-external"></i></a></b> <b>【第3步】：</b> 使用下面这 2 个链接安装，( 这是一键安装地址，点进去之后点击绿色按钮 "安装此脚本" ） （2 个链接的…

<a href="/question/19647719/answer/16843974" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2013-04-28" target="_blank" href="/question/19647719/answer/16843974">编辑于 2017-02-02</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-38996"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>311 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="331" data-type="Answer">
<link itemprop="url" href="/question/23509846/answer/24806784">
<meta itemprop="answer-id" content="5215155" />
<meta itemprop="answer-url-token" content="24806784" />
<meta itemprop="answerCount" content="75" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/23509846" target="_blank" data-id="1585269" data-za-element-name="Title">
为什么部分开发工程师不喜欢调节界面的 UI 细节？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/23509846/answer/24806784">
<!-- <meta itemprop="answer-id" content="5215155">
<meta itemprop="answer-url-token" content="24806784"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$excited-vczh"
target="_blank" href="/people/excited-vczh"
>vczh</a></span><span title="专业造轮子，拉黑抢前排。gaclib.net" class="bio">
专业造轮子，拉黑抢前排。…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1585269" data-action="/answer/content" data-author-name="vczh" data-entry-url="/question/23509846/answer/24806784">

<textarea hidden class="content">&lt;p&gt;09年的时候我进SQLServer，跟一个全身都是毛的法国美工兼UX一起合作，开发SQLServer Management Studio里面的一个高大上的功能。法国人就是浪漫啊，整天异想天开，最后做出来的东西，理念跟windows phone那个滑来滑去的UI十分接近。那个时候windows phone都还不知道在哪。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blogs.msdn.com/b/extended_events/archive/2011/07/13/introducing-the-extended-events-user-interface.aspx&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Introducing the Extended Events User Interface&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 嗯，就是这个了。光看截图看不出那种动感，还得自己把玩一下才能体验到。&lt;/p&gt;&lt;br&gt;&lt;p&gt;调整UI的过程花了半年。那个法国人每个星期都会给我们一个新的稿件。稿件里面写的很详细，每一个按钮有多大，文字字体多大，间距多大，颜色的RGB，还有图片都自己切出来附赠给我们。人家还是相当的负责人的。但是实现这个东西他妈的就是工作量巨大啊。做他那个东西还要用Windows Forms上写动画（不像WPF那么容易一撸就出来），还得在注释里面画v-t图来注释代码。&lt;/p&gt;&lt;br&gt;&lt;p&gt;整个过程差不多如下：&lt;/p&gt;&lt;p&gt;1、法国人来找我，展示新的稿件&lt;/p&gt;&lt;p&gt;2、我实现&lt;/p&gt;&lt;p&gt;3、法国人跑来检查这个活的设计&lt;/p&gt;&lt;p&gt;4、法国人意识到了自己的某些设计错误，回去改&lt;/p&gt;&lt;br&gt;&lt;p&gt;其实这反映出一个什么问题呢，就是&lt;b&gt;UX自己设计的东西不会动，没有交互感，所以非得我们做了出来，他才能真正地感受到他自己的设计有多么的牛逼或者愚蠢&lt;/b&gt;。于是返工了几十遍，人家才满意。也就是说，我的工作时间有相当一部分都在陪他设计，卧槽我当然不愿意啦。&lt;/p&gt;&lt;br&gt;&lt;p&gt;微软自己的程序员也感到很痛苦，于是现在WPF啊、Windows Phone啊、Windows 8 Metro什么的都可以用Blend for Visual Studio来开发。这是一个完美的美工做活UI，程序员写View Model和data binding然后组成一个程序的良好方法。如果美工会用的话，就不需要总是让程序员去实现，从而可以审视自己的设计了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;不过也只有WPF配合Blend有这个功能。其他所有的东西，包括Windows Forms、MFC、HTML5什么的，都没有类似的适合非程序员用的designer，因此程序员们还得继续苦逼下去。&lt;/p&gt;&lt;br&gt;&lt;p&gt;==============================================&lt;/p&gt;&lt;br&gt;&lt;p&gt;于是，要如何让程序员有积极性呢？只有两种方法：&lt;/p&gt;&lt;br&gt;&lt;p&gt;1、用Blend来开发。其实现在微软出了&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/winjs/winjs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;winjs/winjs 路 GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，代表Blend的那个javascript Win8 Metro app的功能可以直接搬到浏览器上来用了，也就是说Blend也可以用来写网站了，做完了之后稍微改几个css和js的path就可以直接运行了。&lt;b&gt;美工也可以自己做界面了，然后程序员做data binding，用MVVM，最后组合成一个具有真实的交互功能的网站&lt;/b&gt;。如果你们做的是Windows平台的程序那就更得用Blend了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;2、多请吃饭。&lt;/p&gt;</textarea>


<div class="zh-summary summary clearfix">

09年的时候我进SQLServer，跟一个全身都是毛的法国美工兼UX一起合作，开发SQLServer Management Studio里面的一个高大上的功能。法国人就是浪漫啊，整天异想天开，最后做出来的东西，理念跟windows phone那个滑来滑去的UI十分接近。那个时候windows phone都…

<a href="/question/23509846/answer/24806784" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-04-23" target="_blank" href="/question/23509846/answer/24806784">编辑于 2014-04-23</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1585269"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>32 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="332" data-type="Answer">
<link itemprop="url" href="/question/46939006/answer/108635330">
<meta itemprop="answer-id" content="38923320" />
<meta itemprop="answer-url-token" content="108635330" />
<meta itemprop="answerCount" content="47" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/46939006" target="_blank" data-id="10989500" data-za-element-name="Title">
国内有什么好的前端学习网站推荐？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/46939006/answer/108635330">
<!-- <meta itemprop="answer-id" content="38923320">
<meta itemprop="answer-url-token" content="108635330"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>275</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">275</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$jy1234"
target="_blank" href="/people/jy1234"
>笑笑</a></span><span title="coding with passion." class="bio">
coding with passion.
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="275" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">275</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="10989500" data-action="/answer/content" data-author-name="笑笑" data-entry-url="/question/46939006/answer/108635330">

<textarea hidden class="content">&lt;b&gt;2016.7.4 16:04----------------想不到来了那么多赞,我会一直update的,共勉----------------------------------&lt;/b&gt;&lt;br&gt;目录&lt;ul&gt;&lt;li&gt;&lt;p&gt;免费IT学习社区&lt;/p&gt;&lt;ul&gt;&lt;li&gt;慕课网: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.imooc.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;慕课网(IMOOC)-国内最大的IT技能学习平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;极客学院: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jikexueyuan.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.jikexueyuan.com&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;麦子学院: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.maiziedu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;麦子学院 - 专业IT职业在线教育平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;FreeCodeCamp: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.freecodecamp.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;freecodecamp.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;FreeCodeCamp中文: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.freecodecamp.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Learn to Code and Help Nonprofits&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;汇智网: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.hubwiz.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;汇智网 - 最前沿的在线互动编程学习平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;实验楼: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.shiyanlou.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;实验楼 - 国内领先的IT技术实训平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;伯乐在线: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jobbole.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;伯乐在线&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;博学谷: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//dvd.boxuegu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;博学谷视频库-免费提供java视频,大数据视频,web前端视频,php视频,C/C++视频,iOS视频,网页设计视频,平面设计视频,UI设计视频,游戏开发视频,网络营销视频&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;CSDN知识库: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//lib.csdn.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;知识库 - 你身边的技术百科全书&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;GitBook: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.gitbook.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitBook · Writing made easy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;看云文档: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.kancloud.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;看云 | 专注技术文档在线创作、阅读、分享和托管&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;博客园:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;博客园 - 开发者的网上家园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;CSDN: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.csdn.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSDN.NET - 全球最大中文IT社区，为IT专业技术人员提供最全面的信息传播和服务平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;菜鸟教程: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//runoob.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;菜鸟教程 - 学的不仅是技术，更是梦想！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;简书程序员专题: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jianshu.com/collection/NEt52a&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;程序员 - 专题&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;开发者头条: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//toutiao.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;开发者头条 - 程序员分享平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;掘金: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//gold.xitu.io/explore/all&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;掘金&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;各大名校的公开课&lt;/p&gt;&lt;ul&gt;&lt;li&gt;网易云课堂大学计算机课程: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//study.163.com/curricula/cs.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;大学计算机专业&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;学堂在线计算机课程: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.xuetangx.com/courses%3Fcid%3D117&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;学堂在线-最大的中文慕课(MOOC)平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;哈佛大学公开课-计算机科学cs50: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//open.163.com/special/opencourse/cs50.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;哈佛大学公开课：计算机科学cs50_全20集&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;麻省理工学院公开课-计算机科学及编程导论: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//open.163.com/special/opencourse/bianchengdaolun.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;麻省理工学院公开课：计算机科学及编程导论&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;学习路线和方法&lt;/p&gt;&lt;ul&gt;&lt;li&gt;编程入门指南: &lt;a href=&quot;https://zhuanlan.zhihu.com/p/19959253&quot; class=&quot;internal&quot;&gt;知乎专栏&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;微信公众号/订阅号&lt;/p&gt;&lt;ul&gt;&lt;li&gt;菜鸟教程: runoob&lt;/li&gt;&lt;li&gt;程序人生: coder_life&lt;/li&gt;&lt;li&gt;前端大全: FrontDev&lt;/li&gt;&lt;li&gt;前端早读课: FeZaoDuKe&lt;/li&gt;&lt;li&gt;算法爱好者: AlgorithmFans&lt;/li&gt;&lt;li&gt;算法与数学之美: MathAndAlgorithm&lt;/li&gt;&lt;li&gt;InfoQ: infoqchina&lt;/li&gt;&lt;li&gt;Node地下铁: Node-Subway&lt;/li&gt;&lt;li&gt;SegmentFault&lt;/li&gt;&lt;li&gt;数据库开发: DBDevs&lt;/li&gt;&lt;li&gt;我是架构师: Architect-msup&lt;/li&gt;&lt;li&gt;云计算头条: chinacloudnj&lt;/li&gt;&lt;li&gt;W3cplus: w3cplus_12&lt;/li&gt;&lt;li&gt;架构师: JiaGouX&lt;/li&gt;&lt;li&gt;Docker: dockerone&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Web前端&lt;/p&gt;&lt;ul&gt;&lt;li&gt;W3cplus: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3cplus.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;w3cplus_引领web前沿，打造前端精品教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;W3cfuns: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3cfuns.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端网（W3Cfuns）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;DIV.io: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//div.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Div.IO&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;CNode社区: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//cnodejs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CNode：Node.js专业中文社区&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;前端乱炖: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.html-js.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://www.html-js.com&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;极客标签: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.gbtags.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 极客标签&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;前端观察: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.qianduan.net/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://www.qianduan.net&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;前端里: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.yyyweb.com/front&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端开发 | 前端里&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;前端教程文档&lt;ul&gt;&lt;li&gt;ES5: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//es5.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Annotated ES5&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;ES5中文: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.w3.org/html/ig/zh/wiki/ES5&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ES5 - HTML5 Chinese  Interest Group Wiki&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;MDN Web: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Web 技术文档&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;MDN ES5: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//people.mozilla.org/%7Ejorendorff/es5.1-final.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;people.mozilla.org/~jor&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;endorff/es5.1-final.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;颜海镜ES5: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//yanhaijing.com/es5/%23book&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;yanhaijing.com/es5/#&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;阮一峰Javascript教程: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//javascript.ruanyifeng.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;javascript.ruanyifeng.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;阮一峰ES6: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//es6.ruanyifeng.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://es6.ruanyifeng.com&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;HTML当前标准:&lt;a href=&quot;//link.zhihu.com/?target=https%3A//html.spec.whatwg.org/multipage/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;html.spec.whatwg.org/mu&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ltipage/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Html5标准:&lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3c.github.io/html/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;w3c.github.io/html/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;css标准: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.w3.org/Style/CSS/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;w3.org/Style/CSS/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;W3CHelp: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//w3help.org/zh-cn/kb/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;w3help.org/zh-cn/kb/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/sunyuanSoftware/itshare&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - sunyuanSoftware/itshare: 持续更新,免费的IT学习资源分享,包括IT书籍,社区,课程,解决方案,牛人等等&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>


<div class="zh-summary summary clearfix">

<b>2016.7.4 16:04----------------想不到来了那么多赞,我会一直update的,共勉----------------------------------</b> 目录免费IT学习社区慕课网: <a href="//link.zhihu.com/?target=http%3A//www.imooc.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">慕课网(IMOOC)-国内最大的IT技能学习平台<i class="icon-external"></i></a>极客学院: <a href="//link.zhihu.com/?target=http%3A//www.jikexueyuan.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">http://www.jikexueyuan.com<i class="icon-external"></i></a>麦子学院: <a href="//link.zhihu.com/?target=http%3A//www.maiziedu.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">麦子学院 - 专业IT职业在…<i class="icon-external"></i></a>

<a href="/question/46939006/answer/108635330" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-06-30" target="_blank" href="/question/46939006/answer/108635330">编辑于 2016-07-04</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-10989500"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>12 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="333" data-type="Answer">
<link itemprop="url" href="/question/50244455/answer/120586048">
<meta itemprop="answer-id" content="43724828" />
<meta itemprop="answer-url-token" content="120586048" />
<meta itemprop="answerCount" content="107" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/50244455" target="_blank" data-id="12314487" data-za-element-name="Title">
参加 宁JS（JSConf CN 2016）是个什么样的体验？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/50244455/answer/120586048">
<!-- <meta itemprop="answer-id" content="43724828">
<meta itemprop="answer-url-token" content="120586048"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>274</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">274</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$thejameskyle"
target="_blank" href="/people/thejameskyle"
>James Kyle</a></span><span title="Engineer at Facebook working on Flow" class="bio">
Engineer at Facebook working on Flow
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="274" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">274</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="12314487" data-action="/answer/content" data-author-name="James Kyle" data-entry-url="/question/50244455/answer/120586048">

<textarea hidden class="content">Hi all,&lt;br&gt;&lt;br&gt;Thank you all for having me in Nanjing for NingJS. It was an awesome conference!&lt;br&gt;&lt;br&gt;It was a very interesting experience not speaking the same language as everyone else, and I can appreciate what it must be like for you all when trying to contribute on GitHub and get help on Stack Overflow.&lt;br&gt;&lt;br&gt;I can see in this thread that you all said my PPT hurt your eyes. Well I think my presentation was beautiful in it's own way...&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/888b122fe5c438465053d476e27fecce_b.png&quot; data-rawwidth=&quot;1024&quot; data-rawheight=&quot;768&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1024&quot; data-original=&quot;https://pic3.zhimg.com/888b122fe5c438465053d476e27fecce_r.png&quot;&gt;&lt;br&gt;Although, I'll admit they aren't my best work. I've spent much more time on some of my other slides:&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/ba9a5c776865982d853349316981e32b_b.png&quot; data-rawwidth=&quot;1200&quot; data-rawheight=&quot;900&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1200&quot; data-original=&quot;https://pic4.zhimg.com/ba9a5c776865982d853349316981e32b_r.png&quot;&gt;&lt;br&gt;See! I &lt;i&gt;can&lt;/i&gt; draw... sort of...&lt;br&gt;&lt;br&gt;It was great meeting you all. I especially enjoyed all the people that came up to me to take my photo. This hasn't happened to me anywhere else I have visited in the world.&lt;br&gt;&lt;br&gt;Then there was the woman who came up to me, grabbed my stomach, shook it, and said &quot;You are so cute&quot;. Whoever you are you have made all my friends at home laugh.&lt;br&gt;&lt;br&gt;Again thank you all for having me, I enjoyed the conference thoroughly, I hope to visit again in the future.</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/888b122fe5c438465053d476e27fecce_200x112.png" data-rawwidth="1024" data-rawheight="768" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/888b122fe5c438465053d476e27fecce_r.png">
Hi all, Thank you all for having me in Nanjing for NingJS. It was an awesome conference! It was a very interesting experience not speaking the same language as everyone else, and I can appreciate what it must be like for you all when tryi…

<a href="/question/50244455/answer/120586048" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/50244455/answer/120586048">发布于 2016-09-05</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-12314487"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>46 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="334" data-type="Answer">
<link itemprop="url" href="/question/20241338/answer/16713091">
<meta itemprop="answer-id" content="1817423" />
<meta itemprop="answer-url-token" content="16713091" />
<meta itemprop="answerCount" content="59" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20241338" target="_blank" data-id="276648" data-za-element-name="Title">
前端工程师都有用哪些比较靠谱的小工具？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20241338/answer/16713091">
<!-- <meta itemprop="answer-id" content="1817423">
<meta itemprop="answer-url-token" content="16713091"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>273</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">273</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$zeke"
target="_blank" href="/people/zeke"
>赵望野</a></span><span title="会做一点前端" class="bio">
会做一点前端
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="273" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">273</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="276648" data-action="/answer/content" data-author-name="赵望野" data-entry-url="/question/20241338/answer/16713091">

<textarea hidden class="content">除去 Chrome Developer Tools 以外，常用的还有下面这些：&lt;br&gt;&lt;ul&gt;&lt;li&gt;Fetcher: 一个 HTTP Client，可以发送各种 HTTP 请求，用来调试 API 很方便 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//itunes.apple.com/us/app/fetcher/id440113616%3Fmt%3D12&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;itunes.apple.com/us/app&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/fetcher/id440113616?mt=12&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Charles: Mac 下的 Fiddler，比 Fiddler 还好用些，目前不支持 Retina 屏幕，略挫 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.charlesproxy.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Charles Web Debugging Proxy • HTTP Monitor / HTTP Proxy / HTTPS &amp;amp; SSL Proxy / Reverse Proxy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;Frank DeLoupe: 支持 Retina 的屏幕拾色器，吐血推荐 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//jumpzero.com/frank/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Frank DeLoupe&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;xScope: 每个前端工程师心中都有一把尺子 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//xscopeapp.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;xScope&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Synergy: 在多台电脑间共享键盘和鼠标，只有一个系统一台显示器的前端工程师不是好厨子 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//synergy-foss.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Synergy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Kaleidoscope: 最好用的 Diff 工具，没有之一 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.kaleidoscopeapp.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Kaleidoscope&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;iA Writer: Markdown 写文档的工具，开始写文档的那天就是一个前端工程师走向成熟的标志 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iawriter.com/mac/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;iA Writer for Mac&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Tower: Git 的 GUI 工具，支持 GitHub，而且比 GitHub 自己的客户端功能要强大，推荐使用 Git 又对 terminal 命令没有强迫症的人使用 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.git-tower.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tower - The most powerful Git client for Mac&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Dash: 各种语言和工具、框架的文档 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//itunes.apple.com/us/app/dash-docs-snippets/id458034879%3Fmt%3D12&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;itunes.apple.com/us/app&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/dash-docs-snippets/id458034879?mt=12&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;指列举了一些常用的开发工具，还有很多 productivity 类的和编辑器就木有写了，看个人喜好。&lt;br&gt;&lt;br&gt;=============================== 2014.8.15 更新&lt;br&gt;&lt;br&gt;不知道为啥这么老的问题最近又被翻出来了...那就顺手更新一下吧。&lt;br&gt;&lt;ul&gt;&lt;li&gt;Fetcher 替换成了 Postman: 尤其是 Packaged App 的版本，功能上比 Fetcher 有很大提升 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm%3Fhl%3Den&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;chrome.google.com/webst&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;iTerm2 + oh my zsh: 终端其实对前端开发并不是必须的东西，完全不用也有各种 GUI 工具可以帮助你完成任务，但是用过的人才知道这个看起来最原始的东西却能极大提高生产力。而 iTerm2 + oh my zsh 的组合才是真正给人用的终端，称为神器应该没人反对吧？&lt;a href=&quot;//link.zhihu.com/?target=http%3A//iterm2.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;iTerm2 - Mac OS Terminal Replacement&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/robbyrussell/oh-my-zsh&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;robbyrussell/oh-my-zsh · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Skitch: 其实截图工具在 QQ 有了 Mac 版本之后就不是那么重要了，但是 Skitch 却始终在我的工具名单上，除了强大的标注功能外，还能和 Evernote 整合，一旦习惯了就很难离开。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//evernote.com/skitch/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Skitch | Evernote&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Archy: 严格来讲 Archy 是一个 productivity 类的软件，之前说了这个答案只推荐前端开发相关的工具，但是鉴于文档和开发息息相关，还是把它写上来了。重度依赖 Google Drive 的人会爱上这个工具的。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.archyapp.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Archy - Rediscover Google Drive&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;ControlPlane: 最初用这个 app 是想在不同的 Wi-Fi 环境下自动切换 location 达到不用手动切换代理的目的，后来发现这个 app 的功能非常强大，拿来模拟各种网络环境、切换测试网络等等都是可以的，玩法多样，大家自己探索吧。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.controlplaneapp.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;ControlPlane&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</textarea>


<div class="zh-summary summary clearfix">

除去 Chrome Developer Tools 以外，常用的还有下面这些： Fetcher: 一个 HTTP Client，可以发送各种 HTTP 请求，用来调试 API 很方便 <a href="//link.zhihu.com/?target=https%3A//itunes.apple.com/us/app/fetcher/id440113616%3Fmt%3D12" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">itunes.apple.com/us/app</span><span class="invisible">/fetcher/id440113616?mt=12</span><span class="ellipsis"></span><i class="icon-external"></i></a> Charles: Mac 下的 Fiddler，比 Fiddler 还好用些，目前不支持 Retina 屏幕，略挫 <a href="//link.zhihu.com/?target=http%3A//www.charlesproxy.com/" class=" wrap external" target="_blank" rel="nofollow noreferrer">Charles Web De…<i class="icon-external"></i></a>

<a href="/question/20241338/answer/16713091" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2013-04-16" target="_blank" href="/question/20241338/answer/16713091">编辑于 2016-09-12</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-276648"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>15 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="335" data-type="Answer">
<link itemprop="url" href="/question/21297636/answer/48013523">
<meta itemprop="answer-id" content="14603202" />
<meta itemprop="answer-url-token" content="48013523" />
<meta itemprop="answerCount" content="28" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/21297636" target="_blank" data-id="699735" data-za-element-name="Title">
在前端领域，国内和国外的的互联网公司有差距吗？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/21297636/answer/48013523">
<!-- <meta itemprop="answer-id" content="14603202">
<meta itemprop="answer-url-token" content="48013523"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>270</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">270</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">
<span class="name">匿名用户</span>
</div>

<div class="zm-item-vote-info" data-votecount="270" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">270</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="699735" data-action="/answer/content" data-author-name="匿名用户" data-entry-url="/question/21297636/answer/48013523">

<textarea hidden class="content">看到很多人说差距不大，我想说一句：哪来的自信？当然我对比的是国外顶尖的公司如FLAG等。如果你说在全世界包括亚非拉国家的互联网公司里我们是排名前列的所以我们世界领先，那当我没说。&lt;br&gt;&lt;br&gt;在我看来，差距太大了。不是说技术上的或者工程师代码能力什么上面的差距，而是说，&lt;b&gt;前端技术发展日新月异，而我们基本处于跟随的状态。能够作为前端发展里程碑的创新，我们基本是零。&lt;/b&gt;&lt;br&gt;&lt;br&gt;什么是里程碑式的创新呢？ &lt;br&gt;&lt;br&gt;比如 jQuery。&lt;br&gt;比如颠覆前端开发体验的 MVVM 框架。Google 发扬光大的。&lt;br&gt;比如 Facebook 的 React。&lt;br&gt;比如JS模块加载器、AMD 规范等。&lt;br&gt;比如 node，基于 node 的比如express，koa等框架。npm 上排名前十的库，没一个是我们主导的。&lt;br&gt;比如 css 预处理器。&lt;br&gt;&lt;br&gt;所有上述的这些，从技术上说，没有什么我们做不出来的。以加载器为例，我们有很牛逼的工程师做出来的加载器可以在性能上超越 requireJS，我们也有基于 AMD 进行局部创新的 CMD。但是，为什么？ 为什么上面几乎没有一个东西是我们首创的？重复造轮子是容易的，但是造一个从来没有过的轮子，这事我们没干过。&lt;br&gt;&lt;br&gt;往大了说，他们发明了万维网，发明了HTML，开发了性能卓越的浏览器。我们呢？做浏览器也是在他们的内核上套个壳。&lt;br&gt;&lt;br&gt;一个外国人用了几天时间，折腾出了一个 Javascript。然后我们的人花好几年的时间去熟悉它，然后可以被称为语言大师。Google研发了 V8 引擎将它的性能提高好几倍。而我们要是看过 V8 源代码都算大神了。&lt;br&gt;&lt;br&gt;个人认为不光是前端，整个计算机科学技术的领域都是别人发明、主导、制定标准的，我们还处于跟随的状态。当然其实能跟上也不错了，至少比 CPU 制造什么的强不少。</textarea>


<div class="zh-summary summary clearfix">

看到很多人说差距不大，我想说一句：哪来的自信？当然我对比的是国外顶尖的公司如FLAG等。如果你说在全世界包括亚非拉国家的互联网公司里我们是排名前列的所以我们世界领先，那当我没说。 在我看来，差距太大了。不是说技术上的或者工程师代码能力什么上面…

<a href="/question/21297636/answer/48013523" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-05-16" target="_blank" href="/question/21297636/answer/48013523">编辑于 2015-05-17</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-699735"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>48 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="336" data-type="Answer">
<link itemprop="url" href="/question/35221839/answer/66825618">
<meta itemprop="answer-id" content="22148011" />
<meta itemprop="answer-url-token" content="66825618" />
<meta itemprop="answerCount" content="14" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/35221839" target="_blank" data-id="6295368" data-za-element-name="Title">
现在手机分辨率这么大，如何写响应式布局？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/35221839/answer/66825618">
<!-- <meta itemprop="answer-id" content="22148011">
<meta itemprop="answer-url-token" content="66825618"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>270</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">270</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$chenyulu"
target="_blank" href="/people/chenyulu"
>郑航</a></span><span title="宣戦布告！手当たり次第" class="bio">
宣戦布告！手当たり次第
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="270" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">270</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6295368" data-action="/answer/content" data-author-name="郑航" data-entry-url="/question/35221839/answer/66825618">

<textarea hidden class="content">首先需要了解几个概念：&lt;br&gt;&lt;br&gt;&lt;b&gt;像素（Pixel）&lt;br&gt;&lt;br&gt;&lt;/b&gt;一个显示屏的成像原理是通过一系列的&lt;b&gt;小点&lt;/b&gt;排列成一个大的矩形，不同的小点通过显示不同的颜色来显示成图像。这每一个小点被叫做一个&lt;b&gt;物理像素&lt;/b&gt;。以题主提到的小米4为例。小米4的屏幕，&lt;b&gt;分辨率&lt;/b&gt;是&lt;b&gt;1920设备像素*1080设备像素&lt;/b&gt;，意味着小米4手机横向上排列了1080个显像用的小点，在纵向上排列了1920个显像用的小点。另一个常见的数据叫&lt;b&gt;每英寸像素取值（Pixel per inch，简称PPI）&lt;/b&gt;，意思是&lt;b&gt;每一英寸内的物理像素数量，&lt;/b&gt;计算公式是&lt;br&gt;&lt;img data-rawheight=&quot;260&quot; data-rawwidth=&quot;600&quot; src=&quot;https://pic3.zhimg.com/c9386f0437e817eeaca3dd3e7a76781e_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;600&quot; data-original=&quot;https://pic3.zhimg.com/c9386f0437e817eeaca3dd3e7a76781e_r.jpg&quot;&gt;&lt;br&gt;公式中的&lt;b&gt;屏幕尺寸指的是屏幕对角线的长度&lt;/b&gt;。一个显示屏的PPI越高，说明在同一大小的屏幕上能显示更多物理像素，能给图像提供更多细节。&lt;br&gt;&lt;br&gt;&lt;b&gt;CSS像素&lt;br&gt;&lt;/b&gt;作为Web开发者我们整天在CSS里用&lt;b&gt;px&lt;/b&gt;作为长度单位&lt;b&gt;。&lt;/b&gt;这里的&lt;b&gt;px&lt;/b&gt;指的是&lt;b&gt;CSS像素&lt;/b&gt;。浏览器里的一切长度都是以CSS像素为单位的。在非高清屏幕以及未缩放浏览器的情况下，一个CSS像素等于一个物理像素；而在搭载了苹果公司的视网膜显示屏等高清屏幕（PPI特别高，一个屏幕上的物理像素点非常多）的设备上，如果一个CSS像素仍等于一个物理像素，那么网页上的各种元素就变得非常小，用户很难看清，因此高PPI的设备中，一个CSS像素通常等于两个甚至三个物理像素（浏览器自动设定，不同浏览器设定的会不一样）。如果一个CSS像素占用n个物理像素，那么我们就说此时的&lt;b&gt;dppx（dots per pixel）&lt;/b&gt;数为n。&lt;br&gt;&lt;br&gt;&lt;b&gt;dppx是一个单位。设备有多少dppx除了跟设备本身的PPI有关，也和当前的缩放状态有关&lt;/b&gt;，但总的来说不是前端开发者能控制的，而是浏览器厂商以及浏览器用户（通过缩放页面）控制的。桌面浏览器上，一个放大到200%的页面（假如设备不是高清屏），一个CSS像素此时等同于两个物理像素，即2dppx&lt;br&gt;&lt;br&gt;那么最后以一个例子来讲解以上的概念：&lt;br&gt;本人的笔记本电脑是宏基v5-573g高分屏版，分辨率1920物理像素*1080物理像素，对角线长度（即屏幕尺寸）15.3英寸，因此PPI为141.21。该PPI不算特别低（但比起移动设备来说真是弱爆了），因此在浏览器不缩放的情况下若一个CSS像素等于一个设备像素，那么因为页面尺寸过小，会影响我的浏览，所以火狐浏览器贴心地进行1.25dppx的设置，使得1CSS像素等于1.25物理像素（反观Chrome仍为1），以下是在火狐和chrome下，不进行任何缩放时浏览知乎的截图。&lt;br&gt;&lt;img data-rawheight=&quot;1080&quot; data-rawwidth=&quot;1920&quot; src=&quot;https://pic4.zhimg.com/4a4a03ab94b98e8667d52c4680c55b1f_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic4.zhimg.com/4a4a03ab94b98e8667d52c4680c55b1f_r.png&quot;&gt;&lt;img data-rawheight=&quot;1080&quot; data-rawwidth=&quot;1920&quot; src=&quot;https://pic1.zhimg.com/4f5ef684024cf3d24f81bab9f5c510cc_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1920&quot; data-original=&quot;https://pic1.zhimg.com/4f5ef684024cf3d24f81bab9f5c510cc_r.png&quot;&gt;&lt;br&gt;当我将火狐浏览器的缩放设置到200%时，dppx数即变成2.5&lt;br&gt;&lt;img data-rawheight=&quot;132&quot; data-rawwidth=&quot;1538&quot; src=&quot;https://pic1.zhimg.com/f2d6f71e86bec71917320609845316cc_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1538&quot; data-original=&quot;https://pic1.zhimg.com/f2d6f71e86bec71917320609845316cc_r.png&quot;&gt;是的，&lt;b&gt;可以说dppx可以看作devicePixelRatio（设备像素比，简称DPR）的单位&lt;/b&gt;，尽管DPR本身并不需要单位。综上可以看出，&lt;b&gt;DPR由浏览器厂商确定。&lt;br&gt;&lt;br&gt;&lt;/b&gt;dppx可以看作window.devicePixel的单位，&lt;b&gt;同时也可看作媒体查询中device-pixel-ratio的单位&lt;/b&gt;。但IE11及以下版本并不支持这个单位，此时使用不标准的单位：dpi（Dots per inch）来代替。1dppx=96dpi（这换算的过程不展开了，因为我也不清楚，直接拿来用似乎没问题，需要知道的是，dpi也有设备的物理dpi和做Web开发时的dpi的区别），因此兼容性好的媒体查询写法是（来源&lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//benfrain.com/a-full-vendor-stack-for-targeting-high-resolution-retina-devices/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;A full vendor stack for targeting High Resolution 'retina' devices&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min-resolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;192dpi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-webkit-min-device-pixel-ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min--moz-device-pixel-ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-o-min-device-pixel-ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min-device-pixel-ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;min-resolution&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;2dppx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;All&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;resolution&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;go&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;here&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;另外，以下内容也与DPR有关：&lt;br&gt;&lt;ul&gt;&lt;li&gt;CSS &lt;a href=&quot;//link.zhihu.com/?target=http%3A//dev.w3.org/csswg/css-images/%23image-set-notation&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;image-set&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 规范。&lt;/li&gt;&lt;li&gt;图片上的 &lt;a class=&quot; wrap external&quot; href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/html/wg/drafts/html/master/embedded-content.html%23attr-img-srcset&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;srcset&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 属性。&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;&lt;br&gt;视口（viewport）&lt;br&gt;&lt;br&gt;&lt;/b&gt;上面我们了解了设备的物理像素和CSS像素的区别&lt;b&gt;，&lt;/b&gt;以及用dppx来度量具体设备上两者的比&lt;b&gt;。&lt;/b&gt;接下来说说另一个重要概念：视口。&lt;br&gt;&lt;br&gt;视口在CSS里的定义是&lt;b&gt;&amp;lt;html&amp;gt;元素的包含块&lt;/b&gt;，称为&lt;b&gt;初始包含块&lt;/b&gt;。它的宽度&lt;b&gt;是所有CSS百分比宽度推算的根源&lt;/b&gt;。(块级元素的宽度默认为100%)&lt;br&gt;&lt;br&gt;&lt;b&gt;在桌面上，视口的宽度等同于浏览器窗口的宽度，高度即为浏览器窗口的高度。&lt;/b&gt;而在浏览器宽度通常为240px~640px的移动设备上也这样做的话，则会很不方便。为了适应为桌面浏览器设计的网站（这类网站使用固定布局，页面主体的宽度通常显式地设置在1000px上下），浏览器出现了&lt;b&gt;布局视口&lt;/b&gt;概念。与桌面浏览器不同的是，浏览器&lt;b&gt;默认的布局视口宽度&lt;/b&gt;&lt;b&gt;与浏览器宽度完全独立。&lt;/b&gt;通常是768px~1024px，最常见的是980px（默认的布局视口的高度，各手机各浏览器倒是没有个准。不过反正不重要），而桌面浏览器的布局视口的尺寸就是浏览器窗口的尺寸（其实桌面浏览器根本没有“布局视口”的概念，“视口”就是浏览器的窗口）。题主在题目中提到&lt;br&gt;&lt;blockquote&gt;bootstrap分别对应的是小屏幕768px，中屏幕992px，大屏幕1200px&lt;br&gt;&lt;/blockquote&gt;这里的768px、992px、1200px是指什么的尺寸呢？可以看到，这里使用了单位px，暗示着这些都是CSS像素，而不是设备的物理像素，因此Bootstrap对“屏幕尺寸”的定义与设备屏幕的分辨率无关。实际上，这里的尺寸指的是浏览器的布局视口尺寸。&lt;br&gt;&lt;br&gt;可以在meta标签内指定一个布局视口尺寸，而不是使用默认的尺寸：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=320&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;然而一般不指定具体宽度而是做如下设置：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width，initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这里的&lt;b&gt;device-width告诉浏览器，将布局视口的宽度设置为设备最理想的宽度（DPR是浏览器决定的，因此最理想宽度自然也是）。&lt;/b&gt;以iPhone6（设备像素：1334*750）来说，浏览器决定了DPR是2，因此最理想宽度是“750设备像素/2=375px”（布局视口高度则顺势变成了1334设备像素/2 = 667px）。宽度最理想，意味着用户无需缩放页面，因此很多手机浏览器（不含safari）在这样的设置下，不再具有300ms的click时延。该时延的本意就是用来判断用户是要click还是双击缩放页面。此处盗个图，红箭头指向的即DPR&lt;br&gt;&lt;img data-rawheight=&quot;181&quot; data-rawwidth=&quot;309&quot; src=&quot;https://pic2.zhimg.com/1a9fce62ee320582eae644260cc74eed_b.png&quot; class=&quot;content_image&quot; width=&quot;309&quot;&gt;&lt;br&gt;不同的设备有不同的理想宽度（同一设备的不同浏览器也有可能拥有不同的理想宽度，尽管这种现象极为极为罕见），且随着设备的横放竖放也会有所改变，因此通常不指定特定的尺寸，而是使用device-width进行自适应。宽度为理想宽度的布局视口叫做“&lt;b&gt;理想视口&lt;/b&gt;”&lt;br&gt;&lt;br&gt;当设备的横放、竖放方式被改变时，最佳DPR不变，布局视口宽度从&quot;手机宽度/最佳DPR&quot;变为&quot;手机长度/最佳DPR&quot;，且因布局视口宽度有变，浏览器会进行一次重排。不过iOS上
的Safari在旋转时不会改变布局视口的宽度（因此DPR提高了），除非在meta指令里设置了initial-scale=1&lt;br&gt;&lt;br&gt;&lt;b&gt;媒体查询中，min-width、max-width的查询即是对布局视口宽度的查询。&lt;/b&gt;因此若想通过媒体查询来实现响应式设计，应当设置一个设备的布局视口宽度，否则移动浏览器使用默认布局视口宽度（大都是980px）会使针对视口宽度的媒体查询无功而返。&lt;br&gt;&lt;br&gt;另有min-device-width、max-device-device的查询（本质上是screen.width的查询），对桌面浏览器的意义不大。在移动浏览器上，是对不随着设备的横屏、竖屏而改变的设备“最理想宽度”的查询。例如，iPhone6的“device-width”永远是375px，而它的“width”会随着横屏竖屏而改变。&lt;br&gt;&lt;b&gt;&lt;br&gt;总结&lt;/b&gt;&lt;br&gt;进行响应式的设计大概有以下几个注意点：&lt;br&gt;1. 通过meta标签指定布局视口而不是使用默认的、宽度通常为980px的布局视口&lt;br&gt;2. 通过媒体查询或者document.documentElement.clientWidth来根据布局视口的宽度的不同来做设计&lt;br&gt;3. 通过媒体查询或者window.devicePixelRatio来根据DPR的不同来提供分辨率不同的图像</textarea>


<div class="zh-summary summary clearfix">
<img data-rawheight="260" data-rawwidth="600" src="https://pic3.zhimg.com/c9386f0437e817eeaca3dd3e7a76781e_200x112.jpg" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/c9386f0437e817eeaca3dd3e7a76781e_r.jpg">
首先需要了解几个概念： <b>像素（Pixel） </b>一个显示屏的成像原理是通过一系列的<b>小点</b>排列成一个大的矩形，不同的小点通过显示不同的颜色来显示成图像。这每一个小点被叫做一个<b>物理像素</b>。以题主提到的小米4为例。小米4的屏幕，<b>分辨率</b>是<b>1920设备像素*1080设备像素</b>…

<a href="/question/35221839/answer/66825618" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-10-08" target="_blank" href="/question/35221839/answer/66825618">编辑于 2016-02-17</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6295368"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>16 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="2">
<meta name="disableCopyAvatar" content="https://pic1.zhimg.com/8dcbfab90_s.jpg">

<span class="zg-bull">&bull;</span>


<a href="/copyright/apply?answer=66825618" target="_blank" class="meta-item copyright">申请转载</a>



<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="337" data-type="Answer">
<link itemprop="url" href="/question/29504639/answer/73607810">
<meta itemprop="answer-id" content="24866229" />
<meta itemprop="answer-url-token" content="73607810" />
<meta itemprop="answerCount" content="9" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/29504639" target="_blank" data-id="3984831" data-za-element-name="Title">
怎么更好的理解虚拟DOM?
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/29504639/answer/73607810">
<!-- <meta itemprop="answer-id" content="24866229">
<meta itemprop="answer-url-token" content="73607810"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>270</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">270</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$livoras.com"
target="_blank" href="/people/livoras.com"
>戴嘉华</a></span><span title="请不要再邀请我回答关于前端的问题，谢谢。https://github.com/livoras" class="bio">
请不要再邀请我回答关于前端的问题，谢谢。…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="270" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">270</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3984831" data-action="/answer/content" data-author-name="戴嘉华" data-entry-url="/question/29504639/answer/73607810">

<textarea hidden class="content">写一个就知道了。刚好写了一篇博客刚好可以回答这个问题，copy过来：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/blog/issues/13&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;深度剖析：如何实现一个 Virtual DOM 算法 · Issue #13 · livoras/blog · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;目录：&lt;ul&gt;&lt;li&gt;1 前言&lt;/li&gt;&lt;li&gt;2 对前端应用状态管理思考&lt;/li&gt;&lt;li&gt;3 Virtual DOM 算法&lt;/li&gt;&lt;li&gt;4 算法实现&lt;ul&gt;&lt;li&gt;4.1 步骤一：用JS对象模拟DOM树&lt;/li&gt;&lt;li&gt;4.2 步骤二：比较两棵虚拟DOM树的差异&lt;/li&gt;&lt;li&gt;4.3 步骤三：把差异应用到真正的DOM树上&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;5 结语&lt;/li&gt;&lt;li&gt;6 References&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;1 前言&lt;br&gt;&lt;br&gt;&lt;p&gt;本文会在教你怎么用 300~400 行代码实现一个基本的 Virtual DOM 算法，并且尝试尽量把 Virtual DOM 的算法思路阐述清楚。希望在阅读本文后，能让你深入理解 Virtual DOM 算法，给你现有前端的编程提供一些新的思考。&lt;/p&gt;&lt;br&gt;&lt;p&gt;本文所实现的完整代码存放在 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Github&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;2 对前端应用状态管理的思考&lt;br&gt;&lt;br&gt;&lt;p&gt;假如现在你需要写一个像下面一样的表格的应用程序，这个表格可以根据不同的字段进行升序或者降序的展示。&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/0c1ee6d9a303d5a43b0fa4b3fc82f3a2_b.png&quot; data-rawwidth=&quot;899&quot; data-rawheight=&quot;375&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;899&quot; data-original=&quot;https://pic3.zhimg.com/0c1ee6d9a303d5a43b0fa4b3fc82f3a2_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这个应用程序看起来很简单，你可以想出好几种不同的方式来写。最容易想到的可能是，在你的 JavaScript 代码里面存储这样的数据：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sortKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 排序的字段，新增（new）、取消（cancel）、净关注（gain）、累积（cumulate）人数&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sortType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 升序还是逆序&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{...},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{...},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{..},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;..]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 表格数据&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;用三个字段分别存储当前排序的字段、排序方向、还有表格数据；然后给表格头部加点击事件：当用户点击特定的字段的时候，根据上面几个字段存储的内容来对内容进行排序，然后用 JS 或者 jQuery 操作 DOM，更新页面的排序状态（表头的那几个箭头表示当前排序状态，也需要更新）和表格内容。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这样做会导致的后果就是，随着应用程序越来越复杂，需要在JS里面维护的字段也越来越多，需要监听事件和在事件回调用更新页面的DOM操作也越来越多，应用程序会变得非常难维护。后来人们使用了 MVC、MVP 的架构模式，希望能从代码组织方式来降低维护这种复杂应用程序的难度。但是 MVC 架构没办法减少你所维护的状态，也没有降低状态更新你需要对页面的更新操作（前端来说就是DOM操作），你需要操作的DOM还是需要操作，只是换了个地方。&lt;/p&gt;&lt;br&gt;&lt;p&gt;既然状态改变了要操作相应的DOM元素，为什么不做一个东西可以让视图和状态进行绑定，状态变更了视图自动变更，就不用手动更新页面了。这就是后来人们想出了 MVVM 模式，只要在模版中声明视图组件是和什么状态进行绑定的，双向绑定引擎就会在状态更新的时候自动更新视图（关于MV*模式的内容，可以看&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/blog/issues/11&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;这篇介绍&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。&lt;/p&gt;&lt;br&gt;&lt;p&gt;MVVM 可以很好的降低我们维护状态 -&amp;gt; 视图的复杂程度（大大减少代码中的视图更新逻辑）。但是这不是唯一的办法，还有一个非常直观的方法，可以大大降低视图更新的操作：一旦状态发生了变化，就用模版引擎重新渲染&lt;strong&gt;整个视图&lt;/strong&gt;，然后用新的视图更换掉旧的视图。就像上面的表格，当用户点击的时候，还是在JS里面更新状态，但是页面更新就不用手动操作 DOM 了，直接把整个表格用模版引擎重新渲染一遍，然后设置一下innerHTML就完事了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;听到这样的做法，经验丰富的你一定第一时间意识这样的做法会导致很多的问题。最大的问题就是这样做会很慢，因为即使一个小小的状态变更都要重新构造整棵 DOM，性价比太低；而且这样做的话，input和textarea的会失去原有的焦点。最后的结论会是：对于局部的小视图的更新，没有问题（Backbone就是这么干的）；但是对于大型视图，如全局应用状态变更的时候，需要更新页面较多局部视图的时候，这样的做法不可取。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;但是这里要明白和记住这种做法&lt;/strong&gt;，因为后面你会发现，&lt;strong&gt;其实 Virtual DOM 就是这么做的，只是加了一些特别的步骤来避免了整棵 DOM 树变更&lt;/strong&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;另外一点需要注意的就是，上面提供的几种方法，其实都在解决同一个问题：&lt;strong&gt;维护状态，更新视图&lt;/strong&gt;。在一般的应用当中，如果能够很好方案来应对这个问题，那么就几乎降低了大部分复杂性。&lt;/p&gt;&lt;br&gt;3 Virtual DOM算法&lt;br&gt;&lt;br&gt;&lt;p&gt;DOM是很慢的。如果我们把一个简单的div元素的属性都打印出来，你会看到：&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d5cda33e28d83ba12368202645f9e35b_b.png&quot; data-rawwidth=&quot;1239&quot; data-rawheight=&quot;336&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1239&quot; data-original=&quot;https://pic4.zhimg.com/d5cda33e28d83ba12368202645f9e35b_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;而这仅仅是第一层。真正的 DOM 元素非常庞大，这是因为标准就是这么设计的。而且操作它们的时候你要小心翼翼，轻微的触碰可能就会导致页面重排，这可是杀死性能的罪魁祸首。&lt;/p&gt;&lt;br&gt;&lt;p&gt;相对于 DOM 对象，原生的 JavaScript 对象处理起来更快，而且更简单。DOM 树上的结构、属性信息我们都可以很容易地用 JavaScript 对象表示出来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 节点标签名&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// DOM的属性，用一个对象存储键值对&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'list'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 该节点的子节点&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Item 1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Item 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Item 3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;上面对应的HTML写法是：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;既然原来 DOM 树的信息都可以用 JavaScript 对象来表示，反过来，你就可以根据这个用 JavaScript 对象表示的树结构来构建一棵真正的DOM树。&lt;/p&gt;&lt;br&gt;&lt;p&gt;之前的章节所说的，状态变更-&amp;gt;重新渲染整个视图的方式可以稍微修改一下：用 JavaScript 对象表示 DOM 信息和结构，当状态变更的时候，重新渲染这个 JavaScript 的对象结构。当然这样做其实没什么卵用，因为真正的页面其实没有改变。&lt;/p&gt;&lt;br&gt;&lt;p&gt;但是可以用新渲染的对象树去和旧的树进行对比，记录这两棵树差异。记录下来的不同就是我们需要对页面真正的 DOM 操作，然后把它们应用在真正的 DOM 树上，页面就变更了。这样就可以做到：视图的结构确实是整个全新渲染了，但是最后操作DOM的时候确实只变更有不同的地方。&lt;/p&gt;&lt;p&gt;这就是所谓的 Virtual DOM 算法。包括几个步骤：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中&lt;/li&gt;&lt;li&gt;当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异&lt;/li&gt;&lt;li&gt;把2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Virtual DOM 本质上就是在 JS 和 DOM 之间做了一个缓存。可以类比 CPU 和硬盘，既然硬盘这么慢，我们就在它们之间加个缓存：既然 DOM 这么慢，我们就在它们 JS 和 DOM 之间加个缓存。CPU（JS）只操作内存（Virtual DOM），最后的时候再把变更写入硬盘（DOM）。&lt;/p&gt;&lt;br&gt;4 算法实现&lt;br&gt;&lt;br&gt;4.1 步骤一：用JS对象模拟DOM树&lt;br&gt;&lt;br&gt;&lt;p&gt;用 JavaScript 来表示一个 DOM 节点是很简单的事情，你只需要记录它的节点类型、属性，还有子节点：&lt;/p&gt;&lt;p&gt;element.js&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;例如上面的 DOM 结构就可以简单的表示：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'./element'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ul'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Item 1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Item 2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'li'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Item 3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;现在ul只是一个 JavaScript 对象表示的 DOM 结构，页面上并没有这个结构。我们可以根据这个ul构建真正的&amp;lt;ul&amp;gt;：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 根据tagName构建&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 设置节点的DOM属性&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;propValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;childEl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果子节点也是虚拟DOM，递归构建DOM节点&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 如果字符串，只构建文本节点&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childEl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;render方法会根据tagName构建一个真正的DOM节点，然后设置这个节点的属性，最后递归地把自己的子节点也构建起来。所以只需要：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ulRoot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ulRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;上面的ulRoot是真正的DOM节点，把它塞入文档中，这样body里面就有了真正的&amp;lt;ul&amp;gt;的DOM结构：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'item'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 3&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;完整代码可见 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom/blob/master/lib/element.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;element.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;4.2 步骤二：比较两棵虚拟DOM树的差异&lt;br&gt;&lt;br&gt;&lt;p&gt;正如你所预料的，比较两棵DOM树的差异是 Virtual DOM 算法最核心的部分，这也是所谓的 Virtual DOM 的 diff 算法。两个树的完全的 diff 算法是一个时间复杂度为 O(n^3) 的问题。但是在前端当中，你很少会跨越层级地移动DOM元素。所以 Virtual DOM 只会对同一个层级的元素进行对比：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/6d64b0b7889e7f020bb020aea5947a09_b.png&quot; data-rawwidth=&quot;912&quot; data-rawheight=&quot;471&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;912&quot; data-original=&quot;https://pic2.zhimg.com/6d64b0b7889e7f020bb020aea5947a09_r.png&quot;&gt;&lt;br&gt;&lt;p&gt;上面的div只会和同一层级的div对比，第二层级的只会跟第二层级对比。这样算法复杂度就可以达到 O(n)。&lt;/p&gt;&lt;br&gt;4.2.1 深度优先遍历，记录差异&lt;br&gt;&lt;br&gt;&lt;p&gt;在实际的代码中，会对新旧两棵树进行一个深度优先的遍历，这样每个节点都会有一个唯一的标记：&lt;/p&gt;&lt;img src=&quot;https://pic2.zhimg.com/c4ba535164d29fd46383d19512c37349_b.png&quot; data-rawwidth=&quot;1018&quot; data-rawheight=&quot;513&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1018&quot; data-original=&quot;https://pic2.zhimg.com/c4ba535164d29fd46383d19512c37349_r.png&quot;&gt;&lt;br&gt;&lt;p&gt;在深度优先遍历的时候，每遍历到一个节点就把该节点和新的的树进行对比。如果有差异的话就记录到一个对象里面。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// diff 函数，对比两棵树&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 当前节点的标志&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 用来记录每个节点差异的对象&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dfsWalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTree&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 对两棵树进行深度优先遍历&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dfsWalk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 对比oldNode和newNode的不同，记录下来&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[...]&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;diffChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;children&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 遍历子节点&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;diffChildren&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oldChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentNodeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;oldChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newChild&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;currentNodeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leftNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 计算节点的标识&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentNodeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;leftNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentNodeIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dfsWalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentNodeIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 深度遍历子节点&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;leftNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;例如，上面的div和新的div有差异，当前的标记是0，那么：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;difference&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 用数组存储新旧节点的不同&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;同理p是patches[1]，ul是patches[3]，类推。&lt;/p&gt;&lt;br&gt;4.2.2 差异类型&lt;br&gt;&lt;br&gt;&lt;p&gt;上面说的节点的差异指的是什么呢？对 DOM 操作可能会：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;替换掉原来的节点，例如把上面的div换成了section&lt;/li&gt;&lt;li&gt;移动、删除、新增子节点，例如上面div的子节点，把p和ul顺序互换&lt;/li&gt;&lt;li&gt;修改了节点的属性&lt;/li&gt;&lt;li&gt;对于文本节点，文本内容可能会改变。例如修改上面的文本节点2内容为Virtual DOM 2。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;p&gt;所以我们定义了几种差异类型：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REORDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROPS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;对于节点替换，很简单。判断新旧节点的tagName和是不是一样的，如果不一样的说明需要替换掉。如div换成section，就记录下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REPALCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newNode&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// el('section', props, children)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;如果给div新增了属性id为container，就记录下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;patches[0] = [{
  type: REPALCE,
  node: newNode // el('section', props, children)
}, {
  type: PROPS,
  props: {
    id: &quot;container&quot;
  }
}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;如果是文本节点，如上面的文本节点2，就记录下：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Virtual DOM2&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;那如果把我div的子节点重新排序呢？例如p, ul, div的顺序换成了div, p, ul。这个该怎么对比？如果按照同层级进行顺序对比的话，它们都会被替换掉。如p和div的tagName不同，p会被div所替代。最终，三个节点都会被替换，这样DOM开销就非常大。而实际上是不需要替换节点，而只需要经过节点移动就可以达到，我们只需知道怎么进行移动。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这牵涉到两个列表的对比算法，需要另外起一个小节来讨论。&lt;/p&gt;&lt;br&gt;4.2.3 列表对比算法&lt;br&gt;&lt;br&gt;&lt;p&gt;假设现在可以英文字母唯一地标识每一个子节点：&lt;/p&gt;&lt;p&gt;旧的节点顺序：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;a b c d e f g h i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;现在对节点进行了删除、插入、移动的操作。新增j节点，删除e节点，移动h节点：&lt;/p&gt;&lt;p&gt;新的节点顺序：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;a b c h d f g i j
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;现在知道了新旧的顺序，求最小的插入、删除操作（移动可以看成是删除和插入操作的结合）。这个问题抽象出来其实是字符串的最小编辑距离问题（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Edit_distance&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Edition Distance&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;），最常见的解决算法是 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Levenshtein_distance&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Levenshtein Distance&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，通过动态规划求解，时间复杂度为 O(M * N)。但是我们并不需要真的达到最小的操作，我们只需要优化一些比较常见的移动情况，牺牲一定DOM操作，让算法时间复杂度达到线性的（O(max(M, N))。具体算法细节比较多，这里不累述，有兴趣可以参考&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/list-diff/blob/master/lib/diff.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;代码&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;我们能够获取到某个父节点的子节点的操作，就可以记录下来：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REORDER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;但是要注意的是，因为tagName是可重复的，不能用这个来进行对比。所以需要给子节点加上唯一标识key，列表对比的时候，使用key进行对比，这样才能复用老的 DOM 树上的节点。&lt;/p&gt;&lt;p&gt;这样，我们就可以通过深度优先遍历两棵树，每层的节点进行对比，记录下每个节点的差异了。完整 diff 算法代码可见 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom/blob/master/lib/diff.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;diff.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;4.3 步骤三：把差异应用到真正的DOM树上&lt;br&gt;&lt;br&gt;&lt;p&gt;因为步骤一所构建的 JavaScript 对象树和render出来真正的DOM树的信息、结构是一样的。所以我们可以对那棵DOM树也进行深度优先的遍历，遍历的时候从步骤二生成的patches对象中找出当前遍历的节点差异，然后进行 DOM 操作。&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;walker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dfsWalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dfsWalk&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatches&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 从patches拿出当前节点的差异&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 深度遍历子节点&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dfsWalk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;walker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;patches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;applyPatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 对当前节点进行DOM操作&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;applyPatches，根据不同类型的差异对当前节点进行 DOM 操作：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;applyPatches&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;currentPatches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REPLACE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replaceChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REORDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;reorderChildren&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moves&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;PROPS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setProps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Unknown patch type '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;currentPatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完整代码可见 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom/blob/master/lib/patch.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;patch.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;&lt;br&gt;5 结语&lt;br&gt;&lt;br&gt;&lt;p&gt;Virtual DOM 算法主要是实现上面步骤的三个函数：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom/blob/master/lib/element.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;element&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom/blob/master/lib/diff.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;diff&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom/blob/master/lib/patch.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;patch&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。然后就可以实际的进行使用：&lt;/p&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;// 1. 构建虚拟DOM
var tree = el('div', {'id': 'container'}, [
    el('h1', {style: 'color: blue'}, ['simple virtal dom']),
    el('p', ['Hello, virtual-dom']),
    el('ul', [el('li')])
])

// 2. 通过虚拟DOM构建真正的DOM
var root = tree.render()
document.body.appendChild(root)

// 3. 生成新的虚拟DOM
var newTree = el('div', {'id': 'container'}, [
    el('h1', {style: 'color: red'}, ['simple virtal dom']),
    el('p', ['Hello, virtual-dom']),
    el('ul', [el('li'), el('li')])
])

// 4. 比较两棵虚拟DOM树的不同
var patches = diff(tree, newTree)

// 5. 在真正的DOM元素上应用变更
patch(root, patches)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;当然这是非常粗糙的实践，实际中还需要处理事件监听等；生成虚拟 DOM 的时候也可以加入 JSX 语法。这些事情都做了的话，就可以构造一个简单的ReactJS了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;本文所实现的完整代码存放在 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/livoras/simple-virtual-dom&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Github&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，仅供学习。&lt;/p&gt;&lt;br&gt;6 References&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Matt-Esch/virtual-dom/blob/master/vtree/diff.js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;virtual-dom/diff.js at master · Matt-Esch/virtual-dom · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic3.zhimg.com/0c1ee6d9a303d5a43b0fa4b3fc82f3a2_200x112.png" data-rawwidth="899" data-rawheight="375" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/0c1ee6d9a303d5a43b0fa4b3fc82f3a2_r.png">
写一个就知道了。刚好写了一篇博客刚好可以回答这个问题，copy过来： <a href="//link.zhihu.com/?target=https%3A//github.com/livoras/blog/issues/13" class=" wrap external" target="_blank" rel="nofollow noreferrer">深度剖析：如何实现一个 Virtual DOM 算法 · Issue #13 · livoras/blog · GitHub<i class="icon-external"></i></a> 目录：1 前言2 对前端应用状态管理思考3 Virtual DOM 算法4 算法实现4.1 步骤一：用JS对象模拟DOM树4…

<a href="/question/29504639/answer/73607810" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-11-23" target="_blank" href="/question/29504639/answer/73607810">编辑于 2015-11-23</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3984831"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>21 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="338" data-type="Answer">
<link itemprop="url" href="/question/28016223/answer/50154351">
<meta itemprop="answer-id" content="15461758" />
<meta itemprop="answer-url-token" content="50154351" />
<meta itemprop="answerCount" content="11" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/28016223" target="_blank" data-id="3389167" data-za-element-name="Title">
facebook immutable.js 意义何在，使用场景？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/28016223/answer/50154351">
<!-- <meta itemprop="answer-id" content="15461758">
<meta itemprop="answer-url-token" content="50154351"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>269</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">269</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$kejun"
target="_blank" href="/people/kejun"
>张克军</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/kejun#hilightbadge" target="_blank">前端开发话题优秀回答者</a></span>



<span title="豆瓣前端工程师" class="bio">
豆瓣前端工程师
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="269" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">269</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3389167" data-action="/answer/content" data-author-name="张克军" data-entry-url="/question/28016223/answer/50154351">

<textarea hidden class="content">最近项目中频繁用到所以回答一下。首先，它虽然和React同期出现且跟React配合很爽，但它可不是React工具集里的（它的光芒被掩盖了），它是一个完全独立的库，无论基于什么框架都可以用它。意义在于它弥补了Javascript没有不可变数据结构的问题。不可变数据结构是函数式编程中必备的。前端工程师被OOP洗脑太久了，组件根本上就是函数用法，FP的特点更适用于前端开发。&lt;br&gt;&lt;br&gt;Javascript中对象都是参考类型，也就是a={a:1}; b=a; b.a=10;你发现a.a也变成10了。可变的好处是节省内存或是利用可变性做一些事情，但是，在复杂的开发中它的副作用远比好处大的多。于是才有了浅copy和深copy，就是为了解决这个问题。举个常见例子：&lt;br&gt;&lt;br&gt;var  defaultConfig = { /* 默认值 */};&lt;br&gt;var config = $.extend({}, defaultConfig, initConfig); // jQuery用法。initConfig是自定义值&lt;br&gt;var config = $.extend(true, {}, defaultConfig, initConfig); // 如果对象是多层的，就用到deep-copy了&lt;br&gt;&lt;br&gt;ES6出现原生的assign方法，但它相当于是浅copy。如果有了不可变的数据结构就省心了，ES5.1中对象有了freeze方法，也是浅copy，a=Object.freeze({a:1}); b=a; b.a=10; a.a还是1。在实际开发中浅copy通常不够。如果用immutableJS:&lt;br&gt;&lt;br&gt;var  defaultConfig = Immutable.fromJS({ /* 默认值 */}); &lt;br&gt;var config = defaultConfig.merge(initConfig); // defaultConfig不会改变，返回新值给config&lt;br&gt;var config = defaultConfig.mergeDeep(initConfig); // 深层merge&lt;br&gt;&lt;br&gt;上述用deep-copy也可以做到，差别在于性能。每次deep-copy都要把整个对象递归的复制一份。而Immutable的实现有些像链表，添加一个新结点把旧结点的父子关系转移到新结点上，性能提升很多，想深挖原理请看这里：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Persistent_data_structure&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Persistent data structure&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。ImmutableJS给的远不止这些，它提供了7种不可变的数据结构：List, Stack, Map, OrderedMap, Set, OrderedSet, Record （详见文档&lt;a href=&quot;//link.zhihu.com/?target=http%3A//facebook.github.io/immutable-js/docs/%23/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Immutable.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，文档很geek，打开console试吧）。immutableJS ＋ 原生Javascript等于真正的函数式编程。&lt;br&gt;&lt;br&gt;遍历对象不再用for-in，可以这样:&lt;br&gt;Immutable.fromJS({a:1, b:2, c:3}).map(function(value, key) { /* do some thing */});&lt;br&gt;&lt;br&gt;实现一个map-reduce:&lt;br&gt;var o = Immutable.fromJS({a:{a:1}, b:{a:2}, c:{a:3}});&lt;br&gt;o.map(function(e){ return e.get('a'); }).reduce(function(e1, e2){ return e1 + e2; }, 0);&lt;br&gt;&lt;br&gt;修改藏在深处的值，可以这样：&lt;br&gt;var o = Immutable.fromJS({a:[{a1:1}, {b:[{t:1}]}, {c1:2}], b:2, c:3});&lt;br&gt;o = o.setIn(['a', 1, 'b', 0, 't'], 100);  // t赋值&lt;br&gt;o = o.updateIn(['a', 1, 'b', 0, 't'], function(e){ return e * 100; }); // t * 100&lt;br&gt;&lt;br&gt;比较两个对象是否完全相等: o1.equals(o2)&lt;br&gt;&lt;br&gt;远不止这些，immutableJS提供了强大的api自己去看吧。由于是不可变的，可以放心的对对象进行任意操作。在React开发中，频繁操作state对象或是store，配合immutableJS快、安全、方便。</textarea>


<div class="zh-summary summary clearfix">

最近项目中频繁用到所以回答一下。首先，它虽然和React同期出现且跟React配合很爽，但它可不是React工具集里的（它的光芒被掩盖了），它是一个完全独立的库，无论基于什么框架都可以用它。意义在于它弥补了Javascript没有不可变数据结构的问题。不可变数据…

<a href="/question/28016223/answer/50154351" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-06-05" target="_blank" href="/question/28016223/answer/50154351">编辑于 2015-06-05</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3389167"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>13 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="339" data-type="Answer">
<link itemprop="url" href="/question/19554716/answer/12276503">
<meta itemprop="answer-id" content="29556" />
<meta itemprop="answer-url-token" content="12276503" />
<meta itemprop="answerCount" content="34" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/19554716" target="_blank" data-id="1808" data-za-element-name="Title">
JavaScript 里的闭包是什么？应用场景有哪些？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/19554716/answer/12276503">
<!-- <meta itemprop="answer-id" content="29556">
<meta itemprop="answer-url-token" content="12276503"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>269</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">269</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$tlxue"
target="_blank" href="/people/tlxue"
>薛天禄</a></span><span title="略懂 JavaScript" class="bio">
略懂 JavaScript
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="269" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">269</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1808" data-action="/answer/content" data-author-name="薛天禄" data-entry-url="/question/19554716/answer/12276503">

<textarea hidden class="content">看一个例子：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// “闭包”内的函数可以访问 secret 变量，而 secret 变量对于外部却是隐藏的&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;get_secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 通过定义的接口来访问 secret&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;new_secret&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_secret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 通过定义的接口来修改 secret&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get_secret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 得到 'secret'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Type error，访问不能&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;new_secret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a new secret'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 通过函数接口，我们访问并修改了 secret 变量&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get_secret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 得到 'a new secret'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;引用 Douglas Crockford [1] :&lt;br&gt;&lt;blockquote&gt;之所以可能通过这种方式在 JavaScript 种实现公有，私有，特权变量正是因为&lt;b&gt;闭包&lt;/b&gt;，&lt;b&gt;闭包是指在 JavaScript 中，内部函数总是可以访问其所在的外部函数中声明的参数和变量，即使在其外部函数被返回（寿命终结）了之后&lt;/b&gt;。&lt;/blockquote&gt;&lt;br&gt;需要注意的一点时，内部函数访问的是被创建的内部变量本身，而不是它的拷贝。所以在闭包函数内加入 loop 时要格外注意。另外当然的是，闭包特性也可以用于创建私有函数或方法。&lt;br&gt;&lt;br&gt;--------&lt;br&gt;关于为什么在 JavaScript 中闭包的应用都有关键词“return”，引用 JavaScript 秘密花园中的一段话：&lt;br&gt;&lt;blockquote&gt;闭包是 JavaScript 一个非常重要的特性，这意味着当前作用域总是能够访问外部作用域中的变量。 因为 函数 是 JavaScript 中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。&lt;/blockquote&gt;--------&lt;br&gt;［1］Private Members in JavaScript - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.crockford.com/javascript/private.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Private Members in JavaScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;［2］JavaScript - The Good Parts - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//book.douban.com/subject/2994925/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript (豆瓣)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;［3］JavaScript 秘密花园 - 闭包和引用 - &lt;a href=&quot;//link.zhihu.com/?target=http%3A//bonsaiden.github.com/JavaScript-Garden/zh/%23function.closures&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript 秘密花园&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>


<div class="zh-summary summary clearfix">

看一个例子： var foo = ( function() {
 var secret = 'secret';
 // “闭包”内的函数可以访问 secret 变量，而 secret 变量对于外部却是隐藏的
 return {
 get_secret: function () {
 // 通过定义的接口来访问 secret
 return secret;
 },
 new_secret:…

<a href="/question/19554716/answer/12276503" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2011-03-23" target="_blank" href="/question/19554716/answer/12276503">编辑于 2016-12-23</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1808"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>23 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic3.zhimg.com/74bbef797d703914ed8d6914f55cdcd2_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="340" data-type="Answer">
<link itemprop="url" href="/question/20455165/answer/15176745">
<meta itemprop="answer-id" content="1197693" />
<meta itemprop="answer-url-token" content="15176745" />
<meta itemprop="answerCount" content="19" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/20455165" target="_blank" data-id="362466" data-za-element-name="Title">
如何理解 Web 语义化？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/20455165/answer/15176745">
<!-- <meta itemprop="answer-id" content="1197693">
<meta itemprop="answer-url-token" content="15176745"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>266</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">266</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$justineo"
target="_blank" href="/people/justineo"
>顾轶灵</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/justineo#hilightbadge" target="_blank">CSS、前端开发话题优秀回答者</a></span>



<span title="http://justineo.github.io/" class="bio">
<a href="//link.zhihu.com/?target=http%3A//justineo.gith" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">justineo.gith</span><span class="invisible"></span><i class="icon-external"></i></a>…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="266" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">266</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="362466" data-action="/answer/content" data-author-name="顾轶灵" data-entry-url="/question/20455165/answer/15176745">

<textarea hidden class="content">什么是语义化？其实简单说来就是让机器可以读懂内容。&lt;br&gt;&lt;br&gt;先随便扯扯。对于当前的 Web 而言，HTML 是联系大多数 Web 资源的纽带，也是内容的载体。在 Web 被刚刚设计出来的时候，Tim Berners-Lee 可能不会想到它现在会达到的规模以及深入到我们生活的那么多方面。也许起初的想法很简单：用来发布 Web 内容和资源的索引，方便人们查看。&lt;br&gt;&lt;br&gt;但是随着 Web 规模的不断扩大，信息量之大已经不在人肉处理的范围之内了。这个时候人们开始用机器来处理 Web 上发布的各种内容，搜索引擎就诞生了。再后来，人们又设计了各种智能程序来对索引好的内容作各种处理和挖掘。所以让机器能够更好地读懂 Web 上发布的各种内容就变得越来越重要。&lt;br&gt;&lt;br&gt;其实 HTML 在刚开始设计出来的时候就是带有一定的「语义」的，包括段落、表格、图片、标题等等，但这些更多地只是方便浏览器等 UA 对它们作合适的处理。但逐渐地，机器也要借助 HTML 提供的语义以及自然语言处理的手段来「读懂」它们从网上获取的 HTML 文档，但它们无法读懂例如「红色的文字」或者是深度嵌套的表格布局中内容的含义，因为太多已有的内容都是专门为了可视化的浏览器设计的。面对这种情况，出现了两种观点：&lt;br&gt;&lt;ol&gt;&lt;li&gt;我们可以让机器的理解能力越来越接近人类，人能看懂、听懂的东西，机器也能理解；&lt;/li&gt;&lt;li&gt;我们应该在发布内容的时候，就用机器可读的、被广泛认可的语义信息来描述内容，来降低机器处理 Web 内容的难度（HTML 本身就已经是朝这个方向迈出的一小步了）。&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img data-rawheight=&quot;382&quot; data-rawwidth=&quot;670&quot; src=&quot;https://pic2.zhimg.com/01b4d93c152d2a9c2db734065be0f3f5_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;670&quot; data-original=&quot;https://pic2.zhimg.com/01b4d93c152d2a9c2db734065be0f3f5_r.jpg&quot;&gt;我画的这个图，意思是说，内容的语义表达能力和 AI 的智能程度决定了机器分析处理 Web 内容能力的高低。上面观点 1 的方向是朝着人类水平的人工智能努力，而观点 2 的方向正是万维网创始人 Tim Berners-Lee 爵士提出的美好愿景：语义网。语义网我就不多说了，简单来说就是让一切内容和包括对关系的描述都成为 Web 上的资源，都可以由唯一的 URI 定义，语义明确、机器可读。显然，两条路都的终极目标都很遥远，第一条路技术上难以实现，而第二条路实施起来障碍太多。&lt;br&gt;&lt;br&gt;我认为我们当前能够看得见摸得着的 Web 语义化，其实就是在往第二条路的方向上，迈出的一小步，即对已经有的被广泛认可的 HTML 标准做改进。我们刚开始意识到，我们必须回归内容本身，将内容本身的语义合理地表述出来，再为不同的用户代理设计不同的样式描述，也就是我们说的内容与样式分离。这样我们在提供内容的时候，首先要做的就是将内容本身进行合理的描述，暂时不用考虑它的最终呈现会是什么样子。&lt;br&gt;&lt;br&gt;HTML 规范其实一直在往语义化的方向上努力，许多元素、属性在设计的时候，就已经考虑了如何让各种用户代理甚至网络爬虫更好地理解 HTML 文档。HTML5 更是在之前规范的基础上，将所有表现层（presentational）的语义描述都进行了修改或者删除，增加了不少可以表达更丰富语义的元素。为什么这样的语义元素是有意义的？因为它们被广泛认可。所谓语义本身就是对符号的一种共识，被认可的程度越高、范围越广，人们就越可以依赖它实现各种各样的功能。&lt;br&gt;&lt;br&gt;HTML5 并非 Web 语义唯一倚仗的规范，除了 W3C 和 WHATWG 外，还有其它的组织在为扩展、标准化 Web 语义做着贡献。只要有浏览器厂商、搜索引擎原意支持，它们的规范一样可以成为通用的基础设施。例如 microformats 社区以及 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//Schema.org&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;Schema.org&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 上都有对 HTML 以及 Microdata（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/TR/html5/microdata.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;w3.org/TR/html5/microda&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ta.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;） 规范的扩展词汇表，Google、Bing、Yahoo! 等搜索引擎以及各个主流浏览器都不同程度地接纳了其中定义的语义扩展，并应用在了生产中。&lt;br&gt;&lt;br&gt;下面举两个 Google 应用扩展语义的例子。&lt;br&gt;Google 的搜索结果，可以根据 microformats 的 hCard 语法从抓取的页面识别出人物信息：&lt;br&gt;&lt;img data-rawheight=&quot;263&quot; data-rawwidth=&quot;616&quot; src=&quot;https://pic4.zhimg.com/f8ba9082973b5a7abcbfa969c02e3ce7_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;616&quot; data-original=&quot;https://pic4.zhimg.com/f8ba9082973b5a7abcbfa969c02e3ce7_r.jpg&quot;&gt;&lt;br&gt;也可通过网页内嵌的 Microdata 数据读取作品评分等信息：&lt;br&gt;&lt;img data-rawheight=&quot;135&quot; data-rawwidth=&quot;497&quot; src=&quot;https://pic1.zhimg.com/3c5b54fb608597a098c13bac9a1b922c_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;497&quot; data-original=&quot;https://pic1.zhimg.com/3c5b54fb608597a098c13bac9a1b922c_r.jpg&quot;&gt;关于 HTML5 的各个元素语义的描述，我之前做过一份 slides，上面提到的例子都是那里面的，也可以参考一下：Semantic HTML（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//justineo.github.com/slideshows/semantic-html/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;justineo.github.com/sli&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;deshows/semantic-html/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）。</textarea>


<div class="zh-summary summary clearfix">
<img data-rawheight="382" data-rawwidth="670" src="https://pic2.zhimg.com/01b4d93c152d2a9c2db734065be0f3f5_200x112.jpg" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic2.zhimg.com/01b4d93c152d2a9c2db734065be0f3f5_r.jpg">
什么是语义化？其实简单说来就是让机器可以读懂内容。 先随便扯扯。对于当前的 Web 而言，HTML 是联系大多数 Web 资源的纽带，也是内容的载体。在 Web 被刚刚设计出来的时候，Tim Berners-Lee 可能不会想到它现在会达到的规模以及深入到我们生活的那么多方…

<a href="/question/20455165/answer/15176745" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2012-09-01" target="_blank" href="/question/20455165/answer/15176745">编辑于 2013-03-14</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-362466"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>15 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="zm-invite-pager">

<span><a href="?page=16">上一页</a></span>





<span><a href="?page=1">1</a></span>

<span>...</span>



<span><a href="?page=15">15</a></span>



<span><a href="?page=16">16</a></span>



<span class="zg-gray-normal">17</span>



<span><a href="?page=18">18</a></span>



<span><a href="?page=19">19</a></span>



<span>...</span>

<span><a href="?page=50">50</a></span>



<span><a href="?page=18">下一页</a></span>

</div>

</div>
</div>

</div>
</div>


<div class="zu-main-sidebar" data-za-module="RightSideBar">

<div class="zm-side-section">
<div class="zm-side-section-inner">
<div class="topic-header-side zm-entry-head-wrap">

<div class="clearfix"><div id="zh-topic-side-head">

<a href="javascript:;" name="focus" class="zg-mr10 zu-entry-focus-button zg-btn-white" id="tf-225">取消关注</a>

<div class="zm-topic-side-followers-info">

<a href="/topic/19550901/followers"><strong>108703</strong></a> 人关注了该话题

</div>
</div></div>
<div style="margin-top: 15px;">

<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/organize">组织</a>
<span class="zg-bull">•</span>
<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/manage">管理</a>
<span class="zg-bull">•</span>

<a class="zg-link-litblue-normal" href="/topic/19550901/log">日志</a>
</div>

</div>
</div>
</div>

<div class="zm-side-section">
<div class="zm-side-section-inner">
<h3 class="zm-topic-side-organize-title">描述
</h3>
<div id="zh-topic-desc" data-resourceid="225" data-action="/topic-introduction">
<div class="zm-editable-content" data-editable-maxlength="130" ></div>
</div>
</div>
</div>
<div class="shameimaru-placeholder" data-loc="topic_up" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

<div class="zm-side-section" id="zh-topic-side-parents-list">
<div class="zm-side-section-inner parent-topic">
<h3 class="zm-topic-side-organize-title">父话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19550516"
data-hovercard="t$b$19550516" data-token="19550516" data-topicid="98" data-za-element-name="Title">
Web 开发
</a>

<a class="zm-item-tag"
href="/topic/19552332"
data-hovercard="t$b$19552332" data-token="19552332" data-topicid="708" data-za-element-name="Title">
软件开发
</a>

<a class="zm-item-tag"
href="/topic/19561719"
data-hovercard="t$b$19561719" data-token="19561719" data-topicid="3839" data-za-element-name="Title">
网站开发
</a>

</div>
</div>
</div>
<div class="zm-side-section" id="zh-topic-side-children-list">
<div class="zm-side-section-inner child-topic">
<h3 class="zm-topic-side-organize-title">子话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19552521"
data-hovercard="t$b$19552521" data-token="19552521" data-topicid="769" data-za-element-name="Title">
JavaScript
</a>

<a class="zm-item-tag"
href="/topic/19551326"
data-hovercard="t$b$19551326" data-token="19551326" data-topicid="369" data-za-element-name="Title">
CSS
</a>

<a class="zm-item-tag"
href="/topic/19573936"
data-hovercard="t$b$19573936" data-token="19573936" data-topicid="7912" data-za-element-name="Title">
前端工程师
</a>

<a class="zm-item-tag"
href="/topic/19551323"
data-hovercard="t$b$19551323" data-token="19551323" data-topicid="367" data-za-element-name="Title">
HTML
</a>

<a class="zm-item-tag"
href="/topic/19583739"
data-hovercard="t$b$19583739" data-token="19583739" data-topicid="11152" data-za-element-name="Title">
前端性能优化
</a>

<a class="zm-item-tag"
href="/topic/19806306"
data-hovercard="t$b$19806306" data-token="19806306" data-topicid="87560" data-za-element-name="Title">
前端框架
</a>

<a class="zm-item-tag"
href="/topic/19621319"
data-hovercard="t$b$19621319" data-token="19621319" data-topicid="23778" data-za-element-name="Title">
前端开发框架和库
</a>

<a class="zm-item-tag"
href="/topic/19590813"
data-hovercard="t$b$19590813" data-token="19590813" data-topicid="13512" data-za-element-name="Title">
前端入门
</a>

<a class="zm-item-tag"
href="/topic/19597369"
data-hovercard="t$b$19597369" data-token="19597369" data-topicid="15721" data-za-element-name="Title">
浏览器兼容性
</a>

<a class="zm-item-tag"
href="/topic/19566907"
data-hovercard="t$b$19566907" data-token="19566907" data-topicid="5573" data-za-element-name="Title">
Div+CSS
</a>

</div>

<a class="zg-link-litblue zm-topic-side-title-link" href="/topic/19550901/organize/entire#anchor-children-topic">共有 31 个子话题，查看话题结构 » </a>

</div>
</div>


<div class="zm-side-section">
<div class="zm-side-section-inner" id="zh-topic-top-answerer">
<h3>

<a href="/topic/19550901/top-writer" class='SidebarListNav-sideLink Link--light' target="_blank">
查看全部 »
</a>

活跃回答者</h3>
<div class='zm-topic-side-person-list'>

<div class="zm-topic-side-person-item">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="author-link">徐飞</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="三流程序员，二流架构师">三</span>流程序员，二流架构师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/sharpmaster/topic/19550901/answers">在该话题下有 91 个回答，8980 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/ecfeb2b0c_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="author-link">张云龙</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="全民直播CTO">全</span>民直播CTO

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/fouber/topic/19550901/answers">在该话题下有 30 个回答，9722 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic4.zhimg.com/7be980a0f_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="author-link">尤雨溪</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="不会搞艺术的程序员不是好设计师">不</span>会搞艺术的程序员不是好设计师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/evanyou/topic/19550901/answers">在该话题下有 128 个回答，12K 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic2.zhimg.com/191ec5daa9b4d6931eed0eba8a9cf39d_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="author-link">张克军</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="豆瓣前端工程师">豆</span>瓣前端工程师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/kejun/topic/19550901/answers">在该话题下有 40 个回答，3330 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="author-link">贺师俊</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="Web开发者">W</span>eb开发者

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/he-shi-jun/topic/19550901/answers">在该话题下有 396 个回答，14K 赞同</a>


</div>
</div>
</div>


</div>
</div>
</div>


<div class="shameimaru-placeholder" data-loc="topic_down" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

</div>


</div>


<div id="zh-footer" class="zh-footer">
<div class="content zg-wrap clearfix">
<ul>

<li><a href="https://liukanshan.zhihu.com" target="_blank">刘看山</a></li>

<li><a href="/question/19581624" target="_blank">知乎指南</a></li>
<li><a href="javascript:;" id="js-feedback-button">建议反馈</a></li>

<li><a href="/app" target="_blank">移动应用</a></li>
<li><a href="/careers">加入知乎</a></li>
<li><a href="/terms" target="_blank">知乎协议</a></li>
<li><a href="/jubao" target="_blank">举报投诉</a></li>
<li><a href="/contact">联系我们</a></li>

</ul>

<span class="copy">&copy; 2017 知乎</span>

</div>
</div>

<script type="text/json" class="json-inline" data-name="guiders2">{"exclusive-popover":{},"section":{},"editor":[]}</script>
<script type="text/json" class="json-inline" data-name="current_user">["\u6587\u5200\u6c34\u539f","liu-yuan-39-9","https:\/\/pic2.zhimg.com\/56a9754ca686ba7d3b1e725c6452ccd1_s.png","649f8fe7032b205a3cbbbb875135734d","\u534a\u8def\u51fa\u5bb6\u5b66\u5b89\u5353",0,0,true,"174596549@qq.com","http:\/\/mail.qq.com",0,false,false,false,"32745954738176",false,false,false,true,null]</script>
<script type="text/json" class="json-inline" data-name="user_status">[null,null,false]</script>
<script type="text/json" class="json-inline" data-name="env">["zhihu.com","comet.zhihu.com",false,null,false,false]</script>
<script type="text/json" class="json-inline" data-name="permissions">[]</script>


<script type="text/json" class="json-inline" data-name="ga_vars">{"user_created":1378258190000,"now":1486365866000,"abtest_mask":"---------0--------------------","user_attr":[1,0,0,"-",1],"user_hash":"649f8fe7032b205a3cbbbb875135734d"}</script>

<script type="text/json" class="json-inline" data-name="ra-urls">{"Copyright":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Copyright.98ac6609.js","PayUIApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PayUIApp.ca78ba78.js","CouponApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CouponApp.66b486a6.js","PaymentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PaymentApp.7f16d61c.js","Community":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Community.920e484a.js","Report":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Report.26635627.js","OrgOpHelp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/OrgOpHelp.f1709e97.js","common":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/common.a4dd3236.js","BalanceApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/BalanceApp.14e3a013.js","AnswerWarrant":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/AnswerWarrant.97f134aa.js","CommentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CommentApp.7556991d.js"}</script>

<script type="text/json" class="json-inline" data-name="current_topic">[["\u524d\u7aef\u5f00\u53d1","19550901","https:\/\/pic1.zhimg.com\/v2-8e66233f5558e741bad3a8c50b9566c8_s.jpg",225],[["Web \u5f00\u53d1","19550516","https:\/\/pic3.zhimg.com\/891b4f32a_s.jpg"],["\u8f6f\u4ef6\u5f00\u53d1","19552332","https:\/\/pic2.zhimg.com\/185d9c33d_s.jpg"],["\u7f51\u7ad9\u5f00\u53d1","19561719","https:\/\/pic2.zhimg.com\/78645670d_s.jpg"]],1,0,"",0]</script>

<script src="https://static.zhihu.com/static/revved/-/js/vendor.cb14a042.js"></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/base.6cca0b95.js"></script>

<script src="https://static.zhihu.com/static/revved/-/js/closure/common.31d4e5c0.js"></script>


<script src="https://static.zhihu.com/static/revved/-/js/closure/richtexteditor.71ca49de.js" async></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/page-main.c075e49f.js"></script>
<meta name="entry" content="ZH.entryT" data-module-id="page-main">

<script type="text/zscript" znonce="00e7b0c8ee0948228d3b4dc39c483e3b"></script>

<input type="hidden" name="_xsrf" value="b08047425d2b394c9b9106bb47ce2ec8"/>
</body>
</html>