[
  {
    "question": "\n如何看待JavaScript成为TIOBE评选的2014年度语言？\n",
    "author": "彭哲夫",
    "content": "\n\n<textarea hidden class=\"content\">UPDATE 我关陌生人评论了，懒得理会无脑喷，想 argue 的先上干货自己回答去。&lt;br&gt;&lt;br&gt;UPDATE2 &lt;a data-hash=&quot;fe4430f82eb80feaa8c09e473fbf5d90&quot; href=&quot;//www.zhihu.com/people/fe4430f82eb80feaa8c09e473fbf5d90&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@胡天硕&quot; data-tip=&quot;p$b$fe4430f82eb80feaa8c09e473fbf5d90&quot; data-hovercard=&quot;p$b$fe4430f82eb80feaa8c09e473fbf5d90&quot;&gt;@胡天硕&lt;/a&gt; 你说我我给出了一堆理由，为什么js不应该是年度语言。我倒是很想知道我那一句说了 js 不应该是年度语言。&lt;br&gt;&lt;br&gt;另外你说我漏洞百出，来嘛来个漏洞嘛，我不要求一百个，1个行不行？真心求打脸。而且我不知道 jvm 优化最牛的是v8之父和v8优化最牛有啥关联，你以为 jvm 就一个优化最牛的人搞定的？优化能他妈比出个最牛嘛？JVM 是几十年的积累，V8一个出身就是面对客户端的东西来和 jvm 比，不知恬耻4字真不为过。&lt;br&gt;----------------------------------------------------------正文---------------------------------------------------&lt;br&gt;&lt;br&gt;打脸的来了，先说TIOBE年度语言这事，无他，活跃度高，使用者增量多罢了。TIBOE的原文是&lt;br&gt;&lt;blockquote&gt;JavaScript has won the award because it appeared to be the biggest mover of 2014. JavaScript won 1.70% in one year time,&lt;br&gt;&lt;/blockquote&gt;that's all。试想一下，去年有100个刚入挨踢行的年轻人，要做一个业务的时候，一边是选择历史积累足够多繁杂的C，一边是积累和选择没那么多初入门槛较低的JS，他们会选啥？&lt;br&gt;另外 TIBOE 也说道&lt;br&gt;&lt;blockquote&gt;It is always tempting to try to forecast what will change in 2015. Objective-C will probably lose its dominant position in mobile app development, whereas Java and Swift will gain traction in that field. Java might even become number one of the TIOBE index again. Other trends in progamming are modelling and big data. Here, MATLAB and R appear to be the market leaders. There is a realistic chance that they will enter the top 10 in 2015.&lt;br&gt;&lt;/blockquote&gt;未来对于数据分析的需求可以预见增大，所以 R 和 MATLAB 会出头。至于 mobile app 的开发则会进入到有选择的时代（ObjC-&amp;gt; Java/Swift）。看到没，评比的关键仅仅是新增人头数唉。这有啥好优越感的。&lt;br&gt;&lt;br&gt;当然去年一年里面 js 的发展是值得肯定的，比如浑浑噩噩的 java 高下立断，社区也拿出了很多高质量的产出。 但ObjC 靠着 Apple 的关系不也拿过，so what？你可以在你服务端用 ObjC 构建健壮可持续可扩展的程序么？说白了现代挨踢工程无外乎选个工具解决问题罢了，至于这个工具是 js 还是 python，是 ruby 还是 java，真没多大关系，合适的工具解决合适的问题罢了。但是，一定要上纲上线秀优越感那我就不得不出来打脸了。&lt;br&gt;&lt;br&gt;一个个来&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;1、真正实现了Code Once, Run Anywhere&lt;/b&gt;&lt;/blockquote&gt;对于这个，写过代码的都知道，我就不多说了，naive&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;2、HTML5在主流浏览器的普及，消除了插件的存在必要性，逐步接近原生的体验&lt;/b&gt;&lt;/blockquote&gt;感觉不要太好，用服务端渲染再通过 websocket 传输出来的幺蛾子也能算 Js 的功劳也是醉了，我自己写个 socket 传数据到客户端不也一样。 HTML5 的优势又不是这个，websocket 什么的增强界面交互性，嵌入 webkit 和原生应用互补绕开某些原生 api 做到想要的体验才是其发扬光大的地方。但你硬要说和原生体验差不多，我只能说是贵厂请不起原生应用开发者了吧。&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;3、在浏览器的良性竞争中，JS性能得到巨幅提升&lt;/b&gt;&lt;/blockquote&gt;我不知道哪里良性了，Google 家都要成自己的新时代 IE 了好嘛。而且这个巨幅提升真是……完全吐槽无力，都超过 C 语言的速度了哦。我觉得大概用个 pypy 就能打脸打得啪啪啪了吧。&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;4、服务端js，数据库js，桌面端js和嵌入式js&lt;br&gt;&lt;/b&gt;&lt;br&gt;node.js从诞生的第一天可以说就在性能上秒杀了大部分其他的服务端语言（支持同时可以访问的人数翻好几倍，响应时间大幅减少），例如php,python和ruby。这是因为异步的IO操作让服务器不用通过轮询等待，就可以立即处理下一个请求。在node.js推出之前就有一个叫做nginx的静态服务器就是通过这种方式秒杀了传统的apache服务器的。再加上超快的V8引擎，其他语言就只有望尘莫及了。虽然php,python,ruby,java也相继推出了支持异步IO的库（例如tornado,java.nio），但是由于语言并不是按照异步回调的方式来设计的，所以采用起来很困难，并没有普及起来。同时其他动态语言也缺乏像V8/Spidermonkey，这样顶级公司的顶级程序员优化的解释器/JIT编译器。&lt;/blockquote&gt;1. 秒杀这种词不要乱用，带 JIT 的跟不带 JIT 的脚本比，pypy 不要打脸太狠。&lt;br&gt;2. 同时访问人数翻好几倍，亲你知道 linux 是怎么处理 socket 的么，这和你 js 有毛关系， C10K 是什么时候提出的？&lt;br&gt;3. python twisted 笑而不语，node 估计连孙子辈都算不上。还扯事件循环呢，gevent 分分钟教做人。&lt;br&gt;4. tornado 是相继推出的？ 只怪 FriendFeed 死太早，让没有一个纯 node 驱动的大型 site 的语言优越感爆棚。&lt;br&gt;5. 超快的 V8 引擎哦，望尘莫及哦，JIT 黑魔法你真见过？复制 attr 做快速属性查找这事空间换时间谁不会？回头好好看看实现好吗？同样带 jit 的 pypy 你真确定你比得过，跟 gevent 比比呢？ 我都不想用 go/rust 来打脸。&lt;br&gt;6. 缺乏 V8 和 Spidermonkey 哦，jvm 大魔王几十年的优化都不屑于斜眼看着这2货好吗？&lt;br&gt;7. 留言中还说这些 php/python/ruby/java 的异步IO库基本没人用，我已经完全吐槽无力了。Callback hell 也能秀出优越感，coroutine 懂不懂？同步方式写异步懂不懂？嘴炮能打成这样，真是无知者无畏。&lt;br&gt;8. 恩，一个没有 yield 的语言来谈异步，future 是那个 ECMAScript 的版本实现的麻烦出门右拐去看看。&lt;br&gt;&lt;br&gt;数据库内嵌个 js 都大书特书，lua 表示很无辜。嵌入式 js 不了解，我就说一点，花得起钱请高级嵌入式工程师的，你问他在不在乎是 js 还是 c+asm，而且哪个嵌入式不是回调的。强行秀优越感真是……&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;5、Emscripten，llvm，和asm.js的出现让其他语言的代码直接可以编译到js中，并接近原生的性能&lt;/b&gt;&lt;/blockquote&gt;这跟 js 有毛关系，llvm 的功劳全给 js 去了也真是醉了，都不想多说。回家出门左拐买本龙书好好看看，什么是语法树，什么是编译中间语言，这种编译原理都没搞清楚的外行话就别扯了。按照这说法，我一样能翻译 python/java/ruby/go 到机器码得到近似于原生的性能。&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;6、Angularjs，backbone，ember，react等MVC框架在消除BS（Browser-Server）结构和CS(Client-Server)结构之间的差距&lt;/b&gt;&lt;/blockquote&gt;唯一我认为 js 带来改变的地方，让前端工程化了，剥离了前后端需要解决的问题，使得现代挨踢工程中前后端可以更加 focus 在自己所需要解决的问题上。但是 BaaS 这种东西只能用来解决比较简单的业务逻辑，或者说是大体上一致的业务类型，真遇到复杂的业务还是得服务端上。&lt;br&gt;&lt;br&gt;但是从观念上来说，靠着“壳&quot;+“逻辑代码”实现的应用，体验上还是离原生的略远。DirectX 看到这种论断估计会笑岔气。&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;7. 熟悉的语法，强大的FP，方便的IDE, 调试工具和学习网站(新补充)&lt;/b&gt;&lt;/blockquote&gt;有人说不要扯 yield，那我问你，JS有延迟计算嘛，函数是第一类对象就能叫 FP 了？再说了不扯 FP，贵 JS 的 OO 语言特性都还没稳定吧。至于 IDE 和调试工具我估计你是没用过 VS，这差距就是真是走路和高铁了吧。至于熟悉的语法，呵呵，程序员靠语法吃饭？&lt;br&gt;&lt;br&gt;“语言只是工具” 其实还有另外一句话，“不懂就别瞎扯蛋”。这种问题都能秀出优越感，贵厂这广告真是负分不能更多。我甚至怀疑是什么样的人在做贵厂的技术了，眼光能狭隘成这样。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nUPDATE 我关陌生人评论了，懒得理会无脑喷，想 argue 的先上干货自己回答去。 UPDATE2 <a data-hash=\"fe4430f82eb80feaa8c09e473fbf5d90\" href=\"//www.zhihu.com/people/fe4430f82eb80feaa8c09e473fbf5d90\" class=\"member_mention\" data-editable=\"true\" data-title=\"@胡天硕\" data-tip=\"p$b$fe4430f82eb80feaa8c09e473fbf5d90\" data-hovercard=\"p$b$fe4430f82eb80feaa8c09e473fbf5d90\">@胡天硕</a> 你说我我给出了一堆理由，为什么js不应该是年度语言。我倒是很想知道我那一句说了 js 不应该是年度语言。 另外你说我漏洞百出，来嘛来个漏洞嘛，我不要求一百个…\n\n<a href=\"/question/27459396/answer/36930388\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-01-10\" target=\"_blank\" href=\"/question/27459396/answer/36930388\">编辑于 2015-01-12</a></p>\n\n",
    "link": "https://zhihu.com/question/27459396/answer/36930388"
  },
  {
    "question": "\n怎么评价真阿当的前端收费收徒计划？\n",
    "author": "萧井陌",
    "content": "\n\n<textarea hidden class=\"content\">谁无聊不如来找我吧，一年只收 999，相较而言我实在是实在得太多了，下面对比介绍一下，各位看看有多超值&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;从我的过往经验看，自认还是适合做老师的。这里之前出的一套视频教程，有兴趣的同学可以感受下，阿当大话西游之WEB组件 但这次，我打算做的，并不是老师，而是师父。既是师父，就要有规矩，入师门要正式，要当师兄弟前下跪敬茶。我本也不喜欢这套，而且我自己也会尴尬，只是人性是犯贱的，太容易太轻描淡写的事情，人总会不当回事。仪式感也是不得己的形式。&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;我不谈过往经验，也不谈自认如何。成功案例倒是不少，没有低于年薪十万的，涵盖前端、后端、移动开发（除微软手机）、服务器开发、图形图像领域，总之干啥的都有。&lt;br&gt;&lt;/li&gt;&lt;li&gt;我绝对不会玩「拜师」这一套，现在都什么年代了，作为一个识字起就接受社会主义先进文化熏陶的新时代接班人，心中只有平等互利，断无此种鬼畜般的思想（&lt;a href=&quot;https://www.zhihu.com/question/25984818/answer/31765717&quot; class=&quot;internal&quot;&gt;如何和知乎上的大神们建立联系？ - 萧井陌的回答&lt;/a&gt;）&lt;/li&gt;&lt;li&gt;我不是老师，只是个陪聊，不会对你提鬼畜要求&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;blockquote&gt;收的徒弟条件有三:1是人品，2是态度，3才是能力。规矩有三:1，既入师门，要尊敬师长团结师兄妹，2，能力未成不出师门，入师门至少待满两年，3，不轻易跳槽，不轻易被挖角，不轻易抱怨师父的安排，有事主动跟师父商量。入师门最重要的不是能力，能力不够我可以教，最重要的也不是学习态度，而是人品。人品这词很泛，我觉得最核心的是要有懂得感恩的心，私以为这是现代人最缺的，却也是最最重要的。&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;不要求你人品好态度佳能力强，更不可能要求你两年工作经验了&lt;/li&gt;&lt;li&gt;不要求你不跳槽，人往高处走，能发挥更大的价值赚更多钱纳更多税当然是利国利民&lt;/li&gt;&lt;li&gt;我不觉得现代人缺人品、不懂得感恩，这个时代肯定是目前为止最好的时代，所以对你没额外要求&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;blockquote&gt;我能教的东西不只是前端技术，部分后端技术，还有项目管理，团队管理和职场心得，如果将来想转型产品和运营，我也能和你分享一个技术老炮的转型经验。有兴趣的同学可以联系我。注意，你需要来上海工作，不打算来上海的同学勿试。&lt;/blockquote&gt;&lt;ul&gt;&lt;li&gt;如上所述，你想掏的粪我应该都可以教，前端粪后端粪管理粪心机粪斗争粪都行，掏粪哪用分那么细&lt;/li&gt;&lt;li&gt;我有能力对你的『任何问题』给出解决方案，这是我作为一个高级陪聊的最大优势与价值&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;赶快打电话订购吧</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n谁无聊不如来找我吧，一年只收 999，相较而言我实在是实在得太多了，下面对比介绍一下，各位看看有多超值 从我的过往经验看，自认还是适合做老师的。这里之前出的一套视频教程，有兴趣的同学可以感受下，阿当大话西游之WEB组件 但这次，我打算做的，并不是…\n\n<a href=\"/question/41112707/answer/89748814\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/41112707/answer/89748814\">发布于 2016-03-08</a></p>\n\n",
    "link": "https://zhihu.com/question/41112707/answer/89748814"
  },
  {
    "question": "\n好的 Web 前端年薪会有多少？\n",
    "author": "匿名用户",
    "content": "\n\n<textarea hidden class=\"content\">&lt;img src=&quot;https://pic3.zhimg.com/9248beaa14e8fc8c7f90c38264d885ea_b.jpg&quot; data-rawwidth=&quot;419&quot; data-rawheight=&quot;178&quot; class=&quot;content_image&quot; width=&quot;419&quot;&gt;昨天发的工资，匿了，二流互联网公司前端。&lt;br&gt;&lt;br&gt;---&lt;br&gt;&lt;br&gt;2013年底的行情 拿了一年了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic3.zhimg.com/9248beaa14e8fc8c7f90c38264d885ea_200x112.jpg\" data-rawwidth=\"419\" data-rawheight=\"178\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic3.zhimg.com/9248beaa14e8fc8c7f90c38264d885ea_r.jpg\">\n昨天发的工资，匿了，二流互联网公司前端。 --- 2013年底的行情 拿了一年了。\n\n<a href=\"/question/19723850/answer/31189615\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-09-29\" target=\"_blank\" href=\"/question/19723850/answer/31189615\">编辑于 2015-10-12</a></p>\n\n",
    "link": "https://zhihu.com/question/19723850/answer/31189615"
  },
  {
    "question": "\n程序员适合去成都发展吗？\n",
    "author": "小绿",
    "content": "\n\n<textarea hidden class=\"content\">不要再说帝都工资比成都高这种话了，我从来都没说过帝都工资比成都低啊。&lt;br&gt;---------------------------&lt;br&gt;&lt;br&gt;你10k，你男朋友15k，到成都来什么概念呢？&lt;br&gt;&lt;br&gt;买房是大事：&lt;br&gt;&lt;br&gt;&lt;br&gt;软件园周边房价均价7700（实得面积）算8000的话，你们月薪买三平米&lt;br&gt;&lt;br&gt;如果愿意坐几站地铁上班（往南四站以内），南延线均价6000，你们月薪能买四平米。比如这个：（此价格为15年8月）&lt;br&gt;&lt;img data-rawheight=&quot;3264&quot; data-rawwidth=&quot;2448&quot; src=&quot;https://pic2.zhimg.com/eab09e105c71c3cd5611a82268319829_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2448&quot; data-original=&quot;https://pic2.zhimg.com/eab09e105c71c3cd5611a82268319829_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;买70平的房子，软件园附近，按你们的收入不吃不喝的话，可能你们需要奋斗两年才能全款买哦。ˊ_&amp;gt;ˋ&lt;br&gt;&lt;br&gt;买南沿线的话，需要一年半吧。&lt;br&gt;&lt;br&gt;没错就是全款。&lt;br&gt;&lt;br&gt;如果有房产销售小姐说：我们房子一万一平，你可能会听到成都人说“抢钱所？”&lt;br&gt;&lt;br&gt;注意！注意！我补充一下！我说的上面的话意思仅仅是“成都房价很便宜”，而且成都人并不太买开发商的帐。我的天…不要跟我说哪里哪里明明上万，我说的是软件园的价格嘛T-T&lt;br&gt;       如果两口子都在软件园上班非要买春熙路、桐梓林、万象城、建设路的房子，那也是醉了啊。只有不了解地段规划的外地人才会首先考虑买房买市中心，成都本地人不会执着这个。&lt;br&gt;&lt;br&gt;      另外我只是根据他们目前的收入水平打比方，来成都，一般情况来说工资没以前那么高，但你要说得打折扣那么大我也觉得不全面。我身边工资少于10k的开发真的很少，（针对有一定时间开发经验），甚至还有20k的。这个真的分人，评论里有在成都的IT人也反驳过这种不客观的说法，薪资这种事情真的也看人～举个真栗子，某沿海城市特效月薪15k，成都某游戏公司把他挖过来给了27k…这种事情也不是没有好吗！（据说后来这家伙来了成都不到一年就结婚了，再也不想回去了）&lt;br&gt;&lt;br&gt;-------------&lt;br&gt;吃的话，我就不说了。&lt;br&gt;&lt;br&gt;-------------&lt;br&gt;成都美女多，诱惑还是蛮大的。整个城市很懒，离婚率也蛮高。这几年更是破纪录……每年都会看到类似这样的统计：&lt;img data-rawheight=&quot;202&quot; data-rawwidth=&quot;304&quot; src=&quot;https://pic2.zhimg.com/bb8032b2c4707e16fa2bc8e778869e69_b.jpg&quot; class=&quot;content_image&quot; width=&quot;304&quot;&gt;&lt;br&gt;     虽然全球五百强中有超过一半在成都，但是啊…这是个不喜欢加班的城市。（我也不喜欢加班可我天天加班啊！）在成都加班到八九点员工就会不爽，十点就抱怨…后来有沿海同学说我们太懒…他们都加到12点Σ（ﾟдﾟlll）前段时间我们加班到八点半，都想辞职了，吓得老板赶紧给我们放了假…对了，那首《老子明天不上班》就是成都人唱的………………说这些不是说成都不加班，而是说成都整体来说比较懒散，kpi是什么可以吃吗？&lt;br&gt;&lt;br&gt; 如果你们想创出一番天地，成为人中之龙，获得最好的互联网环境！一线的信息和机会，实现牛逼哄哄的梦想，还是去沿海吧。拼搏的时候，少不入川。&lt;br&gt;&lt;br&gt;    如果你们想结婚生子安定下来，拥有很高的生活质量，但又不至于埋没了事业，那就来成都吧。&lt;br&gt;&lt;br&gt;      成都适合结婚，撸串，火锅，大街小巷地吃，坐在树荫里逗猫。漫展的时候被萌得满脸血。矫情地喝咖啡，在小店喝茶。打麻将。周末去看个电影，晚上在路边小摊喝碗汤。软件园里的设计师自黑着，程序员对着bug叹气，外卖店各种竞争激烈。大家周末都排队等着吃火锅。&lt;br&gt;&lt;br&gt;     PS： 虽说成都的IT环境都是懒懒慢慢，但是也不乏好产品。今年都说成都游戏完蛋了，然而最后成绩令人乍舌地好……如果题主是做游戏开发的，建议过来哦～&lt;br&gt;&lt;br&gt;     zf加大对天府新区的建设，想象一下吧，你在加班改代码，你的孩子可能就读于办公楼附近的软件园小学。里面的孩子都是IT宝贝。爸爸都是程序员、产品之类。而这个学校是成都zf特地规划的，你所工作的写字楼是zf便宜租、甚至免费给你公司的。成都创业环境非常好，但依旧不适合创业（不好意思地说还是因为氛围散漫了点\\(//∇//)\\）不过，我喜欢这种自由轻松又不会耽误正事的感觉。&lt;br&gt;&lt;br&gt;----------&lt;br&gt;人的话：这大概是最不排外的城市了。&lt;br&gt;四川人友好的民风直接表现在这句“我带你们去吃那家店！巴适得很！”&lt;br&gt;&lt;br&gt;那个曾经写下“世界那么大，我想去看看”的辞职信的女教师，旅行的脚步最终也停留在了成都。&lt;br&gt;&lt;br&gt;总之欢迎你来腐…啊不，成都，来了，可能就不想走了。也许有一天你也熟练地吃着冒菜烧烤火锅，你们手牵着手乘地铁去春熙路涌进熙攘的人群，你们可能会爱上这个懒懒的城市，食物很便宜，空气不太好，人们走路很慢。也许有一天，你们的父母也会爱上成都，也会和成都老太太打成一片，学会了在溪流里喝茶打麻将。比如这样：&lt;br&gt;&lt;img data-rawheight=&quot;267&quot; data-rawwidth=&quot;500&quot; src=&quot;https://pic1.zhimg.com/835a32e9bba0e270cb451f2e031f0750_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/835a32e9bba0e270cb451f2e031f0750_r.jpg&quot;&gt;&lt;img data-rawheight=&quot;456&quot; data-rawwidth=&quot;720&quot; src=&quot;https://pic2.zhimg.com/4bf9d64a366d7fa0288c3226a04d6961_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;720&quot; data-original=&quot;https://pic2.zhimg.com/4bf9d64a366d7fa0288c3226a04d6961_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;1280&quot; data-rawwidth=&quot;1280&quot; src=&quot;https://pic2.zhimg.com/bc3948b347409c8ffe7e934c41590c3d_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1280&quot; data-original=&quot;https://pic2.zhimg.com/bc3948b347409c8ffe7e934c41590c3d_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;最后给大家推荐一首谢帝的《老子就爱呆到成都耍》</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img data-rawheight=\"3264\" data-rawwidth=\"2448\" src=\"https://pic2.zhimg.com/eab09e105c71c3cd5611a82268319829_200x112.jpg\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/eab09e105c71c3cd5611a82268319829_r.jpg\">\n不要再说帝都工资比成都高这种话了，我从来都没说过帝都工资比成都低啊。 --------------------------- 你10k，你男朋友15k，到成都来什么概念呢？ 买房是大事： 软件园周边房价均价7700（实得面积）算8000的话，你们月薪买三平米 如果愿意坐几站地铁上班（…\n\n<a href=\"/question/27470940/answer/49542219\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-31\" target=\"_blank\" href=\"/question/27470940/answer/49542219\">编辑于 2015-08-10</a></p>\n\n",
    "link": "https://zhihu.com/question/27470940/answer/49542219"
  },
  {
    "question": "\n为什么互联网的新人没项目做，很难找到工作？\n",
    "author": "暗灭",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;题外话：&lt;/b&gt;&lt;br&gt;在修真院的线下，一年多的时间，陆陆续续带过100多人做项目。总会发现有很多新人在跟项目的时候会遇到一些问题，今天刚好挨个跟项目组成员挨个聊了聊，总结了一些我觉得对新人跟项目的过程中会遇到的问题，整理一下，看看是否能对新进跟项目的人有帮助。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;前言：&lt;/b&gt;&lt;br&gt;&lt;br&gt;这是IT修真院自问自答系列第六篇，同样是干货和硬广混杂。&lt;a href=&quot;https://www.zhihu.com/collection/77083735&quot; class=&quot;internal&quot;&gt;IT修真院系列 - 收藏夹&lt;/a&gt;，顺手推荐一下修真院的专栏，各种IT行业的真实小故事。&lt;a href=&quot;https://zhuanlan.zhihu.com/jnshu&quot; class=&quot;internal&quot;&gt;IT修真院 - 知乎专栏&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;PS：本文依然是不对任何人负责，观点依然偏激而且绝不客观。&lt;br&gt;&lt;br&gt;===========某人你很久没出来陪我说话了===========&lt;br&gt;一  会遇到哪些问题。&lt;br&gt;&lt;br&gt;1.&lt;br&gt;&lt;br&gt;&lt;u&gt; Question：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   在跟项目的时候遇到问题，请教老司机的时候，会经常遇到司机脸色不好看，不耐烦。&lt;br&gt;   而且老司机们都很忙，一来二去，根本不敢向他们问问题，或者是老司机们总让我自己去百度。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;   Answer：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   A。记着做为新人，不能要脸。&lt;/b&gt;&lt;br&gt;&lt;br&gt;这是我告诉所有修真院的弟子们的最重要的话。&lt;br&gt;          你是新人，你是菜鸡，被人打，被人嘲笑，被人鄙视，是应该的。 &lt;br&gt;          你犯了错误，有理解不了的问题，有解决不了的困难，有不知道的技术难点，都是正常的，否则怎么是菜鸡呢？&lt;br&gt;&lt;br&gt;         别把自己当爷看，抛开自己的自尊自重自爱什么的，心态要放好。&lt;br&gt;         等你把问题一个个的解决了，你就不是菜鸟了。&lt;br&gt;&lt;br&gt;&lt;b&gt;  B。不要随时随地打扰别人，学会把问题整理清楚，汇总，提交跟对方约一个他空闲的时间。&lt;/b&gt;&lt;br&gt;&lt;br&gt;         哪一个老司机都不可能保证自己的心情一定很好，特别是在为程序苦闷的时候。但是百分之九十九的人都是乐于分享知识的人。所以不要自己不会了，随时随地的去打扰别人，给别人一个整块的工作时间。&lt;br&gt;&lt;br&gt;       自己学会收集和整理问题，在问问题的时候，最忌讳的就是问别人：“这个该怎么做，或者是这个问题怎么解决。”&lt;br&gt;&lt;br&gt;        这是我最不喜欢的方式，问问题之前，自己先去找一下相关资料，把自己的思路理清楚，做一些验证和测试，描述问题具体化，比如说，Java工程师不要说什么功能不能用，直接告诉我应该是什么结果，但是出了什么结果，自己做了哪些错误原因的推测，需要我来帮你验证什么。&lt;br&gt;&lt;br&gt;        很多问题都有自己的上下文，不要理所当然的认为你说一个字，老司机们瞬间就懂了。他们要理解你的场景，很多时候出错的原因往往是因为思路一开始就是错的，所以要记得把自己的前因后果简明扼要的讲清楚。特别记着，截屏一定要截全屏，别担心自己的各种“饭X爱”被人发现。这些相关的问题我觉得我要说细了能说十年以上，这儿不多说。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   C。别人帮你解决过的问题，如果成功了，记得做一下记录。如果没成功，自己找到解决方案了，记得知会一下帮助过你的人。&lt;/b&gt;&lt;br&gt;&lt;br&gt;      学会什么东西呢，一定要学会总结，问问题之前把问题记下来，问问题之后把问题整理出来。这些都是好习惯。&lt;br&gt;     没人会讨厌这样的孩子。&lt;br&gt;&lt;br&gt;     PS：注意，不要在一个小问题上耽搁太久，给自己一个预先估计好的时间，对新人来说，超过四个小时解决不了的问题，就该放一放，准备请教别人了。&lt;br&gt;&lt;br&gt;&lt;b&gt;  D。经常请老司机们吃饭。程序们没别的爱好。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;2.&lt;br&gt;&lt;u&gt;Question：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    项目中能学到什么内容？怎么总感觉自己除了自己负责的一部分模块，其他的都不太懂，完全不知道该怎么学习。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;  Answer：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    A。项目是最快的学习方式，没有之一。&lt;/b&gt;&lt;br&gt;&lt;br&gt;再让我看到说写代码看视频的直接摔死，最恨的就是这种，每次我听到有人抱怨说自学太难，不看视频看不懂，我就瞬间烦燥值上升10000点。根本不想说话，对于初学者来说，重点不在于是学起来难不难，而是一种自学能力的培养。自己查找问题，解决问题，这是程序员恒久不变的话题。前期打基础的时候不去培养，什么时候去培养？&lt;br&gt;&lt;br&gt;         要想在项目里学到有用的东西，首先要明白一个道理。&lt;br&gt;&lt;br&gt;          很多2B们都以为跟着视频会点编程语法，使用一个框架这就是程序员了。其实是个毛线。&lt;br&gt;&lt;br&gt;&lt;b&gt;           对于程序员来讲，第一件事，就是要学会理解需求。&lt;/b&gt;&lt;br&gt;&lt;br&gt;           很多新人往往会忽视这一点，需求是什么都弄不清楚，怎么写代码。根本不知道自己要做什么，做成什么样，你把代码写出来给我，我在我脸上用毛笔写一个大写的服字，还用蓝色的。&lt;br&gt;&lt;br&gt;            所以在项目里，你第一个要学会的就是怎么理解需求。如果有需求不清楚的地方，怎么跟PM沟通。很多时候，你会自以为理解了，做到一半会发现做不下去。别慌张，找PM去问清楚，70%的情况其实是PM一开始的设计就有问题，还有20%的情况是你自己没理解清楚。还有10%的情况是你想太多了。&lt;br&gt;&lt;br&gt;            这是在项目里第一个要学到的东西，不要小看这种经验，这是成为一个好的程序员的前提。对于一个程序员来说，还需要有某种预知能力，会预测在未来一段时间内，需求有可能会扩展到什么程度，以便调整自己的架构体系。这些是后话。&lt;br&gt;&lt;br&gt;&lt;b&gt;          第二件事，学会先设计，再写代码，最后做测试和重构。&lt;/b&gt;&lt;br&gt;&lt;br&gt;         20%的时间用来设计，30%的时候用来编码，30%的时间用来测试，20%的时间用来重构。&lt;br&gt;         这是我对Team的要求。&lt;br&gt;&lt;br&gt;         很多新人都会以为代码写出来 ，实现了就算完事了，对于一个老司机来说，这是个毛线。 &lt;br&gt;          所以你看你妹的视频啊，视频里能替你写代码做项目么。我不算太反对看视频，但是百分百反对首选看视频，如果你遇到不会的问题，可以去找各种资源，这个没问题，可是打算按步就班的跟着视频去做东西，对不起，有点扯。所以对于现在线下的培训机构，北京弄个老师来一个视频直播，其它二线三线城市跟看电影一样看着直播听课，下午或者是晚上做做练习题，真心是。。。丹藤，还以为自己是幼儿园学生呢？&lt;br&gt;&lt;br&gt;&lt;br&gt;        所以要学会做设计，什么叫做设计。理解了需求，就需要想清楚自己该怎么做，先想清楚，再去落笔写代码。&lt;br&gt;        真想不清楚，直接写代码也可以，也许你写着写着就知道怎么做了。前期可以这么做，但是会写之后，还是需要仔细想一想，能不能做到在看到需求的时候，就去想这个东西怎么实现。&lt;br&gt;&lt;br&gt;        提前把项目里自己负责的模块都过一遍。后端工程师请学会独立的去做DB表结构的设计和模块的划分，以及接口文档。前端工程师请学会独立的跟后端去商定接口和模拟数据。这个要求有点高，但是是程序的起步，我在很多问答里都说过，我觉得程序员只分在三种，初级程序员就是能独立完成项目的，中级程序员就是能带团队的，懂架构的。高级程序就是能独立写框架写语言的顶级工程师。&lt;br&gt;        这几个阶段之内的程序员没什么差别。所以提前准备好，先从能够独立做项目开始。&lt;br&gt;&lt;br&gt;       写代码的时候尽量的去写单元测试。嗯。哪种语言基本上都有一些单元测试的框架。前端的单元测试的价值我没体会太多，但是一定要做集成测试。这个等会会提到，这儿只提一下，项目里开发的时间分配，以及怎么去做设计。&lt;br&gt;&lt;br&gt;&lt;br&gt;    这些都是在跟项目中，你应该学会和体会到的。&lt;br&gt;&lt;br&gt;&lt;b&gt;     第三件事，学会维护好接口文档，学会写假数据，学会持续集成。&lt;/b&gt;&lt;br&gt;&lt;br&gt;      我家的小培宇，前段时间刚刚让我发现一件很奇葩的事。Y的这货跟他的好基友抱着本本在一起做，不维护接口文档，这边说，那边改，两个人玩的不亦乐乎。然后其他的人调后端的接口的时候完全傻眼了，根本不知道哪个接口代表什么意思，Wiki上全是错的，没有更新的，跟真实的数据完全对不上。&lt;br&gt;     还有更可怜的两个WEB小兄弟压根不敢问，NND的在那猜接口字段是什么。我当时就吃了一惊，这都能猜出来，也太神了吧。后来小兄弟说这个界面看起来跟另一个界面很像，所以就用另一个界面的参数名拿过来试一试，结果成功了~开森的不得了。&lt;br&gt;&lt;br&gt;    马丹，当时我就想把培宇斩了。想了想他还有点用就手下留情。&lt;br&gt;&lt;br&gt;     做为一个进项目的新人，一定要学会维护了接口文档，如果你所在的团队自己都没有接口文档，赶紧的改变他们的工作方式，如果他们不变，速度换工作，嗯。听我的，错了我绝对不会负责。&lt;br&gt;&lt;br&gt;   接口文档一定要先写，项目中开发的顺序应该是，听完需求讲解，直接定义接口，通常先定出来有哪些接口，具体的接口字段可以不填。然后后端或者是前端，出一个人去维护好Wiki，Wiki写好了，给你的CP看一下。没问题，就照着接口文档去做。&lt;br&gt;&lt;br&gt;      写完之后，千万不要跟一个2B铅笔一样，把所有的代码都写完，再去调试，这种方式早过时了。&lt;br&gt;     写完一个，调试一个，对于后端工程师来说，第一件事就是要部署程序到自己的开发服务器，开发-测试-线下，这个我应该之前提到过。然后速度，马上的把所有的接口的假数据全部提供出来。&lt;br&gt;     很简单，直接写JSP给数据就好，如果你是用Json-taglib直接生成Json的话，我个人非常不喜欢在Java代码中吐出Json，总觉得好Low，完全没法维护。但是你喜欢就好，所以道理是一样的，&lt;br&gt;不要写什么业务逻辑，更不要去写什么真实数据，第一时间，把假数据提供给前端，才是正理。&lt;br&gt;   如果你是前端，无论是Android还是IOS还是WEB，第一时间找后端工程师要假数据。后端工程师天生是骗子，他们总会骗你说，不用了吧，太麻烦，再过两分钟我的真实数据就写出来了。&lt;br&gt;    然后再过2000分钟他的真实数据恐怕还没出来，再不然就是破绽百出。所以后端程序员天生是骗子，不要相信他们。&lt;br&gt;&lt;br&gt;   遇到这种情况你就果断的强烈要求必须给假数据。你说我需要的不只是这一个接口，我需要所有接口的假数据，这样方便并行写代码。嗯。保持微笑，保持心态良好。记着给他看看你手里的刀。&lt;br&gt;&lt;br&gt;   退一步来说，如果没有假数据（实际上有很多靠谱的提供测试数据的工具，然而我还没接触到，还没在项目里用到），前端工程师要学会自己模拟假数据，让自己的业务流程能顺利走下去。&lt;br&gt;&lt;br&gt;    不要跟我说，因为后端没提供给你数据，所以前端的代码会延期。这是扯淡。自己做好模拟数据，该写的逻辑都可以写。这是并行开发的真谛。&lt;br&gt;&lt;br&gt;    然后，一整个Team都要把所有的代码部署到开发环境。嗯，这个说起来跟敏捷开发有一些关联了，不多说，我记得我有篇贴子是讲敏捷开发的，只是后来没多少人想看，懒得写了。&lt;br&gt;&lt;br&gt;    这些是做为一个新人来讲，也许你所在的团队，风格不是这样的，可是融入一个团队的开发流程，一定是你必须要学会的。&lt;br&gt;&lt;br&gt;&lt;b&gt;   第四件事，学会遵守编码规范，随时提交代码，不提交错误代码，避免代码冲突，提交代码要有备注。&lt;/b&gt;&lt;br&gt;&lt;br&gt;    马丹，好困。但是我不写完又怕明天没心情写了。&lt;br&gt;    每一个Team都有自己的编码规范，这是为了保证项目的统一性，还有各种好处，暂时略过不提。&lt;br&gt;&lt;br&gt;    不要相信你的电脑，所以随时提交代码。不要提交错误的代码，你百分百会被人骂XB，所以不要这么干。如果有冲突了，随时解决，随时更新代码。没有备注的代码，就好比是你偷偷养女人，没被抓住的时候无所谓，如果被抓住了，出了问题了，一定会先揪着你出来。&lt;br&gt;&lt;br&gt;   嗯。这个比喻不恰当，但是我现在脑袋转不动了。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   第五件事，学会测试。&lt;/b&gt;&lt;br&gt;&lt;br&gt;    PostMan是测试的利器，另外还有抓包工具，Fiddle，还有一个叫什么来着，IOS上的。&lt;br&gt;    测试的时候不要傻不拉叽的只测正确的流程，测试是要找问题的，找不问题你测个毛线。&lt;br&gt;&lt;br&gt;    做各种边界测试，各种组合条件。&lt;br&gt;&lt;br&gt;&lt;br&gt;3 &lt;br&gt;&lt;u&gt;Question：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    项目的核心源码公司不让我接触怎么办？&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;   Answer：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   A。换工作。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   B。换不了工作，就别计较，项目里可以学到的东西很多，先把其他的学会。&lt;/b&gt;&lt;br&gt;&lt;br&gt;这些东西，要么有一天你会被认可，要么你也别管怎么实现的，直接会用就行。以后有兴趣了自己重新写一个。&lt;br&gt;&lt;br&gt;&lt;b&gt;   C。请老司机吃饭。&lt;/b&gt;&lt;br&gt;&lt;br&gt;没有什么事情是一顿饭解决不了的，如果有的话，给他看你手里的砖头。&lt;br&gt;&lt;br&gt;&lt;br&gt;4 &lt;br&gt;&lt;u&gt;Question:&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    我在项目中只负责一个模块，基本不了解其他模块的内容，都是别人做的，我需要了解吗？怎么感觉除了自己做的模块外，其他的什么都不会？&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;    Answer：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;     A。百分百要，以一个App为例，可能前期你做的功能只有登录注册修改密码这些， 对于完全的小白来说，也就是要做这些项目开始做起。&lt;/b&gt;&lt;br&gt;&lt;br&gt;         这些东西呢。特点是业务逻辑不复杂，但是怎么发送网络请求，怎么取数据，解析数据，怎么展示数据，怎么测试，都是完整的，独立的。&lt;br&gt;         所以从这个模块入手，去了解一个小模块的完整流程。然后再看一些业务，交互比较复杂的模块。循序渐进，公司不给你安排新的模块，你就自己仿照着写呗。&lt;br&gt;&lt;br&gt;        除去业务相关的，再去了解一些第三方的公共组件。如果第三方登录分享，地图，支付，图片上传，IM，统计等。这些都是要花时间了解的，尽可能的先把项目中用到的一个学会。&lt;br&gt;       然后能够自己独立去写，不需要把所有的都学会，都做过对你来说是经验，没做完，能看到官方文档去实现，这是能力。两者都需要有。&lt;br&gt;&lt;br&gt;       比如说，第三方登录了，QQ的会了，微信和新浪的都大同小异。&lt;br&gt;&lt;br&gt;&lt;br&gt;       自己遇到的问题，学会的技术，都要学会写自己的技术博客，记录下来。很多东西不总结是不知道的。项目中很多时候都只是一个影子，很多框架都是之前搭好的。&lt;br&gt;      比如说，Android用Gradle,你可能用了，一知半解的，这个时候，就该去查一下Gradle是个什么东西，为什么要用他。好处是什么，除了Gradle，还有没有别的东西可以替代他的。&lt;br&gt;      比如说，Java用了SpringMVC，为什么要用SpringMVC?好处是什么，有别的框架么，好用吗：对比之下各有什么优缺点呢？&lt;br&gt;     一个项目中用到的可能只是一个开源软件里的一个点，但是你可以从这个点出发，以点带面，去了解的更深入一些，再去找一些相关的兄弟软件。嗯。&lt;br&gt;&lt;br&gt;      怎么可能会在项目里学不到东西呢？&lt;br&gt;&lt;br&gt;&lt;br&gt;5.&lt;br&gt;&lt;u&gt;Question：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   项目遇到问题不知道怎么解决，完全没有思路，报错日志什么的根本看不懂。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;   Answer：&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    A。知道有报错日志已经很不容易了。&lt;/b&gt;&lt;br&gt;&lt;br&gt;          先学会打日志，日志的级别我不说了，自己查一下去。常规来讲，一个方法的入参要打出来，出参要打出来。有关键业务逻辑判断的地方要打出来。打日志的时候，单个对象打全部，List打Size，嗯。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;   B。学会从报红的堆栈信息中去百度错误代码。相信你不是第一个遇到这些问题的人。 &lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    C。学会Debug。单步什么的都必须要学会。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;    D。学会移除无用代代码，去定位出问题的代码的地方。&lt;/b&gt;&lt;br&gt;&lt;br&gt;        一般常见的，跟上一个版本的正确代码比，跟其他项目的正确代码比，跟其他模块的正确代码比。故意写一些错误判断，看看是否正常出现错误。换一个新项目去单独测试会不会出问题。确认是不是环境问题或者是人品问题。&lt;br&gt;&lt;br&gt;      有时候还有可能是IDE有问题。&lt;br&gt;&lt;br&gt;&lt;br&gt;      不写了，已经完全是一团浆糊了。哪天有心情了再更新。&lt;br&gt;另外，还有谁在项目中遇到了问题，可以在评论里回复，我看时间和心情回复。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;============Bye，我是肚子疼又困的分界线============================&lt;br&gt;&lt;br&gt;&lt;b&gt;北京葡萄藤.IT修真院 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jnshu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;首页 | IT修真院&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;===============================&lt;/b&gt;&lt;br&gt;&lt;b&gt;免费，快速，高效的帮助IT新人入门，做一个“正直，善良，纯洁”的程序员。&lt;/b&gt;&lt;br&gt;&lt;b&gt;加QQ群：&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;1群2000人 &lt;/b&gt;185354188（已满）&lt;/b&gt;&lt;br&gt;&lt;b&gt;2群 1000人 &lt;b&gt;&lt;b&gt;424031650 (已满)&lt;/b&gt;&lt;/b&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;3群 500人 493806441（已满）&lt;/b&gt;&lt;br&gt;&lt;b&gt;4群 500人 580626624 （已满）&lt;/b&gt;&lt;br&gt;&lt;b&gt;5群 500人 604640559 （招募中）&lt;/b&gt;&lt;b&gt;&lt;br&gt;&lt;b&gt;&lt;b&gt;微信公众号：&lt;/b&gt;&lt;/b&gt;葡萄藤IT技能树&lt;/b&gt;&lt;br&gt;&lt;b&gt;IT修真院系列&lt;/b&gt; ： &lt;a href=&quot;http://www.zhihu.com/collection/77083735&quot; class=&quot;internal&quot;&gt;IT修真院系列 - 收藏夹&lt;/a&gt; 纯干货+硬广&lt;br&gt;&lt;b&gt;专栏&lt;/b&gt;：&lt;a href=&quot;https://zhuanlan.zhihu.com/jnshu&quot; class=&quot;internal&quot;&gt;IT修真院 - 知乎专栏&lt;/a&gt; 各种IT行业的真实小故事</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>题外话：</b> 在修真院的线下，一年多的时间，陆陆续续带过100多人做项目。总会发现有很多新人在跟项目的时候会遇到一些问题，今天刚好挨个跟项目组成员挨个聊了聊，总结了一些我觉得对新人跟项目的过程中会遇到的问题，整理一下，看看是否能对新进跟项目的人有…\n\n<a href=\"/question/49646794/answer/117059246\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-08-16\" target=\"_blank\" href=\"/question/49646794/answer/117059246\">编辑于 2016-12-18</a></p>\n\n",
    "link": "https://zhihu.com/question/49646794/answer/117059246"
  },
  {
    "question": "\n前端工程师最希望在什么样的环境内办公？\n",
    "author": "Milo Yip",
    "content": "\n\n<textarea hidden class=\"content\">沒有墙</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n沒有墙\n\n<a href=\"/question/28204149/answer/39881271\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28204149/answer/39881271\">发布于 2015-02-16</a></p>\n\n",
    "link": "https://zhihu.com/question/28204149/answer/39881271"
  },
  {
    "question": "\n有哪些不错的前端开发博客？\n",
    "author": "薛天禄",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;Brendan Eich&lt;/b&gt;，JavaScript 之父&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.aminutewithbrendan.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;aminutewithbrendan.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Douglas Crockford&lt;/b&gt;，JSLint 作者，《语言精粹》作者&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//javascript.crockford.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;javascript.crockford.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;           &lt;br&gt;&lt;br&gt;&lt;b&gt;John Resig&lt;/b&gt;，jQuery 作者&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ejohn.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;ejohn.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;          &lt;br&gt;&lt;br&gt;&lt;b&gt;Eric Meyer&lt;/b&gt;，CSS 相关的 web 标准推广人&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//meyerweb.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;meyerweb.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;           &lt;br&gt;&lt;br&gt;&lt;b&gt;Peter Koch&lt;/b&gt;，主要是 JavaScript API&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.quirksmode.org/blog/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;quirksmode.org/blog/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Paul Irish&lt;/b&gt;，HTML5 Boilerplate 发起人之一&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//paulirish.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;paulirish.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;          &lt;br&gt;&lt;br&gt;&lt;b&gt;Alex Russell&lt;/b&gt;，Chrome team 成员&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//infrequently.org/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;infrequently.org/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;   &lt;br&gt;&lt;br&gt;&lt;b&gt;Nicholas Zakas&lt;/b&gt;，&lt;i&gt;High Performance JavaScript &lt;/i&gt;作者&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.nczonline.net/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;nczonline.net/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;b&gt;Dustin Diaz&lt;/b&gt;，前 Googler，现 Twitter&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dustindiaz.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;dustindiaz.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;DailyJS&lt;/b&gt;，业界新闻博客&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dailyjs.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;dailyjs.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>Brendan Eich</b>，JavaScript 之父 <a href=\"//link.zhihu.com/?target=http%3A//www.aminutewithbrendan.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">aminutewithbrendan.com/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> <b>Douglas Crockford</b>，JSLint 作者，《语言精粹》作者 <a href=\"//link.zhihu.com/?target=http%3A//javascript.crockford.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">javascript.crockford.com</span><span class=\"invisible\">/</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> <b>John Resig</b>，jQuery 作者 <a href=\"//link.zhihu.com/?target=http%3A//ejohn.org/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">ejohn.org/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> <b>Eric Meyer</b>，CSS 相关的 web 标准推广人 <a href=\"//link.zhihu.com/?target=http%3A//meyerweb.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">meyerweb.com/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> <b>Peter Koch</b>，…\n\n<a href=\"/question/19951193/answer/13455380\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2011-12-05\" target=\"_blank\" href=\"/question/19951193/answer/13455380\">编辑于 2012-08-07</a></p>\n\n",
    "link": "https://zhihu.com/question/19951193/answer/13455380"
  },
  {
    "question": "\n近来国内外有哪些用户界面、交互体验设计优秀的产品？优秀在哪里？\n",
    "author": "evil lau",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;1、&lt;/b&gt;&lt;strong&gt;智能化与个性化的体验&lt;/strong&gt;&lt;br&gt;1）&lt;a href=&quot;//link.zhihu.com/?target=http%3A//itunes.apple.com/cn/app/zite-personalized-magazine/id419752338%3Fmt%3D8&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Zite&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;是一款内容阅读类应用，它会读取你在Google Reader、Twitter和Delicious账户中的内容信息， 分析你的个人喜好，并基于你的兴趣方向生成了一本完全个性化的杂志 ，使阅读更加智能化。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/1e916d47fea5e983d123ffa4d639dfc9_b.jpg&quot; data-rawwidth=&quot;364&quot; data-rawheight=&quot;483&quot; class=&quot;content_image&quot; width=&quot;364&quot;&gt;&lt;br&gt;2）Summly是一款自动新闻摘要，在日益繁忙的今天，帮你总结摘要，最大化的节省时间。极简的设计风格，界面简洁明快、设计极佳，具有原创性。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d9d1c835b39ba5c69f4d9a2d588db91f_b.jpg&quot; data-rawwidth=&quot;639&quot; data-rawheight=&quot;325&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;639&quot; data-original=&quot;https://pic4.zhimg.com/d9d1c835b39ba5c69f4d9a2d588db91f_r.jpg&quot;&gt;3）Appflow摒弃传统 App 推荐应用中呈现过多文字信息的方式，而是采用类似 Pinteret 的图片流方式展示 App。界面简洁、酷炫，给予用户带来沉浸式的搜索体验，不用进到详情页就可一睹APP的风采，第一眼感觉。APP下载地址&lt;a href=&quot;//link.zhihu.com/?target=https%3A//itunes.apple.com/hu/app/id539183053%3Fmt%3D8&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;itunes.apple.com/hu/app&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/id539183053?mt=8&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d1f7af8f34e92230015dd18b4c35aa93_b.jpg&quot; data-rawwidth=&quot;569&quot; data-rawheight=&quot;486&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;569&quot; data-original=&quot;https://pic4.zhimg.com/d1f7af8f34e92230015dd18b4c35aa93_r.jpg&quot;&gt;4）Phoster是一款制作精美海报、邀请卡片的应用。你可以不用任何的基础，只需要选择你喜欢的，发挥自己的艺术细胞，婚礼请帖自己之作吧。&lt;a href=&quot;//link.zhihu.com/?target=https%3A//itunes.apple.com/us/app/phoster/id396306670%3Fmt%3D8&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;itunes.apple.com/us/app&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/phoster/id396306670?mt=8&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/42d81a3a80d36a8e6e7cd69ed2976ed7_b.jpg&quot; data-rawwidth=&quot;749&quot; data-rawheight=&quot;476&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;749&quot; data-original=&quot;https://pic4.zhimg.com/42d81a3a80d36a8e6e7cd69ed2976ed7_r.jpg&quot;&gt;&lt;br&gt;5）&lt;b&gt;Vine&lt;/b&gt;。可以让你用短暂的6秒播放释放创造力，它是实时分享身边事的最强有力的工具，一种崭新的艺术形式。6秒时间的视频更能传神的表达出你想要表达的内容，比140字，一张照片更加生动。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/3ff0a8e2c2c8ec5715ce87559b15eec0_b.jpg&quot; data-rawwidth=&quot;952&quot; data-rawheight=&quot;604&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;952&quot; data-original=&quot;https://pic1.zhimg.com/3ff0a8e2c2c8ec5715ce87559b15eec0_r.jpg&quot;&gt;&lt;b&gt;2、生动的交互体验&lt;/b&gt;&lt;br&gt;1）&lt;b&gt;Clear&lt;/b&gt; 是一款 ToDo 应用，全手势操作。在Clear中你找不到一个返回按钮，下拉便可添加事项，两个手指捏合就可以将几个事项整合为一个列表。手指滑动便可在不同列表间切换。完成事项，想标注也十分简单，用手一划，再划便是删除。撤销返回上一步和黏贴，轻轻摇一摇手机即可。更加有满足成就感的音效。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.realmacsoftware.com/clear/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;To-Do Lists Made Breathtakingly Simple&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/da1aac110ab9a8a7a05975fa2ba55c7c_b.jpg&quot; data-rawwidth=&quot;605&quot; data-rawheight=&quot;296&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;605&quot; data-original=&quot;https://pic1.zhimg.com/da1aac110ab9a8a7a05975fa2ba55c7c_r.jpg&quot;&gt;&lt;br&gt;2）&lt;b&gt;Any do&lt;/b&gt;是一款 ToDo 应用，日常生活中最有成就感的事莫过于将计划完成，从便签条上划掉，Any do的设计更放大了这一“快感”。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/62888f29c428cac833fd75fb5ab538a3_b.jpg&quot; data-rawwidth=&quot;641&quot; data-rawheight=&quot;360&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;641&quot; data-original=&quot;https://pic4.zhimg.com/62888f29c428cac833fd75fb5ab538a3_r.jpg&quot;&gt;3）&lt;b&gt;Weathercube&lt;/b&gt;把所有天气信息设计在一个cube上，通过手势转动长方体，可以看到更全面的天气情况，营造立体感的同时，通过长方体的交互方式生动简洁的展示天气。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/aecb8a3057010196bffa949284351509_b.jpg&quot; data-rawwidth=&quot;469&quot; data-rawheight=&quot;310&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;469&quot; data-original=&quot;https://pic2.zhimg.com/aecb8a3057010196bffa949284351509_r.jpg&quot;&gt;4）Echograph让你的照片动起来。通过让局部动起来，并添加声音，生动有活力，让你的记忆有规律的韵动。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/26c3e683daa32cad4b72cd8c577750ca_b.jpg&quot; data-rawwidth=&quot;266&quot; data-rawheight=&quot;182&quot; class=&quot;content_image&quot; width=&quot;266&quot;&gt;5）Discovr是一款音乐探索类型的应用，它将手势操作的提示信息直接整合到了交互对象当中，当获取了足够的信息之后，圈中的文字会变为“Tap and hold me”，提示用户通过长按来完成接下来的操作。这种引导方式可以让用户不必离开当前的交互流程就能快速直接的对关键操作方式进行掌握。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/69ebf8e3e0d6af67259b13d62d9fa9be_b.jpg&quot; data-rawwidth=&quot;632&quot; data-rawheight=&quot;397&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;632&quot; data-original=&quot;https://pic3.zhimg.com/69ebf8e3e0d6af67259b13d62d9fa9be_r.jpg&quot;&gt;6）sooner是一款类 To do list应用。图形化圆盘界面，时间管理一手搞定，不需要来回调转，手指轻轻移动，制定你的计划。交互方式新颖，结果一目了然。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/2420f3e2cc727a578d762fd620507cab_b.jpg&quot; data-rawwidth=&quot;286&quot; data-rawheight=&quot;425&quot; class=&quot;content_image&quot; width=&quot;286&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/6bc4fca21311f3b1aeff148f66aaa976_b.jpg&quot; data-rawwidth=&quot;283&quot; data-rawheight=&quot;425&quot; class=&quot;content_image&quot; width=&quot;283&quot;&gt;&lt;br&gt;&lt;b&gt;3、简约至上&lt;/b&gt;&lt;br&gt;非常多的APP应用可关注「最美应用」&lt;b&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//brixd.com/nice/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;brixd.com/nice/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，相信总有一款适合你&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/1e916d47fea5e983d123ffa4d639dfc9_200x112.jpg\" data-rawwidth=\"364\" data-rawheight=\"483\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/1e916d47fea5e983d123ffa4d639dfc9_r.jpg\">\n<b>1、</b><strong>智能化与个性化的体验</strong> 1）<a href=\"//link.zhihu.com/?target=http%3A//itunes.apple.com/cn/app/zite-personalized-magazine/id419752338%3Fmt%3D8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Zite<i class=\"icon-external\"></i></a>是一款内容阅读类应用，它会读取你在Google Reader、Twitter和Delicious账户中的内容信息， 分析你的个人喜好，并基于你的兴趣方向生成了一本完全个性化的杂志 ，使阅读更加智能化。 2）Summly是一款自动新闻摘要，在日益繁…\n\n<a href=\"/question/20951814/answer/16707913\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-04-16\" target=\"_blank\" href=\"/question/20951814/answer/16707913\">编辑于 2013-04-16</a></p>\n\n",
    "link": "https://zhihu.com/question/20951814/answer/16707913"
  },
  {
    "question": "\n2015年前端开发技术栈及开发工具？\n",
    "author": "何幻",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;蟹妖。&lt;/p&gt;&lt;p&gt;贴自己的一篇文章吧：《前端程序员的自我修养》&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;-&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;-&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;读史使人明智。——弗兰西斯.培根&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;学习历史，&lt;/p&gt;&lt;p&gt;可以帮助我们看清现在的决定，&lt;/p&gt;&lt;p&gt;并为以后的发展做好准备。&lt;/p&gt;&lt;br&gt;&lt;p&gt;前端技术，是&lt;strong&gt;界面技术&lt;/strong&gt;的一种应用。&lt;/p&gt;&lt;p&gt;&lt;u&gt;字符界面&lt;/u&gt;&lt;em&gt;DOS&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;图形界面&lt;/u&gt;&lt;em&gt;GUI&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;浏览器界面&lt;/u&gt;&lt;em&gt;Browser&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;前端项目，属于B/S类型的&lt;strong&gt;平台体系结构&lt;/strong&gt;。&lt;/p&gt;&lt;p&gt;&lt;u&gt;文件/服务器&lt;/u&gt;&lt;em&gt;F/S&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;客户端/服务器&lt;/u&gt;&lt;em&gt;C/S&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;浏览器/服务器&lt;/u&gt;&lt;em&gt;B/S&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;JavaScript，是最流行的&lt;strong&gt;客户端技术&lt;/strong&gt;，&lt;/p&gt;&lt;p&gt;其他的还有，&lt;em&gt;Java-Applet Flash ActiveX Silverlight&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Web前端，是&lt;strong&gt;网页技术&lt;/strong&gt;一个发展阶段，&lt;/p&gt;&lt;p&gt;在这个过程中，服务器端经历了，CGI，Web框架，MVC，&lt;/p&gt;&lt;p&gt;客户端经历了，HTML，CSS，AJAX，前端MVC，前端组件化。&lt;/p&gt;&lt;br&gt;&lt;p&gt;JavaScript也推广到了服务器端，&lt;/p&gt;&lt;p&gt;&lt;u&gt;服务器端脚本&lt;/u&gt;&lt;em&gt;Node.js&lt;/em&gt;，&lt;/p&gt;&lt;p&gt;&lt;u&gt;数据库&lt;/u&gt;&lt;em&gt;MongoDB&lt;/em&gt;，&lt;/p&gt;&lt;p&gt;&lt;u&gt;WebApp&lt;/u&gt;&lt;em&gt;React-Native&lt;/em&gt;，&lt;/p&gt;&lt;p&gt;&lt;u&gt;桌面应用&lt;/u&gt;&lt;em&gt;nw.js&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;前端技术是一个处理&lt;strong&gt;人机交互&lt;/strong&gt;的关键环节，&lt;/p&gt;&lt;p&gt;各种技术都汇聚于此，&lt;/p&gt;&lt;p&gt;随着云计算需要，以及移动设备的出现，&lt;/p&gt;&lt;p&gt;前端已经变的越来越丰富多彩，&lt;/p&gt;&lt;p&gt;大有平分天下的趋势。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;-&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;strong&gt;前端技术栈&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;语言只是一种工具，对一个聪明的程序员来说，用没用过什么工具主要是由他原来的工作需要决定，并不能代表他全部的技能。&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;——请不要说自己是XX程序员&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;前端技术浩如烟海，&lt;/p&gt;&lt;p&gt;单纯JavaScript语言来说，也有数不清的细节，&lt;/p&gt;&lt;p&gt;为了有一个整体的印象，我们分类来看。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;精一行，必先通十行。&lt;/strong&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;u&gt;浏览器环境&lt;/u&gt;&lt;em&gt;IE6~8 IE9+ Chrome Firefox Safari Opera Edge&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;HTTP协议&lt;/u&gt;&lt;em&gt;URI Cache Session Cookie Request Response&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;HTML&lt;/u&gt;&lt;em&gt;W3C HTML4.01 HTML5 DOM 语义化&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;CSS&lt;/u&gt;&lt;em&gt;CSS1~3 选择器 盒模型 Flex 媒体检测 响应式 渲染引擎&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;JavaScript&lt;/u&gt;&lt;em&gt;EcmaScript3~5~6 Lexical-scope prototype-chain AJAX js引擎&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;编辑器&lt;/u&gt;&lt;em&gt;Emacs Vim WebStorm Atom Sublime-Text&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;发布部署&lt;/u&gt;&lt;em&gt;合并 压缩 单元测试 Node.js Grunt Gulp Yeoman Phantom JSLint&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;框架类库&lt;/u&gt;&lt;em&gt;jQuery Zepto UnderScore Backbone Knockout React AngularJS&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;模块管理&lt;/u&gt;&lt;em&gt;CommonJS Webpack&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;UI框架&lt;/u&gt;&lt;em&gt;BootStrap SemanticUI jQueryUI Foundation&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;推送技术&lt;/u&gt;&lt;em&gt;WebSocket 轮询 长连接&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;跨域技术&lt;/u&gt;&lt;em&gt;iframe JSONP CORS&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;数据可视化&lt;/u&gt;&lt;em&gt;D3 Echarts HighCharts Canvas&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;异步编程&lt;/u&gt;&lt;em&gt;Promise $.Deferred Generator&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;CSS预处理器&lt;/u&gt;&lt;em&gt;LESS SASS Stylus&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;客户端模板&lt;/u&gt;&lt;em&gt;Handlebars Haml Jade Mustache&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;相关语言&lt;/u&gt;&lt;em&gt;CoffeeScript TypeScript Dart WebAssembly&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;u&gt;WebApp/PC&lt;/u&gt;&lt;em&gt;React-native ionic&lt;/em&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;以上提到的这些，&lt;strong&gt;几乎成了前端程序员的标配了&lt;/strong&gt;，&lt;/p&gt;&lt;p&gt;所以，我们需要很努力，才不会被淘汰。&lt;/p&gt;&lt;br&gt;&lt;p&gt;JavaScript是一个动态弱类型的，原型继承的，函数式的编程语言，&lt;/p&gt;&lt;p&gt;掌握它并不简单，也为了与服务器端程序员愉快的沟通，&lt;/p&gt;&lt;p&gt;我们还要再学习一些&lt;strong&gt;编程语言&lt;/strong&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;C/Rust/Go&lt;/p&gt;&lt;p&gt;C#/Java&lt;/p&gt;&lt;p&gt;Scheme/Haskell&lt;/p&gt;&lt;p&gt;PHP/Python/Ruby&lt;/p&gt;&lt;p&gt;Prolog/Erlang&lt;/p&gt;&lt;br&gt;&lt;p&gt;包括命令式，面向对象，函数式，逻辑式，&lt;/p&gt;&lt;p&gt;各种典型的编程泛型。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;-&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;strong&gt;少争论多读书&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;思而不学则殆。——孔子&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;我们之所以迷惑，不是因为缺少思考，&lt;/p&gt;&lt;p&gt;而是缺少学习。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;strong&gt;前端的书籍&lt;/strong&gt;越来越容易找到了，&lt;/p&gt;&lt;p&gt;除了EmcaScript语言规范之外，还有一些有趣的读物。&lt;/p&gt;&lt;br&gt;&lt;p&gt;JavaScript权威指南&lt;/p&gt;&lt;p&gt;JavaScript高级程序设计&lt;/p&gt;&lt;p&gt;JavaScript语言精粹&lt;/p&gt;&lt;p&gt;JavaScript模式&lt;/p&gt;&lt;p&gt;JavaScript DOM高级程序设计&lt;/p&gt;&lt;p&gt;高性能JavaScript编程&lt;/p&gt;&lt;p&gt;JavaScript异步编程&lt;/p&gt;&lt;p&gt;JavaScript忍者的秘密&lt;/p&gt;&lt;br&gt;&lt;p&gt;基于MVC的JavaScript Web富应用开发&lt;/p&gt;&lt;p&gt;jQuery权威指南&lt;/p&gt;&lt;p&gt;犀利开发jQuery内核详解与实践&lt;/p&gt;&lt;p&gt;jQuery Mobile权威指南&lt;/p&gt;&lt;p&gt;用AngularJS开发下一代Web应用&lt;/p&gt;&lt;p&gt;Node.js开发指南&lt;/p&gt;&lt;p&gt;高性能网站建设指南&lt;/p&gt;&lt;p&gt;响应式Web设计&lt;/p&gt;&lt;br&gt;&lt;p&gt;快速软件开发&lt;/p&gt;&lt;p&gt;测试驱动开发&lt;/p&gt;&lt;p&gt;重构&lt;/p&gt;&lt;p&gt;人月神话&lt;/p&gt;&lt;p&gt;敏捷软件开发：原则，模式与实践&lt;/p&gt;&lt;p&gt;面向模式的软件架构&lt;/p&gt;&lt;p&gt;计算机程序的构造与解释&lt;/p&gt;&lt;br&gt;&lt;p&gt;读书是一个愉快的过程。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;-&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;b&gt; -&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wenku.baidu.com/link%3Furl%3DcGPDDS0nM8fKJgWVzf7YsgagTCfTrM_6U9BwvWg3w8YkjMH11ZA7bWZ7L68Aq_swpvFzOEcYS5I-fZpcpATU1nSfYpH6UW2ZPd4dd6b28py&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「浅论CS和BS体系结构」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/45169/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「Web开发的发展史」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wenku.baidu.com/link%3Furl%3Dm8fPjYHf5Q8_6hke8GttfLN9qtHpICgFCVtUsC7TYbjq5wb5HPjGGJaMwWp-zFEdfdNnLW4iKh4LfRKPVR71LywoZ4SPSp-3KTGigv8G9ve&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「Web的发展史」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/blog/issues/10&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「前端工程——基础篇」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//javascript.info/tutorial/overview&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「Overview: JavaScript, Flash, Java, Silverlight and ActiveX」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hechuanzhen.iteye.com/blog/1680685&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「jQuery,Extjs,YUI,Prototype,Dojo 等JS框架的区别和应用场景简述」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/45170/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「Web开发技术的演变」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.oschina.net/question/2320925_227508&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「请不要说自己是Java程序员」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/unruledboy/WebFrontEndStack&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「WebFrontEndStack」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wenku.baidu.com/link%3Furl%3DTGWloxxKzDXe2CxwtKUxVVlX_ytO05K5-nH_CJPUlljpkU_Q60gpcoQuRIVrR-xsQtBPHJqv6-e8QcMWEPFtoXTfoD5D4JvyP_0DwAU1rXS&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;「服务器内容推送技术」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n蟹妖。贴自己的一篇文章吧：《前端程序员的自我修养》 <b>-</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b>-</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b><b> -</b> <strong>读史使人明智。——弗兰西…</strong>\n\n<a href=\"/question/33179506/answer/75015013\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-03\" target=\"_blank\" href=\"/question/33179506/answer/75015013\">编辑于 2015-12-03</a></p>\n\n",
    "link": "https://zhihu.com/question/33179506/answer/75015013"
  },
  {
    "question": "\n如何评价数据流管理架构 Redux?\n",
    "author": "杨森",
    "content": "\n\n<textarea hidden class=\"content\">1月17日更新，来填坑了……&lt;br&gt;&lt;br&gt;首先感谢大家的谬赞，正如  &lt;a data-hash=&quot;b41fa1d6811ff28237f7f536d6c45f52&quot; href=&quot;//www.zhihu.com/people/b41fa1d6811ff28237f7f536d6c45f52&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@Reducer&quot; data-tip=&quot;p$b$b41fa1d6811ff28237f7f536d6c45f52&quot; data-hovercard=&quot;p$b$b41fa1d6811ff28237f7f536d6c45f52&quot;&gt;@Reducer&lt;/a&gt; （这名字，真不是专门为了 Redux 取的么……）所说，我的答案都是在吐槽 Redux 生态圈云云，并没有讲到 Redux 本身。&lt;br&gt;&lt;br&gt;&amp;gt; 本来写了很长的答案，但是写着写着感觉好像变成了 Redux 入门指南……所以全数删除，只写自己对 Redux 的评价与感受。&lt;br&gt;&lt;br&gt;Redux 对我来说，最耀眼的不是什么自动热部署，也不是酷炫的 redux-devtools，而是它最基础的定位 —— 一个可预测的状态容器（predictable state container）。&lt;br&gt;&lt;br&gt;为什么？&lt;br&gt;&lt;br&gt;在没有 Flux/Redux 之前，我们的 React 应用架构的 Model 层使用的是 Backbond.Model。对于有 Backbone 基础的人来说，整合 React 与 Backbone 的 Model 简直易如反掌。&lt;br&gt;&lt;br&gt;一开始的时候我们也用的很爽，React 组件 componentDidMount 的时候初始化 Model，并监听 Model 的 change 事件，当 Model 发生改变时调用 React 组件的 setState 方法重新 render 整个组件，最后在组件 componentWillUnmount 的时候取消监听并销毁 Model。&lt;br&gt;&lt;br&gt;然而当应用变得复杂的时候，一切都乱套了。有一个 userName 数据，这货到底是父组件当做 props 传下来的呢，还是自己 Model 中保存的呢，还是自己 state 中用户输入的呢？完全懵逼。&lt;br&gt;&lt;br&gt;更可怕的是，产品经理改了需求，需要在一个子组件中展示一些原本在这个组件中展示的信息。很多人（包括我）为了图方便就把自己组件的 Model 直接当做 props 传给了子组件……&lt;br&gt;&lt;br&gt;不敢想象，这样发展下去，Model 中一个字段发生变化触发 change 事件的时候，到底有多少 React 组件会发生 re-render。&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/c9165f9b9f0970a3c489d09450dc6b98_b.png&quot; data-rawwidth=&quot;390&quot; data-rawheight=&quot;221&quot; class=&quot;content_image&quot; width=&quot;390&quot;&gt;&lt;br&gt;&lt;br&gt;这就是为什么，可预测，&lt;b&gt;Predictable&lt;/b&gt;，在大型前端应用中变得那么重要！&lt;br&gt;&lt;br&gt;而 Redux 是怎么做到可预测的呢？三点：&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;单一数据源，Single Source of Truth（也即题干中提到的 「单一的 State 状态树」）&lt;/li&gt;&lt;li&gt;所有数据都是只读的，要想修改数据，必须 dispatch 一个 action 来描述什么发生了改变&lt;/li&gt;&lt;li&gt;当处理 action 时，必须生成一个新的 state，不得直接修改原始对象&lt;/li&gt;&lt;/ol&gt;首先，单一数据源保证了整个应用中的数据都保存在同一个 Store 中，而这些数据在用在界面渲染时，都是作为 React 组件的 props。因此你在 render() 方法里想要渲染一个字段的时候，不需要再纠结它到底是 state 还是 props 还是在 Model 中，因为它肯定是 props。（当然由于 Redux 推荐的通过 combineReducers 方式 compose reducer，实际在一个组件中确定数据是来自哪个子 reducer 还是要费点神，这个目前主要依赖良好的组件结构和标准的命名规范来解决）&lt;br&gt;&lt;br&gt;而对我来说，感受最直观的是第二点，因为在 Flux 之前，你已经习惯了修改一行数据自动重绘界面（如调用 this.setState）的简单与方便（估计使用 MVVM 的同学体会更深）。&lt;br&gt;&lt;br&gt;突然间告诉你说，你不能直接修改数据！要想关闭这个弹框？你必须 dispatch 一个类型为 CLOSE_DIALOG 的 action，然后你的 reducer 必须在识别到这个 action 后将 store 里 dialogActive 的字段置为 false，然后你的组件必须判断当 props.dialogActive 为 false 时让弹框隐藏掉。&lt;br&gt;&lt;br&gt;原本可能一行代码 &lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dialog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;会膨胀成 Component、Reducer 和 ActionCreator 三大角色几十行代码。（具体其中的原理和操作过程这里就不细展开了）&lt;br&gt;&lt;br&gt;但是，但是，这种痛苦在前期打基础的时候绝对是值得的。因为当你的应用扩展之后，你可能需要的不仅是「关闭一个对话框」，而是「当点击确定按钮时提交数据到服务器端，若成功则关闭对话框并刷新列表中的数据，若失败则弹框提示用户出错信息」。&lt;br&gt;&lt;br&gt;这个时候，Redux 强大的可预测性就体现的淋漓尽致了。因为 Redux，你清楚的知道什么发生了改变（action），改变之后的数据是什么样的（store/state），以及发生了哪些改变（redux-devtool 中的 action 记录）。&lt;br&gt;&lt;br&gt;最后，因为 Redux 的第三点特性（每次返回新的 state，而不是修改原始数据），配合强大的 devtool，你可以看到下面的场景：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b39ab614ce18e504e0c97c2b623050f6_b.png&quot; data-rawwidth=&quot;218&quot; data-rawheight=&quot;1061&quot; class=&quot;content_image&quot; width=&quot;218&quot;&gt;&lt;br&gt;上图就是我说的「随着应用的扩展」后一个对话框操作的全过程：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;打开一个对话框 =&amp;gt; 输入一些表单信息 =&amp;gt; 提交 =&amp;gt; 提交成功 =&amp;gt; 关闭对话框 =&amp;gt; 重新加载列表 =&amp;gt; 列表加载成功\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;简直不能再清晰明了！甚至你不看我的代码，都知道我的业务逻辑是怎么执行的，再也不会出现一个 Model 更新之后不知道哪些 View 会随之更新的情况了。&lt;br&gt;&lt;br&gt;以上就是我觉得 Redux 最赞的一点：&lt;b&gt;可预测性&lt;/b&gt;。&lt;br&gt;&lt;br&gt;当然，实际在开发 Redux 应用的过程中是非常痛苦的，尤其是在前期，没有成熟的开发模式，生态圈不够完善，缺乏大型应用的成熟案例等等，让我们开发效率异常低下。&lt;br&gt;&lt;br&gt;但是当我们慢慢摸着石头过到河中间，所以痛点都找到化解的方式之后，好像突然架起了一座桥，开发效率chua的一下就上去了。&lt;br&gt;&lt;br&gt;其实我认为 Redux 最能提升的不是开发效率，而是维护效率。若干年以后，你看到上图 redux-devtools 中打印出来的信息，还是能清楚的知道这个业务过程是怎样的。&lt;br&gt;&lt;br&gt;&lt;br&gt;大概就是这样吧，大家还想知道什么也可以在评论中提出。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;以下是原答案：&lt;br&gt;==============================================================&lt;br&gt;现在是12月20日凌晨5点43分，大约 3 个月之前我负责牵头搭建了团队里第一个基于 Redux 的项目。&lt;br&gt;&lt;br&gt;是的，这是一个内部项目，所以我们上了很多新技术来试水，而 Redux 则是大家最关心的能否在项目中实际应用并产生价值的技术（这里我用了「技术」来称呼 Redux，鉴于 Flux 这种既不是库又不是框架的玩意儿，我已经不能愉快的给 Redux 定性了）。&lt;br&gt;&lt;br&gt;当然项目最后成功上线，你知道对于大公司的工程师来说，项目延期是很致命的。&lt;br&gt;&lt;br&gt;而关于项目本身没什么好说的，并不是简单的像博客只是渲染内容，也没有复杂到像 Gmail 一样在单页应用里承载了无数的功能。&lt;br&gt;&lt;br&gt;那 Redux 呢？&lt;br&gt;&lt;br&gt;这么说吧，大概 4 个小时之前，因为要新起另一个基于 Redux 的项目，我心想着升级一下依赖，就敲了一行 &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;tnpm update --save\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;。。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;。。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;结果项目到现在还没跑起来，这才过了三个月啊！！&lt;br&gt;&lt;br&gt;所以我就想到了这个早就有人邀请我的问题……&lt;br&gt;&lt;br&gt;大概看了一眼，版本号变化如下&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;redux&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// 看起来最正常的一个&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;redux&lt;/span&gt;  &lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;4.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 什么鬼？？！！&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;redux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;devtools&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 也没好到哪儿去&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt;   &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rc1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.0 正式版终于出了&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;redux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;router&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;beta3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 尼玛还带版本往回退的？？&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;不仅如此，一些 devDependencies 更是变得令人发指，好不容易研究明白了 react-hot-loader，结果作者又发明了一套 react-transform；好不容易把 redux-devtools 用熟了，结果 API 变得完全不同……&lt;br&gt;&lt;br&gt;总的来说，我的内心是奔溃的。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/c3cbb7db05da7ca8f1db8cd1cf95d3b4_b.png&quot; data-rawwidth=&quot;276&quot; data-rawheight=&quot;344&quot; class=&quot;content_image&quot; width=&quot;276&quot;&gt;&lt;br&gt;&lt;br&gt;天快亮了，先写到这儿吧。如果大家看到这里还没有被 Redux 吓到还有兴趣的话，后面再接着更新。&lt;br&gt;&lt;br&gt;0314 更新：刚刚接触 Redux 的同学，可以看看这篇文章 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/jasonslyvia/a-cartoon-intro-to-redux-cn&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - jasonslyvia/a-cartoon-intro-to-redux-cn: 看漫画，学 Redux。不写一行代码，轻松看懂 Redux 原理！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/c9165f9b9f0970a3c489d09450dc6b98_200x112.png\" data-rawwidth=\"390\" data-rawheight=\"221\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/c9165f9b9f0970a3c489d09450dc6b98_r.png\">\n1月17日更新，来填坑了…… 首先感谢大家的谬赞，正如 <a data-hash=\"b41fa1d6811ff28237f7f536d6c45f52\" href=\"//www.zhihu.com/people/b41fa1d6811ff28237f7f536d6c45f52\" class=\"member_mention\" data-editable=\"true\" data-title=\"@Reducer\" data-tip=\"p$b$b41fa1d6811ff28237f7f536d6c45f52\" data-hovercard=\"p$b$b41fa1d6811ff28237f7f536d6c45f52\">@Reducer</a> （这名字，真不是专门为了 Redux 取的么……）所说，我的答案都是在吐槽 Redux 生态圈云云，并没有讲到 Redux 本身。 &gt; 本来写了很长的答案，但是写着写着感觉好像变成了 Redux 入门指南………\n\n<a href=\"/question/38591713/answer/77634014\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-20\" target=\"_blank\" href=\"/question/38591713/answer/77634014\">编辑于 2016-05-02</a></p>\n\n",
    "link": "https://zhihu.com/question/38591713/answer/77634014"
  },
  {
    "question": "\n如何衡量一个人的 AngularJS 水平？\n",
    "author": "覆生",
    "content": "\n\n<textarea hidden class=\"content\">强答一下。&lt;br&gt;&lt;br&gt;从小问题开始：&lt;br&gt;&lt;br&gt;&lt;b&gt;1. ng-if跟ng-show/hide的区别有哪些？&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;第一点区别是，ng-if 在后面表达式为 true 的时候才创建这个 dom 节点，ng-show 是初始时就创建了，用 display:block 和 display:none 来控制显示和不显示。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第二点区别是，ng-if 会（隐式地）产生新作用域，ng-switch 、 ng-include 等会动态创建一块界面的也是如此。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;2. ng-repeat迭代数组的时候，如果数组中有相同值，会有什么问题，如何解决？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;会提示 Duplicates in a repeater are not allowed. 加 track by $index 可解决。当然，也可以 trace by 任何一个普通的值，只要能唯一性标识数组中的每一项即可（建立 dom 和数据之间的关联）。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;3. ng-click中写的表达式，能使用JS原生对象上的方法，比如Math.max之类的吗？为什么？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;不可以。只要是在页面中，就不能直接调用原生的 JS 方法，因为这些并不存在于与页面对应的 Controller 的 $scope 中。除非在 $scope 中添加了这个函数：&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;4. {{now | 'yyyy-MM-dd'}}这种表达式里面，竖线和后面的参数通过什么方式可以自定义？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;定义方式：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'过滤器名称'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;需要过滤的对象&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;过滤器参数1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;过滤器参数2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...){&lt;/span&gt;\n        &lt;span class=&quot;c1&quot;&gt;//...做一些事情   &lt;/span&gt;\n        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;处理后的对象&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;使用方式有两种，一种是直接在页面里：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;{{now | date : 'yyyy-MM-dd'}}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;一种是在 js 里面用：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// $filter('过滤器名称')(需要过滤的对象, 参数1, 参数2,...)&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;$filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'date'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'yyyy-MM-dd hh:mm:ss'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;5. factory和service，provider是什么关系？&lt;/b&gt;&lt;br&gt;&lt;br&gt;factory 把 service 的方法和数据放在一个对象里，并返回这个对象；service 通过构造函数方式创建 service，返回一个实例化对象；provider 创建一个可通过 config 配置的 service。&lt;br&gt;&lt;br&gt;从底层实现上来看，service 调用了 factory，返回其实例；factory 调用了 provider，将其定义的内容放在 $get 中返回。factory 和 service 功能类似，只不过 factory 是普通 function，可以返回任何东西（return 的都可以被访问，所以那些私有变量怎么写你懂的）；service 是构造器，可以不返回（绑定到 this 的都可以被访问）；provider 是加强版 factory，返回一个可配置的 factory。&lt;br&gt;&lt;br&gt;大问题：&lt;br&gt;&lt;br&gt;&lt;b&gt;1. angular的数据绑定采用什么机制？详述原理&lt;/b&gt;&lt;br&gt;&lt;br&gt;脏检查机制。&lt;br&gt;&lt;br&gt;Angular 在 scope 模型上设置了一个监听队列，用来监听数据变化并更新 view 。每次绑定一个东西到 view 上时 AngularJS 就会往 $watch 队列里插入一条 $watch，用来检测它监视的 model 里是否有变化的东西。当浏览器接收到可以被 angular context 处理的事件时，$digest 循环就会触发，遍历所有的 $watch，最后更新 dom。&lt;br&gt;&lt;br&gt;举个栗子：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;val=val+1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;increase 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;click 时会产生一次更新的操作（至少触发两次 $digest 循环）&lt;/p&gt;&lt;ul&gt;&lt;li&gt;按下按钮&lt;/li&gt;&lt;li&gt;浏览器接收到一个事件，进入到 angular context&lt;/li&gt;&lt;li&gt;$digest 循环开始执行，查询每个 $watch 是否变化&lt;/li&gt;&lt;li&gt;由于监视 $scope.val 的 $watch 报告了变化，因此强制再执行一次 $digest 循环&lt;/li&gt;&lt;li&gt;新的 $digest 循环未检测到变化&lt;/li&gt;&lt;li&gt;浏览器拿回控制器，更新 $scope.val 新值对应的 dom&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;p&gt;$digest 循环的上限是 10 次（超过 10次后抛出一个异常，防止无限循环）。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;2. 两个平级界面块a和b，如果a中触发一个事件，有哪些方式能让b知道，详述原理&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;这个问题换一种说法就是，如何在平级界面模块间进行通信。有两种方法，一种是共用服务，一种是基于事件。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;a. 共用服务&lt;/p&gt;&lt;br&gt;&lt;p&gt;在 Angular 中，通过 factory 可以生成一个单例对象，在需要通信的模块 a 和 b 中注入这个对象即可。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;b. 基于事件&lt;/p&gt;&lt;br&gt;&lt;p&gt;这个又分两种方式&lt;/p&gt;&lt;br&gt;&lt;p&gt;第一种是借助父 controller。在子 controller 中向父 controller 触发（$emit）一个事件，然后在父 controller 中监听（$on）事件，再广播（$broadcast）给子 controller ，这样通过事件携带的参数，实现了数据经过父 controller，在同级 controller 之间传播。&lt;/p&gt;&lt;br&gt;&lt;p&gt;第二种是借助 $rootScope。每个 Angular 应用默认有一个根作用域 $rootScope， 根作用域位于最顶层，从它往下挂着各级作用域。所以，如果子控制器直接使用 $rootScope 广播和接收事件，那么就可实现同级之间的通信。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;3. 一个angular应用应当如何良好地分层？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;分两个方面讲&lt;/p&gt;&lt;br&gt;&lt;p&gt;a. 目录结构的划分&lt;/p&gt;&lt;br&gt;&lt;p&gt;对于小型项目，可以按照文件类型组织，比如&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;css\njs\n  controllers\n  models\n  services\n  filters\ntemplates  \n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;但是对于规模较大的项目，最好按业务模块划分，比如&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;css\nmodules\n  account\n    controllers\n    models\n    services\n    filters\n    templates\n  disk\n    controllers\n    models\n    services\n    filters\n    templates\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;modules 下最好再有一个 common 目录来存放公共的东西。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;b. 逻辑代码的划分&lt;/p&gt;&lt;br&gt;&lt;p&gt;作为一个 MVVM 框架，Angular 应用本身就应该按照 模型，视图模型（控制器），视图来划分。&lt;/p&gt;&lt;br&gt;&lt;p&gt;这里逻辑代码的拆分，主要是指尽量让 controller 这一层很薄。提取共用的逻辑到 service 中 （比如后台数据的请求，数据的共享和缓存，基于事件的模块间通信等），提取共用的界面操作到 directive 中（比如将日期选择、分页等封装成组件等），提取共用的格式化操作到 filter 中等等。&lt;/p&gt;&lt;br&gt;&lt;p&gt;在复杂的应用中，也可以为实体建立对应的构造函数，比如硬盘（Disk）模块，可能有列表、新建、详情这样几个视图，并分别对应的有 controller，那么可以建一个 Disk 构造函数，里面完成数据的增删改查和验证操作，有跟 Disk 相关的 controller，就注入 Disk 构造器并生成一个实例，这个实例就具备了增删改查和验证方法。这样既层次分明，又实现了复用（让 controller 层更薄了）。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;4. angular应用常用哪些路由库，各自的区别是什么？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;Angular1.x 中常用 ngRoute 和 ui.router，还有一种为 Angular2 设计的 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//angular.github.io/router/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;new router&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（面向组件）。后面那个没在实际项目中用过，就不讲了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;无论是 ngRoute 还是 ui.router，作为框架额外的附加功能，都必须以 模块依赖 的形式被引入。&lt;/p&gt;&lt;br&gt;&lt;p&gt;两者区别是：&lt;/p&gt;&lt;br&gt;&lt;p&gt;ngRoute 模块是 Angular 自带的路由模块，而 ui.router 模块是基于 ngRoute模块开发的第三方模块。&lt;/p&gt;&lt;br&gt;&lt;p&gt;ui.router 是基于 state （状态）的， ngRoute 是基于 url 的，ui.router模块具有更强大的功能，主要体现在视图的嵌套方面。&lt;/p&gt;&lt;br&gt;&lt;p&gt;使用 ui.router 能够定义有明确父子关系的路由，并通过 ui-view 指令将子路由模版插入到父路由模板的 &amp;lt;div ui-view&amp;gt;&amp;lt;/div&amp;gt;  中去，从而实现视图嵌套。而在 ngRoute 中不能这样定义，如果同时在父子视图中 使用了 &amp;lt;div ng-view&amp;gt;&amp;lt;/div&amp;gt; 会陷入死循环。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;5. 如果通过angular的directive规划一套全组件化体系，可能遇到哪些挑战？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;没有自己用 directive 做过一全套组件，讲不出。&lt;/p&gt;&lt;br&gt;&lt;p&gt;能想到的一点是，组件如何与外界进行数据的交互，以及如何通过简单的配置就能使用吧。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;6. 分属不同团队进行开发的angular应用，如果要做整合，可能会遇到哪些问题，如何解决？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;可能会遇到不同模块之间的冲突。比如一个团队所有的开发在 moduleA 下进行，另一团队开发的代码在 moduleB 下：&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp.moduleA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'serviceA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\n\n&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp.moduleB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'serviceA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;    \n\n&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myApp.moduleA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'myApp.moduleB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; \n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;会导致两个 module 下面的 serviceA 发生了覆盖。&lt;/p&gt;&lt;br&gt;&lt;p&gt;貌似在 Angular1.x 中并没有很好的解决办法，所以最好在前期进行统一规划，做好约定，严格按照约定开发，每个开发人员只写特定区块代码。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;7. angular的缺点有哪些？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;a. 强约束&lt;/p&gt;&lt;br&gt;&lt;p&gt;导致学习成本较高，对前端不友好。&lt;/p&gt;&lt;br&gt;&lt;p&gt;但遵守 AngularJS 的约定时，生产力会很高，对 Java 程序员友好。&lt;/p&gt;&lt;br&gt;&lt;p&gt;b. 不利于 SEO&lt;/p&gt;&lt;br&gt;&lt;p&gt;因为所有内容都是动态获取并渲染生成的，搜索引擎没法爬取。&lt;/p&gt;&lt;br&gt;&lt;p&gt;一种解决办法是，对于正常用户的访问，服务器响应 AngularJS 应用的内容；对于搜索引擎的访问，则响应专门针对 SEO 的HTML页面。&lt;/p&gt;&lt;br&gt;&lt;p&gt;c. 性能问题&lt;/p&gt;&lt;br&gt;&lt;p&gt;作为 MVVM 框架，因为实现了数据的双向绑定，对于大数组、复杂对象会存在性能问题。&lt;/p&gt;&lt;br&gt;&lt;p&gt;可以用来 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/xufei/blog/issues/23&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;优化 Angular 应用的性能&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 的办法：&lt;/p&gt;&lt;br&gt;&lt;li&gt;减少监控项（比如对不会变化的数据采用单向绑定）&lt;/li&gt;&lt;li&gt;主动设置索引（指定 track by，简单类型默认用自身当索引，对象默认使用 $$hashKey，比如改为track by item.id）&lt;/li&gt;&lt;li&gt;降低渲染数据量（比如分页，或者每次取一小部分数据，根据需要再取）&lt;/li&gt;&lt;li&gt;数据扁平化（比如对于树状结构，使用扁平化结构，构建一个 map 和树状数据，对树操作时，由于跟扁平数据同一引用，树状数据变更会同步到原始的扁平数据）&lt;/li&gt;&lt;br&gt;&lt;p&gt;d. 移动端&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;8. 如何看待angular 1.2中引入的controller as 语法？&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;在 angular 1.2 以前，在 view 上的任何绑定都是直接绑定在 $scope 上的。使用 controllerAs，不需要再注入 $scope，controller 变成了一个很简单的 javascript 对象（POJO），一个更纯粹的 ViewModel。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;从源码实现上来看，controllerAs 语法只是把 controller 这个对象的实例用 as 别名在 $scope 上创建了一个属性。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controllerInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;但是这样做，除了上面提到的使 controller 更加 POJO 外，还可以避免遇到 AngularJS 作用域相关的一个坑（就是上文中 ng-if 产生一级作用域的坑，其实也是 javascript 原型链继承中值类型继承的坑。因为使用 controllerAs 的话 view 上所有字段都绑定在一个引用的属性上，比如 vm.xx，所以坑不再存在）。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;不过不引入 $scope 会出现的一个问题是，导致 $emit、 $broadcast、 $on、$watch 等 $scope 下的方法无法使用。这些跟事件相关的操作可以封装起来统一处理，或者在单个 controller 中引入 $scope，特殊对待。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;9. 详述angular的“依赖注入”&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;AngularJS 是通过构造函数的参数名字来推断依赖服务名称的，通过 toString() 来找到这个定义的 function 对应的字符串，然后用正则解析出其中的参数（依赖项），再去依赖映射中取到对应的依赖，实例化之后传入。&lt;/p&gt;&lt;br&gt;&lt;p&gt;因为 AngularJS 的 injector 是假设函数的参数名就是依赖的名字，然后去查找依赖项，那如果像下面这样简单注入依赖，代码压缩后（参数被重命名了），就无法查找到依赖项了。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCtrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;所以，通常会使用下面两种方式注入依赖（对依赖添加的顺序有要求）。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;数组注释法：&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myCtrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$scope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;显式 $inject ：&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;myApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'myCtrl'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;myCtrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;span class=&quot;nx&quot;&gt;myCtrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$inject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$scope'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$http'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;p&gt;对于一个 DI 容器，必须具备三个要素：依赖项的注册，依赖关系的声明和对象的获取。在 AngularJS 中，module 和 $provide 都可以提供依赖项的注册；内置的 injector 可以获取对象（自动完成依赖注入）；依赖关系的声明，就是上面的那两种方式。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;10. 如何看待angular 2……&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;了解有限。&lt;/p&gt;&lt;br&gt;&lt;p&gt;详细版本可以看这里：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/huangtengfei/blog/issues/14&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;关于 AngularJS 的一些问题 &lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，里面有 示例代码 和 参考资料。&lt;/p&gt;&lt;br&gt;&lt;p&gt;经验不足，很多问题回答起来都很虚。。。上面回答的这些有的是自己经历过的一些坑的总结，有的是资料的整理（其实不少问题飞哥 &lt;a data-hash=&quot;c5198d4e9c0145aee04dd53cc6590edd&quot; href=&quot;//www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@徐飞&quot; data-tip=&quot;p$t$c5198d4e9c0145aee04dd53cc6590edd&quot; data-hovercard=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot;&gt;@徐飞&lt;/a&gt; 的 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/xufei/blog/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;博客 &lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://www.zhihu.com/people/sharpmaster/topic/19837063/answers&quot; class=&quot;internal&quot;&gt; AngularJS 相关问题下的回答&lt;/a&gt; 都已经详细讲过，可自行查阅），仅供参考，欢迎指正~&lt;/p&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n强答一下。 从小问题开始： <b>1. ng-if跟ng-show/hide的区别有哪些？</b> 第一点区别是，ng-if 在后面表达式为 true 的时候才创建这个 dom 节点，ng-show 是初始时就创建了，用 display:block 和 display:none 来控制显示和不显示。 第二点区别是，ng-if 会（隐式…\n\n<a href=\"/question/36040694/answer/89134635\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-03-04\" target=\"_blank\" href=\"/question/36040694/answer/89134635\">编辑于 2016-03-08</a></p>\n\n",
    "link": "https://zhihu.com/question/36040694/answer/89134635"
  },
  {
    "question": "\n请问学习前端最有效的办法是什么？\n",
    "author": "方应杭",
    "content": "\n\n<textarea hidden class=\"content\">如鱼饮水，冷暖自知。&lt;br&gt;&lt;br&gt;对别人有效的方法，对你不一定有效。这个道理你应该在上小学的时候就发现了。&lt;br&gt;&lt;br&gt;有些答案里说的一两周入门，是可能的。&lt;br&gt;比如我在彩程的时候一周入门 Rails，两周做出了一个已上线使用的网站。并且还封装了 API 供 iPad 客户端使用。&lt;br&gt;但这也是因为我有基础呀。我会融会贯通呀。所以如果你没有接触过编程，不要指望几周入门这种事情了。&lt;br&gt;&lt;br&gt;&lt;br&gt;我在教学过程中发现了一个心理现象，很有意思，那就是：&lt;br&gt;「已入门者」无法理解「未入门者」的苦恼。&lt;br&gt;&lt;br&gt;什么意思呢？&lt;br&gt;「已入门者」在入门的时候，会遇到很多困难，但是一旦他通过搜索、问人、调试甚至碰运气乱写，最终搞懂了之后，他就会觉得：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;这很简单嘛！我之前在想些什么啊。&lt;/blockquote&gt;&lt;br&gt;你如果问他，这东西难不难，他肯定会说「不难，很简单」，不就是搜一搜网页、写一写代码。而他在期间的种种苦恼，早已烟消云散了。&lt;br&gt;&lt;br&gt;为什么会这样？也许是虚荣心作怪，也许是大脑对已熟悉的事物会做简化处理，我不是心理专业的，具体原因就不得而知了。&lt;br&gt;&lt;br&gt;我作为一个五年的前端从业人员，其实已经无法理解新人在入门时遇到的障碍了。&lt;br&gt;为了理解新人，我做了一些事情。&lt;br&gt;&lt;br&gt;比如我在 2016 年开始学五笔，以体会「新人」的感受。&lt;br&gt;&lt;br&gt;总结下来就是：&lt;br&gt;&lt;blockquote&gt;真难啊。&lt;/blockquote&gt;&lt;br&gt;虽然结果是「我学会了」。但是我学得不太爽。&lt;br&gt;下面是我的学习过程。&lt;br&gt;&lt;br&gt;首先我动用我十多年来高超的搜索技巧（其实就是搜索了一下知乎），知道五笔分为两个版本。&lt;br&gt;那么我应该学哪个版本呢？&lt;br&gt;分析了一下之后选择了新版。&lt;br&gt;然后开始记字根。&lt;br&gt;我记忆力还行，一晚上基本把 25 个键位上的一百多个字根背下来了。&lt;br&gt;然后就开始用。&lt;br&gt;也就是说我只用了一天就入门了。&lt;br&gt;&lt;br&gt;&lt;br&gt;但是！&lt;br&gt;在这之后，我有很多不适的感觉。&lt;br&gt;&lt;br&gt;首先，我不会拆字，我看到很多拆字的口诀，但是只能猜个大概。&lt;br&gt;真到自己拆字的时候，老是拆错。&lt;br&gt;而且搜索如何拆字的时候，有时候会搜到老版的拆法，令我费解。&lt;br&gt;&lt;br&gt;然后，就是打字很慢。这个是当然的，我只用了一天入门，我一分钟能打10个字我就谢天谢地了！&lt;br&gt;为了解决这个问题，我想了两个办法：&lt;br&gt;&lt;br&gt;1. 打印了所有字根放在手边供我快速查阅&lt;br&gt;2. 开启五笔拼音混合输入&lt;br&gt;&lt;br&gt;但是也不爽，由于我打拼音比较快，所以用着用着就变成了完全在用拼音，没用五笔。这怎么能学得好呀。&lt;br&gt;&lt;br&gt;不过如果我坚持一个月不用拼音，应该就能完全学会五笔了吧。&lt;br&gt;但是！&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;我坚持不下去呀。&lt;/blockquote&gt;&lt;br&gt;我打字那么慢，万一女神给我发一句「今晚一起看电影吧」，我用五笔几分钟还没回复可怎么是好！&lt;br&gt;最终，我成了一个半壶水的五笔使用者。&lt;br&gt;&lt;br&gt;如果你要问我学五笔难不难。&lt;br&gt;我会说&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;简单~不就是背字根然后坚持练习嘛。&lt;/blockquote&gt;&lt;br&gt;其实呢&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;冷暖自知。&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;故事讲完了，回到正题：&lt;br&gt;&lt;br&gt;请问学习前端最有效的办法是什么？&lt;br&gt;&lt;br&gt;我不太确定你说的有效是指「质量高」还是「效率高」。某种程度上，你不可能同时做到「质量高」和「效率高」。（如果你天赋异禀，那还是可能的）&lt;br&gt;&lt;br&gt;我就当你说的是「效率高」。&lt;br&gt;&lt;br&gt;你用了一年时间，还不能仿站，显然效率是低的。&lt;br&gt;&lt;br&gt;如果纯从理论上来说，想要「效率高」是可能的。&lt;br&gt;&lt;br&gt;原则一：追求学习的性价比&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;u&gt;学习性价比 = 你所学到的有用的知识 ➗ 你花费的时间&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;要想要性价比高，就要做到两点：&lt;br&gt;&lt;br&gt;1. 尽量学有用的知识，暂时用不到的可以放在后面学。&lt;br&gt;2. 尽量快，能一下午开完的知识点就坚决不要拖两个下午。&lt;br&gt;&lt;br&gt;我们来看看前端哪些知识是有用的。而且我们要精简精简再精简，因为我们要追求性价比。&lt;br&gt;&lt;br&gt;1. 英语&lt;br&gt;2. HTML + CSS + JS&lt;br&gt;3. HTTP&lt;br&gt;4. 浏览器 API&lt;br&gt;&lt;br&gt;这四个我实在没法再精简了，那这就是我们最需要学的了。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;u&gt;英语怎么学？&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;因为编程基本就是在写英文单词，什么 if else while for var new this 之类的，好多单词。&lt;br&gt;HTML 中的 &amp;lt;a&amp;gt; 标签的全称是 anchor，很多人不记得，这个 a 好记，不记得全称不要紧。&lt;br&gt;但有些标签你不记得全称就不好办了，比如 &amp;lt;abbr&amp;gt; &amp;lt;aside&amp;gt; &amp;lt;blockquote&amp;gt; &amp;lt;caption&amp;gt;。&lt;br&gt;我见过不少人由于不知道这些单词的意思而放弃使用这些标签  - - |||&lt;br&gt;&lt;br&gt;CSS 里英语就更重要了，比如 transition、transform、translate，你在不了解英语含义的情况下，很难把这些记下来。&lt;br&gt;&lt;br&gt;对于英语，我的建议是：&lt;br&gt;&lt;br&gt;a) 电脑装个有道词典，哪里不会点哪里。&lt;br&gt;b) 抓住一切可以学单词的机会。比如多用英文软件，少用汉化版。比如用英文操作系统，不用中文版。这样你每天都在记单词了。&lt;br&gt;&lt;br&gt;&lt;u&gt;&lt;b&gt;HTML + CSS + JS 怎么学？&lt;/b&gt;&lt;/u&gt;&lt;br&gt;免费教程很多：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/Introduction&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML 入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Learn/CSS&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;JavaScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;看完你就入门了。还记得我学五笔的经历吗，你成功的前提是你能「坚持得下去」。&lt;br&gt;其实现实生活中有很多前端并不怎么会 CSS（我在阿里和腾讯见到过不少这样的前端），所以如果你想更快，CSS 可以囫囵记一下语法，就直接实践吧！实践是解决坑的唯一办法。&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;u&gt;HTTP 怎么学？&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;墙裂推荐《图解HTTP》，但是看书就慢了是不是，怎么办呢？&lt;br&gt;你还是自己坚持看教程吧，还免费呢：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/HTTP&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTTP&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;&lt;b&gt;浏览器 API&lt;/b&gt;&lt;/u&gt;&lt;br&gt;&lt;br&gt;比较重要的就是 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;文档对象模型 (DOM)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Web/API/Window&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Window&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（BOM）。如果你想直接学 React / Vue，其实 DOM 都不用看了。&lt;br&gt;&lt;br&gt;学了上面四个，然后呢？&lt;br&gt;如果你坚持下来了，就可以按照轮子哥说的做咯，去做出些东西吧！&lt;br&gt;具体线路，看我另一个回答：&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/54924646/answer/141754512&quot; class=&quot;internal&quot;&gt;2017年帝都前端开发行情如何？想来帝都工作有啥建议？ - 方应杭的回答 - 知乎&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d2b34e716cf9ab59eaf2abeda990c3df_b.jpg&quot; data-rawwidth=&quot;440&quot; data-rawheight=&quot;792&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;440&quot; data-original=&quot;https://pic4.zhimg.com/d2b34e716cf9ab59eaf2abeda990c3df_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;原则二：尽量学点难学的东西。&lt;br&gt;&lt;br&gt;有很多新人说，「webpack 好难啊，看不懂」&lt;br&gt;&lt;br&gt;知道为什么你觉得难么？因为你没见过更难的东西。&lt;br&gt;&lt;br&gt;你知不知道有两种编辑器分别叫做 vim 和 Emacs。很多极客都在使用这两款编辑器。（我在用 vim）。&lt;br&gt;&lt;br&gt;去学学这两个货，比 webpack 难学多了。学完他们，回头看 webpack，不跟玩儿似的。&lt;br&gt;&lt;br&gt;所以，别老是学习一些简单的东西，多挑战难一点的东西。&lt;br&gt;&lt;br&gt;原则三：你需要导师。&lt;br&gt;&lt;br&gt;不知道轮子哥有没有受人指导过，反正我在学编程的路上有很多位导师。&lt;br&gt;&lt;br&gt;导师的作用：&lt;br&gt;&lt;br&gt;1. 防止你走偏。甚至告诉你捷径。&lt;br&gt;2. 帮你理清知识脉络。&lt;br&gt;3. 解答你的疑问，在你有多个方案但是不确定哪个是最好的的时候，教你怎么权衡。&lt;br&gt;&lt;br&gt;当然，走偏也有走偏的好处，每条路有每条路的风景嘛。但是如果你想要高性价比的话，还是别走偏吧。&lt;br&gt;&lt;br&gt;我就说到这里了，不然又有人说我打广告咯。&lt;br&gt;&lt;br&gt;你都看到这儿了，不赞一下？  &lt;br&gt;: )</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/d2b34e716cf9ab59eaf2abeda990c3df_200x112.jpg\" data-rawwidth=\"440\" data-rawheight=\"792\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/d2b34e716cf9ab59eaf2abeda990c3df_r.jpg\">\n如鱼饮水，冷暖自知。 对别人有效的方法，对你不一定有效。这个道理你应该在上小学的时候就发现了。 有些答案里说的一两周入门，是可能的。 比如我在彩程的时候一周入门 Rails，两周做出了一个已上线使用的网站。并且还封装了 API 供 iPad 客户端使用。 但…\n\n<a href=\"/question/55058833/answer/142490051\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2017-01-23\" target=\"_blank\" href=\"/question/55058833/answer/142490051\">编辑于 2017-01-24</a></p>\n\n",
    "link": "https://zhihu.com/question/55058833/answer/142490051"
  },
  {
    "question": "\n前端新人的迷茫？\n",
    "author": "justjavac",
    "content": "\n\n<textarea hidden class=\"content\">上周就看到了这个问题，一直想答却欲言又止，趁着今天周末外面下雪，继续答答。&lt;br&gt;----------------------&lt;br&gt;&lt;blockquote&gt;到了这个阶段应该怎么继续学下去呢，是我基础知识不足的问题吗？&lt;br&gt;&lt;/blockquote&gt;关于基础知识 &lt;a data-hash=&quot;e0d01585ed79b0588832e9f07f9e121c&quot; href=&quot;//www.zhihu.com/people/e0d01585ed79b0588832e9f07f9e121c&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@寇云&quot; data-hovercard=&quot;p$b$e0d01585ed79b0588832e9f07f9e121c&quot;&gt;@寇云&lt;/a&gt;已经回答了，去年有幸和寇云一起分享前端技术，寇大大对于前端的认识是非常深刻的，我再狗尾续貂一下。&lt;br&gt;&lt;br&gt;你说到“&lt;u&gt;各种配置命令行根本看不懂，仿佛到了另一个世界”&lt;/u&gt;，又说道：“&lt;u&gt;这些不敢说精通，但也熟练掌握，项目也做了不少&lt;/u&gt;”。这也是很多前端初学者的一个常态吧。&lt;br&gt;&lt;br&gt;造成这种现象的原因有一种就是，大部分人觉得前端简单，入门容易，开箱即用。而前端也一直由非程序员（非贬义）来完成。可以回想一下你写的第一个 C 语言，第一个 Java 语言是怎么编译运行起来的。&lt;br&gt;&lt;br&gt;我们可以拿后端做对比。后端语言鄙视链的最底层应该算是 PHP 了吧，巧合的是 PHP 和 javascript 一样也是一种脚本语言，入门容易，开箱即用。当 composer 等构建工具出现后，大部分 PHP 程序员也觉得&lt;u&gt;仿佛到了另一个世界&lt;/u&gt;。&lt;br&gt;&lt;br&gt;&lt;br&gt;究其原因，这些“程序员”（我加了引号，因为在我的评价体系中，这些人中大部分不能称之为真正的程序员）中，大部分都是在“写代码”，而不是“编程序”，更不是“做软件”。他们喜欢使用 jquery，bootstrap，但是当他们真正遇到工业界生产力框架react时，就进入了&lt;u&gt;另一个世界&lt;/u&gt;，另一个陌生的世界。&lt;br&gt;&lt;br&gt;唯有进入这个世界，才能成为前端工程师，因为这个世界是前端现代化的世界，前端工程化的世界，是前端工业化的世界。&lt;br&gt;&lt;br&gt;我们可以网购一个几百块前的家用面包机，操作简单，甚至不用看说明书，就可以每天早上做可口的面包。但是，这么简单易用的面包机，即使你买几百个，也无法开一个面包工厂。而真正工厂使用的面包机器要比这个难用几十几百倍，以至于聘用的面包工人都要经过特殊的上岗培训才能正确操作。为什么工厂不使用简单易用的家用面包机呢？&lt;br&gt;&lt;br&gt;言归正传，你才大二，你学前端才大半年，前端对于你来说，就像一个家用面包机，甚至前端只是乐高积木，你可以使用它搭建高楼或城堡，俨然你自己就是个小小工程师。但是你却建不出真正的高楼大厦，甚至搭一个狗窝都会不尽人意。&lt;br&gt;&lt;br&gt;对于工程化的定义：&lt;br&gt;&lt;blockquote&gt;软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。&lt;/blockquote&gt;而前端工程化的第一步就是构建，自动化构建。如果你看过一些性能优化的知识就会知道有一条是减少请求数据的大小，对 js 和 css 文件进行压缩，一般初学者大概都是这么完成的：百度一下在线压缩，如果是一个用心的初学者就会把这个链接加入收藏夹，然后把代码 copy 过去，压缩，压缩完成后再 copy 回来。第一个问题来了，copy 回来的压缩完的代码，不能覆盖之前的文件，因为以后需要修改的时候，还得在未压缩的文件中修改，只能复制出来一份，命名为 name.min.js，之前 html 都是引入的为压缩版，还得去查找替换，把 name.js 换成 name.min.js。而这一整套工作，都应该交给工具去完成，而且还得是自动完成。&lt;br&gt;&lt;br&gt;除了打包构建、还有部署、平滑的升级、静态资源管理、代码规范、性能……&lt;br&gt;&lt;br&gt;所以走出自己的舒适区，去学习新的技能和知识，探索新的世界。&lt;br&gt;&lt;br&gt;推荐阅读几篇 &lt;a data-hash=&quot;3212f9044005e9306aab1b61e74e7ae6&quot; href=&quot;//www.zhihu.com/people/3212f9044005e9306aab1b61e74e7ae6&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@张云龙&quot; data-hovercard=&quot;p$b$3212f9044005e9306aab1b61e74e7ae6&quot;&gt;@张云龙&lt;/a&gt; 的文章： &lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/blog/issues/10&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端工程——基础篇 · Issue #10 · fouber/blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/blog/issues/6&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;大公司里怎样开发和部署前端代码？ · Issue #6 · fouber/blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/blog/issues/2&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端开发体系建设日记 · Issue #2 · fouber/blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/fouber/blog/issues&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;fouber/blog&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n上周就看到了这个问题，一直想答却欲言又止，趁着今天周末外面下雪，继续答答。 ---------------------- 到了这个阶段应该怎么继续学下去呢，是我基础知识不足的问题吗？ 关于基础知识 <a data-hash=\"e0d01585ed79b0588832e9f07f9e121c\" href=\"//www.zhihu.com/people/e0d01585ed79b0588832e9f07f9e121c\" class=\"member_mention\" data-editable=\"true\" data-title=\"@寇云\" data-hovercard=\"p$b$e0d01585ed79b0588832e9f07f9e121c\">@寇云</a>已经回答了，去年有幸和寇云一起分享前端技术，寇大大对于前端的…\n\n<a href=\"/question/54440732/answer/139640086\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/54440732/answer/139640086\">发布于 2017-01-07</a></p>\n\n",
    "link": "https://zhihu.com/question/54440732/answer/139640086"
  },
  {
    "question": "\n如何看待《为什么我不想成为Web前端程序员》这篇文章？\n",
    "author": "廖雪峰",
    "content": "\n\n<textarea hidden class=\"content\">每天都会看到为什么系列：&lt;br&gt;&lt;br&gt;为什么我不想成为Web前端程序员&lt;br&gt;为什么说现在学Java不是一个好主意&lt;br&gt;为什么说学C语言已经过时了&lt;br&gt;为什么说PHP将很快没落&lt;br&gt;为什么说JavaScript是一种垃圾语言&lt;br&gt;为什么说你应该学NoSQL不应该学SQL&lt;br&gt;为什么说现在学iOS开发已经晚了</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n每天都会看到为什么系列： 为什么我不想成为Web前端程序员 为什么说现在学Java不是一个好主意 为什么说学C语言已经过时了 为什么说PHP将很快没落 为什么说JavaScript是一种垃圾语言 为什么说你应该学NoSQL不应该学SQL 为什么说现在学iOS开发已经晚了\n\n<a href=\"/question/53783777/answer/136532825\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/53783777/answer/136532825\">发布于 2016-12-19</a></p>\n\n",
    "link": "https://zhihu.com/question/53783777/answer/136532825"
  },
  {
    "question": "\n关于链接中href写javascript表达式出现的错误疑问？\n",
    "author": "tia hu",
    "content": "\n\n<textarea hidden class=\"content\">已有的两个回答都是错的。。。只好冒出来回答一下。。。童鞋你们这样不求甚解真的好吗。。。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;要深刻认识到，以下两种代码看起来像，但是实际作用原理完全不同：&lt;br&gt;&lt;br&gt;A类（href）：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:your_code_here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; A Link &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;B类（onclick）：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:your_code_here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; A Link &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;1、 href 中的 javascript&lt;br&gt;    在 href 属性中， “javascript:” 是协议名，与 “http:” 类似，它告诉浏览器，后面的内容是一段 javascript 脚本。&lt;br&gt;    因此，当此链接被点击的时候，浏览器实际上执行的是一个 navigate 的动作，只是 navigate 的目标，不是常见的 http:，而是 javascript:。&lt;br&gt;    也正是因为这样，所以 href 后的代码，其 “执行环境” 是 &lt;b&gt;&lt;u&gt;“全局”&lt;/u&gt;&lt;/b&gt;。而在全局中，是不可以用 “return” 的。&lt;br&gt;    引申一下，在这个链接上，点鼠标右键，选择 “新窗口中打开”，你会发现，你 href 后的代码，会被浏览器尝试在一个新打开的空白窗口中执行。&lt;br&gt;&lt;br&gt;1.1 href 中，表达式的值&lt;br&gt;    如果能深刻理解上面所说的含义，那么看一下下面的代码：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:'hello hutia'&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; A Link &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    猜测一下，点击这个链接，会出现什么？&lt;br&gt;    窗口会跳转到一个显示着 &quot;hello hutia&quot; 字样的页面。&lt;br&gt;    这是因为， javascript 脚本所执行的结果，也就是表达式的值，会作为文档的输入。&lt;br&gt;    所以，在大家习惯性的写法里，会在 href 后的脚本的末尾，缀上 &quot;void(0);&quot;。&lt;br&gt;&lt;br&gt;2、 onclick 中的 javascript&lt;br&gt;    与 href 属性不同的是，onclick 的属性值，本来就会被当作脚本对待，不存在指明协议的需求。那么为什么还要有一个“javascript:” 呢？ 这是有一定历史遗留原因的。在很多年前，vbscript 也曾经流行一时，与 javascript 同时存在。因此，onclick 等事件脚本引擎，可以通过 “javascript:” 或 &quot;vbscript:&quot; 来指定。&lt;br&gt;    在 onclick 等属性解析的时候，其属性值被引擎打包在一个匿名函数中，因此可以在其中使用 return。&lt;br&gt;    例如下面的代码：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hutia&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:your_code_here&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; A Link &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    等效于下面的代码：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hutia&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; A Link &lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'hutia'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;your_code_here&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;    有人可能会问，我为啥要了解这个？或者说，浏览器如何解析，对我来说有什么用？&lt;br&gt;    一个简单的例子是，不同浏览器的 event 兼容。&lt;br&gt;    我们知道， IE 会把 event 存放在 window.event 对象中，而 Chrome 等浏览器会把 event 作为第一个参数传递给事件句柄函数。那么在 onclick=&quot;&quot; 这种格式中，如何兼容的获取此对象？&lt;br&gt;    下面是一个例子：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hutia&quot;&lt;/span&gt;\n  &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;javascript:var e = window.event || arguments[0];&lt;/span&gt;\n&lt;span class=&quot;s&quot;&gt;   the_other_code_here;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n  A Link\n&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    如果理解了浏览器对 onclick 属性的解析模式，上面的 arguments[0] 也就容易理解了&lt;br&gt;&lt;br&gt;---------&lt;br&gt;以上，请点赞，谢谢</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n已有的两个回答都是错的。。。只好冒出来回答一下。。。童鞋你们这样不求甚解真的好吗。。。 要深刻认识到，以下两种代码看起来像，但是实际作用原理完全不同： A类（href）： &lt;a href=\"javascript:your_code_here\"&gt; A Link &lt;/a&gt; B类（onclick）： &lt;a oncli…\n\n<a href=\"/question/29973306/answer/46275373\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-04-29\" target=\"_blank\" href=\"/question/29973306/answer/46275373\">编辑于 2015-04-29</a></p>\n\n",
    "link": "https://zhihu.com/question/29973306/answer/46275373"
  },
  {
    "question": "\n如何看待《HTML5 定稿：手机 App 三年内将彻底消失？》\n",
    "author": "loki",
    "content": "\n\n<textarea hidden class=\"content\">明明说好三年，三年之后又三年，三年之后又三年，都快十年了老大。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n明明说好三年，三年之后又三年，三年之后又三年，都快十年了老大。\n\n<a href=\"/question/28672128/answer/52469633\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28672128/answer/52469633\">发布于 2015-06-24</a></p>\n\n",
    "link": "https://zhihu.com/question/28672128/answer/52469633"
  },
  {
    "question": "\n有多大比例的前端工程师，能在合理的时间内独立开发出一个足以供商业网站使用的文本编辑器？\n",
    "author": "王福朋",
    "content": "\n\n<textarea hidden class=\"content\">我是&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wangeditor.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;wangEditor - 轻量级web富文本编辑器&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的作者。&lt;br&gt;作为一个在web富文本编辑器贡献了1年半时间的非菜鸟人员，我来谈谈我的感受。说到这个话题，我感受特别多，也特别乱。因此，想到哪里就写到哪里吧。&lt;br&gt;&lt;br&gt;2014年11月开始，我是想着练练手，就绷着一股劲写了1000多行的代码，提交到github，就有了最初的wangEditor编辑器，那时候的样子，完全不符合上述的『工业化』这个标准，无论你对『工业化』这个词的要求有多低。说白了，就是一个简单的div增加contenteditable属性，然后用浏览器原生的execCommand执行命令，要不然代码怎么会那么少呢？现在想起来，那时候谈什么稳定性、兼容性，那就是妄想了。&lt;br&gt;&lt;br&gt;后来，经过了大约两次代码重构，直到2015年夏天那会儿，总算是有了好转——只是『好转』啊，离着『工业化』的要求还是有一段距离。此时的编辑器，在代码上比较清晰，结构也比较稳定，我可以自己去灵活的扩展一些用户提出来的功能。但是那时候在功能层级和用户自定义扩展层级上，还是远远不够。第一，用户无法自定义菜单和插件，有啥问题只能我来加。第二，现在的功能稳定级别，紧紧是在于用户完全没有特殊操作和特殊需求的时候稳定，例如，用户要是ctrl+a全选内容然后删除，这时再写入内容就会有问题，再例如，用户粘贴一段文字也会有各种问题，再例如，用户引用了一段内容之后无法通过两次enter跳出……再多了我就不说了&lt;br&gt;&lt;br&gt;但是，到那时候通过我一年多的努力，QQ群里有了几百个关注着，也有人真正的开始尝试用我的这款产品。然后吸引大家来的，不是功能多么多么强大，而是靠漂亮的UI——不要见笑！&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_b.png&quot; data-rawwidth=&quot;1111&quot; data-rawheight=&quot;190&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1111&quot; data-original=&quot;https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_r.png&quot;&gt;&lt;br&gt;到2015年的冬天，将近春节一个多月的时候，我蓄势待发，重构代码，开发2.0版本。因此此时，我已经在编辑器这个领域混了1年多了，见过了各种各样用户的需求，研究了网络上所有看得见的竞品，我现在已经知道了用户到底需要一款什么样子的编辑器，用户的需求在哪里、问题在哪里、痛点在哪里。&lt;br&gt;&lt;br&gt;大约2周的事件来开发，春节前发布了基础版本，直到现在春节后刚上班没几天，这段时间里，我又做了5次小版本升级，基础版基本稳定。接下来，我还要继续升级，做一些更加符合用户需求的功能，例如集成七牛云存储的图片上传、国际化、标准的表情包、集成第三方上传插件等等。&lt;br&gt;&lt;br&gt;另外，我今年还会将移动端集成进来，做成响应式、支持手机pad的编辑器。&lt;br&gt;&lt;br&gt;&lt;b&gt;总结来说，web富文本编辑器——没进来的人觉得没啥大不了的，开源插件那么多，何必重做轮子。真正进来的人，会发现这东西真的可做的东西特别多。&lt;/b&gt;&lt;br&gt;&lt;br&gt;共勉！</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_200x112.png\" data-rawwidth=\"1111\" data-rawheight=\"190\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/f318b227a561fa5a1f9436f8d03e5089_r.png\">\n我是<a href=\"//link.zhihu.com/?target=http%3A//wangeditor.github.io/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">wangEditor - 轻量级web富文本编辑器<i class=\"icon-external\"></i></a>的作者。 作为一个在web富文本编辑器贡献了1年半时间的非菜鸟人员，我来谈谈我的感受。说到这个话题，我感受特别多，也特别乱。因此，想到哪里就写到哪里吧。 2014年11月开始，我是想着练练手，就绷着一股劲写了1000…\n\n<a href=\"/question/26739121/answer/86735964\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/26739121/answer/86735964\">发布于 2016-02-17</a></p>\n\n",
    "link": "https://zhihu.com/question/26739121/answer/86735964"
  },
  {
    "question": "\n用 Git 一定要用命令行吗？用命令行一定高贵吗？\n",
    "author": "Tim Chen",
    "content": "\n\n<textarea hidden class=\"content\">要我就反问他平时发邮件是用telnet port 25的吗？&lt;br&gt;&lt;br&gt;另外面试官是可以被投诉的你知道吗，作为面试官嘲讽应聘者是非常不专业的行为，因为应聘者代表的只是自己，而面试官代表的整个公司。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n要我就反问他平时发邮件是用telnet port 25的吗？ 另外面试官是可以被投诉的你知道吗，作为面试官嘲讽应聘者是非常不专业的行为，因为应聘者代表的只是自己，而面试官代表的整个公司。\n\n<a href=\"/question/50273628/answer/120213541\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/50273628/answer/120213541\">发布于 2016-09-02</a></p>\n\n",
    "link": "https://zhihu.com/question/50273628/answer/120213541"
  },
  {
    "question": "\n如何看待豪情的前端各个群开始付费加群并且踢了新人，需要重新付费进群的行为？\n",
    "author": "Mad Wiki",
    "content": "\n\n<textarea hidden class=\"content\">学习前端的人群中，最终找不到心仪的工作的往往就是这帮不会自己学习，而是对QQ群这种东西抱以很大期望的被动学习者。&lt;br&gt;&lt;br&gt;我没有师傅，我的路是我自己走出来的。时常看到一堆小白追着个技术水货喊大牛大牛的，每每见到这样的状况，都不由得惊叹他们浪费这么多时间在无用的事情上却也能凭借假象来收获似学习般的快乐。&lt;br&gt;&lt;br&gt;上周去看房，想换租。之前认识一个能力很强的自如带看管家，他刚入职一个月就出手50套租房，于是跳级往上升。现在他自然已经不用带看了，于是喊了一个人来找我。&lt;br&gt;&lt;br&gt;那人能力业余到让人瞠目结舌，两个小时过去，陪他走了很多冤枉路，连一间房子都没看到。动辄就是“我师傅说…”“我师傅上次…”这时突然想起来，他师傅，就是那个能力很强的租房推销员，似乎从来就没有什么师傅，那些日子见他遇到很多奇葩问题，也从未见他打电话问过别人怎么办，而是独立解决遇到的任何问题。&lt;br&gt;&lt;br&gt;而混前端的某些人，希望你们别老把自己定位成初学者，初学只是一个非常非常短暂的阶段而已。&lt;br&gt;&lt;br&gt;所谓的进阶，很大一方面就是自己独立解决问题的能力的提升。你会发现，这种QQ群看似提供帮助，但是也在损害你独立解决问题的能力，好让你们一直停留在初学阶段，一直停留在依赖他们带的阶段，一直停留在追着他们喊大牛大牛的阶段。&lt;br&gt;&lt;br&gt;我也从未见过卖鱼的会卖张渔网给你。别傻了。&lt;br&gt;&lt;br&gt;==============================================================&lt;br&gt;&lt;br&gt;不过在前端话题下越来越多出现这种讨论，让我很是感慨：前端界也有星宿派了。&lt;br&gt;&lt;br&gt;来来，跟我一起喊：“星宿老仙，法力无边！神通广大，法驾中原！”&lt;br&gt;&lt;br&gt;入教特惠，现今只收10块哦。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n学习前端的人群中，最终找不到心仪的工作的往往就是这帮不会自己学习，而是对QQ群这种东西抱以很大期望的被动学习者。 我没有师傅，我的路是我自己走出来的。时常看到一堆小白追着个技术水货喊大牛大牛的，每每见到这样的状况，都不由得惊叹他们浪费这么多…\n\n<a href=\"/question/41654154/answer/91916804\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-03-22\" target=\"_blank\" href=\"/question/41654154/answer/91916804\">编辑于 2016-03-23</a></p>\n\n",
    "link": "https://zhihu.com/question/41654154/answer/91916804"
  },
  {
    "question": "\n前端页面热数据太多，每秒都要请求几百个数据更新，开发这样的页面 Vue 性能怎么样？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">单讲性能，几百个数据的更新对于目前的主流框架来说，应该都不会构成什么瓶颈（桌面端而言）。但是这其实不仅仅是个技术问题：产品 / UX 层面，你要考虑一个『用户信息接收量』的问题。&lt;br&gt;&lt;br&gt;首先即使是实时数据，对于用户来说更新频率也不是越快越好的。不仅仅是框架更新速度可能有瓶颈，人类接收信息的速度也有瓶颈。举例来说，除非是图像，否则 60fps 的实时更新在大多数时候是信息量过剩的。从这个思路出发，最简单的保证性能的做法就是对更新进行 buffer/batch：不要新数据一来就立刻刷新，而是推到一个队列里面，定时一次性刷新出去。&lt;br&gt;&lt;br&gt;其次，页面上一次性展示的数据也不是越多越好。想象一下几百个单元格/图表不停地刷新（比如 dbmon benchmark），你觉得你能从里面获取多少有效信息？倒不如从设计的角度去思考一下如何切分页面，精简单个页面上的信息从而让它们更容易被用户接收。&lt;br&gt;&lt;br&gt;移动端更是如此：几寸大的屏幕上，信息展示量非常有限，更多的时候要考虑的是『信息量』的优化。&lt;br&gt;&lt;br&gt;而当你从信息量的角度重新思考过后，可能会发现一些所谓的『性能问题』也不复存在了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n单讲性能，几百个数据的更新对于目前的主流框架来说，应该都不会构成什么瓶颈（桌面端而言）。但是这其实不仅仅是个技术问题：产品 / UX 层面，你要考虑一个『用户信息接收量』的问题。 首先即使是实时数据，对于用户来说更新频率也不是越快越好的。不仅仅…\n\n<a href=\"/question/53386694/answer/134840166\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-12-08\" target=\"_blank\" href=\"/question/53386694/answer/134840166\">编辑于 2016-12-08</a></p>\n\n",
    "link": "https://zhihu.com/question/53386694/answer/134840166"
  }
]