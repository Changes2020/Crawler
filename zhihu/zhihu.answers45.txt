[
  {
    "question": "\n哪些网站有着一些有趣的 console.log 信息？\n",
    "author": "Tw93",
    "content": "\n\n<textarea hidden class=\"content\">哈哈 看到网站就想Ctrl+Shift+i一下的人，来答一答吧&lt;br&gt;&lt;ol&gt;&lt;li&gt;第一个是可爱的天猫     &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.tmall.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;天猫tmall.com-尚天猫，就购了&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，见图&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/1cf9e6a9a4ad685304f7ccc972e820b2_b.jpg&quot; data-rawwidth=&quot;1363&quot; data-rawheight=&quot;650&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1363&quot; data-original=&quot;https://pic3.zhimg.com/1cf9e6a9a4ad685304f7ccc972e820b2_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;第二个还是阿里系的，聚划算   &lt;a href=&quot;//link.zhihu.com/?target=http%3A//ju.taobao.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;【聚划算】无所不能聚&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/99c84da7266729fd2b42054502b60264_b.jpg&quot; data-rawwidth=&quot;1365&quot; data-rawheight=&quot;639&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1365&quot; data-original=&quot;https://pic1.zhimg.com/99c84da7266729fd2b42054502b60264_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;第三个是hao123的  &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.hao123.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;hao123_上网从这里开始&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;img src=&quot;https://pic3.zhimg.com/900dc37f1fb4ed672224bf210f11cc2a_b.jpg&quot; data-rawwidth=&quot;1364&quot; data-rawheight=&quot;651&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1364&quot; data-original=&quot;https://pic3.zhimg.com/900dc37f1fb4ed672224bf210f11cc2a_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;还是百度系的，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//zhidao.baidu.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;百度知道 - 全球最大中文互动问答平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;感觉风格都差不多,不是很吸引人。&lt;img src=&quot;https://pic1.zhimg.com/aaa154b8c72f5129f9f119b5621ecfe8_b.jpg&quot; data-rawwidth=&quot;1363&quot; data-rawheight=&quot;651&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1363&quot; data-original=&quot;https://pic1.zhimg.com/aaa154b8c72f5129f9f119b5621ecfe8_r.jpg&quot;&gt;&lt;/li&gt;&lt;li&gt;然后是苏宁易购 &lt;a data-hash=&quot;c5198d4e9c0145aee04dd53cc6590edd&quot; href=&quot;//www.zhihu.com/people/c5198d4e9c0145aee04dd53cc6590edd&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@徐飞&quot; data-hovercard=&quot;p$b$c5198d4e9c0145aee04dd53cc6590edd&quot;&gt;@徐飞&lt;/a&gt; ，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.suning.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;苏宁易购(Suning)-苏宁云商网上商城,是领先的综合网上购物商城,正品行货,全国联保,货到付款,让您尽享购物乐趣！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 感觉苏宁在互联网发展上还是很用心的。 &lt;img src=&quot;https://pic1.zhimg.com/361a8ee926d5273cc75818e3102b1aa0_b.jpg&quot; data-rawwidth=&quot;1358&quot; data-rawheight=&quot;646&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1358&quot; data-original=&quot;https://pic1.zhimg.com/361a8ee926d5273cc75818e3102b1aa0_r.jpg&quot;&gt;&lt;/li&gt;&lt;li&gt;第五个是贺老 &lt;a data-hash=&quot;3ec3b166992a5a90a1083945d2490d38&quot; href=&quot;//www.zhihu.com/people/3ec3b166992a5a90a1083945d2490d38&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@贺师俊&quot; data-hovercard=&quot;p$b$3ec3b166992a5a90a1083945d2490d38&quot;&gt;@贺师俊&lt;/a&gt;的百姓网，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//china.baixing.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;【百姓网】 - 免费发布信息&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;见图，也很用心 &lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/29372cbe41c03732f8501d1644192659_b.jpg&quot; data-rawwidth=&quot;1366&quot; data-rawheight=&quot;648&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1366&quot; data-original=&quot;https://pic2.zhimg.com/29372cbe41c03732f8501d1644192659_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;火狐的也好酷炫的感觉，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.mozilla.org/en-US/firefox/new/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Download Firefox&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（上面有人提了）&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/dfd7a0cdcb452fbe3a582bbf548f8f62_b.jpg&quot; data-rawwidth=&quot;1363&quot; data-rawheight=&quot;648&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1363&quot; data-original=&quot;https://pic3.zhimg.com/dfd7a0cdcb452fbe3a582bbf548f8f62_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;还有安居客 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//xa.anjuke.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;西安房产网，西安二手房，西安租房，新房&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b081db8bb644dada58095f6cd3c48e7e_b.jpg&quot; data-rawwidth=&quot;1364&quot; data-rawheight=&quot;650&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1364&quot; data-original=&quot;https://pic3.zhimg.com/b081db8bb644dada58095f6cd3c48e7e_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;我想问斗鱼，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.douyutv.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;斗鱼 - 全民游戏直播平台&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;是不是“！！！！！”这种多一点就显得有气势些，哈哈哈。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/16dfcfb5e6db06e7ef933fc291d06d35_b.jpg&quot; data-rawwidth=&quot;1365&quot; data-rawheight=&quot;652&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1365&quot; data-original=&quot;https://pic2.zhimg.com/16dfcfb5e6db06e7ef933fc291d06d35_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;还给我说&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.bigertech.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;bigertech笔戈科技｜简单，有趣，有价值&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 不是魅族的，你信你看。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b0a783734eb3e8f87a14c567a8032c9e_b.jpg&quot; data-rawwidth=&quot;1366&quot; data-rawheight=&quot;649&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1366&quot; data-original=&quot;https://pic3.zhimg.com/b0a783734eb3e8f87a14c567a8032c9e_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;突然觉得酷派不low了&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.coolpad.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;酷派商城－酷派手机官方网上商城，提供大神系列手机、大神系列专属配件、酷派线下热销机型及其配件、多种通用型配件产品的销售。&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/ccc7590a137f8ef85be37416ad882d51_b.jpg&quot; data-rawwidth=&quot;1366&quot; data-rawheight=&quot;654&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1366&quot; data-original=&quot;https://pic2.zhimg.com/ccc7590a137f8ef85be37416ad882d51_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;只想说一句，有钱了不起啊，快给我点（逃~~~）。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.super.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;超级课程表 | 校园最火社交应用&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d5945a6c9e500b01837d889026d3c7ab_b.jpg&quot; data-rawwidth=&quot;1365&quot; data-rawheight=&quot;654&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1365&quot; data-original=&quot;https://pic4.zhimg.com/d5945a6c9e500b01837d889026d3c7ab_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;其实还有12306呢（逃。。。）不小心跑进来的。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/f786a82b96e038ae759e78e9113b635f_b.jpg&quot; data-rawwidth=&quot;1364&quot; data-rawheight=&quot;647&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1364&quot; data-original=&quot;https://pic4.zhimg.com/f786a82b96e038ae759e78e9113b635f_r.jpg&quot;&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;最后推荐下我自己的前端小站吧&lt;a href=&quot;//link.zhihu.com/?target=http%3A//tw93.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tw93&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;img src=&quot;https://pic3.zhimg.com/b0c964c5a3841d9b337ee536f26cc27a_b.jpg&quot; data-rawwidth=&quot;1352&quot; data-rawheight=&quot;648&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1352&quot; data-original=&quot;https://pic3.zhimg.com/b0c964c5a3841d9b337ee536f26cc27a_r.jpg&quot;&gt;&lt;/li&gt;&lt;/ol&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n哈哈 看到网站就想Ctrl+Shift+i一下的人，来答一答吧 第一个是可爱的天猫 <a href=\"//link.zhihu.com/?target=http%3A//www.tmall.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">天猫tmall.com-尚天猫，就购了<i class=\"icon-external\"></i></a>，见图 第二个还是阿里系的，聚划算 <a href=\"//link.zhihu.com/?target=http%3A//ju.taobao.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">【聚划算】无所不能聚<i class=\"icon-external\"></i></a> 第三个是hao123的 <a href=\"//link.zhihu.com/?target=http%3A//www.hao123.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">hao123_上网从这里开始<i class=\"icon-external\"></i></a>。 还是百度系的，<a href=\"//link.zhihu.com/?target=http%3A//zhidao.baidu.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">百度知道 - 全球最大中文互动问答…<i class=\"icon-external\"></i></a>\n\n<a href=\"/question/28831274/answer/42299879\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-03-18\" target=\"_blank\" href=\"/question/28831274/answer/42299879\">编辑于 2015-03-19</a></p>\n\n",
    "link": "https://zhihu.com/question/28831274/answer/42299879"
  },
  {
    "question": "\n各位前端大触们，一般怎么定颜色的？\n",
    "author": "haochuan",
    "content": "\n\n<textarea hidden class=\"content\">强烈推荐一个软件: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.eigenlogik.com/spectrum/mac&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Spectrum — App for designing color schemes&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;Spectrum是一款Mac平台的配色方案创建工具，可以帮助我们轻松直观地创建配色方案：通过常规的配色规则创建出漂亮的配色方案、通过调色板检索当前色调、通过图像自动生成配色方案、通过可视化的形式预览配色方案、屏幕取色、建立配色方案数据库、将配色方案以CSS, PNG及ASE 格式文件导出等，对于设计师来说确实是一个不错的配色方案工具。&lt;/p&gt;&lt;br&gt;Spectrum是受色彩学原理的启发，可轻松、直观地创造出美丽的色彩方案。，内置了多种配色方案，如春、夏、秋、冬、黑夜等等，还支持从一张已有的图片取出配色方案，也支持屏幕取色，美术设计工作的人不要错过这款工具。&lt;br&gt;&lt;br&gt;附上一些截图:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/8fae4179f30d1fc25b440054b4672d54_b.jpg&quot; data-rawwidth=&quot;978&quot; data-rawheight=&quot;659&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;978&quot; data-original=&quot;https://pic1.zhimg.com/8fae4179f30d1fc25b440054b4672d54_r.jpg&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/a9d191f26eceb9d84a850bf9bc8b60f5_b.jpg&quot; data-rawwidth=&quot;1045&quot; data-rawheight=&quot;648&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1045&quot; data-original=&quot;https://pic2.zhimg.com/a9d191f26eceb9d84a850bf9bc8b60f5_r.jpg&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/0d3658a013384cb56d6fc50f97892d17_b.jpg&quot; data-rawwidth=&quot;961&quot; data-rawheight=&quot;617&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;961&quot; data-original=&quot;https://pic4.zhimg.com/0d3658a013384cb56d6fc50f97892d17_r.jpg&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/e8ad4bc9e5aef50cd2c8d4d588c30f5c_b.jpg&quot; data-rawwidth=&quot;1051&quot; data-rawheight=&quot;643&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1051&quot; data-original=&quot;https://pic1.zhimg.com/e8ad4bc9e5aef50cd2c8d4d588c30f5c_r.jpg&quot;&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic1.zhimg.com/8fae4179f30d1fc25b440054b4672d54_200x112.jpg\" data-rawwidth=\"978\" data-rawheight=\"659\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic1.zhimg.com/8fae4179f30d1fc25b440054b4672d54_r.jpg\">\n强烈推荐一个软件: <a href=\"//link.zhihu.com/?target=http%3A//www.eigenlogik.com/spectrum/mac\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Spectrum — App for designing color schemes<i class=\"icon-external\"></i></a> Spectrum是一款Mac平台的配色方案创建工具，可以帮助我们轻松直观地创建配色方案：通过常规的配色规则创建出漂亮的配色方案、通过调色板检索当前色调、通过图像自动生成配色方案、通过可视…\n\n<a href=\"/question/27234007/answer/35773561\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/27234007/answer/35773561\">发布于 2014-12-24</a></p>\n\n",
    "link": "https://zhihu.com/question/27234007/answer/35773561"
  },
  {
    "question": "\n假如女朋友（前端女）专门做了一个网页送给你作生日礼物，你会很感动吗很喜欢这份礼物吗？\n",
    "author": "dabaii",
    "content": "\n\n<textarea hidden class=\"content\">如果男朋友也是前端，那么他首先会看有没有浏览器兼容问题，是否有bug。然后F12看有没有符合优化14条，遇到处女座男朋友甚至会看是否符合优化34条. 遇到最近在做手机站的，还会拖动浏览器窗口大小看你是否做了屏幕适配。&lt;br&gt;&lt;br&gt;加油！你一定能让你男朋友满意的。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n如果男朋友也是前端，那么他首先会看有没有浏览器兼容问题，是否有bug。然后F12看有没有符合优化14条，遇到处女座男朋友甚至会看是否符合优化34条. 遇到最近在做手机站的，还会拖动浏览器窗口大小看你是否做了屏幕适配。 加油！你一定能让你男朋友满意的。\n\n<a href=\"/question/23497070/answer/32048547\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/23497070/answer/32048547\">发布于 2014-10-18</a></p>\n\n",
    "link": "https://zhihu.com/question/23497070/answer/32048547"
  },
  {
    "question": "\nWeb 前端和后端工程师的具体职责分别是怎样的？\n",
    "author": "高原",
    "content": "\n\n<textarea hidden class=\"content\">用户电脑手机上跑的代码叫前端，机房电脑上跑的代码叫后端.......</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n用户电脑手机上跑的代码叫前端，机房电脑上跑的代码叫后端.......\n\n<a href=\"/question/19911595/answer/13341720\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/19911595/answer/13341720\">发布于 2011-11-15</a></p>\n\n",
    "link": "https://zhihu.com/question/19911595/answer/13341720"
  },
  {
    "question": "\n参加第十届D2前端技术论坛，你有什么收获？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">我没有像民工叔那样现场速记的能力，不过乘着记忆还热乎，写一下。&lt;br&gt;&lt;br&gt;&lt;br&gt;本次D2共0x10场分享。&lt;br&gt;其中移动hybrid/native解决方案相关的分享有4场，分别来自百度、淘宝、手淘团队的工程师和GeekZooStudio的老郭。&lt;br&gt;组件和应用框架相关的分享（不包括react native）有3场，分别来自腾讯、蚂蚁金服、碉堡了（strikingly）的工程师。&lt;br&gt;node.js架构相关分享有4场，分别来自天猫、360、阿里云、腾讯的工程师。&lt;br&gt;特定平台主题分享有2场，分别来自阿里数娱、阿里智能云的工程师。&lt;br&gt;其他API管理、可视化、国际化各1场。&lt;br&gt;&lt;br&gt;主题的分布还是很有代表性的。当然因为主题如此丰富，所以又是同时有三个会场，我想很多人都会有选择困难。后来跟圆心聊了下，主要是现在前端议题多，又不想分两天（增加参会者出行负担），又不想每年两次或者收费（主办方控制成本），所以还是选择了现在的方式。至于说为什么分会场不是按主题（比如node.js主题、hybrid/native主题等）分，圆心说是故意的，但没有细说原因。&lt;br&gt;&lt;br&gt;&lt;br&gt;因为我本人的工作并不侧重hybrid/native方向，所以优先选择了其他主题，包括死马、朴灵的两场node.js的相关分享，杨文坚的组件化设计的分享，听鸿的TV平台的分享，黄高岚的react的分享。&lt;br&gt;&lt;br&gt;&lt;br&gt;先说死马的。&lt;br&gt;&lt;br&gt;天猫从php切换到node的架构层面改造我以前就听过一些分享，这次只是增加了一些运维层面的细节。还有关键的一点，就是通过天猫的真实数据说明新架构相对于老的php架构的巨大优势。（死马虽然在QA环节说部分提升来自于重构而不是php=&amp;gt;nodejs，但我认为那只是说说而已，继续使用php却要抛弃php的传统模型是非常困难的。）&lt;br&gt;&lt;br&gt;不过我对于死马讲的koa的一些优点并不完全认同。我个人认为koa是比express在api设计和middleware开发上更方便一些，但大部分benifit是相对次要和只惠及框架developers而不是框架使用者的。因此其他框架比如thinkjs也还是有机会跟koa去竞争的，呵呵。BTW，&lt;a data-hash=&quot;e9670fdae86c71e37f4c8cd7ae6279a8&quot; href=&quot;//www.zhihu.com/people/e9670fdae86c71e37f4c8cd7ae6279a8&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@李成银&quot; data-hovercard=&quot;p$b$e9670fdae86c71e37f4c8cd7ae6279a8&quot;&gt;@李成银&lt;/a&gt; 作为thinkjs的主要作者在D2上也有一场分享，其实主办方应该让成银跟死马pk一下。&lt;br&gt;&lt;br&gt;当然这个部分不是重点。重点是nodejs大法好。&lt;br&gt;&lt;br&gt;&lt;br&gt;然后说一下朴灵的。&lt;br&gt;&lt;br&gt;简单说就是alinode的广告。然而我狠happy能看到这广告。因为虽然我从2010年开始就是node.js的坚定支持者，但在实际生产环境中一直只将node.js用于工具链，而很少将node.js用于主要的服务。最大的原因就是缺乏node.js运维的信心。而朴灵的广告可以说给我提升了狠大的信心。希望朴灵团队早日进入node.js的core contributor和node基金会！&lt;br&gt;&lt;br&gt;&lt;br&gt;下面说下腾讯杨文坚的组件相关的分享。这是又一个借鉴WebComponents规范的尝试。作为一个对React体系持保留态度的人，我个人其实一直期待这个方向能看到更多的可能。不过遗憾的是文坚的尝试并没有能让我惊喜的部分，简单说，就是把容易做的事情都做了（做得可能还是不错的——特别是已经用于生产环境），但是困难的部分都没有做。&lt;br&gt;&lt;br&gt;当然这有一个难题。用于生产环境固然好，但也因此，特定工程上的需求就获得了更高的优先级。我不是说来自于实践的工程需求不重要，可是，组件化是非常复杂的架构问题，要优先考虑特定的工程需求，最简单的办法就是牺牲掉一些在特定工程中相对不重要的特性。然而要判断某种特性裁剪是临时性的措施还是永久性的架构约束，是非常困难的。&lt;br&gt;&lt;br&gt;&lt;br&gt;延伸开来说，在这一点上，各种hybrid/native方案也是如此。虽然我没有听这次所有的hybrid/native解决方案的相关分享，但是总体上我对所有目前类RN的方案有一个判断。它们其实本质上是重造浏览器渲染引擎。js是不动的，html/dom被裁剪，css被裁剪。其中尤以CSS为改造重点。像表单交互、动画、无障碍性等也是被牺牲的，但是这些部分是临时性的，像react生态里，这些问题已经得到解决或缓解。唯有对CSS的改造是本质性的改变。&lt;br&gt;&lt;br&gt;CSS大体可分为三个方面：&lt;br&gt;1. selector和cascade机制&lt;br&gt;2. 布局模型&lt;br&gt;3. 其他特性（比如css单位、transition/animation、透明通道、渐变、filter、svg等）&lt;br&gt;&lt;br&gt;如React官方的CSS in JS方案，是完全干掉了1。React Native进一步裁剪了2和3。&lt;br&gt;&lt;br&gt;&lt;br&gt;说到底，现今浏览器的复杂性，80%来自于CSS。像html parser、dom接口、各种device api这类，麻烦管麻烦，但是都是可以模块化，可以做到解耦和正交，因而实现和维护并不算特别难。但CSS部分就不是。尽管CSS规范也是模块化的，互相之间是正交的，但是那是从使用者（web开发者）的角度正交，而不是从实现者的角度。对于实现者来说，CSS特性错综复杂，互相影响。渲染引擎的许多优化，实际上很多是很dirty的。这导致渲染引擎（相对于native来说）又慢bug又多。&lt;br&gt;&lt;br&gt;&lt;br&gt;可是简化CSS就是solution吗？我对此其实一直有所保留。所有强调工程实践需求的，可以试想，回到CSS1的时代，我们也可以解决80%的页面样式需求的嘛，但是我们难道会满足于CSS1吗？所以问题是，各种类RN的方案如果一直停留在今天的样式相关特性集，我们是否真的能满足于此？如果它们也不断扩充特性集，我们怎么有信心说CSS发展中踩过的坑它们就会避免？&lt;br&gt;&lt;br&gt;我个人倾向于，样式相关的复杂度是所谓本质复杂度，也就是长远看无法完全避免的。这是为什么我对RN或类似方案给出的评价一律都是：（目前来看）工程上是可行的。但是长远来说，它们是不是答案，我存疑。&lt;br&gt;&lt;br&gt;&lt;br&gt;回到文坚在组件化方面的尝试，虽然说借鉴了WebComponents规范，但实际上的实现却如React一样是牺牲了CSS的selector和cascade机制（当然如果在现有技术上很容易做到，那也不需要新标准了）。而保持原有DOM/CSS架构正是WebComponents相对于其他组件化方案的核心优势（至少对喜欢WebComponents的人来说是这样）。所以这大概也只能评价为一种尝试。&lt;br&gt;&lt;br&gt;另一方面，文坚可能花了不少精力在打包优化上面。从工程实践的角度来说，这一点是非常重要的。然而从未来组件方案的角度来说，现在条件下所做的优化都是不重要的。原因我在晚场的分享和交流里讲了，我认为整个前端构建/部署即将发生重大的变革。组件的构建、打包自然不会例外。&lt;br&gt;&lt;br&gt;&lt;br&gt;整个下午我一直在白马山庄听分享，前面提过的朴灵的分享是第一场，第二场是阿里数娱的听鸿的「TV前端开发解决方案」。这一场听的人比较少，这也可以理解，这毕竟不是热点。不过对我个人来说，这场我是很有共鸣的。因为他讲的正是我2006年期间在盛大工作时参与盛大盒子项目时研究过的领域。作为一个TV Web框架的先驱（烈），我很高兴看到后继有人。当然也有一点伤心，因为当年盛大盒子推出的时候，Apple TV第一代还没有推出；今天Apple TV已经是行业标杆，而我以及当年近百人的工程师团队所有的努力却早已灰飞烟灭，没有留下一点痕迹……如果那时盛大更牛逼一点，并且没有广电总局这样恶心的机构，说不定今天听鸿参考的就不是Apple TV的文档而是我写的文档了，呜呜……最后补充一点，问答环节hehe123建议结合无障碍领域是非常到位的，当年我在写交互Guideline的时候其实也参考了许多W3C WAI的文档。&lt;br&gt;&lt;br&gt;&lt;br&gt;白马山庄的最后一场是碉堡了的黄高岚的分享。整个presentation准备充分、条理清楚，代码演示很顺畅，还有彩蛋。在听了一整天之后，以这样一场轻松但又扎实的分享结尾，让人一点也不会有疲倦之感。其实之前碉堡了的CTO郭达峰就给我提起过他们有位员工技术出色，但因行动不便所以很少出来参加技术活动。没想到那么快就能看到本人。希望以后能看到黄老师的更多分享。&lt;br&gt;&lt;br&gt;&lt;br&gt;流水帐报告完毕。至于晚场我在台上即兴讲的内容，以后再整理成文，这里就不赘述了。（更新：已经在另一个问题下写了：&lt;a href=&quot;https://www.zhihu.com/question/34449620/answer/79028575&quot; class=&quot;internal&quot;&gt;如何评价阮一峰关于前端工具变化快的言论？ - 贺师俊的回答&lt;/a&gt;）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n我没有像民工叔那样现场速记的能力，不过乘着记忆还热乎，写一下。 本次D2共0x10场分享。 其中移动hybrid/native解决方案相关的分享有4场，分别来自百度、淘宝、手淘团队的工程师和GeekZooStudio的老郭。 组件和应用框架相关的分享（不包括react native）有…\n\n<a href=\"/question/38637676/answer/77889487\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-21\" target=\"_blank\" href=\"/question/38637676/answer/77889487\">编辑于 2015-12-29</a></p>\n\n",
    "link": "https://zhihu.com/question/38637676/answer/77889487"
  },
  {
    "question": "\n做为初入职的Web前端开发，应该如何尽快提高自己的能力？\n",
    "author": "鱼鱼鱼",
    "content": "\n\n<textarea hidden class=\"content\">实名反对楼上 &lt;a data-hash=&quot;579c732d98e3797028793bb456af7b2b&quot; href=&quot;//www.zhihu.com/people/579c732d98e3797028793bb456af7b2b&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@暗灭&quot; data-hovercard=&quot;p$b$579c732d98e3797028793bb456af7b2b&quot;&gt;@暗灭&lt;/a&gt;。&lt;br&gt;麻烦就算你要装逼也别误导新人好么，说的好像挺厉害的然而并没有什么卵用，人家问的如何快速提高自己的Web前端开发能力，列举的十条随便百度下就知道的知识体系需要你来强调？看了半天并不会觉得对新人有什么帮助。“前端人员好好的做自己的前端，别听那些人扯淡说要学什么后端。 ” 这句话完全就是在瞎J8扯淡误人子弟。做前端的不了解后端，数据交互怎么写？接口怎么写？说的懂后端又没叫你去写服务器！没叫你去写服务器！！没叫你去写服务器！！！&lt;br&gt;至少做前端数据交互的，从数据库到服务器逻辑到前端页面展示，这一套流程总得清楚吧，这里再怎么都绕不开后端的。&lt;br&gt;&lt;br&gt;以下开始写答案。&lt;br&gt;&lt;br&gt;首先做Web前端的，要对前端的知识结构有清晰的认知。就是你必须明白前端的知识是由哪几个部分组成，换个说法是：要明白一个功能完整的网站，从页面展示 到 服务器处理业务逻辑，经过的几个流程要弄明白，哪些是可以在页面就处理完成的，哪些是需要提交到后台去操作的，自己心里要有个大概了解。在这个流程里，各自要用到什么技术，诸如html css  JS  nodeJS  JAVA  等等在这个流程里各自扮演什么角色，承担什么样的任务，对这些有个清晰的认知，学习的时候才不会觉得那么茫然。对于新人来说，刚开始上手就弄明白这些肯定是不现实的。&lt;br&gt;&lt;br&gt;下班了，占个坑，空了来补充答案&lt;br&gt;&lt;br&gt;~~~~~~~~~~~~~~分隔线~~~~~~~~~~~~~~~~~~~~~~&lt;br&gt;以下更新。前端的知识体系太过庞大，各种框架也会让人眼花缭乱完全不知道如何下手，去网上找个在线学习的平台，会发现一大堆你不知道是用来干嘛的框架教程。事实上，这些框架都是从最基础的HTML CSS JS 上衍生过来的，因此，刚入坑的小菜们，不要被网上的一堆框架教程所迷惑，专心学好HTML CSS JS，&lt;br&gt;&lt;br&gt;这里需要强调三遍：基础很重要！！！基础很重要！！！基础很重要！！！&lt;br&gt;&lt;br&gt;到你能布局比较合理并且兼容没有什么问题，兼顾标签语义化，实现大部分基础的JS交互效果（焦点图，选项卡，表单验证之类的简单效果），再去按照自己的需求学习其他的框架类的东西。千万不要盲目的学习，千万不要自己学的东西可以用来干嘛都不知道！！！&lt;br&gt;&lt;br&gt;1.HTML css &lt;br&gt;&lt;br&gt;这是前端最基本的知识，相当于小学要学习字母拼音的那种。两者没有多少可以说的，主要是需要多少了解一些浏览器运行原理，从而尽量的提升浏览器性能。例如用CSS 渲染页面的时候，尽量的减少页面渲染次数，用html布局的时候，尽量的做到标签语义化之类的，这是一个合格的前端必须会的入门知识。学习这两个不难，照着网上的教程做就可以了。智商没大问题的，花一两个月你就能做出大部分的静态页面了。另外可以了解下less/sass，这个时候，你会觉得自己已经入门了。&lt;br&gt;这点对题主应该没问题的。&lt;br&gt;&lt;br&gt;2.JS&lt;br&gt;&lt;br&gt;分辨一个前端是小菜鸟还是大菜鸟的区别，就是看JS的功底了。建议先学Jquery，Jquery 代码更简单，可读性更强，学习起来更容易一点，咱先不去管JS的底层原理，什么闭包，原型之类的先统统不去管。随便来点教程跟着学，跟着练，然后去找别人写好的代码、插件之类的拿来看，任何看不懂的都去百度，一定要弄明白每一行代码的意义，然后通读下来，学习别人程序运行的逻辑，自己多练练，积累下来的经验能让自己独立的写一些交互效果了之后，再回过头去看JS的底层原理，这个时候你就会发现，诸如闭包，原型链这些，原来很好理解嘛，并且基本看过一两遍之后，就能让自己用得 得心应手，然后就自己多封装几个插件，多用用继承类相关的东西。这个时候，你会觉得自己又一次入门了。&lt;br&gt;&lt;br&gt;3，各种框架&lt;br&gt;当你学好上面几个之后，找个公司实习基本没啥问题。&lt;br&gt;题主应该就是处于这个阶段和上面一个阶段之间。&lt;br&gt;框架类的东西太多，就尽量按照自己的需求来，Extjs、prototype、kissy，bootstrap、jQuery UI、easyui、flex、angularJS等等都挺火的，但是你学习了在工作中没有用到的话，也只是充实了一下自己的知识体系而已。当你把自己业务范围内的都做得随心所欲了，再去了解那些框架，分析利弊适用范围，用自己积累下来的经验选择比较适合自己的来学习。其实如果基础牢靠，经验积累足够，什么框架拿来都是可以轻松上手。在这个阶段里，更多的应该是巩固一下自己的学习所得，多做一些项目，熟悉不同的开发模式。做电商的，面向J2EE的，都多参与一下，前端工程化，组件化这些概念要知道。几个项目下来，累积的经验也能应付大部分前端的任务了。&lt;br&gt;&lt;br&gt;4.nodeJS /Python之类的&lt;br&gt;&lt;br&gt;当你做到上面几点之后，你不会满足于现在的自己只是写写前端交互效果，重构一下页面，处理下兼容这些简单的工作。一个前端大牛，必须要学会搭建一个网站的框架，那么你就可以朝着NodeJS 之类的前进了，到了这个程度，已经不需要别人为你指点什么了，就照着自己的理解去学就是了。&lt;br&gt;&lt;br&gt;&lt;br&gt;以上。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n实名反对楼上 <a data-hash=\"579c732d98e3797028793bb456af7b2b\" href=\"//www.zhihu.com/people/579c732d98e3797028793bb456af7b2b\" class=\"member_mention\" data-editable=\"true\" data-title=\"@暗灭\" data-hovercard=\"p$b$579c732d98e3797028793bb456af7b2b\">@暗灭</a>。 麻烦就算你要装逼也别误导新人好么，说的好像挺厉害的然而并没有什么卵用，人家问的如何快速提高自己的Web前端开发能力，列举的十条随便百度下就知道的知识体系需要你来强调？看了半天并不会觉得对新人有什么帮助。“前端人员好好的做…\n\n<a href=\"/question/20906539/answer/132338059\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-11-21\" target=\"_blank\" href=\"/question/20906539/answer/132338059\">编辑于 2016-11-24</a></p>\n\n",
    "link": "https://zhihu.com/question/20906539/answer/132338059"
  },
  {
    "question": "\n如何看待《为什么我不想成为Web前端程序员》这篇文章？\n",
    "author": "欲三更",
    "content": "\n\n<textarea hidden class=\"content\">所以说微软当年是对的，客户端就应该用 C++ 开发。世人觉得客户端技术简单，就用 C++ 的复杂度来平衡，这样是最好了。&lt;br&gt;&lt;br&gt;曾几何时，做客户端的 C++ 程序员鄙视 java 和 C# 简单，对方说什么都没用啊，“呵呵，你们的 socket 代码是自己写的吗”，装完逼就跑。而且那会儿做 VC 的赚的挺多的……&lt;br&gt;&lt;br&gt;以上为段子，说点正经的。&lt;br&gt;&lt;br&gt;前端和后端的技术取向是不一样的，按一般规律，前端的难度主要在复杂业务逻辑和复杂展现技术上，后端的难度主要在性能、稳定性和伸缩性上（不包含一些特定业务，比如搜索、推荐引擎）。对照这样的格局我们大致可以看到web系统未来会怎么演变——&lt;br&gt;&lt;br&gt;* 业务逻辑前移，后端专注于数据接口，提高服务质量，只做不能前移的业务逻辑。&lt;br&gt;&lt;br&gt;* 前端展示技术趋向复杂，各种渲染技术就位后，web 前端的“web 味儿”会越来越淡。&lt;br&gt;&lt;br&gt;* 纯粹的 web 会边缘化，但是 app 和 web 技术全面打通，客户端和前端将变为同义词。&lt;br&gt;&lt;br&gt;在这样的蓝图中，显然是不需要多少堆业务逻辑的后端程序员的，他们早晚要改行做前端。这么想，会不会让你心里平衡点？&lt;br&gt;&lt;br&gt;ps：不过作者说前端薪水低这一点，目前似乎是事实。在国内来说，25k月薪对前端来说是很不错的薪水了吧？但是对 java 程序员来说，可能只是稍微有点经验，能干活的水平（我是听做java的人说的，别打我啊……）。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n所以说微软当年是对的，客户端就应该用 C++ 开发。世人觉得客户端技术简单，就用 C++ 的复杂度来平衡，这样是最好了。 曾几何时，做客户端的 C++ 程序员鄙视 java 和 C# 简单，对方说什么都没用啊，“呵呵，你们的 socket 代码是自己写的吗”，装完逼就跑。…\n\n<a href=\"/question/53783777/answer/138621749\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2017-01-01\" target=\"_blank\" href=\"/question/53783777/answer/138621749\">编辑于 2017-01-04</a></p>\n\n",
    "link": "https://zhihu.com/question/53783777/answer/138621749"
  },
  {
    "question": "\n如何实现 Babel 编译器？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">既然问了这个问题那我默认题主没有任何编译器方面的知识，可以看看这个：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/thejameskyle/the-super-tiny-compiler&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;github.com/thejameskyle&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;/the-super-tiny-compiler&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;作者 James Kyle 是 Babel 的活跃维护者之一。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n既然问了这个问题那我默认题主没有任何编译器方面的知识，可以看看这个：<a href=\"//link.zhihu.com/?target=https%3A//github.com/thejameskyle/the-super-tiny-compiler\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/thejameskyle</span><span class=\"invisible\">/the-super-tiny-compiler</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 作者 James Kyle 是 Babel 的活跃维护者之一。\n\n<a href=\"/question/49043143/answer/113970082\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/49043143/answer/113970082\">发布于 2016-07-30</a></p>\n\n",
    "link": "https://zhihu.com/question/49043143/answer/113970082"
  },
  {
    "question": "\n前端如何更好的实现接口的缓存和更新?\n",
    "author": "徐飞",
    "content": "\n\n<textarea hidden class=\"content\">这个问题很好。&lt;br&gt;&lt;br&gt;以传统方式来说，我们一般会搞一个store，上层业务的请求都是从它走，由它去拿到远程数据，并且控制缓存。&lt;br&gt;&lt;br&gt;但我们面临一个问题，当数据更新了，需要通知所有使用这个数据的业务方，所以就不得不在这里再补一种机制，用于通知上层。通常就是某种订阅机制：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;store1.subcribe(&quot;somedata&quot;, data =&amp;gt; {\n  //处理这个data，更新到视图模型上供刷新界面\n  viewModel.somedata = data;\n});\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这样问题是解决了，但业务代码就比较繁琐了，为什么我还要在每个地方都写订阅？尤其是如果上层用了angular或者vue，本来可以很简单的，你这一弄，框架刚帮我简化了一些代码，又被搞得很长了。&lt;br&gt;&lt;br&gt;因为之前我们第一次查询数据，不是这么干的，而是：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;service1.getData().then(data =&amp;gt; {\n  //处理这个data，更新到视图模型上供刷新界面\n  viewModel.somedata = data;\n});\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;所以这里就出现了不同的两种方式来更新界面数据，这非常讨厌。&lt;br&gt;&lt;br&gt;我之前提出过一种折中的解决办法，比如在angular中，可以这样：&lt;br&gt;&lt;br&gt;- store中保存数据对象的引用，上层业务在查询的时候，持有这个引用，并且，不得修改内容&lt;br&gt;- 如果需要修改或者更新远程数据，调用store中封装的修改方法，把数据合并到数据对象中&lt;br&gt;&lt;br&gt;这样，界面上的刷新之类，可以不劳自己费心，但整体还是挺别扭的，而且，限制上层不能动引用，这个事情很坑，万一需要二次加工数据，就歇菜了。&lt;br&gt;&lt;br&gt;React有一套机制来处理这个事情，留给这派的人来阐述吧。&lt;br&gt;&lt;br&gt;我说说另外一种方式，FRP。&lt;br&gt;&lt;br&gt;在egghead上有一个RxJS的视频系列，其中有一节大致介绍了使用Reactive理念处理这种场景，我觉得非常好，地址如下，可能要会员才能看：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//egghead.io/lessons/rxjs-reactive-programming-using-cached-network-data-with-rxjs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Reactive Programming&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;它这个场景就是为了复用请求，里面的代码摘录：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startupRequestStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;just&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://api.github.com/users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestOnRefreshStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;refreshClickStream&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomOffset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://api.github.com/users?since='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;randomOffset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startupRequestStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestOnRefreshStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requestStream&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flatMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;\n    &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromPromise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getJSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requestUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shareReplay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n\n&lt;span class=&quot;c1&quot;&gt;// refreshClickStream: -------f-------------&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// requestStream:      r------r-------------&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// responseStream:     ---R-------R---------&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// closeClickStream:   ---------------x-----&amp;gt;&lt;/span&gt;\n&lt;span class=&quot;c1&quot;&gt;// suggestion1Stream:  N--u---N---u---u-----&amp;gt;&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRandomUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;listUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listUsers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)];&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n\n&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSuggestionStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;closeClickStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getRandomUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;refreshClickStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;merge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;\n      &lt;span class=&quot;nx&quot;&gt;closeClickStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; \n                                  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRandomUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;\n    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;\n&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这里面的关键在于：shareReplay和withLatestFrom。&lt;br&gt;&lt;br&gt;shareReplay的介绍在这：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//xgrommx.github.io/rx-book/content/observable/observable_instance_methods/sharereplay.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;shareReplay | RxJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;withLatestFrom的介绍在这：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//xgrommx.github.io/rx-book/content/observable/observable_instance_methods/withlatestfrom.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;withLatestFrom&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;抛开代码细节不谈，我觉得理念是这样：&lt;br&gt;&lt;br&gt;我把请求当做流，然后，上层业务来订阅这个流，正常来说，我们的期望可能是，订阅之后，流的每次更新都会得到处理，但这时可能出现：&lt;br&gt;&lt;br&gt;某一个订阅者来得太晚，流已经走了一段数据了，会需要“补课”。&lt;br&gt;&lt;br&gt;所以，Rx的机制会允许我们缓存一些数据，供“我们来晚了”的朋友们使用。&lt;br&gt;&lt;br&gt;使用这种流的理念来处理，有什么好处呢？那就是可以保证上层业务的一致性。对于上层代码，我只管是从这个流获取数据，更新界面，我不关注你是哪来的，只认你一家，反正只要根据你那边的信息，都作了对应处理，就肯定好了。&lt;br&gt;&lt;br&gt;而这个流的提供方，也很方便，他只需考虑把不同来源的数据进行归并，从多个流合并成一个流，就是这么简单。&lt;br&gt;&lt;br&gt;Angular 2深度整合了RxJS，可以关注，不过RxJS本身是不绑定到任何框架的，你跟jQuery或者React配合使用，也是没问题。&lt;br&gt;&lt;br&gt;个人认为这是目前我见过最优雅的解决此类问题的方案。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这个问题很好。 以传统方式来说，我们一般会搞一个store，上层业务的请求都是从它走，由它去拿到远程数据，并且控制缓存。 但我们面临一个问题，当数据更新了，需要通知所有使用这个数据的业务方，所以就不得不在这里再补一种机制，用于通知上层。通常就是…\n\n<a href=\"/question/40035517/answer/84372581\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/40035517/answer/84372581\">发布于 2016-02-01</a></p>\n\n",
    "link": "https://zhihu.com/question/40035517/answer/84372581"
  },
  {
    "question": "\nHTML5有哪些创意类型？\n",
    "author": "吴小粥",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;一些传统的大家见了很多的就不说了，基本都在下面几个分类吧。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;1.测试：知乎出过一个财务包子铺还不错。&lt;br&gt;2.小游戏：激励好友进行分享，最出名的莫过于神经猫了。&lt;br&gt;3.利人利己型：发红包&lt;br&gt;4.展示型，从内容分为以下几个部分&lt;/b&gt;&lt;/i&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;· 心灵鸡汤或抓住亲情，友情，爱情的h5&lt;br&gt;&lt;/li&gt;&lt;li&gt;· 怀旧型：抓住用户的母校情怀，怀旧情怀等用户心理来进行制作&lt;br&gt;&lt;/li&gt;&lt;li&gt;· 热点营销：比如黄太吉借助港囧的热点营销，最近的小王子，还有些借助节日的。&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;&lt;br&gt;下面介绍几种酷炫的h5做法。&lt;/b&gt;&lt;br&gt;&lt;b&gt;一.高B格技术型：全景三维空间&lt;/b&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;1.案例：杜蕾斯美术馆&lt;/b&gt;&lt;br&gt;&lt;/i&gt;用全景三维空间技术打造了一个网上美术馆，随着手机滑动，可看到不同的房间与陈设。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/36618d0e1bc15d5c2dbdfaccc09cc6b9_b.png&quot; data-rawwidth=&quot;660&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;660&quot; data-original=&quot;https://pic2.zhimg.com/36618d0e1bc15d5c2dbdfaccc09cc6b9_r.png&quot;&gt;&lt;i&gt;扫二维码体验：&lt;/i&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/56dec41d7139ec3ec8d0282811d52cba_b.png&quot; data-rawwidth=&quot;160&quot; data-rawheight=&quot;160&quot; class=&quot;content_image&quot; width=&quot;160&quot;&gt;&lt;i&gt;&lt;b&gt;2.&lt;/b&gt;&lt;/i&gt;&lt;i&gt;&lt;b&gt;梦幻水晶球。&lt;/b&gt;&lt;/i&gt;&lt;br&gt;通过移动手机，镜头从水晶球外不断摇晃推近，渐渐走进水晶球的微观世界里。通过手机环顾四周，可以360度欣赏水晶球里的全景，摇一摇雪花便漫天飘洒。使用了重力感应、3D等技术，文字与BGM的使用也十分讲究。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/96b161fd8937b29094bc8d1f86887555_b.png&quot; data-rawwidth=&quot;590&quot; data-rawheight=&quot;859&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;590&quot; data-original=&quot;https://pic2.zhimg.com/96b161fd8937b29094bc8d1f86887555_r.png&quot;&gt;&lt;b&gt;二.手机场景模拟&lt;/b&gt;&lt;br&gt;案例有“这个陌生来电你敢接吗？”是大众点评为了宣传《复仇者联盟2》出的一个H5，用未知来电开启画面将用户引入到与自己有关联的故事里，最后引出品牌广告。完美有没有！当时朋友圈刷屏啊。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/781319bea636a5293296a6fb132b2445_b.png&quot; data-rawwidth=&quot;660&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;660&quot; data-original=&quot;https://pic2.zhimg.com/781319bea636a5293296a6fb132b2445_r.png&quot;&gt;&lt;i&gt;扫二维码体验：&lt;/i&gt;&lt;img src=&quot;https://pic2.zhimg.com/b3275686011a450cea2bb128ca2a7881_b.png&quot; data-rawwidth=&quot;160&quot; data-rawheight=&quot;160&quot; class=&quot;content_image&quot; width=&quot;160&quot;&gt;相似的还有欧莱雅做的可以互动的朋友圈，小时代宣传做过的一个h5,百度的一个陌生女人的来电，“吴亦凡即将入伍”H5页面.......&lt;br&gt;&lt;b&gt;三.双屏互动&lt;/b&gt;&lt;br&gt;楼上答主说过了，分享一个奔驰在七夕做的吧：七夕鹊桥会。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/8d73a710613f421fb190d6f607d89374_b.png&quot; data-rawwidth=&quot;660&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;660&quot; data-original=&quot;https://pic1.zhimg.com/8d73a710613f421fb190d6f607d89374_r.png&quot;&gt;&lt;i&gt;扫描二维码体验：&lt;/i&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/ebd10a60682966934543c594423a65d0_b.png&quot; data-rawwidth=&quot;160&quot; data-rawheight=&quot;160&quot; class=&quot;content_image&quot; width=&quot;160&quot;&gt;类似的还有很多，小屏到大屏的也有：记得有个从手机往电脑倒冰块的，链接忘了。&lt;br&gt;&lt;b&gt;四.GIF的运用&lt;/b&gt;&lt;br&gt;大众点评：我们之间就一个字&lt;br&gt;能从gif动图中了解每个字的真谛，简洁而富有意义。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/07f3e784a19635f025569d475a13b3a1_b.png&quot; data-rawwidth=&quot;660&quot; data-rawheight=&quot;420&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;660&quot; data-original=&quot;https://pic2.zhimg.com/07f3e784a19635f025569d475a13b3a1_r.png&quot;&gt;&lt;i&gt;扫描二维码体验：&lt;/i&gt;&lt;img src=&quot;https://pic2.zhimg.com/cd060374faca16a9578de7b63ca77f15_b.png&quot; data-rawwidth=&quot;160&quot; data-rawheight=&quot;160&quot; class=&quot;content_image&quot; width=&quot;160&quot;&gt;&lt;br&gt;&lt;i&gt;&lt;b&gt;大概就这些吧，赞数多以后再更~&lt;/b&gt;&lt;/i&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/36618d0e1bc15d5c2dbdfaccc09cc6b9_200x112.png\" data-rawwidth=\"660\" data-rawheight=\"420\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/36618d0e1bc15d5c2dbdfaccc09cc6b9_r.png\">\n<b>一些传统的大家见了很多的就不说了，基本都在下面几个分类吧。</b> <i><b>1.测试：知乎出过一个财务包子铺还不错。 2.小游戏：激励好友进行分享，最出名的莫过于神经猫了。 3.利人利己型：发红包 4.展示型，从内容分为以下几个部分</b></i> · 心灵鸡汤或抓住亲情，友情，爱情…\n\n<a href=\"/question/36350236/answer/68597229\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-10-20\" target=\"_blank\" href=\"/question/36350236/answer/68597229\">编辑于 2015-10-20</a></p>\n\n",
    "link": "https://zhihu.com/question/36350236/answer/68597229"
  },
  {
    "question": "\n怎么看 LinkedIn 放弃 Scala 和 Node.js？\n",
    "author": "阿哲",
    "content": "\n\n<textarea hidden class=\"content\">这两个语言我都用过，MITBBS上很多回帖都很水，个人觉得：&lt;br&gt;&lt;ul&gt;&lt;li&gt;在用小众技术之前，最好确保你的团队有长期维持技术栈的能力，包括能持续招到真懂它们的人。别以为网上文章满天飞，就可以随便找个人来干活；事实上真干活了，你会发现网上的资料多是hello world级别，一点都解决不了问题。你团队里没有专家级别以上的人员，就等着吃瘪吧。&lt;/li&gt;&lt;li&gt;技术必须和自身需求匹配。比如node，它目前比较适合实现高并发IO系统，而不适合高CPU/内存消耗的计算。这个世界上真正的通用型语言少之又少，大部分语言都在特定领域各持擅长。用错技术，长期看会带来很大的麻烦。&lt;/li&gt;&lt;li&gt;大热的技术小心阳光下的阴影，最好能全面评估后再决定，尤其不要被各种言论影响。Ruby在RoR很火的时候，其实核心API很多问题。我老东家在我边上的一个团队，就是被忽悠，没有仔细评估就选择了JRuby，结果后悔了。&lt;/li&gt;&lt;/ul&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这两个语言我都用过，MITBBS上很多回帖都很水，个人觉得： 在用小众技术之前，最好确保你的团队有长期维持技术栈的能力，包括能持续招到真懂它们的人。别以为网上文章满天飞，就可以随便找个人来干活；事实上真干活了，你会发现网上的资料多是hello world级…\n\n<a href=\"/question/28979908/answer/44441451\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28979908/answer/44441451\">发布于 2015-04-10</a></p>\n\n",
    "link": "https://zhihu.com/question/28979908/answer/44441451"
  },
  {
    "question": "\nhtml5将来会取代native app 吗，我现在学native app,比如android,会不会白学了，以后被淘汰？\n",
    "author": "vczh",
    "content": "\n\n<textarea hidden class=\"content\">从长远来看，API和语言全部都会白学。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n从长远来看，API和语言全部都会白学。\n\n<a href=\"/question/27588230/answer/37230176\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/27588230/answer/37230176\">发布于 2015-01-14</a></p>\n\n",
    "link": "https://zhihu.com/question/27588230/answer/37230176"
  },
  {
    "question": "\n代码门事件真相如何？小米是否在进行虚假营销，真实销量几何？\n",
    "author": "耿霄",
    "content": "\n\n<textarea hidden class=\"content\">窃以为，能从这个单独的事件得到这个结论的都是不懂前端开发的。&lt;br&gt;&lt;br&gt;注：我对小米无感觉，不是小米粉也不是小米黑，小米有没有做虚假销售我不知道，我只知道，这个推论结果不对。&lt;br&gt;&lt;br&gt;首先，我就是做前端开发的。（在阿里巴巴国际站，有前端大牛欢迎投简历给我，可以先在知乎上私信。请注意：大牛。我们现在不招普通前端了。）&lt;br&gt;我们一起来想象下这个页面的上线过程：&lt;br&gt;1. 抢购页面上线。&lt;br&gt;2. 大家开始抢购。服务器鸭梨好大。 &lt;br&gt;3. 几分钟后抢购结束了。&lt;br&gt;4. 抢购结束页面上线。&lt;br&gt;&lt;br&gt;OK。&lt;br&gt;如上流程，若不采用ajax获取异步数据的方式。小米的前端同学为什么要在注释中写这些代码呢？&lt;br&gt;真相只有一个：为了快速上线。难道要实际已经抢购完毕，苦逼的前端才开始啃吃肯吃的写代码，做样式，10分钟之后上线吗？或者打开一个记事本，找到事先存下来的代码，替换掉，再上线吗？&lt;br&gt;写在注释里多么的简单直接啊！改个数字，去掉注释，直接上线。&lt;br&gt;换了我也会这么做。&lt;br&gt;&lt;br&gt;这时候有些貌似懂前端的同学要说了，为什么不做一个ajax的调用呢？&lt;br&gt;实时的获取剩余的手机台数，告诉用户呢？1S钟延迟都没有。&lt;br&gt;&lt;br&gt;很好的方案，可是，小米的服务器真的很差，抢购期间，丢包太严重了。如果用ajax去做，基本都无法得到正确或者及时的返回值。最终的结果就是，用户进入抢购页面，欣喜的看到，还可以抢购，兴冲冲的去买了。实际上，小米服务器准备返回给用户的“抢购已经结束”还在路上，或者还没上路就被扼杀，再也到不了用户的浏览器，留下一个悲剧。&lt;br&gt;&lt;br&gt;说完了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n窃以为，能从这个单独的事件得到这个结论的都是不懂前端开发的。 注：我对小米无感觉，不是小米粉也不是小米黑，小米有没有做虚假销售我不知道，我只知道，这个推论结果不对。 首先，我就是做前端开发的。（在阿里巴巴国际站，有前端大牛欢迎投简历给我，可…\n\n<a href=\"/question/20244242/answer/14464205\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/20244242/answer/14464205\">发布于 2012-05-18</a></p>\n\n",
    "link": "https://zhihu.com/question/20244242/answer/14464205"
  },
  {
    "question": "\n淘宝 UED 前端、腾讯脚本开发、豆瓣前端开发，应该如何在这几个工作之间选择？\n",
    "author": "sofish",
    "content": "\n\n<textarea hidden class=\"content\">作为一个刚经历了换工作的前端，一个公司，我会问自己3个这样的问题：&lt;br&gt;&lt;br&gt;1. 团队是不是我愿意呆的？&lt;br&gt;2. 做的产品是不是我愿意花心思的？&lt;br&gt;3. 在能胜任的情况下，他们是否看重我的要求，比如工资？&lt;br&gt;&lt;br&gt; 下面是一些自己的见解和方法，仅供参考。 &lt;br&gt;&lt;br&gt; 1. 不是应届生，有工作经验的人都已经在某个团队呆过，什么样的团队是你想要的，什么想的人是和你工作方式最契合的，什么样的环境下让你不仅在其位谋得其职，还有更多的额外的进步。&lt;br&gt;&lt;br&gt;至于如何聊出这些，就看你了。我的方法是：尝试和他们聊聊，工程师的谈话可以知道他们是否因为在这个团队中而感到骄傲？这里的人是否愿意/乐于分享？因为我们都是搞技术的，这群人对于技术的追求符不符合你的追求？等。&lt;br&gt;&lt;br&gt; 2. 一直在想，为什么现在有的人愿意花1w块让我做一个博客主题，而我的兴致并不是特别高；而大学前端刚入门的时候，却能通宵免费给别人提供 wordpress 主题？并且尽量把各种功能做到自己能达到的完美。其实这就是所谓的激情。如果你做的工作是你愿意的，那你会忽略掉很多外在的因素，而做得很开心。并且，最终你会在这方面成为专家。所以如果这个团队做的产品是你喜欢的，会去用，会去体验，会去深入的，选择之。&lt;br&gt;&lt;br&gt;方法：比如我一直有个愿望是做些事，让人类的生活更方便，所以我会考虑这样的团队。 &lt;br&gt;&lt;br&gt; 3. 我们努力地做好一切，不为别的，只为更好的生活。你所要的生活可能是更多的权力，更多的名望，更多的金钱，而这些用正当的手段去获得都是值得尊敬的。那么，你是这个团队所需求的人，她是否也能满足你？比如工资，或者你想做 HTML5相当的工作他们是不是能提供或者有机会？相互满足是很重要的，要知道你选择这份工作可能又是几年的事（我爸爸常告诉我，不要轻易离职，只有当你呆足够久了才可能知道是这个团队不适合你，还是你没有适应这个团队），不是一件短期的事，所以要别做太短的打算。&lt;br&gt;&lt;br&gt;方法：告诉他们你要的，把真实的期望告诉他们。看表现。&lt;br&gt;&lt;br&gt;当然，还有工作的地点。这个我很在意，不过，看你的描述，应该觉得这个不是大问题。然后，好吧，这些问题的答案，我当成了换新工作的原则。辞职，离开支付宝，得到很多机会。我问了自己最多的是这3个问题。这些问题得出的答案，让我选择了一个喜欢的团队。很快，我将会去工作。&lt;br&gt;&lt;br&gt;:)</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n作为一个刚经历了换工作的前端，一个公司，我会问自己3个这样的问题： 1. 团队是不是我愿意呆的？ 2. 做的产品是不是我愿意花心思的？ 3. 在能胜任的情况下，他们是否看重我的要求，比如工资？ 下面是一些自己的见解和方法，仅供参考。 1. 不是应届生，有工…\n\n<a href=\"/question/20084964/answer/13924537\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2012-02-25\" target=\"_blank\" href=\"/question/20084964/answer/13924537\">编辑于 2012-02-25</a></p>\n\n",
    "link": "https://zhihu.com/question/20084964/answer/13924537"
  },
  {
    "question": "\n如何看待哔哩哔哩的开源 HTML5 播放器内核 flv.js?\n",
    "author": "吴盛滨",
    "content": "\n\n<textarea hidden class=\"content\">其实很多人不明白这个东西的意义。其实国内所有直播网站都有几秒的延迟，因为普遍对直播实时性要求不高，但是有些直播对实时性要求特别高。&lt;br&gt;假如你有这样一个需求，你需要直播拉斯维加斯一个赌桌上，一个荷官在玩21点的游戏。如果延时很高。比如用HLS来直播，那么会有超过10秒以上的延时。你看到服务端发过来的牌点数，但是视频上的荷官10秒后才发牌，完全不能用。&lt;br&gt;那么只能选择低延迟的直播协议，而所有直播协议延迟和实时性最好的就是RTMP，在中国看美国的视频直播延迟也能控制在1秒内，很神奇的一个协议。但是RTMP有个缺点，他只能在PC端上用flash来直播，不支持移动端。如果要在手机上网页端用html5播放，那么只能选择HLS，而且HLS在中国看美国的视频直播有时候高达18秒的延迟。&lt;br&gt;而真正能解决这个需求的，目前来说只有flv.js，通过HTTP-FLV，在手机网页端用html5播放，延迟是能控制在1秒内的。&lt;br&gt;其实很多外国游戏直播网站都是用RTMP来直播。他们都是在手机上用APP，用C++来解析的。看过一个英文论坛上的讨论，他们的技术对于网页端播放低延迟直播几乎无解，网页端非常难。很多人都没有意识到，这是非常有技术含量，非常伟大的一项技术。&lt;br&gt;至于很多人为什么不用MP4，而表示对FLV的厌恶的问题。做为一个技术控，我是能理解B站为什么用FLV。因为adobe的RTMP和FLV的格式，都设计的非常的简洁和漂亮，所以才有如此神奇的性能。而对于开发者也是一种解脱，无论用C或者js处理，代码也都非常简洁。如果你让他用js去写MP4那一坨坨代码，就陷入无穷的技术坑。所以做为一个技术控，用FLV是再自然不过的事情。用FLV，性能好速度快用户爽，代码易读易控开发者爽，只是喷子不爽。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n其实很多人不明白这个东西的意义。其实国内所有直播网站都有几秒的延迟，因为普遍对直播实时性要求不高，但是有些直播对实时性要求特别高。 假如你有这样一个需求，你需要直播拉斯维加斯一个赌桌上，一个荷官在玩21点的游戏。如果延时很高。比如用HLS来直播…\n\n<a href=\"/question/51997376/answer/134109395\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/51997376/answer/134109395\">发布于 2016-12-03</a></p>\n\n",
    "link": "https://zhihu.com/question/51997376/answer/134109395"
  },
  {
    "question": "\n前端学习几年后遇到瓶颈了，该怎么办？\n",
    "author": "Jasin Yip",
    "content": "\n\n<textarea hidden class=\"content\">谢邀。&lt;br&gt;&lt;br&gt;你跟我大半年前一样，处于一个瓶颈期，页面能写、构建工具会用、包管理工具也会用，但却发现网上大神们的模块化、组件化、工程化之类的，根本不知道怎么用。&lt;br&gt;&lt;br&gt;同意楼上说的跳槽，但不太认同这就否定你的学习能力，你可能缺少的是接到复杂项目的机会。&lt;br&gt;&lt;br&gt;当我加入到现在的公司后，我发现，虽然项目并不是非常大，但业务其实挺复杂的。我加入公司之前，公司就已经使用 CoffeeScript 了，然而，他们在多个 Coffee 文件间的数据传递，全是靠 window.x 这种全局变量去传递的，最多的一个页面我发现过有 40+ 个全局变量，于是我心里就觉得，这很容易就会变量命名冲突吧，于是我就去寻找解决方案。最后发现，原来之前听起来高大上的模块化方案，就是解决这个问题的，然后我开始调研 AMD、CMD、CommonJS 规范，以及对应的 RequireJS、SeaJS、Browserify 等。&lt;br&gt;&lt;br&gt;确定使用 Browserify 去做模块化后，紧接着就要开始重构项目，然而重构你不能一股脑儿就着手去手，你必须要先做设计，不然很多时候你重构过的代码很快就得再重构，所以这就提升了你的架构设计能力。&lt;br&gt;&lt;br&gt;于是，在重构 JS 时，我会把一些比较独立的东西（比如我们使用的编辑器）抽出来，包括它的 HTML、Less、Coffee，这就是组件的概念，抽出来后，HTML 通过 PHP 的 include（当时还没有使用模板引擎）、Less 通过 import、Coffee 通过 Browserify 的方式，实现了最原始的组件化。虽然还没做到像 FIS 那样，每个组件都用单独的文件夹去存放，但我这样抽出来其实是为了以后引入 FIS 作铺垫的。&lt;br&gt;&lt;br&gt;开发时我发现，我们前端的代码都要根据后端 Laravel 框架的目录设计，把前端的代码放在他们设计的地方，这样的目录设计对前端来说其实是不友好的，我们会希望前端这边也有自己的一套目录结构，就像我会喜欢云龙提出来的就近维护的哲学，也就是上面提到的每个组件都用单独的文件夹去存放的结构。但后端的目录都设计好了，我作为一个前端，不能说改就改。于是我就一直在想如何去做前后端分离。&lt;br&gt;&lt;br&gt;对于前后端分离，我调研过淘宝 UED 的大前端方案，但这改造成本非常大，中间还得架一层 Node，这并不是我们这种小团队可以维护的；我也调研过 SPA（Single Page Application）的架构，但这都不适合我们，因为项目在我进来之前，完全是以最原始的方式去写的，并没有使用任何的框架，现在引入 Angular 什么的成本很大；最后我就调研 Mock Server 方案，详情可以去我的博客看：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jasinyip.com/WebFE/mock_server_1.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前后端分离之构建 Mock Server 工程（一）：概述&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，大概是这么一个过程：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/b8d79ac84989f9c2e596bf8c67a0d91b_b.png&quot; data-rawwidth=&quot;475&quot; data-rawheight=&quot;510&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;475&quot; data-original=&quot;https://pic4.zhimg.com/b8d79ac84989f9c2e596bf8c67a0d91b_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;其实前端能做的还有很多，比如代码质量控制、自动化测试、前端报错监控系统、用户行为的监控和分析系统等等。&lt;br&gt;&lt;br&gt;上面都是我这大半年来的经验，我想表达的是，你应该去找一家更重视前端的公司，项目有足够的复杂度，让你需要不断地遇到问题、思考问题、调研解决方案、最终解决问题。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/b8d79ac84989f9c2e596bf8c67a0d91b_200x112.png\" data-rawwidth=\"475\" data-rawheight=\"510\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/b8d79ac84989f9c2e596bf8c67a0d91b_r.png\">\n谢邀。 你跟我大半年前一样，处于一个瓶颈期，页面能写、构建工具会用、包管理工具也会用，但却发现网上大神们的模块化、组件化、工程化之类的，根本不知道怎么用。 同意楼上说的跳槽，但不太认同这就否定你的学习能力，你可能缺少的是接到复杂项目的机会。…\n\n<a href=\"/question/35864634/answer/64816225\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-09-23\" target=\"_blank\" href=\"/question/35864634/answer/64816225\">编辑于 2015-09-23</a></p>\n\n",
    "link": "https://zhihu.com/question/35864634/answer/64816225"
  },
  {
    "question": "\n零基础的人如何在一个月内做出令人惊讶的网站?\n",
    "author": "余博伦",
    "content": "\n\n<textarea hidden class=\"content\">&lt;a href=&quot;//link.zhihu.com/?target=http%3A//repair.ruchope.org&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;repair.ruchope.org&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;整个建站过程不超过三天，使用Wordpress建站系统，使用Apple IOS7风格的主题&lt;br&gt;使用的工具有&lt;br&gt;Wordpress建站系统&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//cn.wordpress.org&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;cn.wordpress.org&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;Satellite7模板&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1sj4Oxlj&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;pan.baidu.com/s/1sj4Oxl&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;我的站点是在一台Linux服务器上，不过初学者推荐使用WAMP，也方便在自己的电脑上给你老师做展示&lt;br&gt;WAMP网站服务器软件&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wampserver.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;wampserver.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;如何使用WAMP搭建Wordpress站点&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//jingyan.baidu.com/search%3Fssid%3D%26from%3D%26bd_page_type%3D2%26uid%3D%26pu%3D%26st%3D5%26os%3D%26word%3Dwamp%2Bwordpress&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;http://jingyan.baidu.com/search?word=wamp+wordpress&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;========================&lt;br&gt;Satellite7模板是付费模版，做作业可以，切勿商业使用&lt;br&gt;&lt;br&gt;想学习Web开发的可以关注我，查看我的其他回答&lt;br&gt;&lt;br&gt;========================&lt;br&gt;最后劝题主心不要太大&lt;br&gt;罗马不是一日建成的&lt;br&gt;不要总想着第一次就要惊世骇俗，一鸣惊人&lt;br&gt;踏踏实实学习，一步一步来&lt;br&gt;我的第一个网页就是用html和css纯手写的，很简单，没有js&lt;br&gt;然后看书不推荐head first系列，太多哗众取宠的内容和词语，只是读起来轻松，此外多读无益&lt;br&gt;一边学习一边实践&lt;br&gt;祝题主早日成才&lt;br&gt;========================&lt;br&gt;最后抱怨一下&lt;br&gt;知乎上怎么越来越多讽刺挖苦装逼秀优越的回答&lt;br&gt;人与人之间最基本的信任友爱互帮互助哪里去了</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<a href=\"//link.zhihu.com/?target=http%3A//repair.ruchope.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">repair.ruchope.org</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> 整个建站过程不超过三天，使用Wordpress建站系统，使用Apple IOS7风格的主题 使用的工具有 Wordpress建站系统 <a href=\"//link.zhihu.com/?target=http%3A//cn.wordpress.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">cn.wordpress.org</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a> Satellite7模板 <a href=\"//link.zhihu.com/?target=http%3A//pan.baidu.com/s/1sj4Oxlj\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">pan.baidu.com/s/1sj4Oxl</span><span class=\"invisible\">j</span><span class=\"ellipsis\"></span><i class=\"icon-external\"></i></a> 我的站点是在一台Linux服务器上，不过初学者推荐使用WAMP，也…\n\n<a href=\"/question/29317996/answer/43995620\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-04-06\" target=\"_blank\" href=\"/question/29317996/answer/43995620\">编辑于 2015-04-19</a></p>\n\n",
    "link": "https://zhihu.com/question/29317996/answer/43995620"
  },
  {
    "question": "\n写这样一个求婚网页，需要具备什么IT技能？\n",
    "author": "赵劼",
    "content": "\n\n<textarea hidden class=\"content\">本来想说可以跟温特同学请教下，但忽然想到说他可以分分钟搞定这种需求，却找不到人可以求婚，我不禁又去写了一百行代码才让心情平静下来……</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n本来想说可以跟温特同学请教下，但忽然想到说他可以分分钟搞定这种需求，却找不到人可以求婚，我不禁又去写了一百行代码才让心情平静下来……\n\n<a href=\"/question/28565295/answer/41290243\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/28565295/answer/41290243\">发布于 2015-03-06</a></p>\n\n",
    "link": "https://zhihu.com/question/28565295/answer/41290243"
  },
  {
    "question": "\nnpm、bower、jamjs 等包管理器，哪个比较好用？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">&lt;a data-hash=&quot;2d150224aa34fb50a6d3697bd7f03257&quot; href=&quot;//www.zhihu.com/people/2d150224aa34fb50a6d3697bd7f03257&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@倪云建&quot; data-tip=&quot;p$b$2d150224aa34fb50a6d3697bd7f03257&quot; data-hovercard=&quot;p$b$2d150224aa34fb50a6d3697bd7f03257&quot;&gt;@倪云建&lt;/a&gt; 的回答不错，在此作一些补充。&lt;br&gt;&lt;br&gt;&lt;b&gt;Bower&lt;/b&gt;&lt;br&gt;&lt;br&gt;bower 的缺点比较明显，最大的问题就是缺乏统一的构建机制。但有意思的是 Google 的 Polymer 选择了 bower 作为包管理器，因为 Polymer 是建立在两个还没在浏览器里普遍实现的东西上的：HTML Import 和 SPDY。HTML Import 让你可以把 HTML, CSS, JS 写在同一个 HTML 文件里作为一个组件或是模块，然后通过一行代码引入：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my-component.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;同时，在一个组件里也可以引入其他的组件，也可以直接引用远程服务器上的组件。某种程度上 HTML import 可以取代现在的组件模块机制。而 SPDY 是下一代的 http 协议，可以让浏览器只用一个服务器连接传输多个文件。换句话说即使你页面里有很多个 HTML import 也不会因为多次请求导致页面加载缓慢。在这两个东西存在的理想情况下，前端项目是完全可以不需要构建过程的。这是 Bower 长远来看的一个意义，但现阶段对大多数开发者而言，构建依然是一个必不可少的步骤。&lt;br&gt;&lt;br&gt;&lt;b&gt;Component&lt;/b&gt;&lt;br&gt;&lt;br&gt;曾经作为 TJ 脑残粉的我是坚定的 component 使用者，但用了一段时间以后有几个比较重要的不爽之处：&lt;br&gt;- 每一个 component 都必须要在 component.json 中手动列出所有文件，每次更改项目结构或是重命名文件都很麻烦，我还为此写了个 grunt 插件专门自动做这个事情。&lt;br&gt;- component 只有一个 wiki page 列表，没有一个可搜索的中央数据库，模块的可发现度比较低。同时，github 仓库的星数是唯一的模块质量指标，而 npm 则有下载统计和被依赖数量这些更实在的数据。&lt;br&gt;- 模块发现度低带来的另一个问题就是不同作者的模块之间很少出现公用的依赖。虽然 Component 的依赖是扁平的，在实际使用别人的模块的时候依然会出现重复（同样的问题不同的实现），这就导致很多人宁可自己造轮子，自己依赖自己，只是把 Component 当个工具而不是平台用。&lt;br&gt;&lt;br&gt;&lt;b&gt;npm + Browserify&lt;/b&gt;&lt;br&gt;&lt;br&gt;我这里想要指出，npm 其实是一个非常好的前端（对，没错，是前端）包管理方案，最主要的就是依靠 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//browserify.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Browserify&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 这个神器。Browserify 最大的意义不是让你能在 npm 上发布前端的静态资源，而是实现&lt;b&gt;前后端的代码共享。&lt;/b&gt;npm上有很多包是前后端通用的，比如我要找个现成的算法实现，什么 levenshtein distance 啊，perlin noise 啊，gaussian distribution 啊，A* 寻路啊，npm 上一搜一大把。常用的库如 jquery backbone 之类的，只要你想得到的基本上都有 npm 版本。需要什么直接 npm install 就可以用在浏览器端的项目里了，Component 和 Bower 在这方面跟 npm 完全没有可比性，spm 就更不提了。开发流程上来说也极其省心，项目用 CommonJS 写，不需要任何配置，给一个入口文件就行！还有一个官方工具 watchify，一行命令跑起，保存文件自动构建，连 grunt gulp 都不需要。&lt;br&gt;&lt;br&gt;这个方案唯一的缺点，就是 npm 的树状依赖结构可能导致重复的模块和代码量的臃肿，需要跑一次 `npm dedupe` 来尽量压平依赖树。当然，实际情况中前端模块出现依赖同一模块的不兼容版本还是很少见的。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<a data-hash=\"2d150224aa34fb50a6d3697bd7f03257\" href=\"//www.zhihu.com/people/2d150224aa34fb50a6d3697bd7f03257\" class=\"member_mention\" data-editable=\"true\" data-title=\"@倪云建\" data-tip=\"p$b$2d150224aa34fb50a6d3697bd7f03257\" data-hovercard=\"p$b$2d150224aa34fb50a6d3697bd7f03257\">@倪云建</a> 的回答不错，在此作一些补充。 <b>Bower</b> bower 的缺点比较明显，最大的问题就是缺乏统一的构建机制。但有意思的是 Google 的 Polymer 选择了 bower 作为包管理器，因为 Polymer 是建立在两个还没在浏览器里普遍实现的东西上的：HTML Import 和 SPDY。H…\n\n<a href=\"/question/24414899/answer/28021471\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-07-16\" target=\"_blank\" href=\"/question/24414899/answer/28021471\">编辑于 2014-07-16</a></p>\n\n",
    "link": "https://zhihu.com/question/24414899/answer/28021471"
  },
  {
    "question": "\nAngularJS的数据双向绑定是怎么实现的？\n",
    "author": "天猪(刘勇)",
    "content": "\n\n<textarea hidden class=\"content\">看到某个答案被顶了几票， 担心会误导新手。&lt;br&gt;&lt;br&gt;angular并&lt;b&gt;不存在定时&lt;/b&gt;脏检测。&lt;br&gt;angular对常用的dom事件，xhr事件等做了封装， 在里面触发进入angular的digest流程。&lt;br&gt;在digest流程里面， 会从rootscope开始遍历， 检查所有的watcher。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//atian25.github.io/2014/05/09/angular-performace/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;angular性能优化心得&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;谈起angular的脏检查机制(dirty-checking), 常见的误解就是认为： ng是定时轮询去检查model是否变更。&lt;br&gt;其实，ng只有在指定事件触发后，才进入$digest cycle：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;DOM事件，譬如用户输入文本，点击按钮等。(ng-click)&lt;/li&gt;&lt;li&gt;XHR响应事件 ($http)&lt;/li&gt;&lt;li&gt;浏览器Location变更事件 ($location)&lt;/li&gt;&lt;li&gt;Timer事件($timeout, $interval)&lt;/li&gt;&lt;li&gt;执行$digest()或$apply()&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n看到某个答案被顶了几票， 担心会误导新手。 angular并<b>不存在定时</b>脏检测。 angular对常用的dom事件，xhr事件等做了封装， 在里面触发进入angular的digest流程。 在digest流程里面， 会从rootscope开始遍历， 检查所有的watcher。 <a href=\"//link.zhihu.com/?target=http%3A//atian25.github.io/2014/05/09/angular-performace/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">angular性能优化心得<i class=\"icon-external\"></i></a> 谈起a…\n\n<a href=\"/question/23275373/answer/34048893\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-11-26\" target=\"_blank\" href=\"/question/23275373/answer/34048893\">编辑于 2015-01-28</a></p>\n\n",
    "link": "https://zhihu.com/question/23275373/answer/34048893"
  }
]