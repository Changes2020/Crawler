[
  {
    "question": "\n怎么学习前端开发？求推荐学习路线？\n",
    "author": "暗灭",
    "content": "\n\n<textarea hidden class=\"content\">&lt;b&gt;第一 CSS篇 &lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;1.  2个小时的时间去看html&lt;br&gt;     就学会&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div&amp;gt;&amp;lt;lable&amp;gt;&amp;lt;input&amp;gt;&amp;lt;p&amp;gt;&amp;lt;input&amp;gt;就够了&lt;br&gt;&lt;br&gt;2.4个小时的时间去看CSS &lt;br&gt;    就学会 color,position就够了，花点时间看一下盒子模型&lt;br&gt;&lt;br&gt;3.2个小时的时间，开始写一个九宫格的小程序&lt;br&gt;    很简单，用Div，画出九个格子，心情好就随便给点颜色&lt;br&gt;&lt;br&gt;4.2个小时的时间，去配置一下Nginx&lt;br&gt;    很简单，配置好了之后就可以在PC上打开，也可以在手机上访问了&lt;br&gt;&lt;br&gt;5.4个小时的时间，去学习一下 px,em,rem和百分比。&lt;br&gt;   确保不同手机屏幕下看到的九宫格比例不失调，学习一下自适应。&lt;br&gt;&lt;br&gt;6.2个小时的时候，学习一下Chrome的F12&lt;br&gt;   感受一下盒子模型，学习在F12下调试，看大小，更改值，看盒子宽度什么的。&lt;br&gt;&lt;br&gt;7.花8个小时的时候去学习各种居中&lt;br&gt;&lt;br&gt;8.花4个小时的时间去学习制作表单&lt;br&gt;   很简单的表单，登录注册就行，学会Placeholder.&lt;br&gt;&lt;br&gt;9. 花4个小时的时间去学习制作导航栏&lt;br&gt;&lt;br&gt;10.NND，忘了说了，在6条的时候就应该学会Svn或者是Git，去买一台服务器，把自己的代码放上去。&lt;br&gt;&lt;br&gt;   学习使用源码管理工具。&lt;br&gt;&lt;br&gt;11.花4个小时的时间去练习清除浮动&lt;br&gt;&lt;br&gt;12.花2个小时的时间去学习PS的切图。&lt;br&gt;&lt;br&gt;13.花4个小时的时间去理解雪碧图。&lt;br&gt;&lt;br&gt;14.花8个小时间的时间去找一个PSD的源文件，然后去做出一个整站的完整页面。&lt;br&gt;&lt;br&gt;15.花8个小时的时间，去把这个页面做成响应式的。&lt;br&gt;&lt;br&gt;16.花16个小时的时间，将这个网页的内容全部左右调换反转。&lt;br&gt;     检查自己的命名，样式是否能够胜任PM异想天开的思路。&lt;br&gt;&lt;br&gt;17.花4个小时的时间去学习前端编码规范和命名规则&lt;br&gt;&lt;br&gt;18.花4个小时的时间去学习各种弹框&lt;br&gt;&lt;br&gt;19.花16个小时的时间去学习一下Bootstrap&lt;br&gt;&lt;br&gt;20花8个小时的时间去用Bootstrap把之前的页面全部重写。&lt;br&gt;&lt;br&gt;21 花4个小时的时间同样的把页面元素全部左右反转。&lt;br&gt;&lt;br&gt;22.花8个小时的时间去学习Less，用Less来重写你之前的任务&lt;br&gt;&lt;br&gt;23.花8个小时的时间学习一下Flex布局&lt;br&gt;&lt;br&gt;24.花48个小时的时间去完成一个完整的PC端&lt;br&gt;&lt;br&gt;25.花48个小时的时间去完成一个完整的H5.&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;第二 JS篇&lt;/b&gt;&lt;br&gt;&lt;br&gt;    未完看心情待续~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n<b>第一 CSS篇 </b> 1. 2个小时的时间去看html 就学会&lt;html&gt;&lt;head&gt;&lt;body&gt;&lt;div&gt;&lt;lable&gt;&lt;input&gt;&lt;p&gt;&lt;input&gt;就够了 2.4个小时的时间去看CSS 就学会 color,position就够了，花点时间看一下盒子模型 3.2个小时的时间，开始写一个九宫格的小程序 很简单，用Div，画出九个…\n\n<a href=\"/question/30180100/answer/131071110\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/30180100/answer/131071110\">发布于 2016-11-13</a></p>\n\n",
    "link": "https://zhihu.com/question/30180100/answer/131071110"
  },
  {
    "question": "\n如何看待 Progressive Web Apps ？\n",
    "author": "黄玄",
    "content": "\n\n<textarea hidden class=\"content\">看到 &lt;a data-hash=&quot;790dccce26904cdcd11b0fad3bac37b7&quot; href=&quot;//www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@题叶&quot; data-hovercard=&quot;p$b$790dccce26904cdcd11b0fad3bac37b7&quot;&gt;@题叶&lt;/a&gt; 问这道题时，我刚从 I/O 回来，当时就特想答，今天总算有时间了。&lt;br&gt;&lt;br&gt;---&lt;br&gt;更新：&lt;br&gt;&lt;br&gt;11月20日在 GDG DevFest 2016 北京分享了「Service Worker 101」，Slides: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//huangxuan.me/2016/11/20/sw-101-gdgdf/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Service Worker 101「GDG DevFest 2016 北京」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，技术干货技术干货。&lt;br&gt;&lt;br&gt;10月20日在 QCon 上海 2016 分享了 「Progressive Web App，复兴序章」，Slides: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//huangxuan.me/2016/10/20/pwa-qcon2016/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Progressive Web Apps，复兴序章「QCon 上海 2016」&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，不止是一场技术演讲，更是关于 Web、开放、自由与信仰。有不少半年来 PWA 方面的更新，作为这个答案的补充吧～。&lt;br&gt;---&lt;br&gt;&lt;br&gt;其实回来的两周里，我对 Progressive Web App（以下简称 PWA）的理解也在不断更新，现在来答反而是一个思考的更为全面的时候。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;u&gt;一、先从技术角度聊聊我的观点。&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;6月5号，我在 I/O Redux 上分享了「Progressive Web App - in my points of view」(PWA 之我见) ，简单介绍了 PWA，也聊了聊我的看法。这里就用文字再粗略过一遍，搭配 Slides 观看效果更佳: &lt;a href=&quot;//link.zhihu.com/?target=http%3A//huangxuan.me/pwa-in-my-pov/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;PWA-in-my-pov&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ;)&lt;br&gt;&lt;br&gt;&lt;u&gt;首先，什么是 PWA？&lt;/u&gt;&lt;br&gt;&lt;br&gt;官网 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//developers.google.com/web/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/w&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eb/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 上对 PWA 的宣传是这四个关键字：可靠、快速、Engaging、安全；再点进去 PWA 的主页，会发现还有 Instant Loading、添加自主屏、通知推送、响应式（诶？&lt;br&gt;而官方教程 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//codelabs.developers.google.com/codelabs/your-first-pwapp/%230&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;https://codelabs.developers.google.com/codelabs/your-first-pwapp/&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 就更棒了，一次性给了 10 个关键字！包括 Progressive, App-like, Fresh, Installable....&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0096633323ddce9dd02010339e40ce7d_b.png&quot; data-rawwidth=&quot;2432&quot; data-rawheight=&quot;1572&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2432&quot; data-original=&quot;https://pic2.zhimg.com/0096633323ddce9dd02010339e40ce7d_r.png&quot;&gt;&lt;br&gt;如果搜索下 PWA 的历史就会发现，它第一次出现于 Googler Alex Russell 的博客文章《&lt;a href=&quot;//link.zhihu.com/?target=https%3A//infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Progressive Web Apps: Escaping Tabs Without Losing Our Soul&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》中，其主要观点是：Web 的发展方向应该是”在保留灵魂的基础上渐进增强”，而非现在大行其道的 Hybrid App 方向。&lt;br&gt;&lt;br&gt;总结一下，文章里的 Progressive 主要有这两层含义：&lt;br&gt;&lt;ol&gt;&lt;li&gt;如果用户需要，网页可以渐进式地变成 App，比如被添加到主屏幕、全屏方式运行、离线工作、推送通知消息等。但它仍是 Web 而非放到 App Store 里。&lt;/li&gt;&lt;li&gt;所有这些“使得 Web 更能与 App 匹敌”的特性都是以渐进的方式增强的，在比传统网页应用更好的同时也保证了降级兼容。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;作者举的一个 PWA 例子就是 Chrome Dev Summit 2014 的 Web App，Slides 里的 Gif 描述了其从网页被“升级”为 App 的过程： &lt;a href=&quot;//link.zhihu.com/?target=http%3A//yanshuo.io/assets/player/%3Fdeck%3D5753088f79bc440063aa84f0%23/9&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;演说.io - 分享你的云演说&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;我理解的 PWA，&lt;b&gt;首先是一个“涵盖性术语&lt;/b&gt;&lt;b&gt;”&lt;/b&gt;：它泛指所有那些“利用现代 Web 技术以尝试在移动设备上提供顶级体验的 web app”；（ 这个名词本身是发展且包容的，你不一定要使用到所有的现代 web 技术，而只要 cleverly take advantage of technologies 以提供优秀体验就好了）&lt;br&gt;&lt;br&gt;再者，为什么瞄准移动端？显然，因为目前移动仍是风口浪尖，而 Web 毕竟诞生于桌面端，历史原因使得 Web 的最大短板还是在移动端。Chrome 团队一直宣传说 “PWA: Deliver an app-like UX” ，&lt;b&gt;在我理解看来，应该说 Chrome 团队现阶段推进 Web 的主要目标在 “匹敌 Native app”&lt;/b&gt;。（如果 VR 真能起来，说不定 Web VR 又会成为 Chrome 团队的重心）&lt;br&gt;&lt;br&gt;&lt;u&gt;PWA 到底有哪些过人之处（特性）？&lt;/u&gt;&lt;br&gt;&lt;br&gt;看了诸多 Session 后，其实总结起来主要就四个：&lt;br&gt;&lt;br&gt;1. Add to Homescreen&lt;br&gt;说白了就是可被添加自主屏与全屏运行。对于这个，我就发一张图不说话：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/7d1ee8ebc98dcee184ab7c1b06503a2a_b.png&quot; data-rawwidth=&quot;2432&quot; data-rawheight=&quot;1572&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2432&quot; data-original=&quot;https://pic3.zhimg.com/7d1ee8ebc98dcee184ab7c1b06503a2a_r.png&quot;&gt;2. App Shell &lt;br&gt;其实就是第一次渲染渲个壳、等异步数据来了再填充，包括阿里旅行在内的很多 web app 应该很早就在用了。&lt;br&gt;&lt;br&gt;3. Offline （离线能力）&lt;br&gt;离线和弱网环境也能秒开的能力，但是这个就牛逼了。&lt;b&gt;Hybrid 架构搞了那么久，不就为的这个吗？&lt;/b&gt;之前有个东西叫 Application Cache，但是那货就是个 shit。&lt;br&gt;&lt;br&gt;所以这次 Chrome 搞了个 Service Worker 出来，给了 Web 一个可以跑在后台的线程，它可以搭配非常靠谱的 CacheStorage API 做缓存、可以拦截所有 HTTP 请求并使用 Fetch API 进行 response，一个非常完备的 Proxy 就这么诞生了。&lt;img src=&quot;https://pic4.zhimg.com/e02b37004d1309bc508475ca896f9657_b.png&quot; data-rawwidth=&quot;2432&quot; data-rawheight=&quot;1572&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2432&quot; data-original=&quot;https://pic4.zhimg.com/e02b37004d1309bc508475ca896f9657_r.png&quot;&gt;&lt;br&gt;不得不说，这货跟 &lt;a href=&quot;http://zhihu.com/question/31316032/answer/75236718&quot; class=&quot;internal&quot;&gt;Hybrid架构下，加载本地H5资源后，如何处理Ajax请求？ - 黄玄的回答&lt;/a&gt; 这里提到的淘宝旅行 Hybrid 架构的思路真是太像了……&lt;br&gt;&lt;b&gt;不过当这种离线能力出现在浏览器层面时，意义就完全不一样了。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;4. Re-engageable&lt;/p&gt;&lt;p&gt;唤回/保持用户的能力，其实目前主要就是推送通知（Push Notification）。&lt;/p&gt;&lt;p&gt;推送通知依赖 Service Worker 与不限定的 Push 机制，Chrome 目前只支持 GCM …在国内覆盖率肯定是捉急的，不过未来各浏览器会推进 规范的 Web Push Protocol，允许各种推送服务提供商提供服务。&lt;/p&gt;&lt;br&gt;&lt;p&gt;Slides 里还提到了几个示例和几个推荐 Session、有兴趣的可以自己去看，我这里就提两个：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;PWA 当然不是 Polymer only，只能说 Polymer 帮你封装了不少。PWA 的所有特性都是 web 标准都是 Framework-agnostic 的。&lt;/li&gt;&lt;li&gt;AliExpress 作为 Keynote 里唯一展出的 PWA 还是值得小自豪一下的；并且，它好像是唯一不搭梯子就可以体验到的……&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;&lt;u&gt;那么技术角度上，我对 PWA 的看法？&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;缺点&lt;br&gt;&lt;ul&gt;&lt;li&gt;门槛不低（要求 HTTPS；Service Worker 的 API 比较 low-level）&lt;/li&gt;&lt;li&gt;&lt;b&gt;浏览器支持不够完美&lt;/b&gt;（Safari 短期内不会支持，在 5 年计划里提了一嘴）&lt;/li&gt;&lt;li&gt;用户习惯 （让用户习惯于网页可以离线工作并不是短期可以达到的）&lt;/li&gt;&lt;/ul&gt;优点&lt;br&gt;&lt;ul&gt;&lt;li&gt;刚才提到的，所有这些现代 Web 能力。&lt;/li&gt;&lt;li&gt;由于这些都是 “优雅降级、渐进增强” 的，给支持的设备更好的体验，不支持的设备也不会更差。&lt;/li&gt;&lt;li&gt;代表着 Web App 自身的一种进化方向&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;可以看出来，其实我对 PWA 的评价也并不是那么积极的：&lt;br&gt;除了 Service Worker 带来的诸多可能性外，其他几个在能带来的体验上都不算是什么新鲜事；而就连 Service Worker，还面临着浏览器支持这个 Web 发展的千古难题。&lt;br&gt;&lt;br&gt;那么，为什么我们还要拥护并 stick on Web 呢？&lt;br&gt;&lt;br&gt;我特别同意《&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.youtube.com/watch%3Fv%3D0SSI8liELJU&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The Mobile Web: State of the Union&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;》这个 Session 里 Chrome 产品团队 Leader Rahul 所说到的：Dicoverable、Linkable、Low Friction、Broad Reach 等等，这些都不是 Web 最大的优点，&lt;b&gt;Web 最重要的意义在于 Open（开放）与 Decentralized （去中心化），这才是万维网（WWW）的初衷。&lt;/b&gt;&lt;br&gt;&lt;br&gt;是啊，纵使强如 Chrome 都不能对 Web 一手遮天，这才是 Web 真正与众不同的地方。这也是我在 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/21280918&quot; class=&quot;internal&quot;&gt;Introducing 演说.io Beta - 一生想做浪漫极客 - 知乎专栏&lt;/a&gt; 里所说的：“Web 背后开放与分享的力量”。&lt;br&gt;&lt;br&gt;(从答案第一次发布到现在，Google 和社区对 PWA 的宣传口径也一直在变。目前主推的应该是 Reliable, Secure, Reengagable)&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;&lt;u&gt;二、再说 PWA 的意义，技术与技术之外的。&lt;/u&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;PWA 看上去并不是那么 breakthrough，但这可能只是站在开发者的角度之上的。&lt;br&gt;&lt;br&gt;大家都很熟悉 “Ajax” 这个说法，它出现于 2005 年，用于描述 Gmail (2004) 或者 Google Maps (2005) 这样的网页应用，这个词不但宣告了 Web 客户端技术的全面复兴与流行，也成为了 Web 2.0 的最大技术推动。然而事实是，早在 “Ajax” 这个词出现的 5 年前，IE5 已经广泛支持了 XMLHTTPRequest 并实现了 Outlook Web App (2000) 。&lt;br&gt;&lt;br&gt;&lt;b&gt;技术并不是不需要包装。&lt;/b&gt;如果没有 “H5” 这样易于传播的烂词， Mobile Web 乃至前端工程师在所有中国群众、新手开发者、产品经理、创业者中也不会得到如此重视。&lt;br&gt;&lt;br&gt;身为开发者我们知道，Web 这几年发展迅猛，我们能做的事情越来越多。但是在大量群众的心里可能并不是这样，如果你做出一个体验足够优秀的 Web 产品，可能大家的第一反应是：“这肯定是一个 App，怎么可能是网页？”。&lt;br&gt;&lt;br&gt;而这正是 “PWA” 希望解决的问题，&lt;b&gt;Chrome 团队希望用一个新的 buzzword（流行词）来影响、改变用户的期待。&lt;/b&gt;PWA 归根结底还是个网页，虽然是体验更好的网页，但是 Chrome 希望让用户感受到更多的不一样：“哦这是个普通网页”； “ 哦这个 Chrome 告诉我可以添加到主屏幕上，告诉我可以离线、可以推送，这是个 PWA，我可以把它当作 App 来期待。”&lt;br&gt;&lt;br&gt;这也是为什么 Rahul 一直在强调 Mobile Web 已经 Business ready，并积极与企业合作去推出 PWA 的原因，Chrome 团队希望用实际的产品来进行推广。看看华盛顿邮报的这个新版就可以发现，&lt;b&gt;“PWA” 这个名词是对用户的。&lt;/b&gt;没有哪个产品会对开屏提醒用户，嘿我这个是 Isomorphic JavaScript App！但是 PWA 可以，这个概念是希望被用户接受的，而不止是开发者。&lt;img src=&quot;https://pic1.zhimg.com/74a3581e98455f0ef092309cd5a47ca4_b.png&quot; data-rawwidth=&quot;2454&quot; data-rawheight=&quot;1414&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;2454&quot; data-original=&quot;https://pic1.zhimg.com/74a3581e98455f0ef092309cd5a47ca4_r.png&quot;&gt;&lt;br&gt;同样，另一个 Google 大力鼓吹的印度第一电商 FlipKart 也很有意思，他们把自己的官网改为 PWA 后，干脆就命名叫 FlipKart Lite，然后还拍了宣传片兼教程来公开介绍这种新体验以及新技术。（技术营销也是会对普通用户产生效果的，看看小米）&lt;img src=&quot;https://pic4.zhimg.com/8a5a5fbe9f034571ec9f27481739c4eb_b.png&quot; data-rawwidth=&quot;798&quot; data-rawheight=&quot;539&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;798&quot; data-original=&quot;https://pic4.zhimg.com/8a5a5fbe9f034571ec9f27481739c4eb_r.png&quot;&gt;&lt;br&gt;&lt;br&gt;在发现了这几点后，我对 PWA 的理解才终于到了一个新的维度。&lt;br&gt;推动一个技术的发展其实是多因素的，你要吸引的不止是开发者、还有用户、还有公司（让它们使用这个技术）、最终才能让整个生态建立起来。所以无论 App Store 还是 Google Play 总是要说我们帮助了多少公司/开发者获得了成功，就是这个道理。&lt;br&gt;&lt;br&gt;&lt;b&gt;从这个角度来说，“PWA” 可能比单纯的技术突破对 Mobile Web 整个生态的影响要更大。&lt;/b&gt;开发者之间希望说服对方一个技术比另一个技术更好都是一件很难的事情，跟不要说说服用户了。我们不能说 “PWA” 完全是个营销词汇，但我真心希望这轮对用户的营销能够成功，让用户对 Mobile Web 有所改观，这才能真正解决我上面提到的“用户习惯难以养成”的问题。&lt;br&gt;&lt;br&gt;Web 的开放与去中心化在商业角度经常陷入“没爹又没妈”的窘境，Rahul 在台上大声对下面喊 “Google Love the Web!”，然后观众席响起了稀稀拉拉的掌声，看得我很是心酸。&lt;br&gt;&lt;br&gt;上一轮有着类似可能性的 Web App 推动来自咒死 Flash 的 Steve Jobs ，老乔在 2008 年的 WWDC 上对着世界说：即将发售的 iPhone 没有 SDK，但是 iOS 1.0 有 Safari，你们可以用 Ajax + Web2.0 创造媲美原生应用的 web app，下面连掌声都没有，后来被骂到打脸，不了了之。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;最后说说 PWA 的地域性。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;一个很有意思的现象是：“Apple 亲中，Google 亲印”&lt;/b&gt;。这可不止是管理层的组成问题，而是对市场环境的“自然选择”。&lt;br&gt;&lt;br&gt;全世界都知道中国人土豪有钱能买爱慕虚荣，刚好和 iPhone 的土豪打法臭味相投；虽然天朝网络条件现在相当可以，但偏偏 Google 再遇上个不能描述的问题，两者地位一下子天上地下。&lt;br&gt;&lt;br&gt;再看印度，整体还处于“第三世界”，网络条件差，没钱买 Apple，但也没有中国的特色问题；于是 Google 一直在打低价、低硬件环境牌，在印度做的风生水起。&lt;br&gt;&lt;br&gt;Google 的技术在国内推进本身就是很痛苦的，Android 摇身一变“安卓”得以在国内驰骋，但 PWA 在中国的发展则困难重重：&lt;br&gt;&lt;ol&gt;&lt;li&gt;国内 iPhone 居多，首先就不支持 PWA&lt;/li&gt;&lt;li&gt;各路 Android ROM 中的浏览器早都已经被改的没有人形了，大家在支持 PWA 这件事情上肯定毫无兴趣 —— 什么添加主屏，与我的利益毫不相关啊。(Android Webview 虽然是基于 Chromium 的，但是版本号差得老远了)&lt;/li&gt;&lt;li&gt;原生 Chrome 虽然在国内桌面端的市占率还不错，但是移动端应该差到不行。&lt;/li&gt;&lt;li&gt;在 Web Push Protocol 普及之前，依赖 GCM 的通知推送直接再见&lt;/li&gt;&lt;li&gt;国内的 Web 环境非常复杂、首先是各种 Webview，然后才轮得到浏览器&lt;/li&gt;&lt;li&gt;国内的互联网公司大都“技术深厚”，各种黑科技大行其道，哪里轮得到 PWA&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;而再看印度，PWA 简直就是神器：&lt;br&gt;&lt;ol&gt;&lt;li&gt;由于都是 Google 服务健全的 Android 设备，标配 Chrome，PWA 一推，用户到达率简直直逼 100%&lt;/li&gt;&lt;li&gt;印度网差，下载一个 App 痛苦，一个可以“流式下载”的 PWA 在“用户初次访问”这点上就可以完爆 Native App&lt;/li&gt;&lt;li&gt;互联网环境还比较原始，公司大都直接亲 Google，技术的支持率也会非常高。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;&lt;br&gt;所以你看，AliExpress 率先支持了 PWA，但在国内，这一天不知道要等到猴年马月了。&lt;br&gt;&lt;br&gt;一不小心扯得有点多，以上。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/0096633323ddce9dd02010339e40ce7d_200x112.png\" data-rawwidth=\"2432\" data-rawheight=\"1572\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/0096633323ddce9dd02010339e40ce7d_r.png\">\n看到 <a data-hash=\"790dccce26904cdcd11b0fad3bac37b7\" href=\"//www.zhihu.com/people/790dccce26904cdcd11b0fad3bac37b7\" class=\"member_mention\" data-editable=\"true\" data-title=\"@题叶\" data-hovercard=\"p$b$790dccce26904cdcd11b0fad3bac37b7\">@题叶</a> 问这道题时，我刚从 I/O 回来，当时就特想答，今天总算有时间了。 --- 更新： 11月20日在 GDG DevFest 2016 北京分享了「Service Worker 101」，Slides: <a href=\"//link.zhihu.com/?target=https%3A//huangxuan.me/2016/11/20/sw-101-gdgdf/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Service Worker 101「GDG DevFest 2016 北京」<i class=\"icon-external\"></i></a>，技术干货技术干货。 10月20日在 QCon 上海…\n\n<a href=\"/question/46690207/answer/104851767\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-06-08\" target=\"_blank\" href=\"/question/46690207/answer/104851767\">编辑于 2016-12-18</a></p>\n\n",
    "link": "https://zhihu.com/question/46690207/answer/104851767"
  },
  {
    "question": "\n程序员讨厌面试被问一些基础问题么？\n",
    "author": "张云龙",
    "content": "\n\n<textarea hidden class=\"content\">有个朋友告诉我，他认识一个大牛，去别人公司面试，被问了一些基础的知识点，然后大牛打断面试官的问题，说：『这些基础的东西就不用问我了吧，你就说你们团队现在遇到什么问题，抛出来，看我能不能给你们解决』&lt;br&gt;&lt;br&gt;即使是转述的故事，我也仿佛觉得被深深的震撼到了</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n有个朋友告诉我，他认识一个大牛，去别人公司面试，被问了一些基础的知识点，然后大牛打断面试官的问题，说：『这些基础的东西就不用问我了吧，你就说你们团队现在遇到什么问题，抛出来，看我能不能给你们解决』 即使是转述的故事，我也仿佛觉得被深深的震…\n\n<a href=\"/question/35538719/answer/63294356\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-09-11\" target=\"_blank\" href=\"/question/35538719/answer/63294356\">编辑于 2015-09-12</a></p>\n\n",
    "link": "https://zhihu.com/question/35538719/answer/63294356"
  },
  {
    "question": "\n是什么阻碍了代码的重用？问题是否应该只解决一次即可？\n",
    "author": "陈甫鸼",
    "content": "\n\n<textarea hidden class=\"content\">因为复用并非无代价，而且代价往往还很高。&lt;br&gt;&lt;br&gt;从工程上说，任何特性都不是无代价的。复用提供了解决一类问题的灵活性，而灵活性作为一种功能，同样有代价——正如过多地使用虚函数有性能损失，而过多地使用 interface 则一定程度上降低代码可读性。如果构建灵活性的基石皆有代价，那么我们不可能期望灵活性可以免费获得。而所有的问题解决之道本质上都一样：我们需要权衡每一个选择的好处和坏处，做出对我们现在的项目最有利的方案。举例来说：我们不会在项目最紧张的时候讨论把业务逻辑抽取出来做一个通用的框架，原因很简单：时间不够用。我们也不会在讨论怎么设计通用框架的时候过多地讨论我们具体项目的逻辑，因为追求通用性的设计目的导致我们不可能完全为某一个具体的业务优化。&lt;br&gt;&lt;br&gt;所以从这个意义上来说，阻碍代码重用的最大原因，事实上来自项目自身：复用代码在绝大多数情况下，都不是一个项目的最终目的。对任何项目来说，唯一绝对存在的目的，是在指定的时间内完成客户给出的需求。当短期内完成功能的需求和复用发生冲突时，理智的项目管理者都不会选择将注意力放在复用上。当然，热衷于复用的程序员必然会以长远的好处为理由为复用辩护；但正如前面的规则指出的，这依然是一个工程上的选择问题，因而仍然需要折衷。在遇到问题时，总是先倒向某一个结果再试图解释，这不是折衷，而是预设立场，这恰恰是工程的大忌。&lt;br&gt;&lt;br&gt;至于第二个问题，回答是：是的，对任何问题只解决一次是理想状态，但重复解决三到五次问题并非十恶不赦。客户关心的是我们能不能解决他们的问题，而不是能不能对任何问题都只解决一次。——不要把自己的需求误以为是用户的需求，这仍然是一个工程问题。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n因为复用并非无代价，而且代价往往还很高。 从工程上说，任何特性都不是无代价的。复用提供了解决一类问题的灵活性，而灵活性作为一种功能，同样有代价——正如过多地使用虚函数有性能损失，而过多地使用 interface 则一定程度上降低代码可读性。如果构建灵…\n\n<a href=\"/question/21011591/answer/18231551\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-08-06\" target=\"_blank\" href=\"/question/21011591/answer/18231551\">编辑于 2013-08-06</a></p>\n\n",
    "link": "https://zhihu.com/question/21011591/answer/18231551"
  },
  {
    "question": "\n前端架构是什么，前端有架构可谈吗？\n",
    "author": "何幻",
    "content": "\n\n<textarea hidden class=\"content\">后文于2016.07.20新增内容，以下是原文。&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;br&gt;&lt;b&gt;架构是一个演变的过程。&lt;/b&gt;&lt;br&gt;它指的不是随着历史的演变，而是随着项目演变。&lt;br&gt;通常说架构，指的是架构模式，自创的架构很少。&lt;br&gt;了解架构模式，才能心有余力的应对项目的发展。&lt;br&gt;&lt;br&gt;前端项目大概会经历以下这些阶段：&lt;br&gt;1. 整体渲染&lt;br&gt;2. 结构行为表现分离&lt;br&gt;3. 隔离逻辑单元&lt;br&gt;4. 插件&lt;br&gt;5. 模块&lt;br&gt;6. 前端MVC/MVVM&lt;br&gt;7. 组件&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;br&gt;下面分别介绍一下：&lt;br&gt;&lt;b&gt;1. 整体渲染&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/be1f781a0cd38c7024f5be809098cde1_b.png&quot; data-rawwidth=&quot;247&quot; data-rawheight=&quot;267&quot; class=&quot;content_image&quot; width=&quot;247&quot;&gt;所有页面代码放到了一个html文档中，适合个人实验室项目。&lt;br&gt;新建一个文件，快速的验证某个功能或者开发某个组件，再移植到开发环境中。&lt;br&gt;&lt;br&gt;优点：开发速度快，执行过程清晰&lt;br&gt;不足：不容易分工合作&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 结构行为表现分离&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/3e98512f4af83d69d7f453d8a8568a0f_b.png&quot; data-rawwidth=&quot;196&quot; data-rawheight=&quot;221&quot; class=&quot;content_image&quot; width=&quot;196&quot;&gt;当页面中有了好几个Script和Style片段，这时候就想着是不是该把它们放到一个文件中了。&lt;br&gt;不然总在一个页面拖上拖下的改动太麻烦了。&lt;br&gt;&lt;br&gt;结构：HTML&lt;br&gt;行为：JavaScript&lt;br&gt;表现：CSS&lt;br&gt;&lt;br&gt;优点：关注点分离&lt;br&gt;不足：职责不明确&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 隔离逻辑单元&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d9c0a1dca79d0d165adb9ebab6ab9c0f_b.png&quot; data-rawwidth=&quot;181&quot; data-rawheight=&quot;235&quot; class=&quot;content_image&quot; width=&quot;181&quot;&gt;一个JavaScript文件太大了，里面包含了很多不同的逻辑功能。&lt;br&gt;还是把独立的功能提取出来吧，这样省的每次都在一个文件中改。&lt;br&gt;&lt;br&gt;优点：面向复用&lt;br&gt;不足：功能点分散&lt;br&gt;&lt;br&gt;&lt;b&gt;4. 插件&lt;/b&gt;&lt;br&gt;&lt;b&gt;开闭原则&lt;/b&gt;：一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。&lt;br&gt;这让我想起了小时候的红白机。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/5ba007e2a4251ea35db1ae1b94dad313_b.png&quot; data-rawwidth=&quot;383&quot; data-rawheight=&quot;193&quot; class=&quot;content_image&quot; width=&quot;383&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/61cd62eedc4bb4ff29f606cab0756bfd_b.png&quot; data-rawwidth=&quot;212&quot; data-rawheight=&quot;274&quot; class=&quot;content_image&quot; width=&quot;212&quot;&gt;这个借鉴了微内核架构的思想，整个网站由一个很小的核心构成，所有功能都是嫁接上去的。&lt;br&gt;这样核心基本上稳定了，只剩下增量的插件开发。&lt;br&gt;&lt;br&gt;优点：对需求的响应快&lt;br&gt;不足：插件难以规范化&lt;br&gt;&lt;br&gt;&lt;b&gt;5. 模块&lt;/b&gt;&lt;br&gt;当网站有了很多种独立的部分，微内核已经不能胜任了，因为各个插件之间产生了关联。&lt;br&gt;就需要一个处理模块依赖的东西出现。&lt;br&gt;于是人们定义了模块规范，分别有自己的处理模块依赖的办法。&lt;br&gt;&lt;br&gt;主要以下几种模块规范&lt;br&gt;（1）AMD规范（用户客户端，RequireJS实现）&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/c37ad84b133bc9d9484298df27ac675e_b.png&quot; data-rawwidth=&quot;488&quot; data-rawheight=&quot;55&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;488&quot; data-original=&quot;https://pic3.zhimg.com/c37ad84b133bc9d9484298df27ac675e_r.png&quot;&gt;&lt;br&gt;（2）CommonJS规范（用于服务端，Browserify实现）&lt;img src=&quot;https://pic2.zhimg.com/bb7db58a60ef9b9d638e66f8c0fd22bd_b.png&quot; data-rawwidth=&quot;244&quot; data-rawheight=&quot;62&quot; class=&quot;content_image&quot; width=&quot;244&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/5e1735b2ce2db853b898ac3baa2a6294_b.png&quot; data-rawwidth=&quot;256&quot; data-rawheight=&quot;53&quot; class=&quot;content_image&quot; width=&quot;256&quot;&gt;&lt;br&gt;（3）EcmaScript 6 Module&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/679665f955345fe5a8afb880cc876f74_b.png&quot; data-rawwidth=&quot;271&quot; data-rawheight=&quot;96&quot; class=&quot;content_image&quot; width=&quot;271&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/e6c46f03c6e9b909303a9ad236d76d86_b.png&quot; data-rawwidth=&quot;451&quot; data-rawheight=&quot;38&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;451&quot; data-original=&quot;https://pic3.zhimg.com/e6c46f03c6e9b909303a9ad236d76d86_r.png&quot;&gt;&lt;br&gt;&lt;b&gt;6. 前端MVC/MVVM&lt;/b&gt;&lt;br&gt;不止后端有MVC/MVVM，同样的思想也可以用在前端，并且人们已经实现了。&lt;br&gt;主要目的是为了处理复杂的单页面应用，让三个层面独立开发，减轻脑力负担。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/6c781e6ad0b785dcad24f51cf956d5a9_b.png&quot; data-rawwidth=&quot;177&quot; data-rawheight=&quot;170&quot; class=&quot;content_image&quot; width=&quot;177&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/545f2406a5717ed47ad316871b72804a_b.png&quot; data-rawwidth=&quot;182&quot; data-rawheight=&quot;188&quot; class=&quot;content_image&quot; width=&quot;182&quot;&gt;&lt;br&gt;View：用户界面&lt;br&gt;Model：数据表的实体类&lt;br&gt;Controller/ViewModel：处理View和Model之间的关系&lt;br&gt;&lt;br&gt;主要实现有以下几个：&lt;br&gt;（1）Backbone&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/e57d7ad5c9a657c60fd5c583719d7d80_b.png&quot; data-rawwidth=&quot;472&quot; data-rawheight=&quot;336&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;472&quot; data-original=&quot;https://pic1.zhimg.com/e57d7ad5c9a657c60fd5c583719d7d80_r.png&quot;&gt;&lt;br&gt;（2）Knockout&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/15c3c4b36361822725ffe50cba16e469_b.png&quot; data-rawwidth=&quot;486&quot; data-rawheight=&quot;58&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;486&quot; data-original=&quot;https://pic2.zhimg.com/15c3c4b36361822725ffe50cba16e469_r.png&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/80254b2fd2be8164f432c6de4ec2d7bb_b.png&quot; data-rawwidth=&quot;380&quot; data-rawheight=&quot;118&quot; class=&quot;content_image&quot; width=&quot;380&quot;&gt;&lt;br&gt;（3）AngularJS&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/122250535752bbe1a1266e43aac626d9_b.png&quot; data-rawwidth=&quot;388&quot; data-rawheight=&quot;94&quot; class=&quot;content_image&quot; width=&quot;388&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/82e9a59f3bfc9f874364d4eeff2062cf_b.png&quot; data-rawwidth=&quot;358&quot; data-rawheight=&quot;80&quot; class=&quot;content_image&quot; width=&quot;358&quot;&gt;&lt;br&gt;&lt;b&gt;7. 组件&lt;/b&gt;&lt;br&gt;组件并不是一个新兴的概念，但是React.js强制组件化，所以看来才那么新颖。&lt;br&gt;它把JavaScript，CSS，HTML重新打包，当做一个逻辑单元来看待。&lt;br&gt;&lt;br&gt;有点像中国古代的“活字印刷”，不是吗，我们祖先的智慧啊。&lt;br&gt;&lt;b&gt;单一职责原则&lt;/b&gt;：一个类应该只有一个发生变化的原因。&lt;br&gt;&lt;b&gt;组合/聚集复用原则&lt;/b&gt;：尽量使用合成/聚合，而不是使用继承。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/305366de99a9047b28bb6576a54b5ef8_b.png&quot; data-rawwidth=&quot;268&quot; data-rawheight=&quot;171&quot; class=&quot;content_image&quot; width=&quot;268&quot;&gt;&lt;br&gt;React.js&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/1e81f1ff5ab928cfa994a6ea64c1ab4f_b.png&quot; data-rawwidth=&quot;736&quot; data-rawheight=&quot;372&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;736&quot; data-original=&quot;https://pic4.zhimg.com/1e81f1ff5ab928cfa994a6ea64c1ab4f_r.png&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/e3fa825f16bf3e9ade386c5d2b4868d5_b.png&quot; data-rawwidth=&quot;345&quot; data-rawheight=&quot;109&quot; class=&quot;content_image&quot; width=&quot;345&quot;&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;br&gt;各种架构模式都有自己的特点，身为一个前端工程师这些都是需要了解的，&lt;br&gt;然而，&lt;b&gt;更重要的是，结合项目实际，灵活运用随机应变&lt;/b&gt;。&lt;br&gt;各种库丰富多彩，它们也是为了解决那个阶段的问题而出现的。&lt;br&gt;&lt;br&gt;（先占位，以后慢慢丰富。。。&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;br&gt;以下更新自2016.07.20&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/bcac84d807af449d5c309f67daafae9e_b.png&quot; data-rawwidth=&quot;400&quot; data-rawheight=&quot;234&quot; class=&quot;content_image&quot; width=&quot;400&quot;&gt;这么长时间没有更新，是因为这一年，前端发生了天翻地覆的变化，&lt;br&gt;等一切貌似都尘埃落定，我们才能好好的回顾刚刚发生了什么。&lt;br&gt;&lt;br&gt;2015年，React潮流已经席卷了整个前端，但还不是那么主流，&lt;br&gt;大多数公司持观望态度，组件也不是人人都在议论的概念。&lt;br&gt;而到了2016年，随着Angular，Vue这些新框架的出现，&lt;br&gt;随着&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jianshu.com/p/b0877d1fc2a4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TC39 process&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的进展，以及Webpack，Babel等工具对EcmaScript新特性的支撑，&lt;br&gt;再加上&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jianshu.com/p/9f46c92fbe79&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Web Components规范&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的推广，&lt;br&gt;该来的貌似都来了，&lt;b&gt;好戏才真的开始了&lt;/b&gt;。&lt;br&gt;&lt;br&gt;到现在为止，不会用ES2015写代码，不懂Redux，会觉得很尴尬。&lt;br&gt;不会一些TypeScript，不懂Virtual-DOM，不了解Diff算法，会觉得自己落伍了。&lt;br&gt;而这一切，正在慢慢变成主流，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/oneuijs/You-Dont-Need-jQuery&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;You-Dont-Need-jQuery&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;并不是因为jQuery不好用了，&lt;br&gt;而是应用场景变复杂了，直接操作DOM的机会越来越少了，&lt;br&gt;浏览器兼容性虽然会一直存在，但也不是最重要的问题了。&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/6db77005fbf5a8ece7b818f8c628f9f8_b.png&quot; data-rawwidth=&quot;330&quot; data-rawheight=&quot;198&quot; class=&quot;content_image&quot; width=&quot;330&quot;&gt;为了看清到底发生了什么，我把上文提到的前端项目经历之阶段进行了扩展，&lt;br&gt;我们渐渐看到，前后端分工毕竟只是角色的分离，&lt;br&gt;而&lt;b&gt;所用的技术栈正在慢慢靠拢&lt;/b&gt;，作为一名合格的工程师越来越难了。&lt;br&gt;&lt;br&gt;包括Java1.8引入的lambda，包括ES2015引入的class。&lt;br&gt;ES2015 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jianshu.com/p/ca2b3f5d0a98&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Generator&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，以及Stage 1的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/wycats/javascript-decorators/blob/master/README.md&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Decorator&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，在Python中又是多么的熟悉，&lt;br&gt;先进的想法并不会区分前后端，而是被用到了所有适用的地方。&lt;br&gt;&lt;br&gt;一个软件项目，随着待解决业务问题的发展，和问题复杂度的不同，会存在以下几个阶段，&lt;br&gt;1. 具体解决方案&lt;br&gt;2. 共用代码&lt;br&gt;3. 功能独立的工具&lt;br&gt;4. 架构模式&lt;br&gt;5. 领域特定语言（DSL&lt;br&gt;&lt;br&gt;前文提到的，&lt;br&gt;整体渲染是一种具体的解决方案，&lt;br&gt;结构行为表现分离，是为了共用代码，&lt;br&gt;隔离逻辑单元，目的是提取出功能独立的工具，&lt;br&gt;插件（微内核），模块（分层?），MVC/MVVM，组件（微服务），属于不同的&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.gitbook.com/book/bboyfeiyu/software-architecture-patterns/details&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;软件架构模式&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，&lt;br&gt;JSX，TypeScript，&lt;a href=&quot;//link.zhihu.com/?target=http%3A//elm-lang.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Elm&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;可以看做领域特定语言。&lt;br&gt;&lt;br&gt;根据具体的项目情况，项目组的的人员安排，&lt;br&gt;架构师会选出当前适用的阶段，并规划出未来的发展方向。&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/20635eaf0a00e9ce3f3557428f87a71c_b.png&quot; data-rawwidth=&quot;455&quot; data-rawheight=&quot;173&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;455&quot; data-original=&quot;https://pic1.zhimg.com/20635eaf0a00e9ce3f3557428f87a71c_r.png&quot;&gt;&lt;b&gt;为什么人们都在议论组件？&lt;/b&gt;&lt;br&gt;是因为组件有助于降低业务代码的复杂度。&lt;br&gt;组件是一种可拼装的功能集，业务代码只需要解决拼装问题，&lt;br&gt;通过组件的再组合，就会不断增加细节的粒度，使业务逻辑更清晰。&lt;br&gt;&lt;br&gt;&lt;b&gt;React作为纯净的View层，为什么会成功？&lt;/b&gt;&lt;br&gt;React率先隔离了数据流和对数据的展示两个部分，&lt;br&gt;这不但让数据有了不同形式的展示方式（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//facebook.github.io/react-native/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;React Native&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;而且还加快了数据流引擎的更新换代。&lt;br&gt;无论是事件驱动的Flux，还是基于状态机的Redux，都是具体的不同实现。&lt;br&gt;加上&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jianshu.com/p/5a097172f55a&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;响应式编程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;在背后的推动，View层的分离会让事情变得更美好。&lt;br&gt;&lt;br&gt;&lt;b&gt;为什么Angular会拥抱TypeScript？&lt;/b&gt;&lt;br&gt;使用动态弱类型的语言JavaScript，软件规模增加会导致很多意料之外的运行时错误，&lt;br&gt;诚然，对软件进行测试可以减少故障，根据&lt;a href=&quot;//link.zhihu.com/?target=https%3A//zh.wikipedia.org/zh/%25E5%2593%25A5%25E5%25BE%25B7%25E5%25B0%2594%25E4%25B8%258D%25E5%25AE%258C%25E5%25A4%2587%25E5%25AE%259A%25E7%2590%2586&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;哥德尔不完备性定理&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;也离不开测试。&lt;br&gt;可是提高类型系统的安全性和可靠性，也是人们喜闻乐见的事情。&lt;br&gt;无论是&lt;a href=&quot;//link.zhihu.com/?target=https%3A//flowtype.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flow&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，还是TypeScript，都是一种尝试（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//djcordhose.github.io/flow-vs-typescript/2016_hhjs.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Flow vs TypeScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -&lt;br&gt;&lt;i&gt;JS高级前端开发 159758989&lt;/i&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/be1f781a0cd38c7024f5be809098cde1_200x112.png\" data-rawwidth=\"247\" data-rawheight=\"267\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/be1f781a0cd38c7024f5be809098cde1_r.png\">\n后文于2016.07.20新增内容，以下是原文。 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - <b>架构是一个演变的过程。</b> 它指的不是随着历史的演变，而是随着项目演变。 通常说架构，指的是架构模式，自创的架构…\n\n<a href=\"/question/26646855/answer/68503768\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-10-20\" target=\"_blank\" href=\"/question/26646855/answer/68503768\">编辑于 2016-07-20</a></p>\n\n",
    "link": "https://zhihu.com/question/26646855/answer/68503768"
  },
  {
    "question": "\n还要多少年, 前端开发才能像客户端开发那样轻松？\n",
    "author": "Johnny Wu",
    "content": "\n\n<textarea hidden class=\"content\">我觉得现在前端已经可以很流畅地像客户端一样开发了. 直接上图比较直接. 这个是我们新开发的引擎工具 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//fireball-x.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;fireball-x.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;, 整个都是 HTML5 技术做界面. 我想说如果我用 WPF, QT 什么的写的话, 这个项目基本就难产了. &lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/38b14251dba51cea8fb02c1d23ce88f3_b.jpg&quot; data-rawwidth=&quot;1359&quot; data-rawheight=&quot;832&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1359&quot; data-original=&quot;https://pic4.zhimg.com/38b14251dba51cea8fb02c1d23ce88f3_r.jpg&quot;&gt;如果你是一个像我一样对操作细节有疯狂追求的人, 那么你写界面的时候一定会希望更多的自定义和对原生控件的修改. 这个时候你会发现 HTML5 的界面书写才是你的好伙伴. 比如:&lt;br&gt;&lt;br&gt;设计这种贴心的 gizmos:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/de7f76ccd92d624b37429472973534e3_b.jpg&quot; data-rawwidth=&quot;534&quot; data-rawheight=&quot;330&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;534&quot; data-original=&quot;https://pic4.zhimg.com/de7f76ccd92d624b37429472973534e3_r.jpg&quot;&gt;&lt;br&gt;精准的 tree view 插入提示:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/e38553ea91241d64b40296a58d397800_b.jpg&quot; data-rawwidth=&quot;303&quot; data-rawheight=&quot;324&quot; class=&quot;content_image&quot; width=&quot;303&quot;&gt;&lt;br&gt;为每个控件量身定做的 focus 视觉效果:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/909f07b830fc2bd78c6db5c43b21cd06_b.jpg&quot; data-rawwidth=&quot;245&quot; data-rawheight=&quot;179&quot; class=&quot;content_image&quot; width=&quot;245&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/d3e43fa27bff9536ee342cc4a8bb65cd_b.jpg&quot; data-rawwidth=&quot;249&quot; data-rawheight=&quot;143&quot; class=&quot;content_image&quot; width=&quot;249&quot;&gt;&lt;br&gt;甚至还有窗口间的 dock/popup:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/520ad500ed91bed1a5b50da15bf5cbe8_b.jpg&quot; data-rawwidth=&quot;1234&quot; data-rawheight=&quot;669&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1234&quot; data-original=&quot;https://pic1.zhimg.com/520ad500ed91bed1a5b50da15bf5cbe8_r.jpg&quot;&gt;&lt;br&gt;然后一开 Dev Tools 就可以调节样式, Debug, 很符合处女座们对 1px 的追求:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/2053845f56b82ea7297789323c105be2_b.jpg&quot; data-rawwidth=&quot;1237&quot; data-rawheight=&quot;404&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1237&quot; data-original=&quot;https://pic3.zhimg.com/2053845f56b82ea7297789323c105be2_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;更新 =============================&lt;br&gt;&lt;br&gt;我只是回答了一下问题, 顺带show了一下我们未公开的项目. 没想大家挺好奇这个项目的. 我就简单介绍一下大概的技术结构和选型过程:&lt;br&gt;&lt;br&gt;整个项目是构建在 Atom-Shell 之上的. 我们最开始是在 Node-Webkit 上面编写, 但是无奈 Node-Webkit Bug 比较多, 更新和反馈不是很及时, 所以就换到了 Atom-Shell. Atom-Shell 项目活跃度很高, Report Issue 基本都是当天回复, 而且我发现 Atom-Shell 的作者之一赵成战斗力惊人, 也是 Github 上得满绿程序员.&lt;br&gt;&lt;br&gt;这是我的战斗力: &lt;img src=&quot;https://pic2.zhimg.com/5ad8d2f130e90d0b0de0729bc502d8b9_b.jpg&quot; data-rawwidth=&quot;1444&quot; data-rawheight=&quot;288&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1444&quot; data-original=&quot;https://pic2.zhimg.com/5ad8d2f130e90d0b0de0729bc502d8b9_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;这是赵成的:&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/0507c91b78166387f73e81edb0eedf88_b.jpg&quot; data-rawwidth=&quot;721&quot; data-rawheight=&quot;141&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;721&quot; data-original=&quot;https://pic1.zhimg.com/0507c91b78166387f73e81edb0eedf88_r.jpg&quot;&gt;&lt;br&gt;所以我是脑残程序粉, 喜欢 fo 战斗力爆表的程序员和他的项目. 于是我们就改成 Atom-Shell. &lt;br&gt;&lt;br&gt;底层 UI 部分我们是在 Polymer 基础上构建的. 所以我们玩的很 fashion 很 high! Shadow DOM, Custom Element, Object Observe, css flex, Web Animation, SVG, 任何你能想到的酷炫新技术, 都在我们的编辑器开发中一一使用. 最开始我使用 Angular 和 React 分别作了一版,  Angular 因为采用 MV结构, 不太适合 IDE 类型的程序形态, 具体 MV 粉们就别喷我了, 我是那种不太会用框架,架构的土鳖程序员, 从小到大最爱用的语言是 C 语言, 到现在都只会写函数 + 结构 的编程方式, 什么面向对象之类的完全玩不来 (只懂得 struct 里头加 父类的 struct head, 只会写 func ptr ). 用的编程工具也很土鳖, 是我自己写的一个 Vim 的改版叫做 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//exvim.github.io/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;exVim: Home&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;. 所以, 就是因为我的编程思想非常古老, 以至于我无法接受 Angular 的高大上, 而 Polymer 只是对原生的几件事情薄薄的包了一层, 符合我们的初衷. React 主要问题在于双向绑定部分, 不符合我们的项目需求, 否则 React 是个好东西. 估计以后我做网站和其他小东西就靠他. &lt;br&gt;&lt;br&gt;编译层我们使用 Gulp, 还是上面的观点, 土鳖喜欢简单的东西. Grunt 像我这种用 Vim 写代码的程序员, 敲代码手痛. Gulp 的问题主要在于他的插件编程门槛比较高一些, 毕竟一切都要 streaming, 所以插件的质量普遍不如 Grunt. 好在我们程序员天生喜欢 DIY , 不行自己写呗. &lt;br&gt;&lt;br&gt;而这些主要的底层技术选型做好以后, 剩下的事情就是没(朝)日(九)没(晚)夜(六)地写代码了. &lt;br&gt;&lt;br&gt;&lt;b&gt;我们团队缺人, 虽然我编程古怪, 思想老旧, 但团队成员都是自由选择, 自由发挥. &lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;b&gt;如果你是一枚前端, 后端, 全栈 或者 优秀的游戏引擎工程师, 或者干脆只是喜欢玩酷炫技术的阿宅, &lt;/b&gt;&lt;b&gt;或者看到这个工具右上角那个图标就秒懂我们日后要做成什么样子. &lt;/b&gt;&lt;b&gt;恰巧喜欢厦门这个地方和没有打卡的生活方式, 又碰巧想用 Html5, Nodejs 写写酷炫的东西. 欢迎联系我们. &lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;发简历到: team@firebox.im&lt;/b&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/38b14251dba51cea8fb02c1d23ce88f3_200x112.jpg\" data-rawwidth=\"1359\" data-rawheight=\"832\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/38b14251dba51cea8fb02c1d23ce88f3_r.jpg\">\n我觉得现在前端已经可以很流畅地像客户端一样开发了. 直接上图比较直接. 这个是我们新开发的引擎工具 <a href=\"//link.zhihu.com/?target=http%3A//fireball-x.com/\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">fireball-x.com/</span><span class=\"invisible\"></span><i class=\"icon-external\"></i></a>, 整个都是 HTML5 技术做界面. 我想说如果我用 WPF, QT 什么的写的话, 这个项目基本就难产了. 如果你是一个像我一样对操作细节有疯…\n\n<a href=\"/question/22426434/answer/33395263\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-11-14\" target=\"_blank\" href=\"/question/22426434/answer/33395263\">编辑于 2015-04-06</a></p>\n\n",
    "link": "https://zhihu.com/question/22426434/answer/33395263"
  },
  {
    "question": "\n如何招到一个优秀的前端工程师？\n",
    "author": "董必正",
    "content": "\n\n<textarea hidden class=\"content\">招人第 94 天，怒答。&lt;br&gt;&lt;br&gt;&lt;b&gt;不是太难，是你太懒&lt;/b&gt;&lt;br&gt;&lt;br&gt;先纠正下概念，什么是难？&lt;br&gt;&lt;br&gt;- 大家都招不到人，你也招不到人，这叫难，行业形势决定&lt;br&gt;- 大家都能招到人，你招不到人，这不较难，是你公司的问题&lt;br&gt;- 大家有的能招到人，你却招不到人，这也不叫难，是你 公司 + HR 的问题&lt;br&gt;&lt;br&gt;基本上大家都了解当下形势：缺口大，资源少。&lt;br&gt;&lt;br&gt;无例言x，我公司的招人职位有俩：&lt;br&gt;&lt;br&gt;- 有较丰富前端重构经验的工程师（精通 javascript，多终端的适配经验丰富）&lt;br&gt;- 有大规模 Node.js 编程经验，在模块工程化，异步编程方面有深入研究的 Node.js 开发工程师&lt;br&gt;&lt;br&gt;换算到 阿里的 P 级别，能对应上 P6 和 P6+ 的职位，了解的人就会摇头了，这两个职位有多难招。ok，然后，如何争取这少量的资源，需要从渠道和自身两个方式入手：&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;一、渠道&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 招聘类网站&lt;/b&gt;&lt;br&gt;&lt;br&gt;100offer、内推网、拉勾网、histarter、脉圈、灯塔、jobdeer、哪儿上班、周伯通、猎聘&lt;br&gt;&lt;br&gt;无论初创的还是成熟的，付费的免费的，一个都不要放过，尤其是初创的，别看流量小，但是服务好，甚至会给你 VIP 权限，比如 脉圈 帮我们制作单页 H5 微信传播页面，帮我们宣传公司和职位的，微信里面转发效果极好。&lt;br&gt;&lt;br&gt;另外像什么，赶集/58/51job/智联 也就不要去尝试了，为了让你买一个季度或者半年的会员费，市场团队电话会骚扰死你，另外我也始终不会相信，从这上面能拿到多少优质的 前端/全栈 开发工程师简历&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 社交类（人脉）网站或应用&lt;/b&gt;&lt;br&gt;&lt;br&gt;大街、linkedin、微博、QQ 群&lt;br&gt;&lt;br&gt;这种效果比较明显的是 微博和 QQ 群，利用你的社交关系，利用群组方式进行职位的直接推送，效果有时候也非常赞。&lt;br&gt;&lt;br&gt;我 2012 ~ 2013 年用 QQ 群帮 阿里巴巴 挖到 7 个正式前端工程师，2 个极其优秀的实习生，用 微博私信 挖到 1 个功底扎实，颜值很高的女前端工程师。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 终极利器 - github&lt;/b&gt;&lt;br&gt;&lt;br&gt;还有什么网站能像 github 这样，一下子就能看到一个人的 coding 状态，关注的技术方向，贡献能力，代码风格，代码质量，分支的创建风格和合并方式，甚至建立 issue 时候的态度和表达（英语）能力，文档的书写风格和描述能力... &lt;br&gt;&lt;br&gt;最最重要的是，大部分人的主页都有邮箱和博客地址，包括代码注释里面，如果都没有，你可以对他提 pull request 来获取好感，再逐步拿到联系方式，每天花 2 个小时，逛一逛 github，你会发现，中国的程序员竟然如此之多，信息如此之全，我只能帮你到这儿了。&lt;br&gt;&lt;br&gt;&lt;b&gt;4. 终极利器 2 - 垂直论坛&lt;/b&gt;&lt;br&gt;&lt;br&gt;虽然 github 非常好，但这个属于主动出击型的，能让别人找你，就不要主动找人，这就是论坛的魅力，别人看到你的帖子，认同了，简历自然进来了。&lt;br&gt;&lt;br&gt;所以招人千万不要写：&lt;br&gt;&lt;br&gt;杭州 招 3 年经验 前端工程师， 2 位。机会难得，速投简历。 说实话，这种招聘贴其实特别多，这叫 “等沉式” 招聘贴，写了也白写，谁鸟你呢。&lt;br&gt;&lt;br&gt;你需要走心，你需要客观，你需要真诚以待，你还需要互动。这里是我写的一篇招聘文章吧，献丑了：&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//cnodejs.org/topic/54c58bc40d075f173d433f23&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;20k【美国硅谷】【巨量期权】【正在A轮】【度假办公】【全站 Node.js】&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;5. 熟人推荐&lt;/b&gt;&lt;br&gt;&lt;br&gt;首先，你得有熟人，其次，请人吃个饭，唱个歌也是再所难免，所以平时多参加各种技术会议，D2 啊，京js 啊之类，能混上饭局就去混，多加好友。&lt;br&gt;&lt;br&gt;&lt;b&gt;二、自身&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;1. 公司前景&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个可能不是你能决定的，毕竟你可能只是 HR 或者是 技术团队主管，公司前景可以通过多提供客观数据和一定的市场运作方式描述，来让候选人了解你公司的一个发展方向和盈利点，不要说没用的话，什么 不差钱，以后要颠覆谁谁谁，以后做行业的 xxx，我们要改变人类的生活，要多么多么高大上而有意义，切记不要对程序员说这些，他们 0 和 1 的世界里，你不要以为他没有自己的一套观察视角和分析逻辑。&lt;br&gt;&lt;br&gt;&lt;b&gt;2. 团队组成&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个很关键，无论你是 1 万人的大公司，还是像我们一样只有 10 个人的小团队，你要让他了解，他接下来委身多年的团队，同事们都大概什么个情况，说白了就是团队文化和氛围，大家都是什么样子的人，喜欢怎样的做事方式，一般 简单/自在/大牛多/沟通效率高/工程师地位高/妹子多 这些都是加分项。&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 薪资福利&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;注意，薪资和福利不能划等号，我薪资高啊，但是我没福利，我福利好啊，但是我薪资不咋地，都不行。&lt;br&gt;&lt;br&gt;薪资是贴补他家用，是他在这个行业中贡献的一个价值表现，也是他在自己小社会中地位的体现，钱多了不见得多么有面子，但是钱少了可能就冷了这颗心。&lt;br&gt;&lt;br&gt;福利是关怀，是对薪资的补充，是与众不同的东西，是让人幸福的东西，是让人可以对别人炫耀的东西。&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;A: Hi, 阿正正，你猜我们公司这次去哪儿 outing 了？&lt;br&gt;B: 刚才在忙，你们去哪儿了？&lt;br&gt;A: 我们去那个十分有名的 千岛湖 你知道么，就是千岛湖大头鱼，还住靠湖五星级酒店，整整玩了 2 天，yeah!&lt;br&gt;B: 擦，这么酸爽！叼叼叼！&lt;br&gt;A: 恩，都不想回来工作了，你们去哪儿 outing 啊？&lt;br&gt;B: 正在收拾行囊，后天去 美国硅谷 度假办公。&lt;br&gt;A: 多长时间啊？&lt;br&gt;B: 2 个月吧。&lt;br&gt;A: 哦...&lt;br&gt;A: 那我能求你给我带个 MK 的包包么，我想送给我女神。&lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;关于薪资和福利，取决于城市，公司的当前规模，融资阶段和公司的薪资结构，所以制订这个，我的建议是，尽量保留弹性，如果福利一般，那就薪资定高一些，如果福利突出，薪资可以适中，但无论怎样，你要明白，你需要的是人才，而不是人力，对于人才，投入越多，关怀越多，回报比越高，投入越少，关怀越少，你就等着收 辞呈 吧。&lt;br&gt;&lt;br&gt;&lt;br&gt;最后呢，我对比了下我圈儿里其他公司的招人情况，我的是最乐观的，那么列下我的招人情况，和各位共勉：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;Moveha 正式招聘 前端/Nodejs 工程师第 94 天，收到简历 103 份，筛选后发出面试邀约 40 人，最终确认并面试约 30 人，进入终面 10 人，发放 offer 8 份，目前 2 人（一个腾讯的，一个阿里的，都是高级前端开发工程师）已回复并确认近期入职。 流量分析，来自拉勾网简历 10 份，来自 QQ 群 7 份，其余大多来自技术论坛和社区。&lt;br&gt;&lt;br&gt;初创招人路漫漫却修远，简单分享下与大家共勉。&lt;/blockquote&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n招人第 94 天，怒答。 <b>不是太难，是你太懒</b> 先纠正下概念，什么是难？ - 大家都招不到人，你也招不到人，这叫难，行业形势决定 - 大家都能招到人，你招不到人，这不较难，是你公司的问题 - 大家有的能招到人，你却招不到人，这也不叫难，是你 公司 + HR 的问…\n\n<a href=\"/question/29138749/answer/43372650\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-03-30\" target=\"_blank\" href=\"/question/29138749/answer/43372650\">编辑于 2015-03-30</a></p>\n\n",
    "link": "https://zhihu.com/question/29138749/answer/43372650"
  },
  {
    "question": "\nJavaScript 是什么？\n",
    "author": "Ivony",
    "content": "\n\n<textarea hidden class=\"content\">简单来说JavaScript是这么一个语言：&lt;br&gt;&lt;br&gt;1、他爹创造它的时候，中意的是函数式，但是公司要他弄的像Java一点。当然，最后这个语言其实更像C，算是C风格的函数式脚本语言，除了名字里面有个Java。&lt;br&gt;&lt;br&gt;2、他爹只用了十天的时间完成这个语言，然后互联网花了十几年在这个语言羸弱的语法上整出了面向对象，命名空间、AJAX等等Pattern，更有各种书籍规范介绍怎么避开这个语言的坑。&lt;br&gt;&lt;br&gt;3、在开始的几年里，这个语言一直被当做脚本来使用，随着互联网的发展，人们对动态内容的需求增多，从而发明了AJAX技术。&lt;br&gt;&lt;br&gt;4、然后有个叫做Google的公司用这个脚本语言做了一个邮件客户端，人们不得不开始重新审视这一“脚本”语言。&lt;br&gt;&lt;br&gt;5、旋即，Google发现HTML和JavaScript是自己唯一能够掌控的平台，遂在上面加大投入，这一转折让我对Google的不作恶信条产生动摇。&lt;br&gt;&lt;br&gt;6、Google用尽全力终于把这个脚本语言的性能提升到了极致，也就是V8引擎。用事实告诉我们，语言设计的烂没有关系，主要看干爹有多少钱。&lt;br&gt;&lt;br&gt;&lt;br&gt;补充回答LZ的问题，JavaScript的兼容语言JScript是WSH（Windows脚本宿主）支持的脚本语言之一，所以可以用于ASP开发，但事实上严格来说用于ASP的是JScript（这个语言语法与JavaScript是兼容的）</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n简单来说JavaScript是这么一个语言： 1、他爹创造它的时候，中意的是函数式，但是公司要他弄的像Java一点。当然，最后这个语言其实更像C，算是C风格的函数式脚本语言，除了名字里面有个Java。 2、他爹只用了十天的时间完成这个语言，然后互联网花了十几年在…\n\n<a href=\"/question/19813265/answer/24779301\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-04-22\" target=\"_blank\" href=\"/question/19813265/answer/24779301\">编辑于 2014-04-23</a></p>\n\n",
    "link": "https://zhihu.com/question/19813265/answer/24779301"
  },
  {
    "question": "\nJavaScript 语句后应该加分号么？\n",
    "author": "贺师俊",
    "content": "\n\n<textarea hidden class=\"content\">【2014年1月更新】&lt;br&gt;当初鉴于本答案过长而可能导致部分“分号党”无法catch到我的主要论点，原本打算重新修订本答案。但是因时间精力因素未予重写，且从本答案的支持来看，为分号正本清源的目的已经达到，所以不再修订本答案。这里仅总结下“分号党”推崇的“总是写分号”风格的最主要缺陷：&lt;br&gt;&lt;br&gt;1. 人总是有可能忘记写分号。ASI导致无法区分是无意中忘记还是有意不写（代码折行）。&lt;br&gt;2. “总是写分号”并不能完全解决ASI缺陷（如return后换行会自动插入分号）。&lt;br&gt;3. “}”后是否要加分号需要回溯到对应“{”之前进行语义判断（是否是函数表达式），成本远高于前置分号判断（只要对行首字符进行token判断：是否是 [ ( + - / 五个符号之一）。&lt;br&gt;&lt;br&gt;&lt;br&gt;【以下为原答案】&lt;br&gt;&lt;br&gt;受邀回答。&lt;br&gt;&lt;br&gt;首先，加还是不加，这是一个书写风格问题。而书写风格通常有一些外在的考量，比如团队所建立的规则或习惯。@玉伯  的答案就是基于此。我对此基本赞同，不过这其实有点避重就轻，呵呵。另外，即使团队有这样的规则，也未必要通过强制在写代码的时候就要这样写，而可以通过工具达成。比如在源码管理工具上挂上钩子，对提交的源代码自动整理格式。&lt;br&gt;&lt;br&gt;其次，很多人提到代码压缩问题。我觉得这是&lt;b&gt;非常扯淡&lt;/b&gt;的理由。如果2012年的今天一个JS压缩器还不能正确处理分号，这只能说明这个JS压缩器没有达到基本的质量要求，根本不值得信任。&lt;br&gt;&lt;br&gt;@冯超 和 @CSS魔法 提到的jslint也是一个工具的反面例子。工具是帮助人的，而不应该是&lt;b&gt;强迫&lt;/b&gt;人的。不明白这一点，你就不会理解为什么在已经有jslint很多年的情况下，还会出现jshint。&lt;br&gt;&lt;br&gt;jshint对于不写分号会报warn，但可以通过asi选项关闭（在文件头加上/* jshint asi:true */即可）。&lt;br&gt;&lt;br&gt;在asi选项说明里，jshint的文档是这样写的：&lt;blockquote&gt;There is a lot of FUD                 (fear, uncertainty and doubt) spread about semicolon  spreaded by quite a few people                 in the community. The common myths are that semicolons  are required all the time (they are not) and that they are unreliable.  JavaScript has rules about semicolons which are                 followed by &lt;b&gt;all&lt;/b&gt; browsers so it is up to you to decide whether you                 should or should not use semicolons in your code.&lt;/blockquote&gt;翻译如下（【】里是我添加的说明）：&lt;br&gt;&lt;blockquote&gt;关于分号有大量的FUD，且是由社区里的一小撮人【你知道是指谁】散布的。一个常见的流言是必须写分号，不写分号不可靠【流言的意思是不写分号会导致代码行为不确定】。实际上JS有明确的分号规则，并且&lt;b&gt;所有&lt;/b&gt;浏览器【居然】都忠实遵守了规则。所以是否应该在你的代码里使用分号，完全可以由你自己决定【而不是由一小撮流言散布者或二逼工具强加于你】。&lt;/blockquote&gt;&lt;br&gt;所以对于可不可以不加分号这个问题，社区是有结论的。&lt;br&gt;&lt;br&gt;然后所谓“应该不应该”，就只是利弊分析，而不是非黑即白。其中也必定有一些如“可维护性”、“可理解性”甚至“代码美感”之类的貌似“贱人贱智”的问题。不过我相信有经验的程序员还是会在大多数问题上找到共识的。&lt;br&gt;&lt;br&gt;&lt;br&gt;这个世界上有许多语言。大量语言是不用分号作为EOS（End of Statement）的。有些偏执狂认为不用分号的语言都是垃圾，对此我没啥好说的。&lt;br&gt;&lt;br&gt;有些语言也是可选分号，比如python。python是可以加分号作为语句结束的。当然绝大多数python程序员是不会加分号的（除了在一行里写多个语句）。所以python和js一样是可选分号！并且python的习惯是不写分号（仅在极少数情况下写）！&lt;br&gt;&lt;br&gt;也有不少人会指摘python的语法太特殊，比如缩进啥的……不能算是c-style的。不过即使是C风格的语言，也有不写分号的，比如groovy。groovy和js一样是可选分号！并且groovy的习惯是不写分号（仅在极少数情况下写）！&lt;br&gt;&lt;br&gt;所以至少从同样两个是可选分号的语言来看，不写分号在实践上是可行的。毕竟，既然被设计为可选，那么合理的推断是：语言的设计初衷是倾向于鼓励不写分号。&lt;br&gt;&lt;br&gt;实际上，不少人（包括我）认为，c-style的分号&lt;b&gt;本来就是多余&lt;/b&gt;的。为什么这么说？因为明确的EOS只是给编译器的提示而已。如果漏了分号，编译器会报错。既然它都报错了，显然它知道这里应该有EOS。既然它知道，那么干嘛还要我写？&lt;br&gt;&lt;br&gt;给编译器以hint，这在几十年前是一个平衡编译器和用户成本的设计。某些语言（如Fortran、Basic等）选择用换行来作为EOS，这样每行只能一个语句，并且一个语句折行必须用特殊的接续符号。某些语言（如C）则选择了通过分号来达成，这样每行可以多个语句，并且一个语句也可以分布在多行。平心而论，我更喜欢前一种策略。不过现实是c-style的语法流传更广，至少当前的工业主流语言都是c-style的。&lt;br&gt;&lt;br&gt;在c-style语言中，如果既要允许自由折行，又要避免额外的EOS（分号），编译器会较为复杂，光靠看token是不能确定语句是否结束的（即换行处有可能是语句结束，也有可能不是）——尽管在实践中只需要很少的规则，人就能一目了然的看清语句是否结束，但是parser要处理一切的极端情况，例如在换行前插入注释到底怎么算。而C的设计是遵循所谓worse is better的哲学，非常强调&lt;b&gt;实现简单&lt;/b&gt;，一个明确的EOS对于编译器来说绝对是简单的。当初如果有人找K&amp;amp;R去要求应该由编译器判断这里该不该是语句结束，我打包票肯定被K&amp;amp;R扁死。有趣的是，lisp那一帮人更极端，如果你抱怨括号实在太密密麻麻的了，一定有人语重心长的告诉你S表达式才是王道。&lt;br&gt;&lt;br&gt;其实像C++编译器也已经复杂到超乎想象，按理说可选分号真是小事一桩，但它因为要保持对C的完全兼容，所以还是必须写分号。&lt;br&gt;&lt;br&gt;python和groovy的parser则都是有名的复杂。这并不完全由允许分号可选造成，但是可选的分号其实是整个语法设计哲学的一环。如Groovy的哲学是PHIM——Parse how I mean。&lt;br&gt;&lt;br&gt;话说python的语法设计真的非常有意思。它也有问题，比如tab和空格混合，计算机之子@程劭非 曾经惊叹，居然有语言能通过改变注释（注释中可定义tabsize）就改变了语义和行为，真是极品。&lt;br&gt;&lt;br&gt;当然后来者会吸取教训，比如coffeescript和jade之类的，也都是依赖缩进，但是都不允许tab和空格混用。&lt;br&gt;&lt;br&gt;所以tab/sp这是python的坑。Guido Van Rossum现在就后悔了。从某种程度上说，JavaScript的分号就有点类似python的tab/sp问题。&lt;br&gt;&lt;br&gt;正如混合tab/sp是出自GVR的良好初衷（让你们想用啥就用啥），可选分号也是出自BE的良好初衷（随便你写不写）。也如同tab/sp一样，良好的初衷并不代表就没有隐患。之所以python、groovy就没有可选分号的争议，而js就有争议，其实正说明js存在一些问题。&lt;br&gt;&lt;br&gt;其实Groovy历史上也是有关于可选分号争议的，参见：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.csdn.net/hax/article/details/139490&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Groovy在EOS问题上的痛苦权衡&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 。不幸的的是，与Groovy早期经过社区激烈的讨论才得到稳定语法不同，JS是一门早熟的语言，一些早期的设计失误没有机会被修复。自动分号插入算法就是其中之一。总体上，自动分号插入算法还算正常，但是在一些小地方留下了不易发觉的坑。比如return语句。&lt;br&gt;&lt;br&gt;return&lt;br&gt;{&lt;br&gt;  a:1&lt;br&gt;}&lt;br&gt;在return后会自动插入分号，导致完全违背期望的结果。&lt;br&gt;&lt;br&gt;这一古怪行为往往被解释为在JS中应采用一行内跟随大括号的书写风格（即Java的风格，或者说是K&amp;amp;R的C的原初风格，而不是C#风格），其实追根述源，问题还是出在分号上。&lt;br&gt;&lt;br&gt;不要插分号的地方被插了分号，这挺坑爹了，但更更坑爹的是想要插的结果没插。这就是括号的问题。如果下一行的开始是 ( 、 [ 上一行的结尾不会被加上 ; 。&lt;br&gt;&lt;br&gt;如：&lt;br&gt;a = b&lt;br&gt;(function(){&lt;br&gt;...&lt;br&gt;})()&lt;br&gt;&lt;br&gt;会被解释为 a = b(function(){...})()&lt;br&gt;&lt;br&gt;其实如果我们真想表达上述代码，通常会这样写：&lt;br&gt;a = b(function(){&lt;br&gt; ...&lt;br&gt; })()&lt;br&gt;&lt;br&gt;再如：&lt;br&gt;a = b&lt;br&gt;[1,2,3].forEach(function(e){&lt;br&gt;  console.log(e)&lt;br&gt;})&lt;br&gt;&lt;br&gt;实际效果等价于&lt;br&gt;a = b[3].forEach(function(e){&lt;br&gt;   console.log(e)&lt;br&gt; })&lt;br&gt;&lt;br&gt;坑爹的是，搞不好这代码说不定还能运行！你要事后通过调试发现这些错误是相当滴痛苦啊。&lt;br&gt;&lt;br&gt;当然这也不能全赖BE。在JS的早期，还没有数组迭代方法 Array.prototype.forEach/map/filter...等，也没有今天常见的(function(){...})()惯用法，所以这个问题其实很不明显。但是到了今天，这些坑爹的问题就都冒出来了。&lt;br&gt;&lt;br&gt;实际上，+/-也有问题，但是我们几乎不会在实践中遇到。因为你根本不可能会写行首以 + / - 开始的语句，除了 ++i 之类的语句（但是其实我们都会写成 i++ ）。&lt;br&gt;&lt;br&gt;不过这些问题的解决方案其实也很简单。只要在 [ 、 ( 、 + 、 - 之前加分号就可以了：&lt;br&gt;a = b&lt;br&gt; ;(function(){&lt;br&gt; ...&lt;br&gt; })()&lt;br&gt;&lt;br&gt; a = b&lt;br&gt; ;[1,2,3].forEach(function(e){&lt;br&gt;   console.log(e)&lt;br&gt; })&lt;br&gt;&lt;br&gt; 有些同学觉得这样很丑。没问题，你可以用void替代; 。&lt;br&gt;&lt;br&gt;也有不少人觉得这是一种“不一致”，需要记住额外的法则。&lt;br&gt;&lt;br&gt;我承认采取这样一种方法你必须记住一些特例。但是几乎所有的语言都有一些历史原因导致的坑，并且JS也不止这一个坑。更关键的是即使你采用了总是写;的方法，仍然是有关于EOS的坑，因为造成问题的asi特性仍然存在。比如之前提到的return后面会自动插分号。&lt;br&gt;&lt;br&gt;总是写分号，相比不写分号但是edge case要在行首加分号，看上去要更“简单”，但这只是描述简单，实际做起来未必更简单。&lt;br&gt;&lt;br&gt;比如你必须要记得，function表达式后面也要写“;” ！&lt;br&gt;&lt;br&gt;如：&lt;br&gt;function a() {&lt;br&gt;  ...&lt;br&gt;}&lt;br&gt;[1,2,3].forEach(...)&lt;br&gt;&lt;br&gt;这代码是没问题的，但是你改成&lt;br&gt;var a = function () {&lt;br&gt;   ...&lt;br&gt; }&lt;br&gt; [1,2,3].forEach(...)&lt;br&gt;&lt;br&gt;就有问题了！这坑爹！&lt;br&gt;&lt;br&gt;对于“始终加分号派”来说，结果就会变成函数后面也一定要加分号。（你分得清函数声明和函数表达式吗？坑爹啊，不如都加！）但是为什么函数就加而 if ... {} 或 for (...) {...} 结构里的大括号后面就不加分号呢？这不是也不一致嘛。&lt;br&gt;&lt;br&gt;而且，同样是一条特殊规则，&lt;b&gt;行首加分号的规则比函数表达式后面加分号的规则其实要简单！&lt;/b&gt;&lt;br&gt;&lt;br&gt;var a = function () {&lt;br&gt;   ...&lt;br&gt; }&lt;br&gt; [1,2,3].forEach(...)&lt;br&gt;&lt;br&gt;还是以上面代码为例。&lt;br&gt;&lt;br&gt;行首是否要加分号，我只要看本行的第一个字符就可以了。因为对于object[prop]这样的意图，其实没有程序员会写出&lt;br&gt;object&lt;br&gt;[prop]&lt;br&gt;这样的代码。如果他要折行，一定是写成&lt;br&gt;object[&lt;br&gt;  prop&lt;br&gt;]&lt;br&gt;所以行首第一个字符如果是括号，毋庸置疑的，这一定是一个新语句的开始。&lt;br&gt;&lt;br&gt;反过来，你如果要判断 } 后面是否要加 ; ，你得向上回溯，看清楚整段代码是一个结构呢？还是一个函数？如果是函数的话，是函数声明呢？还是函数表达式！&lt;br&gt;&lt;br&gt;许多时候，你可能向上翻几页还没找到对应的 { ！或者已经忘记了是几层缩进了！&lt;br&gt;&lt;br&gt;人不是机器，总有可能忘记写分号。上面的分析说明，对于人来说，行首特例加分号的策略其实更简单易行。而总是加分号的策略听上去简单，执行起来却难！（除非你的策略最后变成了所有 } 之后都加分号——我真见过有人这么做的。）&lt;br&gt;&lt;br&gt;&lt;br&gt; 对人是这样，下面再来看看对机器（引入工具）的情形。特别的，因为有不少人表示他遵循总是写分号的方式是因为他严重依赖jslint。所以我就拿jslint开刀。&lt;br&gt;&lt;br&gt;对于总是加分号的策略，你希望工具能提示你哪里缺少分号。但是实际情况是，你必须尽量避免写出有歧义的跨行语句，因为工具很难判断是有意为之，还是忘记写“;”。&lt;br&gt;&lt;br&gt;比如： &lt;br&gt;a = b&lt;br&gt; (function(){&lt;br&gt; ...&lt;br&gt; })();&lt;br&gt;&lt;br&gt;这代码在jslint的提示是：Expected '(' at column 5, not column 1.&lt;br&gt;&lt;br&gt;请问你是应该真的按照它的提示把括号移动到b后面吗？？&lt;br&gt;&lt;br&gt;仔细考虑一下，你就知道这个问题不好回答。因为jslint给出的建议其实是基于“这是合法的代码，只是格式不妥”。虽然我们都知道这更可能是忘记写分号。&lt;br&gt;&lt;br&gt;再来一个更坑爹的例子：&lt;br&gt;&lt;br&gt;/*jslint white: true */&lt;br&gt;var a,b,c,d,e,f,g,h,i,j,k,l,m,o,s;&lt;br&gt;a=b+c*d-e&lt;br&gt;    /f/g-h*i/j&lt;br&gt;/f/g.exec(s).map(f);&lt;br&gt;&lt;br&gt;这段代码在jslint里是&lt;b&gt;不报错&lt;/b&gt;的！！！&lt;br&gt;&lt;br&gt;但是我们是可以看出来这代码很有可能是缺少分号。&lt;br&gt;&lt;br&gt;这里可以看出，如果排除了whitespace的格式提示（这事儿还是挺常见的，毕竟许多人不喜欢被强制加那么多空格规则），jslint其实无法在我们最需要帮助的时候帮到我们！因为它无法判断这个地方到底是有意为之（不用;而跨行），还是忘记写; 。&lt;br&gt;&lt;br&gt;反过来说，如果采取行首特例加;的习惯，其实工具是很容易判断你是否忘记加了分号。如果加上一些对缩进信息的判断来排除极少数不良的折行习惯（出warn即可），工具甚至能自动把所有这类分号都加上。&lt;br&gt;&lt;br&gt;两种策略：&lt;br&gt;1. 我总是写分号，让工具告诉我哪里我忘记写了（但是有时候可能还报不出来，或报了个其他信息）&lt;br&gt;2. 我总是不写分号，让工具自动把（由于语言设计缺陷所要求的）必须的分号加上去&lt;br&gt;&lt;br&gt;哪种更好？&lt;br&gt;&lt;br&gt;&lt;br&gt;总结：&lt;br&gt;&lt;br&gt;我所推荐的不写分号的方式，其实不仅是不写分号，而是同时采用更严格的跨行策略，即只允许在当前行处于未完成状态时跨行（就像你在jsshell中输入代码一样）。这条规则其实并不需要特别强制，因为绝大多数程序员一直就是这样在执行。诚然，存在少数人习惯写这样有歧义的折行代码：&lt;br&gt;&lt;br&gt;a = b + c&lt;br&gt;      + d + e&lt;br&gt;      + f  + g&lt;br&gt;&lt;br&gt;但是这个习惯是很容易纠正。并且工具根据缩进等信息是完全能检测到的。&lt;br&gt;&lt;br&gt;&lt;br&gt;说到这里，也许有些同志认为这只能说明jslint太挫，不能证明到处写 ; 的风格不好。因为工具也可以同时加上其他限制嘛。不过你仔细想想，可以发现这是一个悖论。如果jslint够智能，引入了其他与分号无关的代码风格要求，比如空格和缩进，还有折行风格，确实也可以更精确的找到所有漏掉分号的地方。但是那无非再次证明了一点：编译器（代码分析器）完全可以知道哪里应该有EOS。既然所有的分号其实可以由机器自行加上，那么我们自己还要手写所有分号的意义到底在哪里？！&lt;br&gt;&lt;br&gt;以上。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n【2014年1月更新】 当初鉴于本答案过长而可能导致部分“分号党”无法catch到我的主要论点，原本打算重新修订本答案。但是因时间精力因素未予重写，且从本答案的支持来看，为分号正本清源的目的已经达到，所以不再修订本答案。这里仅总结下“分号党”推崇的…\n\n<a href=\"/question/20298345/answer/14670020\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2012-06-17\" target=\"_blank\" href=\"/question/20298345/answer/14670020\">编辑于 2014-01-15</a></p>\n\n",
    "link": "https://zhihu.com/question/20298345/answer/14670020"
  },
  {
    "question": "\nVue 和 React 的使用场景和深度有何不同？\n",
    "author": "尤雨溪",
    "content": "\n\n<textarea hidden class=\"content\">谢邀，也感谢你对 Vue 的欣赏。&lt;br&gt;&lt;br&gt;首先，其实 Vue 也完全可以全量赋值的，唯一需要的小优化就是给 v-repeat 列表一个 track-by 属性，提示一下如何判断两个对象是否是同一份数据。如果是没有复杂交互的列表，可以直接 track-by=&quot;$index&quot; 原地复用 DOM 元素。&lt;br&gt;&lt;br&gt;合理使用 track-by 的情况下，Vue 甚至可以比 React 更快（这里渲染的是 100 * 5 的数据表，每一帧都是全量新数据赋值）：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//vuejs.github.io/js-repaint-perfs/vue/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dbmon (Vue)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//vuejs.github.io/js-repaint-perfs/react/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;dbmon (react)&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;在超大量数据的首屏渲染速度上，React 有一定优势，因为 Vue 的渲染机制启动时候要做的工作比较多，而且 React 支持服务端渲染。&lt;br&gt;&lt;br&gt;需要指出的一点：React 的 Virtual DOM 也不是不需要优化的。复杂的应用里你有两个选择 1. 手动添加 shouldComponentUpdate 来避免不需要的 vdom re-render；2. Components 尽可能都用 pureRenderMixin，然后采用 Flux 结构 + Immutable.js。其实也不是那么简单的。相比之下，Vue 由于采用依赖追踪，默认就是优化状态：你动了多少数据，就触发多少更新，不多也不少。&lt;br&gt;&lt;br&gt;说起 Flux 架构，FB 提供的标准实现非常繁琐，所以社区的各种造轮子版本层出不穷，目前其实还没有找到一个公认的最佳实践，而且大部分新 Flux 实现都引入了很多函数式概念，你如果对函数式编程不熟悉，光搞清楚那些概念就得花很久。&lt;br&gt;&lt;br&gt;如果你真的理解了 Flux，你又会发现其实 Vue 也是可以应用 Flux 架构的。比如 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/optimizely/nuclear-js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;optimizely/nuclear-js · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 是一个 Flux 变种，他们就是同时把这个东西用在了 React 和 Vue 上面。&lt;br&gt;&lt;br&gt;再谈谈开发风格的偏好：React 推荐的做法是 JSX + inline style，也就是把 HTML 和 CSS 全都整进 JavaScript 了。Vue 的默认 API 是以简单易上手为目标，但是进阶之后推荐的是使用 webpack + vue-loader 的单文件组件格式：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/6af17bf9a1a6eadb50d5545313c1db77_b.png&quot; data-rawwidth=&quot;829&quot; data-rawheight=&quot;1009&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;829&quot; data-original=&quot;https://pic4.zhimg.com/6af17bf9a1a6eadb50d5545313c1db77_r.png&quot;&gt;&lt;br&gt;依然是熟悉的 HTML 和 CSS，但是可以放在一个文件里。&lt;b&gt;而且你还可以使用你想要的预处理器，比如 LESS, Jade, Coffee, Babel，都可以。&lt;/b&gt;&lt;br&gt;&lt;br&gt;然后扯一扯模板 vs. JSX 的问题。JSX 在逻辑表达能力上虽然完爆模板，但是很容易写出凌乱的 render 函数，不如模板看起来一目了然。当然这里也有个人偏好的问题。&lt;br&gt;&lt;br&gt;React 的社区/组件生态比 Vue 大很多，这个是很显然的。不过说实话我很少见到现成的第三方组件完全符合我的要求。&lt;br&gt;&lt;br&gt;最后，使用场景上来说：React 配合严格的 Flux 架构，适合超大规模多人协作的复杂项目。理论上 Vue 配合类似架构也可以胜任这样的用例，但缺少类似 Flux 这样的官方架构。小快灵的项目上，Vue 和 React 的选择更多是开发风格的偏好。对于需要对 DOM 进行很多自定义操作的项目，Vue 的灵活性优于 React。&lt;br&gt;&lt;br&gt;---&lt;br&gt;&lt;br&gt;更新：&lt;br&gt;&lt;br&gt;楼下有些回答说 Vue 的核心是 MVVM 双向绑定，然后就直接跳跃到了『不适合持续工程迭代』的结论。且不说这样的跳跃太草率，这样的看法本身对于双向绑定的理解也是有偏差的。表单的双向绑定，说到底不过是 （value 的单向绑定 + onChange 事件侦听）的一个语法糖，你如果不想用 v-model，像 React 那样处理也是完全可以的。另一方面，组件间的数据传递，Vue 默认是单向的，和 React 一样。&lt;br&gt;&lt;br&gt;&lt;b&gt;React 本身并不存在所谓的『单向数据流』，这完全是 Flux 引入的概念。&lt;/b&gt;其核心还是在于避免组件的 local state，强调把 state 抽取出来进行集中的管理。没有 Flux 的情况下 React 一样会有状态难以管理的问题，其根源在于在哪里存放和管理 state，和双向绑定没有本质联系。那难道 Vue 就不能这样管理状态吗？当然是可以的，Vue 现在可以通过 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/egoist/revue&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;egoist/revue · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 和 Redux 进行配合，也可以用 Vue 专属的状态管理架构 Vuex: &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/vuejs/vuex/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;vuejs/vuex · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，『单向数据流』并没有 React 吹的那么神，直接因为这一点就觉得 Vue 不适合工程迭代，完全站不住脚。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/6af17bf9a1a6eadb50d5545313c1db77_200x112.png\" data-rawwidth=\"829\" data-rawheight=\"1009\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/6af17bf9a1a6eadb50d5545313c1db77_r.png\">\n谢邀，也感谢你对 Vue 的欣赏。 首先，其实 Vue 也完全可以全量赋值的，唯一需要的小优化就是给 v-repeat 列表一个 track-by 属性，提示一下如何判断两个对象是否是同一份数据。如果是没有复杂交互的列表，可以直接 track-by=\"$index\" 原地复用 DOM 元素。 …\n\n<a href=\"/question/31585377/answer/52576501\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-06-24\" target=\"_blank\" href=\"/question/31585377/answer/52576501\">编辑于 2016-01-03</a></p>\n\n",
    "link": "https://zhihu.com/question/31585377/answer/52576501"
  },
  {
    "question": "\n为什么维基百科的用户界面设计不够友好？\n",
    "author": "Xing",
    "content": "\n\n<textarea hidden class=\"content\">维基百科社群的缺少设计意识，专业设计师的影响力在“民主决策”下非常有限。&lt;br&gt;&lt;br&gt;维基百科对色彩的滥用，不遵循版式设计的一些通用原则，糟糕的各种细小装饰图标，质量低劣的照片、图表和表格，反人类的满屏堆砌文字，貌似在各种语言版本的维基百科中都可以体会到，不同国籍和人种在这点上倒是完全没有什么差异。我认为，究其原因，是因为&lt;b&gt;&lt;u&gt;维基百科缺少专业设计师的设计和决策&lt;/u&gt;&lt;/b&gt;。或者说专业设计师的声音很可能会埋没在社群里的无秩序的嘈杂中。&lt;br&gt;&lt;br&gt;其实在2010年中文维基首页改版时候，Rex Chen在Type Is Beautiful就写过一篇文章讨论过设计的民主和独裁问题。&lt;br&gt;&lt;br&gt;民主程序对设计有意义吗？&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.typeisbeautiful.com/2010/03/2239/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;typeisbeautiful.com/201&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;0/03/2239/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;我坚持认为，&lt;b&gt;&lt;u&gt;专业的人做专业的事&lt;/u&gt;&lt;/b&gt;。设计也同这个世界上大多数职业一样，需要很多年的学习和经历才能做出一些正确的事，设计出合适的东西来。这包括从基础开始的技能训练，对设计发展史和流派的了解，对市场和人的理解，对设计和研究方法的学习，到思维训练，深层次的哲学思考。没有经过这些磨练的同学在做设计的时候很可能会出现一些明显的不当处理甚至是错误。&lt;br&gt;&lt;br&gt;不过问题还得解决。&lt;br&gt;我暗自觉得拖动窗口大小来解决有些削足适履之嫌。&lt;br&gt;&lt;br&gt;我现在共享下我的临时解决方法。&lt;br&gt;这个是结果：&lt;br&gt;&lt;br&gt;首页&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/f42843b3b717f0b913e2924ae95c87c1_b.jpg&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic2.zhimg.com/f42843b3b717f0b913e2924ae95c87c1_r.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/8c476a7c9d7d44e845da54885bdadd95_b.jpg&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic2.zhimg.com/8c476a7c9d7d44e845da54885bdadd95_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;（这是不是对维基百科改版的建议，因为改版建议需要考虑的限制条件会更复杂得多，需要考虑品牌识别的连续性，用户的习惯还有服务器压力和资金等问题。这改给自己用的。）&lt;br&gt;&lt;br&gt;对比现状：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/63cc1f0a050a8ca4bffef61ecdf3be2e_b.jpg&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic3.zhimg.com/63cc1f0a050a8ca4bffef61ecdf3be2e_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;设置页&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/75a08a6b29ce113aee5a45a70b8c242b_b.jpg&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic4.zhimg.com/75a08a6b29ce113aee5a45a70b8c242b_r.jpg&quot;&gt;&lt;br&gt;编辑页&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/d11281d35961c7a8bc100ea024795094_b.jpg&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;838&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic1.zhimg.com/d11281d35961c7a8bc100ea024795094_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;我尝试了一些现成的样式，选了一个我觉得最适合普通读者的。&lt;br&gt;&lt;br&gt;实现请自行Google关键字：&lt;b&gt;Stylish Classypedia&lt;/b&gt;&lt;br&gt;我在Safari中都实现了，想必大家的浏览器都没问题。。&lt;br&gt;&lt;br&gt;然后我只修改了个小数字：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;900px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;22px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;!important&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n    &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;这段就是可以通过改变max-width来限定内容最大宽度，我觉得900适合我的习惯。大家可以根据自己需要改。&lt;br&gt;&lt;br&gt;由于一般不是维基百科的贡献者，所以一栏的布局没有了sidebar的干扰信息，也没有条目开头的各种编辑提示框，甚感欣慰。我觉得维基百科之后的改版需要考虑不同用户的使用场景和所需的信息的不同，对于非编辑者，可以隐藏一些内容以提升可阅读性。&lt;br&gt;&lt;br&gt;最大的不便是少了语言切换栏，这几乎让我觉得维基百科一半的乐趣都消失了。只能暂时关闭stylish来切换，相比用原来的样式，这点麻烦还是值得的。&lt;br&gt;&lt;br&gt;我想在这里跪求各位前端大神，帮忙完善这段代码。让“语言切换”，在鼠标hover过去的时候，在左边的灰色区域显示出来吧。&lt;br&gt;&lt;br&gt;------12.24号更新------&lt;br&gt;嗯。意外收到好多赞同，谢谢啦。:)&lt;br&gt;对于评论中的一些问题，我在这里统一回复一下。&lt;br&gt;因为是为了回答问题“为什么难受”，所以主旨句是“&lt;b&gt;&lt;u&gt;维基百科缺少专业设计师的设计和决策&lt;/u&gt;&lt;/b&gt;”，也就是这个问题的答案。&lt;br&gt;&lt;br&gt;之后给出的那个script，并不是本人的作品。在这里还需要感谢原作者Nathan Black。我暂时不清楚stylish的版权设定，著作权由原作者保留。&lt;br&gt;&lt;br&gt;我之所以给出这个例子，一个是为了共享下我是如何折腾这个东西的，给需要折腾的人；二是为了支撑下我之前的论点。&lt;br&gt;&lt;br&gt;这个script当然还有在设计上改进的地方，我也可以指出很多处。它绝对不是也不应该是维基百科未来的样子。尽管离题了，我还是说一下从这个script中可以看出来的改进&lt;b&gt;&lt;u&gt;策略&lt;/u&gt;&lt;/b&gt;，抛砖引玉供大家讨论：&lt;br&gt;&lt;br&gt;&lt;ol&gt;&lt;li&gt;至少需要设定max-width，提升可阅读性（readability）。为了自适应各种屏幕分辨率和设备，引入“响应式网页设计”（responsive web design）的作为其 design approach。&lt;/li&gt;&lt;li&gt;简化样式。通过一些全局CSS的高优先级设定，舍弃一些原来的贡献者提供的没有必要的颜色，样式。（请仔细体会对比我给的script例子）&lt;/li&gt;&lt;li&gt;所见即所得编辑。现在的edit按钮已经向那个方向迈进了。但是做得还可以更加深入彻底一点。消除“编辑”和“阅读”模式的鸿沟。&lt;/li&gt;&lt;li&gt;针对不同目标用户做出不同的呈现和响应。&lt;/li&gt;&lt;/ol&gt;&lt;br&gt;如果你是设计从业者，还在用“感觉”，“审美”，“好看”，“丑”，“体验”来讨论问题，请仔细考虑你是否拥有足够的competence。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic2.zhimg.com/f42843b3b717f0b913e2924ae95c87c1_200x112.jpg\" data-rawwidth=\"1440\" data-rawheight=\"838\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic2.zhimg.com/f42843b3b717f0b913e2924ae95c87c1_r.jpg\">\n维基百科社群的缺少设计意识，专业设计师的影响力在“民主决策”下非常有限。 维基百科对色彩的滥用，不遵循版式设计的一些通用原则，糟糕的各种细小装饰图标，质量低劣的照片、图表和表格，反人类的满屏堆砌文字，貌似在各种语言版本的维基百科中都可以体…\n\n<a href=\"/question/21278237/answer/21042776\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2013-12-22\" target=\"_blank\" href=\"/question/21278237/answer/21042776\">编辑于 2014-10-29</a></p>\n\n",
    "link": "https://zhihu.com/question/21278237/answer/21042776"
  },
  {
    "question": "\n如何面试前端工程师？\n",
    "author": "rank",
    "content": "\n\n<textarea hidden class=\"content\">&lt;p&gt;这几天刚好在逛知乎，路过顺便说一下我们的「&lt;b&gt;开源」&lt;/b&gt;的面试方法，大多是我团队里同学整理的，所有的面试理论都基本如此。&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;p&gt;提前说明，&lt;b&gt;禁止转载&lt;/b&gt;。&lt;/p&gt;&lt;br&gt;&lt;p&gt;一般都是结构化的，结构化的面试如：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;一个页面从输入 URL 到页面加载完的过程中都发生了什么事情？&lt;/li&gt;&lt;li&gt;你原来做过哪些让你印象深刻的项目？用 STAR 面试法来不停追问细节。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;结构化面试最主要是方便你 &lt;b&gt;能比较&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;完毕后会针对性的对 ta 熟悉领域深入询问，技术点因人而异了。&lt;/p&gt;&lt;p&gt;最后是些软素质。&lt;/p&gt;&lt;br&gt;&lt;p&gt;看上去就这么点东西，但问得怎么样，就看面试官水平了，通常面了几百号人，也被人面过以后基本都心里有数了。&lt;/p&gt;&lt;br&gt;&lt;p&gt;下面转一下我们的面试方法。&lt;/p&gt;&lt;br&gt;&lt;p&gt;&lt;b&gt;面试方法&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;代码编写笔试&lt;br&gt;&lt;/li&gt;&lt;li&gt;问答式&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;过程遵循 STAR 面试法 。&lt;/p&gt;&lt;br&gt;&lt;p&gt;校招和社招的是不一样的，校招会更加关注基础知识，而社招会更加关注之前做过的项目情况。&lt;/p&gt;&lt;br&gt;&lt;b&gt;项目相关&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;面试其实说白了就是根据一个人之前的经历，来判断出后续这人会做得怎样，如果你之前从没做成过一件事情，凭什么让别人相信你之后能做成呢？因此无论哪里的面试都会问你之前做过的项目&lt;/p&gt;&lt;p&gt;项目可以是多人协助开发一个产品，也可以是自己个人做过的业余应用，只需介绍 1、2 个就够了，需要注意的是 1 + 1 != 2，做了两个平庸的项目不如做了一个好项目。&lt;/p&gt;&lt;br&gt;&lt;p&gt;一般来说会问如下几方面的问题：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;做过最满意的项目是什么？&lt;/li&gt;&lt;li&gt;项目背景&lt;ul&gt;&lt;li&gt;为什么要做这件事情？&lt;/li&gt;&lt;li&gt;最终达到什么效果？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;你处于什么样的角色，起到了什么方面的作用？&lt;/li&gt;&lt;li&gt;在项目中遇到什么技术问题？具体是如何解决的？&lt;/li&gt;&lt;li&gt;如果再做这个项目，你会在哪些方面进行改善？&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;技术相关 - 1 面&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;技术一面主要判断对基础知识的掌握&lt;/p&gt;&lt;ul&gt;&lt;li&gt;描述一个你遇到过的技术问题，你是如何解决的？&lt;ul&gt;&lt;li&gt;这个问题很常见，有没有遇到过很不常见的问题？比如在网上根本搜不到解决方法的？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;是否有设计过通用的组件？&lt;ul&gt;&lt;li&gt;请设计一个 Dialog（弹出层） / Suggestion（自动完成） / Slider（图片轮播） 等组件&lt;/li&gt;&lt;li&gt;你会提供什么接口？&lt;/li&gt;&lt;li&gt;调用过程是怎样的？可能会遇到什么细节问题？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;更细节的问题推荐参考 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/darcyclarke/Front-end-Developer-Interview-Questions/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;darcyclarke/Front-end-Developer-Interview-Questions · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;技术相关 - 2 面&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;技术二面主要判断技术深度及广度&lt;/p&gt;&lt;ul&gt;&lt;li&gt;你最擅长的技术是什么？&lt;ul&gt;&lt;li&gt;你觉得你在这个技术上的水平到什么程度了？你觉得最高级别应该是怎样的？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;浏览器及性能&lt;ul&gt;&lt;li&gt;一个页面从输入 URL 到页面加载完的过程中都发生了什么事情？越详细越好&lt;ul&gt;&lt;li&gt;（这个问既考察技术深度又考察技术广度，其实要答好是相当难的，注意越详细越好）&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;谈一下你所知道的页面性能优化方法？&lt;ul&gt;&lt;li&gt;这些优化方法背后的原理是什么？&lt;/li&gt;&lt;li&gt;除了这些常规的，你还了解什么最新的方法么？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;如何分析页面性能？&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;其它&lt;ul&gt;&lt;li&gt;除了前端以外还了解什么其它技术么？&lt;/li&gt;&lt;li&gt;对计算机基础的了解情况，比如常见数据结构、编译原理等&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;兴趣相关&lt;/b&gt;&lt;ul&gt;&lt;li&gt;最近在学什么？接下来半年你打算学习什么？&lt;/li&gt;&lt;li&gt;做什么方面的事情最让你有成就感？需求设计？规划？具体开发？&lt;/li&gt;&lt;li&gt;后续想做什么？3 年后你希望自己是什么水平？&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;主动性相关&lt;/b&gt;&lt;ul&gt;&lt;li&gt;在之前做过的项目中，有没有什么功能或改进点是由你提出来的？&lt;/li&gt;&lt;li&gt;是否有参与和改进其它开源项目&lt;/li&gt;&lt;/ul&gt;还有些与话题无关我就不转了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n这几天刚好在逛知乎，路过顺便说一下我们的「<b>开源」</b>的面试方法，大多是我团队里同学整理的，所有的面试理论都基本如此。 提前说明，<b>禁止转载</b>。 一般都是结构化的，结构化的面试如：一个页面从输入 URL 到页面加载完的过程中都发生了什么事情？你原来做过哪…\n\n<a href=\"/question/19568008/answer/25092199\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-04-30\" target=\"_blank\" href=\"/question/19568008/answer/25092199\">编辑于 2015-05-26</a></p>\n\n",
    "link": "https://zhihu.com/question/19568008/answer/25092199"
  },
  {
    "question": "\nWEB开发中，使用JSON-RPC好，还是RESTful API好？\n",
    "author": "翁伟",
    "content": "\n\n<textarea hidden class=\"content\">JSON-RPC比RESTful API好很多。&lt;br&gt;&lt;br&gt;======&lt;br&gt;&lt;br&gt;我厌恶restful API如同我厌恶OOP；但与其说我厌恶restful，倒不如说我厌恶鼓吹restful API的一些伪·程序员。&lt;br&gt;&lt;br&gt;很多鼓吹restful API的程序员，实际上并不理解restful的设计理念，纯粹是在人言亦言，随便看了几篇网文在说restful，自己便也更着鼓吹。&lt;br&gt;&lt;br&gt;做为一个合格的技术人员，最基础的要求是要对自己所使用的技术有了解，明白各种技术的适用场景，然后因地制宜。&lt;br&gt;&lt;br&gt;restful首先是要求必须把所有的应用定义成为“resource”，然后只能针对资源做有限的四种操作。&lt;br&gt;&lt;br&gt;这是对API一个非常糟糕的抽象，有太多现实中需要的API，无法顺当的融入到restful所定义的规范中。&lt;br&gt;&lt;br&gt;比方说，user login / resetpassword等等。&lt;br&gt;&lt;br&gt;restful的信徒，他们会说可以根据这个那个规范，把login / password等也纳入为某种资源，然后进行增删改查。这在我看来，纯粹是在解决一些原本不存在，根本不需要解决的问题，纯浪费。&lt;br&gt;&lt;br&gt;所有的接口，服务器端原本就存在有相应的函数，它们本来就有自身的命名空间，接受的参数、返回值、异常等等。&lt;br&gt;&lt;br&gt;采用轻便的方式暴露出来即可。&lt;br&gt;&lt;br&gt;无需把一堆函数重新归纳到“资源”，再削减脑袋把所有的操作都映射为“增删改查”。&lt;br&gt;&lt;br&gt;对应到web上，rpc的成熟方案非常多，有古老的soap，也有轻量的json rpc。&lt;br&gt;&lt;br&gt;JSON rpc基本上仅是要求所有的请求必须有msg id，有函数名，然后可定义参数，并且区分返回值与异常；也可定义『命名空间』来对函数模块做划分。&lt;br&gt;&lt;br&gt;这与大多数语言的模块、函数定义相符，使用起来是非常便利的。&lt;br&gt;&lt;br&gt;很多json rpc是供web前端ajax调用，若前端调用抽象得当，调用远程API，实际上与调用本地函数无甚区别。&lt;br&gt;&lt;br&gt;实际上，json rpc也未必需要跟http绑定，即便是在web上，它也可以走web socket，这样子，前端可以使用同一web socket管道批量发送请求，而服务器端乱序返回结果时，前端也可以根据msg id做准确的回调。&lt;br&gt;&lt;br&gt;websocket，批量调用，乱序返回，这些都可以显著提高API的输出吞吐，这些是在json rpc的设计考量内。&lt;br&gt;&lt;br&gt;调用更方便，性能也更好，两全其美是完全可能的。&lt;br&gt;&lt;br&gt;想当然的为了“快”，为了“简单”就必须牺牲别的，这是严重的思维误区。&lt;br&gt;&lt;br&gt;有些方案，纯粹就是糟糕的方案。&lt;br&gt;&lt;br&gt;restful API仅适用与业务非常简单的场景，比方说，就是为了提供少量数据表单的增删改查。而这种场景实在是太过简单，实际中几乎找不到。&lt;br&gt;&lt;br&gt;其它优秀的方案？可以看看：&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//facebook.github.io/react/blog/2015/05/01/graphql-introduction.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GraphQL Introduction&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/grpc/grpc&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;grpc/grpc · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;====&lt;br&gt;&lt;br&gt;发现老外一篇旧文：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//rob.conery.io/2012/02/28/someone-save-us-from-rest/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;rob.conery.io/2012/02/2&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;8/someone-save-us-from-rest/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 推荐大家去看看~</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nJSON-RPC比RESTful API好很多。 ====== 我厌恶restful API如同我厌恶OOP；但与其说我厌恶restful，倒不如说我厌恶鼓吹restful API的一些伪·程序员。 很多鼓吹restful API的程序员，实际上并不理解restful的设计理念，纯粹是在人言亦言，随便看了几篇网文在…\n\n<a href=\"/question/28570307/answer/47876255\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-05-15\" target=\"_blank\" href=\"/question/28570307/answer/47876255\">编辑于 2015-08-11</a></p>\n\n",
    "link": "https://zhihu.com/question/28570307/answer/47876255"
  },
  {
    "question": "\n前端面试时总让写原生Ajax真的很有意义吗？\n",
    "author": "雕兄",
    "content": "\n\n<textarea hidden class=\"content\">看到这个问题，挺有意思，我面试的时候就会问。因为这货可以作为一条主线来用，以下是针对一位简历中写到：熟悉原生js，http协议，了解seajs的面试者，我常用的套路：&lt;br&gt;开局问：原生xhr怎么写？&lt;br&gt;答：创建一个xhr对象，readystate onload send open blabla&lt;br&gt;接着问：怎么处理回调？&lt;br&gt;答：status等于200且readystate等于4的时候，取responseText处理。&lt;br&gt;接下来开启http协议分支任务&lt;br&gt;问：http状态码常见有哪些？&lt;br&gt;答：200，302，304，404，5xx&lt;br&gt;&lt;br&gt;问：302是啥？304是啥？什么时候会返回304？你刚刚说浏览器缓存，具体缓存机制是怎么样的？&lt;br&gt;答：…&lt;br&gt;&lt;br&gt;问：你刚刚说的是发起一个get请求，除此之外http method还有哪些？&lt;br&gt;答：常用的还有post，put，delete等。&lt;br&gt;问：post跟get有啥区别？&lt;br&gt;答：…&lt;br&gt;&lt;br&gt;http分支聊得差不多啦，回主线，进入跨域和web前端安全分支。&lt;br&gt;&lt;br&gt;问：http聊的差不多啦，我们回到xhr，你知道同源策略么？&lt;br&gt;答：同协议，同端口，同域名&lt;br&gt;&lt;br&gt;问：怎么跨域发起请求&lt;br&gt;答：cors，jsonp等&lt;br&gt;接下来聊聊，cors的细节，jsonp的原理。&lt;br&gt;&lt;br&gt;再接下来聊聊其他跨域的方案，postmessage，document.domain降域&lt;br&gt;&lt;br&gt;接下来就着同源策略，跟面试者聊聊cookie，问题往csrf上走，csrf是啥，怎么防。顺着csrf，聊聊xss，概念，怎么防？&lt;br&gt;&lt;br&gt;跨域和安全聊完，跟面试者聊聊模块化，seajs源码之类，这个跟xhr关系不大，主要为后边的问题铺垫。&lt;br&gt;&lt;br&gt;最后会让面试者写一个seajs插件，支持commonjs规范写的模块。基础知识都懂，最后这个问题就看你怎么用基础去解决实际问题了</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n看到这个问题，挺有意思，我面试的时候就会问。因为这货可以作为一条主线来用，以下是针对一位简历中写到：熟悉原生js，http协议，了解seajs的面试者，我常用的套路： 开局问：原生xhr怎么写？ 答：创建一个xhr对象，readystate onload send open blabla 接…\n\n<a href=\"/question/41986174/answer/93491697\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/41986174/answer/93491697\">发布于 2016-04-03</a></p>\n\n",
    "link": "https://zhihu.com/question/41986174/answer/93491697"
  },
  {
    "question": "\n前端工程师和 UI 设计师该如何选择？\n",
    "author": "哥哥",
    "content": "\n\n<textarea hidden class=\"content\">首先得恭喜你，你对2门有密切关系的技能有了初步的了解。&lt;br&gt;&lt;br&gt;&lt;br&gt;无论是懂前端的设计还是懂设计的前端在任何公司都是很受欢迎的.因为你的本职工作的完成度和速度都讲比一般人好。&lt;br&gt;&lt;br&gt;现在放在你面前的有3条路。&lt;br&gt;&lt;br&gt;1.成为前端工程师。&lt;br&gt;&lt;br&gt;2.ui设计师。&lt;br&gt;&lt;br&gt;3.全栈设计师。&lt;br&gt;&lt;br&gt;成为前端设计师需要掌握的技能：&lt;br&gt;1.1精通html+css+css3，深刻的理解结构与css的配合，并不是会了一点padding，margin，canvan就代表会了。静态界面的能力表现在你代码的复用性，可修改性。例：整站中设计师给出的相同设计手法的模块，你只需要用一个div就搞定。这里需要前端对设计有一定的了解。移动web项目居多。&lt;br&gt;1.2精通js，jq。很多经常使用的判断，逻辑手写就行，速度快而且垃圾代码少。&lt;br&gt;1.3建立自己的js代码库，轮播，滚动，刷新，滑进滑出，弹出窗，摇一摇，动画，摄像头等都是会经常用到的找点轻便的代码自己拔下来，然后做成demo存在自己的电脑里面。&lt;br&gt;1.4深刻理解前台，专题，用户中心，管理系统，移动对c界面，移动专题等不同类型的界面可能你的写法会不一样。有的求快，有的要求复用，有的要求兼容，哪怕是快的写法和兼容的写法也会因为应用环境的关系改变。&lt;br&gt;1.5 懂一点设计，最高程度的去还原设计师的界面，理解为什么他需要移动1px的位置，理解为什么每个行距间距可能都是10px，这样你们会成为知己好友。&lt;br&gt;1.6了解一点后端的基础知识，至少知道他们在你的静态页面中那里需要插入动态数据，有哪些东西可以做成可配置的，有些页面跳转可能导致他们拿不到回值等。这样你会成为后端的好朋友。&lt;br&gt;1.7如果掌握了以上所说的知识，那么就有充足的时间去学习一些应用还不是很广泛的知识。提前挖好自己的井。列：phonegap，appcan它们可以将移动页面变客户端，并提供很多模拟客户端本地效果的js，虽然这种东西不可能代替原生可是某些二级页面或者企业项目可以用这种东西快速完成。ajax，你可以做到一些简单的数据传输。canvas配合的cocos2d，cocos3d（我们中国人的东西）等的动画js，常用于h5游戏，最近我发现企鹅的某些品牌移动web也用的类似的手法。当然还有很多，学习一样的过程中自然就会发现更多其他的。&lt;br&gt;1.8 前端工程师是设计与实现的枢纽，在职业划分中很重要也很专业。项目约复杂对专业性要求越高。是个需要很长很长时间去用心掌握的技能。&lt;br&gt;&lt;br&gt;成为设计师需要掌握的技能：&lt;br&gt;ps：我不知道lz理解的ui设计师和我理解是不是一样的。我自己根据行业来划分。平面设计师，互联网设计师，3d设计师，动画设计师，视频设计师，插画师，游戏场景，游戏人设。因为项目以及职业规划的不同可能掌握多种技能，或许有大神都能掌握并精通吧。最常见的还是2d 平面+互联网+插画。3d 3d+动画+视频 。绘画艺术 插画+场景+人物。的技能组合。&lt;br&gt;我来说说和我工作相关的2d类设计。&lt;br&gt;-----------------------------------------------------------&lt;br&gt;留个坑。&lt;br&gt;&lt;br&gt;1.1 2d类设计应用环境：网站设计，平台设计，专题设计，app设计，h5设计，海报，单页，画册，大轮播，ppt等其中分为2个大类互联网设计和平面设计。从某一大类入行，学到东西会不一样。相对来说平面设计对视觉的发展程度高于互联网设计，互联网设计的应用场景比平面多很多，入门级要求没有那么高.&lt;br&gt;&lt;br&gt;1.2 2大类中视觉呈现最难的是专题和海报。专题类又分游戏和电商比较难。平面类海报以汽车和房产略微高端。&lt;br&gt;&lt;br&gt;1.3 以纯视觉来说平面设计对视觉要求更高一点。平面设计是看的，互联网设计是用的。&lt;br&gt;&lt;br&gt;1.4 选择好最终的方向，以题主的ui设计来看应该是偏互联网设计的，平面设计没有ui的概念。&lt;br&gt;&lt;br&gt;1.5 互联网设计视觉以电商和游戏的专题及h5页面为最。交互以平台类和对c端app为最。重视觉先学好字形，场景，主视觉的搭配后学界面元素的合理排布以及引导用户视觉走向的方法。重交互先入一行了解业务需求，目标客户，与产品沟通的方法，界面的逻辑，易用，复用后学视觉呈现。&lt;br&gt;------------------------------------------------------------&lt;br&gt;留个坑，设计还没说完&lt;br&gt;&lt;br&gt;1.6 做出好的设计方法有千万种。做出不丑的设计倒是有一种方法。就是对技法的磨练。&lt;br&gt;&lt;br&gt;1.7 何为技法，我说一个集结为主题的游戏专题设计过程吧。从策划处拿到需求，设计找策划拿到需求。&lt;br&gt;1.7.1 找策划确认几个环节，主视觉是什么？头图是否会修改成批量广告图？有没有领导说过偏向于那种配色？这波活动目标群体是什么？活动的目的是为了提高注册还是概念宣传？等越细越好。每一句话代表一个页面元素。&lt;br&gt;1.7.2 确认好设计模块。头图，转化按钮，功能区，内容描述区，集结产品区，提交弹出区，底部。&lt;br&gt;1.7.3 根据游戏风格和目标用户订好整体颜色基调最好不超过2种预留一个颜色做辅助色。根据辅助色寻找或手画符合页面和游戏风格辅助元素用于描述区，产品区，提交区。保持风格统一。&lt;br&gt;1.7.3 头图分为三大块，字形，主视觉，场景。字形尽量做到有整体，有变化，有对比，有质感。场景分为前景中景后景为了提高界面的纵深层次与氛围。主视觉可是是字最好是人，如果是人就需要调整人物光源和阴影，如果是战斗类的图片最好选有张力的人物并加点动感的处理手法。选图是很重要的基础技能。&lt;br&gt;1.7.4 功能模块，图形化半写实化处理。列：抽奖用转盘，数字用进度条。在主元素外加点之前手机的细节元素组合成符合本页面的主题。&lt;br&gt;1.7.5 基本这2块做的不错，稿子也就过了，有更多的时间可以继续优化的其他模块，增加和减少元素让页面看的更舒服和易用。&lt;br&gt;1.7.6 上面所说的就是很少一部分的技法，色彩的搭配，对比的使用，界面的排版，明暗的选择等都是技法有一定的标准，学会了基础就更有能力去追求更难更高的。这个时候你已经知道要追求的是什么了。&lt;br&gt;1.8 ps，ai，painter这些工具只不过是你手中的笔。画，画的好不好，最终看的还是人，以及如何选择自己合适的笔。先玩好一个高级软件。我是以ps入门，3年后接触的ai，抓了个高手问清了区别半天也就会了。然后其他2d软件看看就能玩了。&lt;br&gt;1.9 色彩，结构，排版，对比，视觉引导，交互，整体感，选图，统一性这些以及这些的细分都属于技法，是基础，技法掌握的越多越好。&lt;br&gt;2.0 我的个人理解，2d设计是不分平面互联网的，也是不分行业的。基础是一样的，所以能做出的结果是一样的。&lt;br&gt;2.1 会一些手绘，无论是画插画还是2.5d图形，还是高阶的修图，调色都是决定你如何比一般设计师更优秀的关键因素。&lt;br&gt;2.2 设计是一个一生的职业，就算有一天不从事这一行了，可是从设计中学会的思维能帮助我们去解决一些事情。&lt;br&gt;2.3 设计很苦，入门很难，工资也没有研发高。一定要喜欢，不然最好不要选。我不想见到又一个刻苦的手艺人因为生活的压力而放弃。&lt;br&gt;&lt;br&gt;以上二种你都是专业性极高的科目，都需要花上整个青春去学习才能称之为优秀。可是一旦成功，你将变的无可替代，特别是设计。&lt;br&gt;&lt;br&gt;如果你不幸因为工作的关系不能丢下2个技能，那么你将和我一样苦b的选择了第三条路，全栈设计师，你需要花更多的时间去学习很多的东西，无时无刻担心被时代所淘汰。&lt;br&gt;&lt;br&gt;你会产品，没有产品优秀。&lt;br&gt;你会策划，没有策划优秀。&lt;br&gt;你会交互，没有交互优秀。&lt;br&gt;你会视觉，没有设计优秀。&lt;br&gt;你会前端，没有前端优秀。&lt;br&gt;你会ppt，文案，能与所有环节沟通顺畅，能独立做很多事。&lt;br&gt;你身边的人都说你很牛b。&lt;br&gt;可是这一身你将与大师无缘。&lt;br&gt;&lt;br&gt;当你花了很长时间（至少一万个小时吧）去做一样事情，你就会很优秀。&lt;br&gt;&lt;br&gt;路怎么走，想好再走。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n首先得恭喜你，你对2门有密切关系的技能有了初步的了解。 无论是懂前端的设计还是懂设计的前端在任何公司都是很受欢迎的.因为你的本职工作的完成度和速度都讲比一般人好。 现在放在你面前的有3条路。 1.成为前端工程师。 2.ui设计师。 3.全栈设计师。 成为…\n\n<a href=\"/question/21630068/answer/78622997\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2015-12-26\" target=\"_blank\" href=\"/question/21630068/answer/78622997\">编辑于 2015-12-28</a></p>\n\n",
    "link": "https://zhihu.com/question/21630068/answer/78622997"
  },
  {
    "question": "\n如何看待 HTML5 开源游戏引擎 Egret，HTML5 游戏开发的前景如何？\n",
    "author": "马鉴",
    "content": "\n\n<textarea hidden class=\"content\">-----------------------------2015年3月27日更新-----------------------------&lt;br&gt;2015年3月25日，Google做出了一个针对Dart的重大决定，原文在&lt;a href=&quot;//link.zhihu.com/?target=http%3A//news.dartlang.org/2015/03/dart-for-entire-web.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Dart News &amp;amp; Updates: Dart for the Entire Web&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;总结这篇文章，有几个要点：&lt;br&gt; Dart is now officially only a Coffescript alternative. Today, with this official announcement, the great dream of Dart as a &quot;javascript.next&quot; has been abandoned by the Dart team. Dart will never be integrated in Chrome. It will run only if transpiled to javascript with the dart2js compiler. &lt;br&gt;Dart已经正式成为Coffeescript的备选；&lt;br&gt;原本Dart team想把Dart语言变为&quot;javascript.next&quot;的伟大梦想基本被放弃；&lt;br&gt;Dart将不会整合进入Chrome；&lt;br&gt;Dart将只会专注于Dart to JS的编译器工作；&lt;br&gt;&lt;br&gt;片外话，Google和微软决定合作在AngularJS上使用TypeScript。原文在&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.computerweekly.com/blogs/open-source-insider/2015/03/microsoft-google-developer-connection-on-typescript-angular-2.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Microsoft &amp;amp; Google developer connection on TypeScript Angular 2&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;看到上述这些，只能说去年我们将Egret Engine选定在TypeScript上实属幸运之举。&lt;br&gt;---------------------------------------------------------------------------------&lt;br&gt;本来一直都在知乎潜水，但是看到楼上各位华山论剑点到了Egret，而且各持己见。我觉得我作为操盘Egret产品和技术的人，总归要回复几句，但是在诸位看官进入正文前，我先澄清一下，我的回复不会就以下几个问题展开讨论（为什么不讨论，相信各位资深看官都懂）：&lt;br&gt;1. HTML5有没有未来&lt;br&gt;2.开源好还是闭源好&lt;br&gt;3.Web，Hybrid和Native哪家好&lt;br&gt;4.2D没3D牛B&lt;br&gt;我想单就Egret本身而言，给出我关于以下几个问题的想法。&lt;br&gt;&lt;br&gt;1. Egret为何用TypeScript？为何不用Dart,AtScript或者其他？&lt;br&gt;TypeScript（TS）是一个严格意义上JavaScript超集，而且它目前的1.4版本的语言设计更接近于ES6，如果只是单纯认为TypeScript是微软出的一个开源语言的，请认真去&lt;a href=&quot;//link.zhihu.com/?target=http%3A//TypeScriptLang.org&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;TypeScriptLang.org&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;深入了解一下这个开源项目，了解以下微软的首席架构师为何会针对JavaScript做了这么个玩意。&lt;br&gt;那么为何Egret会选用TS呢？&lt;br&gt;首先，我们认为Dart的形式针对很多会使用JS或AS3的开发者而言（尤其是初学者这个最大的群体），学习的成本曲线较陡，而谷歌又是一个在技术上“太过”创新的公司，跟随一个有可能“朝令夕改”的技术去制作一款产品，而且将整个Egret的工具和服务的体系都悬于它之上，实在有些让我坐卧难寝。谷歌的AtScript的目标又过于宏大，瞄准了ES7，但是就目前的H5的技术推进而言，下一个JS的标准是看齐ES6。我们想做一款创新好用的产品，但是首先我考虑的是先要创作一个能用的产品。回到TS，它目前版本是1.4，即将在2015出现2.0，语言的结构设计无限趋近与ES6的标准，有了module，有了Proxy，还会有很多更类似于ActionScript3.0的语法。微软还提供了一个TS的编译器，可以在编译时为开发者提供很多帮助，而且我相信以微软的实力，做个编译器的水平还是很高的。目前的JavaScript恰恰有很多设计层面和开发层面的缺陷，TS都能或多或少的弥补这些问题。选用TS这个开源项目，能再现阶段很好的帮助JS开发者创作更有规模，更成熟，更有质量的游戏项目。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/a1b8c42d89b7f52b907bca5e6180332b_b.jpg&quot; data-rawwidth=&quot;1102&quot; data-rawheight=&quot;548&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1102&quot; data-original=&quot;https://pic4.zhimg.com/a1b8c42d89b7f52b907bca5e6180332b_r.jpg&quot;&gt;&lt;br&gt;其次，我们可以用TS基于Canvas来封装跟Flash ActionScript3.0的API结构设计，而且，我们仅仅封装对于游戏有帮助的部分。我在Adobe的10多年，全部铺在了Flash产品和技术上，Flash是个庞然大物，当初Flash团队之所以放弃AS3到AS4，AVM2到AVM3的项目，很大程度上是Core的部分太复杂了，经历了几代架构师和开发的调整，升级重构的成本已经无法估量，简单来说，就是当时没人改的了，所以，我们也不可能投入研发去自己做一个complier或者virtual machine去让AS3交叉编译为JS，君不见Adobe曾经宣布的AS3到JS的Falcon交叉编译项目，3年了都没动静，最后随同Flex一起捐给了Apache基金会么。Egret的API设计只是借鉴模仿了Flash AS3里跟游戏有关的API部分，做了减法，因为Egret Engine的定位不是想让开发者拿去既可以做广告，又可以做minisite，又可以做Video，又可以做游戏。我们只想在core上保持精简，如果开发者对不同的游戏类型有需求，比如状态机，物理，粒子等等，都做到了core之外的game library里。我2014年初离开Adobe时候，中国还有接近30万的Flash开发者，其中90%是游戏相关，这是一个宝贵的开发者社区群体，他们对于Web页游的开发和理解远远超过了任何使用其他web前端技术做网页游戏的群体。Egret使用TS，一方面是为了让JS游戏开发人员更舒服些，另一方面是考虑到Flash AS3这个开发群体，不争取的话，慢慢都流失掉了，很可惜。下图是我们Egret Engine在API设计上与Flash AS3 API上的对比。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/a51f202ea98fdde7461f2fbe2ef2fc22_b.jpg&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;518&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;800&quot; data-original=&quot;https://pic3.zhimg.com/a51f202ea98fdde7461f2fbe2ef2fc22_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;第三，我们使用TS，还有一个想法。将来的JS也是迟早会跟ES6看齐的，等将来所有浏览器都统一支持下一代JS的时候，现在使用Egret的开发者都已经熟悉了ES6那套做法，而Egret几乎可以0成本的直接将TS换为下一代JS的代码，平滑过渡所有开发者，比JS现有体系过渡到下一代的体系成本都低，更顺滑，何乐而不为？&lt;br&gt;&lt;br&gt;2.我们2014年一口气做了一堆工具，而没有一上来就做个集成的开发环境呢？&lt;br&gt;我在这里要回答的有2点。在技术和产品的进化上，第一条真理是：天下武功，唯快不破。第二条是，长鞭理论无处不在。第三条是：工作流是工作效率提升的根本。以上三条重要性依次降低，当一个CTO和CIO做了产品形态和研发的决策时，请倒推。好了，不讲大道理，说一说Egret的做法，Egret里我带的这帮人以前是做Flash Pro，Flash Builder，Flex GUI和众多工具及框架的技术，很有经验。但是经验不能完全当做生产力，经验不能当饭吃。经验告诉我们的是，要想在市场立足，在最短时间内做出来的产品的“核”也就是中心思想很重要，它不必拘泥于是否先要有个IDE来承载这种形态，市场需要的是最有效率的工作流，其次才是一招打遍天下的IDE集成开发环境，工作流的形态可以先出现在最初的若干款产品里，他们之间独立，小巧且专注，之间的数据通用且可以协作，对于研发而言，成本和风险均可控制。而IDE，功能强大且齐全，开发者需要的功能都具备，但是研发成本高，风险大，周期长。按照Egret Engine的双周迭代速度，团队潜心于一上来就要打造一个IDE的节奏是不对的。就好像你希望快走，但是又总有一条腿迈不出去的情况一样，这个节奏的结果就是容易扯着蛋。但是2015年，我们也会做出一个第一版的IDE，叫Egret Builder。&lt;br&gt;（&lt;i&gt;2015年1月26日小更新：Egret IDE形态将在Egret Wing这款可视化GUI编辑器上升级，也就是第一版Egret Wing是GUI编辑器，第二版将是全功能IDE，开发H5游戏的环境将和使用Flash Builder开发Flash项目一样）&lt;/i&gt;&lt;br&gt;&lt;br&gt;3.说了引擎和工具，Egret你们想怎么商业化呢？&lt;br&gt;商业化的问题其实在这里我不想说太多，我只想说，我们除了引擎，工具，我还让团队做了个运行时。也就是将来Egret的技术体系就是三位一体，Engine，Tools，Runtime。关于Runtime的细节，我也不想多谈，大家可以去&lt;a href=&quot;//link.zhihu.com/?target=http%3A//egret-labs.org&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;egret-labs.org&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;上看看Egret Runtime的产品介绍页，就明白我们为啥要针对H5做个Runtime。很多明眼人一看就会说，这不就是个Flash Player么？！答案是Yes，也是No。&lt;br&gt;Yes的部分是我们的团队原来都是做Flash的，受Flash影响颇深。Flash Player里具备很多优秀的Web游戏设计思想都是很赞的，我们就想我们可以用C/C++和OpenGL围绕着这些设计思想，再做一个取代webview的游戏加速器，让开发者基于Egret引擎开发的H5游戏，可以直接通过这个Runtime加速。No的部分是Flash Player是to C的，要让用户去装，而Egret Runtime是to B的，集成到平台app里，作为一个库，当用户在平台里玩游戏时候激活，玩家是不知道Egret Runtime存在的，我们也不打算对玩家去刷什么存在感。Egret Runtime是为了解决H5游戏性能，适配，系统底层调用和碎片化的问题而生的一个产品。在Egret Runtime上，我们跟各大平台的合作关系也很融洽，为什么？因为我们就是他们平台内部的一个组件，生命周期受平台app的控管，你激活我，我就干活，你移除了我，我就进入sleep模式，丝毫不影响人家平台业务，还能提高H5游戏的用户体验，也不骚扰用户，何乐而不为？尤其在Android上，一个activity级别的控件是让平台恐惧的，而一个view模式下的控件，平台是喜欢的。下图是Egret Runtime的HighLevel架构图：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/40b0016aa7af72edeb40ad7d6fcde824_b.jpg&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;591&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;800&quot; data-original=&quot;https://pic1.zhimg.com/40b0016aa7af72edeb40ad7d6fcde824_r.jpg&quot;&gt;看了这张架构图，我想诸位看官应该知道商业机会在哪里了。&lt;br&gt;&lt;br&gt;4.Egret现在就是个2D的，木有竞争力啊！&lt;br&gt;近一年内，Egret Engine的确是2D的，但是大伙不都是以进步的眼光看待事物么？Egret也一样，秉着天下武功，唯快不破的思路，我们规划了一下2015年的Egret Next，我们也在预研3D的部分，code name是HummingBird（请原谅我们团队就是喜欢鸟），更细节一点的计划图在这里：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/1f4705007133b3a08031bbf5bc54ccb1_b.jpg&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;523&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic2.zhimg.com/1f4705007133b3a08031bbf5bc54ccb1_r.jpg&quot;&gt;当然，我们现在已经开始做了一些了，不然我也不敢说出来找虐。&lt;br&gt;（&lt;i&gt;2015年1月26日小更新：Egret 3D第一版预研Demo视频，10万个Triangle级别，物理系统，可破坏的mesh，光效阴影，原生多点触摸及虚拟摇杆，可H5，原生，Runtime全支持，H5为WebGL，Runtime和原生为OpenGL es或DirectX(Windows移动平台））&lt;/i&gt;&lt;br&gt;&lt;a class=&quot;video-box&quot; href=&quot;//link.zhihu.com/?target=http%3A//v.youku.com/v_show/id_XODc3ODM0NjM2.html&quot; target=&quot;_blank&quot;&gt;              &lt;img class=&quot;thumbnail&quot; src=&quot;http://g2.ykimg.com/0100641F4654C1E8F16ABC01E87C36924746EA-7CB2-D918-57AF-E1C2A7A310E9&quot;&gt;&lt;span class=&quot;content&quot;&gt;                &lt;span class=&quot;title&quot;&gt;Egret第一版3D演示&lt;span class=&quot;z-ico-extern-gray&quot;&gt;&lt;/span&gt;&lt;span class=&quot;z-ico-extern-blue&quot;&gt;&lt;/span&gt;&lt;/span&gt;                &lt;span class=&quot;url&quot;&gt;&lt;span class=&quot;z-ico-video&quot;&gt;&lt;/span&gt;http://v.youku.com/v_show/id_XODc3ODM0NjM2.html&lt;/span&gt;              &lt;/span&gt;            &lt;/a&gt;&lt;br&gt;&lt;br&gt;5.说了半天，你们的套路到底是啥？&lt;br&gt;来看这张图，我们想为H5或者叫做使用H5(JS/TS)技术的web游戏开发者打造这么一套环境：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/1c40cfabebda86978fa63f7af1398313_b.jpg&quot; data-rawwidth=&quot;1000&quot; data-rawheight=&quot;482&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1000&quot; data-original=&quot;https://pic4.zhimg.com/1c40cfabebda86978fa63f7af1398313_r.jpg&quot;&gt;（当然，随着时间推移，这图里面的每个环节可能都会过期）&lt;br&gt;所以，说H5移动游戏也好，说Web移动游戏也好，说用脚本开发native也好，工作流齐全了，这些还算是问题么？&lt;br&gt;&lt;br&gt;好了，头一次在知乎写了这么多东西，希望对各位有所帮助，各位要吐槽的话，请扔鸡蛋，别扔板砖。&lt;br&gt;我自己作为Egret的技术管理人，在我10多年的职业生涯里，信奉这么几句话：&lt;br&gt;1. 永远不要基于现在去假设未来。&lt;br&gt;2. 永远不要尝试用一个成功打败另一个成功。&lt;br&gt;3. 预测未来的最好方式就是创造未来。&lt;br&gt;4. 就是干！&lt;br&gt;&lt;br&gt;谢谢各位，&lt;br&gt;7yue&lt;br&gt;接着潜水去了。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n<img src=\"https://pic4.zhimg.com/a1b8c42d89b7f52b907bca5e6180332b_200x112.jpg\" data-rawwidth=\"1102\" data-rawheight=\"548\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https://pic4.zhimg.com/a1b8c42d89b7f52b907bca5e6180332b_r.jpg\">\n-----------------------------2015年3月27日更新----------------------------- 2015年3月25日，Google做出了一个针对Dart的重大决定，原文在<a href=\"//link.zhihu.com/?target=http%3A//news.dartlang.org/2015/03/dart-for-entire-web.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dart News &amp; Updates: Dart for the Entire Web<i class=\"icon-external\"></i></a> 总结这篇文章，有几个要点： Dart is now officially only a Cof…\n\n<a href=\"/question/27078280/answer/35808030\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2014-12-25\" target=\"_blank\" href=\"/question/27078280/answer/35808030\">编辑于 2015-03-27</a></p>\n\n",
    "link": "https://zhihu.com/question/27078280/answer/35808030"
  },
  {
    "question": "\n为什么部分开发工程师不喜欢调节界面的 UI 细节？\n",
    "author": "张克军",
    "content": "\n\n<textarea hidden class=\"content\">设计的质量决定我调它的热情。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n设计的质量决定我调它的热情。\n\n<a href=\"/question/23509846/answer/24805702\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/23509846/answer/24805702\">发布于 2014-04-22</a></p>\n\n",
    "link": "https://zhihu.com/question/23509846/answer/24805702"
  },
  {
    "question": "\n2016该如何学习nodejs？\n",
    "author": "David",
    "content": "\n\n<textarea hidden class=\"content\">绝对的良心课程：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;node | 天码营&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;p&gt;这个课程基于NodeJS和Express框架，通过实例的项目案例，你可以学到开发一个成熟Web应用所需的所有关键知识和经验：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;开发环境的建立与项目管理：Git, npm, Grunt&lt;/li&gt;&lt;br&gt;&lt;li&gt;JavaScript编程基础：基本语法、面向对象特性&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;前端开发技术：HTML、CSS、Bootstrap和JavaScript基础&lt;/li&gt;&lt;br&gt;&lt;li&gt;Express框架：URL路由、模板、表单、Session、拦截器等&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;数据访问：MongoDB&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;应用的测试和生产环境的部署&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;包含以下内容：&lt;br&gt;&lt;br&gt;第1课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/http&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTTP 协议&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第2课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第3课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/css&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;CSS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第4课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/bootstrap&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bootstrap&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第5课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/javascript&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Javascript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第6课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/client-side-js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;客户端脚本&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第7课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/npm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Node.js依赖管理: npm&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第8课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/express-js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Express.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第9课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/form-submit&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;表单的提交&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第10课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/form-validate&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;表单的验证&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第11课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/db&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;数据库&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第12课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/session&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Session&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第13课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/smtp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;邮件服务&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第14课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/email-id&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;邮箱身份绑定&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第15课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/web-form&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;深入web表单&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第16课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/js-lib&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;使用前端工具&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第17课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/hbs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Handlebars&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第18课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/partial&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;模板片段&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第19课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/populate&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;模型关联&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第20课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/config&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;配置管理&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第21课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/grunt&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Grunt 入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第22课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/auto-build&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;自动构建&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;第23课 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//course.tianmaying.com/node/lesson/whats-more&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;还能做什么？&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n绝对的良心课程：<a href=\"//link.zhihu.com/?target=http%3A//course.tianmaying.com/node\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">node | 天码营<i class=\"icon-external\"></i></a> 这个课程基于NodeJS和Express框架，通过实例的项目案例，你可以学到开发一个成熟Web应用所需的所有关键知识和经验：开发环境的建立与项目管理：Git, npm, Grunt JavaScript编程基础：基本语法、面向对象特性前端开发技术：HT…\n\n<a href=\"/question/40390515/answer/88945261\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" target=\"_blank\" href=\"/question/40390515/answer/88945261\">发布于 2016-03-02</a></p>\n\n",
    "link": "https://zhihu.com/question/40390515/answer/88945261"
  },
  {
    "question": "\n如何优雅地判断 N 个布尔值是否全部相等？\n",
    "author": "Milo Yip",
    "content": "\n\n<textarea hidden class=\"content\">&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;\n&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;----&lt;br&gt;更新：没想到有这么多赞，在 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/23981897&quot; class=&quot;internal&quot;&gt;知乎专栏&lt;/a&gt; 解释一下。</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\nreturn arr.indexOf(!arr[0])&lt;0;\n---- 更新：没想到有这么多赞，在 <a href=\"https://zhuanlan.zhihu.com/p/23981897\" class=\"internal\">知乎专栏</a> 解释一下。\n\n<a href=\"/question/52881172/answer/133098826\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-11-26\" target=\"_blank\" href=\"/question/52881172/answer/133098826\">编辑于 2016-12-20</a></p>\n\n",
    "link": "https://zhihu.com/question/52881172/answer/133098826"
  },
  {
    "question": "\n一纸文凭对于程序员有多重要？\n",
    "author": "洋流",
    "content": "\n\n<textarea hidden class=\"content\">看到有人不太接受985211的人数，我补充说明一下吧&lt;br&gt;互联网行业招人范围远不止是计算机，软件，信科这种专业。&lt;br&gt;可能我所在的学校特征尤为明显，基本上只要是工科的学生，哪个不会写两行代码的？这些人都会投简历的。&lt;br&gt;再加上每个人真正准备工作的人可能都会投上几十份简历。分配到题主所谓的大公司上，我觉得只用了“上千”这个词应该并不过分吧？&lt;br&gt;在投简历阶段，这些人都是竞争者。尤其是有些学校的通讯，自动化等专业，和以上三者对比也不虚。这人数我只能说我已经往少了算了。&lt;br&gt;&lt;br&gt;&lt;br&gt;另外吐槽一句。第一次真切的感受到了轮子哥点赞的效果。。&lt;br&gt;—————————————————第一次回答—————————————————————&lt;br&gt;前两天看了个故事：&lt;br&gt;校招期间收到了几万份简历，985211筛过之后还有上千份。&lt;br&gt;&lt;br&gt;你觉得上千个人能面试的过来么？这状况下还得继续筛。&lt;br&gt;人家选择多的话，看不上你多正常？&lt;br&gt;你要是有著名产品拿得出手，自然可以屏蔽掉学历证明你的能力，然而你有吗？&lt;br&gt;没有的话，你觉得人家为什么要在那么多可选项里意识到你有能力呢。。&lt;br&gt;当然如果默认认为有学历=没能力。那也没别的话好说了。&lt;br&gt;&lt;br&gt;先声明我不是歧视什么，不过站在别人角度考虑更容易得到问题的原因</textarea>\n\n\n<div class=\"zh-summary summary clearfix\">\n\n看到有人不太接受985211的人数，我补充说明一下吧 互联网行业招人范围远不止是计算机，软件，信科这种专业。 可能我所在的学校特征尤为明显，基本上只要是工科的学生，哪个不会写两行代码的？这些人都会投简历的。 再加上每个人真正准备工作的人可能都会投…\n\n<a href=\"/question/50879588/answer/123167777\" class=\"toggle-expand\">显示全部</a>\n\n</div>\n\n\n\n<p class=\"visible-expanded\"><a itemprop=\"url\" class=\"answer-date-link meta-item\" data-tooltip=\"s$t$发布于 2016-09-22\" target=\"_blank\" href=\"/question/50879588/answer/123167777\">编辑于 2016-09-23</a></p>\n\n",
    "link": "https://zhihu.com/question/50879588/answer/123167777"
  }
]