<!DOCTYPE html>
<html lang="zh-CN" dropEffect="none" class="no-js topic-pages">
<head>
<meta charset="utf-8" />

<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
<meta name="renderer" content="webkit" />
<meta http-equiv="X-ZA-Response-Id" content="0013aff653637d48">
<meta http-equiv="X-ZA-Experiment" content="default:None">

<title>前端开发 - 话题精华 - 知乎</title>

<meta name="apple-itunes-app" content="app-id=432274380" />


<meta name="description" content="Web 建站技术中，HTML、HTML5、XHTML、CSS、SQL、JavaScript、PHP、ASP.NET、Web Services 是什么？120837个最新问答，点击查看更多>>" />

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta http-equiv="mobile-agent" content="format=html5;url=https://www.zhihu.com/topic/19550901/top-answers">
<meta id="znonce" name="znonce" content="2edab3693d994cfbb843c013e577ddf4">



<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-152.87c020b9.png" sizes="152x152">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-120.496c913b.png" sizes="120x120">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-76.dcf79352.png" sizes="76x76">
<link rel="apple-touch-icon" href="https://static.zhihu.com/static/revved/img/ios/touch-icon-60.9911cffb.png" sizes="60x60">


<link rel="shortcut icon" href="https://static.zhihu.com/static/favicon.ico" type="image/x-icon">

<link rel="search" type="application/opensearchdescription+xml" href="https://static.zhihu.com/static/search.xml" title="知乎" />
<link rel="stylesheet" href="https://static.zhihu.com/static/revved/-/css/z.96020364.css">





<!--[if lt IE 9]>
<script src="https://static.zhihu.com/static/components/respond/dest/respond.min.js"></script>
<link href="https://static.zhihu.com/static/components/respond/cross-domain/respond-proxy.html" id="respond-proxy" rel="respond-proxy" />
<link href="/static/components/respond/cross-domain/respond.proxy.gif" id="respond-redirect" rel="respond-redirect" />
<script src="/static/components/respond/cross-domain/respond.proxy.js"></script>
<![endif]-->
<script src="https://static.zhihu.com/static/revved/-/js/instant.14757a4a.js"></script>

<link rel="canonical" href="https://www.zhihu.com/topic/19550901" />

</head>

<body class="zhi ">




<div role="navigation" class="zu-top" data-za-module="TopNavBar">
<div class="zg-wrap modal-shifting clearfix" id="zh-top-inner">
<a href="/" class="zu-top-link-logo" id="zh-top-link-logo" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_zhihu_logo">知乎</a>

<div class="top-nav-profile">
<a href="/people/liu-yuan-39-9" class="zu-top-nav-userinfo ">
<span class="name">文刀水原</span>
<img class="Avatar" src="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_s.png" srcset="https://pic2.zhimg.com/56a9754ca686ba7d3b1e725c6452ccd1_xs.png 2x" alt="文刀水原" />
<span id="zh-top-nav-new-pm" class="zg-noti-number zu-top-nav-pm-count"
style="visibility:hidden" data-count="0">

</span>
</a>
<ul class="top-nav-dropdown" id="top-nav-profile-dropdown">
<li>
<a href="/people/liu-yuan-39-9">
<i class="zg-icon zg-icon-dd-home"></i>我的主页
</a>
</li>

<li>
<a href="/inbox">
<i class="zg-icon zg-icon-dd-pm"></i>私信
<span id="zh-top-nav-pm-count" class="zu-top-nav-pm-count zg-noti-number"
style="visibility:hidden" data-count="0">

</span>
</a>
</li>
<li>
<a href="/settings">
<i class="zg-icon zg-icon-dd-settings"></i>设置
</a>
</li>
<li>
<a href="/logout">
<i class="zg-icon zg-icon-dd-logout"></i>退出
</a>
</li>
</ul>

</div>



<button class="zu-top-add-question" id="zu-top-add-question">提问</button>


<div role="search" id="zh-top-search" class="zu-top-search">
<form method="GET" action="/search" id="zh-top-search-form" class="zu-top-search-form">



<input type="hidden" name="type" value="content">
<label for="q" class="hide-text">知乎搜索</label><input type="text" class="zu-top-search-input" id="q" name="q" autocomplete="off" value="" maxlength="100" placeholder="搜索你感兴趣的内容...">
<button type="submit" class="zu-top-search-button"><span class="hide-text">搜索</span><span class="sprite-global-icon-magnifier-dark"></span></button>
</form>
</div>



<div id="zg-top-nav" class="zu-top-nav">
<ul class="zu-top-nav-ul zg-clear">

<li class="zu-top-nav-li " id="zh-top-nav-home">
<a class="zu-top-nav-link" href="/" id="zh-top-link-home" data-za-c="view_home" data-za-a="visit_home" data-za-l="top_navigation_home">首页</a>
</li>



<li class="top-nav-topic-selector zu-top-nav-li current" id="zh-top-nav-topic">
<a class="zu-top-nav-link" href="/topic" id="top-nav-dd-topic">话题</a>
</li>

<li class="zu-top-nav-li " id="zh-top-nav-explore">
<a class="zu-top-nav-link" href="/explore">发现</a>
</li>

<li class="top-nav-noti zu-top-nav-li ">
<a class="zu-top-nav-link" href="javascript:;" id="zh-top-nav-count-wrap" role="button"><span class="mobi-arrow"></span>消息</a>
</li>



</ul>
<div class="zu-top-nav-live zu-noti7-popup zg-r5px no-hovercard" id="zh-top-nav-live-new" role="popup" tabindex="0">
<div class="zu-top-nav-live-inner zg-r5px">
<div class="zu-top-live-icon">&nbsp;</div>
<div class="zu-home-noti-inner" id="zh-top-nav-live-new-inner">
<div class="zm-noti7-popup-tab-container clearfix" tabindex="0">
<button class="zm-noti7-popup-tab-item message">
<span class="icon">消息</span>
</button>
<button class="zm-noti7-popup-tab-item user">
<span class="icon">用户</span>
</button>
<button class="zm-noti7-popup-tab-item thanks">
<span class="icon">赞同和感谢</span>
</button>
</div>
</div>
<div class="zm-noti7-frame-border top"></div>
<div class="zm-noti7-frame">
<div class="zm-noti7-content message">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content user" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
<div class="zm-noti7-content thanks" style="display:none;">
<div class="zm-noti7-content-inner">
<div class="zm-noti7-content-body">
<div class="zm-noti7-popup-loading">
<span class="noti-spinner-loading"></span>
</div>
</div>
</div>
</div>
</div>
<div class="zm-noti7-frame-border bottom"></div>
<div class="zm-noti7-popup-footer">
<a href="/notifications" class="zm-noti7-popup-footer-all zg-right">查看全部 &raquo;</a>
<a href="/settings/notification" class="zm-noti7-popup-footer-set" title="通知设置" ><i class="zg-icon zg-icon-settings"></i></a>
</div>
</div>
</div>

</div>

</div>
</div>


<div class="zu-global-notify" id="zh-global-message" style="display:none">
<div class="zg-wrap">
<div class="zu-global-nitify-inner">
<a class="zu-global-notify-close" href="javascript:;" title="关闭" name="close">x</a>
<span class="zu-global-notify-icon"></span>
<span class="zu-global-notify-msg"></span>
</div>
</div>
</div>




<div class="zg-wrap zu-main clearfix "  role="main">
<div class="zu-main-content">
<div class="zu-main-content-inner">


<div itemscope itemtype="https://schema.org/CreativeWork/Topic">
<div class="topic-avatar" itemprop="image" itemscope itemtype="http://schema.org/ImageObject">
<div>
<a class="zm-entry-head-avatar-link" href="/topic/19550901" id="zh-avartar-edit-form">
<img alt="前端开发" src="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_m.jpg" class="zm-avatar-editor-preview"></a>
<meta itemprop="image" content="https://pic1.zhimg.com/v2-8e66233f5558e741bad3a8c50b9566c8_l.jpg" />
</div>

<span class="zm-entry-head-avatar-edit-button">修改</span>

</div>
<div class="topic-info">
<div class="topic-name" id="zh-topic-title">
<h1 class="zm-editable-content" data-disabled="1">前端开发</h1>
<div class="zm-editable-editor-wrap" style="display:none">
<input type="text" class="zm-editable-editor-input zg-form-text-input" style="width:150px" />
<span class="zm-command">
<a href="javascript:;" name="save" class="zg-btn-blue" style="margin:0 15px;">完成</a>
<a href="javascript:;" name="cancel" class="zm-command-cancel">取消</a>
</span>
</div>
</div>
<a href="#" class="meta-item share-button zg-right" name="share"><i class="z-icon-share"></i>分享</a>


<div class="zm-topic-topbar">
<div class="zm-topic-topbar-nav clearfix">


<ul class="zm-topic-topbar-nav-list zg-left clearfix">






<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/hot">动态</a>
</li>





<li class="zm-topic-topbar-nav-list-item current">
<span>精华</span>
</li>





<li class="zm-topic-topbar-nav-list-item">
<a class="zg-link-litblue-normal" href="/topic/19550901/unanswered">等待回答</a>
</li>



</ul>

</div>

</div>
</div>
<div class="zm-topic-list-container" itemprop="hasPart" itemscope itemtype="http://schema.org/ItemList/QuestionList">
<div class="zu-top-feed-list" id="zh-topic-top-page-list">
<meta itemprop="questionCount" content="36909" />
<meta itemprop="topAnswerCount" content="1000" />
<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="81" data-type="Answer">
<link itemprop="url" href="/question/19562698/answer/89480175">
<meta itemprop="answer-id" content="31227619" />
<meta itemprop="answer-url-token" content="89480175" />
<meta itemprop="answerCount" content="59" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/19562698" target="_blank" data-id="5031" data-za-element-name="Title">
关于 JavaScript 的好书有哪些？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/19562698/answer/89480175">
<!-- <meta itemprop="answer-id" content="31227619">
<meta itemprop="answer-url-token" content="89480175"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>910</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">910</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$ahkari"
target="_blank" href="/people/ahkari"
>Ahkari</a></span><span title="好无聊好想要个单马尾斜刘海红眼镜萝莉啊。" class="bio">
好无聊好想要个单马尾斜刘海红眼镜萝莉啊。
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="910" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">910</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="5031" data-action="/answer/content" data-author-name="Ahkari" data-entry-url="/question/19562698/answer/89480175">

<textarea hidden class="content">这个问题我有发言权。&lt;br&gt;因为我就是照着知乎前人推荐的书一本本看过来的。&lt;br&gt;&lt;br&gt;这是我这一年多点看的书。少了三四本书，给别人借走了。&lt;br&gt;&lt;img data-rawheight=&quot;1001&quot; data-rawwidth=&quot;1334&quot; src=&quot;https://pic3.zhimg.com/ab96355e432a7dd5aaa784c1a8fdb0ea_b.jpg&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1334&quot; data-original=&quot;https://pic3.zhimg.com/ab96355e432a7dd5aaa784c1a8fdb0ea_r.jpg&quot;&gt;（上面的书并没有全部看完，有些昏昏欲睡的书可能需要我境界再高点才适合看。顺便请无视那本乱入的Android入门）&lt;br&gt;&lt;br&gt;所谓的和书一拍即合相见恨晚，其实就是在合适的阶段遇到了合适的书。&lt;br&gt;&lt;br&gt;所以我会按照时间顺序来推荐那些对我影响很大的书，我会给出在那个阶段的思考和这本书对我的启发。&lt;br&gt;希望你能和我一样在合适的阶段遇上合适的书。&lt;br&gt;&lt;br&gt;---------------------------------------------------------------&lt;br&gt;&lt;br&gt;3.7 晚 修正了一大堆拼写错误，让语言得体了一点。&lt;br&gt;&lt;br&gt;---------------------------------------------------------------&lt;br&gt;&lt;br&gt;&lt;b&gt;正文&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;1. JavaScript DOM 编程艺术&lt;/b&gt;&lt;br&gt;&lt;img data-rawheight=&quot;835&quot; data-rawwidth=&quot;664&quot; src=&quot;https://pic4.zhimg.com/b7f4d82817ce72c201d79b38b99450e3_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;664&quot; data-original=&quot;https://pic4.zhimg.com/b7f4d82817ce72c201d79b38b99450e3_r.png&quot;&gt;&lt;br&gt;这本书作为被大家推荐的最多的前端入门书籍是有道理的。&lt;br&gt;他能真正让大家了解dom脚本编程，或是说前端编程技术背后的思路和原则。&lt;br&gt;&lt;br&gt;对于初学者来说，这本书没有任何门槛，按部就班跟着书籍实例编写代码即可。&lt;br&gt;我们会知晓如何对浏览器元素操作和掌控，会学会如何实现简单的页面效果。&lt;br&gt;这种简单易得的成就感是一个编程语言入门时最难能可贵的体验。&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;这本书虽然简单，但是能让人快速对前端产生兴趣和成就感。&lt;br&gt;不过后续学习jquery的时候可能会产生挫败感。原生js dom操作的成就感会被jquery便捷的API所彻底打败。所以一定要恰当的调整心态，转换思维方式，正确认识到jquery和原生js分别的优劣之处。&lt;br&gt;在熟练使用jquery后还能想起来翻看这本书，找到之前未曾发现的闪光点，就是入门成功了。&lt;br&gt;&lt;br&gt;&lt;b&gt;2. JavsScript高级程序设计（第三版）&lt;/b&gt;&lt;br&gt;&lt;img data-rawheight=&quot;802&quot; data-rawwidth=&quot;637&quot; src=&quot;https://pic2.zhimg.com/fc1b55bb1c12b1f274ec6cd0f4fb9e91_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;637&quot; data-original=&quot;https://pic2.zhimg.com/fc1b55bb1c12b1f274ec6cd0f4fb9e91_r.png&quot;&gt;&lt;br&gt;无论何时，这都是学习js最好的书。&lt;br&gt;&lt;br&gt;如果说其他的书都是在合适的阶段会有不一般的体验。&lt;br&gt;这本书就是无论什么阶段，都够你感悟一番的。&lt;br&gt;&lt;br&gt;当你看完了市场上js相关（不包括框架类库的最佳实践类）的所有书籍。你再回去看这本书，也会发现其实95%的内容早就写在这本书里了，只不过你当时等级不够，根本没有意识到。&lt;br&gt;&lt;br&gt;这本书排版舒服，翻译得体，内容丰富，语言流畅。涵盖了js语法（面向对象，闭包作用域等），js使用（dom，bom，html5API），编程实践（高阶函数，编码规范）等程序员使用javascript时会遇到的大部分问题。&lt;br&gt;&lt;br&gt;（今天在上海面试了一天。大部分很顺利，只是有几个比较偏的问题没回答好。晚上回去之后一翻高程三，果然在里面都写得明明白白的。不得不服。）&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;人们喜欢把他和犀牛书拿一起推荐，不过就我看来，他们完全不是一个可读性上的。&lt;br&gt;一个是课本一个是字典。而且还是佶屈聱牙的字典。&lt;br&gt;&lt;br&gt;所以无论何时我都会把高程三排在js推荐书籍的第一位。&lt;br&gt;&lt;br&gt;&lt;b&gt;3. 锋利的jQuery&lt;/b&gt;&lt;br&gt;图忘了拍了，就不补了。&lt;br&gt;&lt;br&gt;这本书如果紧接着dom编程看，会如我我说的那样瞬间摧毁你的小小的成就感。&lt;br&gt;因为这本工具书级别的书简单暴力到不给你思考什么“平稳退化”，“js动画计时器”这些dom编程中提及的问题，就直接就甩出一大片简单有效的jqueryAPI颠覆你的世界观。&lt;br&gt;&lt;br&gt;这本书是如此的易懂以至于看完之后瞬间就觉得自己能把web玩出一片花来了。&lt;br&gt;&lt;br&gt;作为工具书级别的书，或是说学习jqueryAPI的书，这是首选。&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;熟悉jquery是每个前端必须要会的事。&lt;br&gt;只是不要被Jquery的便捷迷惑，而抛离原生js，把原生js贬得一文不值，否则后面会付出昂贵的代价。&lt;br&gt;&lt;br&gt;&lt;b&gt;4. 学习Javascript数据结构与算法&lt;/b&gt;&lt;br&gt;&lt;img data-rawheight=&quot;842&quot; data-rawwidth=&quot;666&quot; src=&quot;https://pic2.zhimg.com/2c78cec87eeb6b619514e5a56552b459_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;666&quot; data-original=&quot;https://pic2.zhimg.com/2c78cec87eeb6b619514e5a56552b459_r.png&quot;&gt;&lt;br&gt;这本书相对是一本冷门书。&lt;br&gt;&lt;br&gt;为什么我会推荐他，是因为他能解决每个半路出家的js程序员都曾思考过的一些问题：&lt;br&gt;1. 我们的数组Array这么强大，要栈Stack，队列Queue这些功能少，半半拉拉的东西干什么呢？&lt;br&gt;2. 我们学的数据结构搞来搞去好像也就那些玩意，为什么被大家这么推崇，还要分门别类讨论呢？&lt;br&gt;&lt;br&gt;所以这本书只是为何告诉你上面这些问题的答案：&lt;br&gt;1. 栈和队列本来就没有Array功能强。没有Stack和Queue类只是因为ES5不去实现它而已。作为一种相互之间存在一种或多种特定关系的数据集合，其存在意义是不应该被其功能强大与否来决定的。&lt;br&gt;2. 数据结构和编程语言无关。语言死了，他们会在下一门语言里重生。哪怕计算机死了，他们都会在下一个概念体里重生。&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;跟着书本把这里面的结构全部敲一遍，快的话一天就能搞定。&lt;br&gt;从此你便再不怕惧怕js相关的简单数据结构问题。&lt;br&gt;但是，遇上高级的树，图等问题该跪还是要跪。因为这本书虎头蛇尾，后面的高级点的数据结构介绍的不够深。&lt;br&gt;适合经常反思“它从哪里来，要到哪里去？”的js程序员，或后悔以前数据结构没好好学的前端同学。&lt;br&gt;&lt;br&gt;&lt;b&gt;5. JavaScript设计模式与开发实践&lt;/b&gt;&lt;br&gt;&lt;img data-rawheight=&quot;804&quot; data-rawwidth=&quot;639&quot; src=&quot;https://pic1.zhimg.com/6d3414aab2e1b221b864714118a2eaf0_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;639&quot; data-original=&quot;https://pic1.zhimg.com/6d3414aab2e1b221b864714118a2eaf0_r.png&quot;&gt;&lt;br&gt;我认为腾讯AlloyTeam的这本书对我帮助媲美高程三。&lt;br&gt;&lt;br&gt;那时候我恰好换公司，从原来的开发方式切换成另一种完全不同的开发方式，让我很不适应。&lt;br&gt;&lt;br&gt;这本书及时的蹦出来，他拿实际的应用场景举例，告诉你不同js项目里如何共通设计模式，还极其详细的介绍了函数的高级用法，能让你对js高阶函数的认知上升一个台阶。&lt;br&gt;难能可贵的是他还拿java作为静态语言的类比。从语言统一高度来给你分析这些问题。&lt;br&gt;&lt;br&gt;和上本介绍数据结构的书一样，这本书有的放矢，能完美的解决对js设计模式有疑问的同学的实际问题。&lt;br&gt;他比上本书更深刻，更易读，也更贴近实践。&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;这是本适合反复阅读的书籍。&lt;br&gt;如果你的思路能根据应用场景自动切换到最适合的设计模式，说明你已吃透这本书了。&lt;br&gt;&lt;br&gt;&lt;b&gt;6. 高性能JavaScript&lt;/b&gt;&lt;br&gt;&lt;img data-rawheight=&quot;804&quot; data-rawwidth=&quot;636&quot; src=&quot;https://pic2.zhimg.com/e06c540d515db81c62dd333c0b3350fd_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;636&quot; data-original=&quot;https://pic2.zhimg.com/e06c540d515db81c62dd333c0b3350fd_r.png&quot;&gt;作为Orelly唯一一本我确实认可的javascript相关的书。&lt;br&gt;他摒弃了Orelly系列所有我不喜欢的特点：&lt;br&gt;老外的聊天说教式阅读体验，样例不够丰富，排版单一，破事水等。&lt;br&gt;&lt;br&gt;他的优点如下：&lt;br&gt;1. 情景丰富，基本涉及所有js性能优化的场景。还会给出不同场景的实际测试数据，真实可信。我们在阅读这些场景实例的同时也丰富了自己js的使用经验。&lt;br&gt;2.  给出了很多看似&quot;旁门左道&quot;的解决方案，而这些冷门的解决方案恰恰是有些人死活百度不到的真正能解决问题的最优解。&lt;br&gt;3. 在说问题的同时说原理，深入浅出，游刃有余。所以这本书不仅仅是一本介绍js性能相关的书，而是一本涉及浏览器原理，js解析原理，用户体验等知识的javascript最佳注解。&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;建议和高程三一起看，可以算是高程三阅读的最佳伴侣。&lt;br&gt;高程三告诉你“他叫什么，他什么样”，&lt;br&gt;这本书就告诉你“他为什么”，“他该怎样”。&lt;br&gt;&lt;br&gt;所以，当别人还在为某些问题绞尽脑汁的时候，你已经从起点上干翻他们了。&lt;br&gt;&lt;br&gt;&lt;b&gt;7. 你不知道的JavaScript（YOU DONT KNOW JAVASCRIPT）&lt;/b&gt;&lt;br&gt;&lt;img data-rawheight=&quot;805&quot; data-rawwidth=&quot;631&quot; src=&quot;https://pic3.zhimg.com/923e5074812dab45dbee4759530097f6_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;631&quot; data-original=&quot;https://pic3.zhimg.com/923e5074812dab45dbee4759530097f6_r.png&quot;&gt;大名鼎鼎的Github开源的书籍。&lt;br&gt;&lt;br&gt;为了他的名气我也得买一本实体书来拜读下。&lt;br&gt;这本是上卷，只涉及作用域和闭包，this和对象原型两部分。&lt;br&gt;&lt;br&gt;不过其深入程度是其他js书籍难以企及的。&lt;br&gt;可以说，这已经是大部分前端程序员对js语法可以深入了解的最底层了，再往下就直面编译原理了。&lt;br&gt;&lt;br&gt;阅读建议：&lt;br&gt;用于提升自己的js语法的理解等级。&lt;br&gt;对于进入工作第二年的想深入理解js语法的同学来说特别有效。&lt;br&gt;&lt;br&gt;&lt;br&gt;=================================&lt;br&gt;&lt;br&gt;上面就是这一年多看的我认为不错的书了。&lt;br&gt;&lt;br&gt;如果有基本完全一致的同学，我们可以交流下心得~~</textarea>


<div class="zh-summary summary clearfix">
<img data-rawheight="1001" data-rawwidth="1334" src="https://pic3.zhimg.com/ab96355e432a7dd5aaa784c1a8fdb0ea_200x112.jpg" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic3.zhimg.com/ab96355e432a7dd5aaa784c1a8fdb0ea_r.jpg">
这个问题我有发言权。 因为我就是照着知乎前人推荐的书一本本看过来的。 这是我这一年多点看的书。少了三四本书，给别人借走了。 （上面的书并没有全部看完，有些昏昏欲睡的书可能需要我境界再高点才适合看。顺便请无视那本乱入的Android入门） 所谓的和书…

<a href="/question/19562698/answer/89480175" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-03-06" target="_blank" href="/question/19562698/answer/89480175">编辑于 2016-03-07</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-5031"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>101 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="82" data-type="Answer">
<link itemprop="url" href="/question/28860309/answer/42522021">
<meta itemprop="answer-id" content="12402042" />
<meta itemprop="answer-url-token" content="42522021" />
<meta itemprop="answerCount" content="55" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/28860309" target="_blank" data-id="3727101" data-za-element-name="Title">
前端工程师是一个无关紧要的职位吗？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/28860309/answer/42522021">
<!-- <meta itemprop="answer-id" content="12402042">
<meta itemprop="answer-url-token" content="42522021"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>887</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">887</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$_haochuan"
target="_blank" href="/people/_haochuan"
>haochuan</a></span><span title="Javascripter | Node JSer | Metal党" class="bio">
Javascripter | Node JSer | Metal党
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="887" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">887</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3727101" data-action="/answer/content" data-author-name="haochuan" data-entry-url="/question/28860309/answer/42522021">

<textarea hidden class="content">看了知乎上这么多讨论关于前端这个职位的问题, 什么关于前端难不难, 好不好找工作, 有没有用, 好不好学, 好不好转其他的职位, 待遇好不好等等的问题, 想谈谈自己对前端的看法.&lt;br&gt;&lt;br&gt;到底所谓的前端都应该干些什么都应该会写什么呢? 本人身边有太多的人会切几张图, 会用jQuery做个特效, 会从bootstrap里复制粘贴, 会用html游戏框架写个flappy bird, 会在Github里找各种模板自和库拼拼凑凑, 就口口声声大言不惭的称自己为前端工程师. 说什么前端好简单啊, 前端找工作好难啊, 没有出路啊, 想转行啊. 甚至有更多的人还不明白什么是HTML, 就到处问(知乎里尤其多)怎么开始学前端啊, 前端前景好不好啊. 依照本人的经验, 什么东西难不难, 什么东西好不好, 可不是这样问出来的. 我相信在这在这种网络信息资源及其丰富的年代, 花个半小时自行搜索一下你应该可以得到你想要的答案.&lt;br&gt;&lt;br&gt;好了言归正传, 前端工程师真的是一个无关紧要的职位么? 我们先来看看前端工程师都要做些什么, 看看那些称自己是'所谓'的前端同学们都能走到哪一步.&lt;br&gt;&lt;br&gt;这里直接跳过最基本的HTML+CSS+JS, 包括但不仅限于:&lt;br&gt;- HTML各种element怎么用什么时候用?&lt;br&gt;- Event? EventLitsener? HTML中触发event以及JS中处理event?&lt;br&gt;- DOM tree? 添加? 修改? 删除? 搜索? 遍历? 选择? children? parent? sibling?&lt;br&gt;- 什么是window? 什么是document?&lt;br&gt;- JS基本语法? function? loop&amp;amp;condition? scope&amp;amp;closure? array&amp;amp;object? this?&lt;br&gt;- CSS 什么是box modal? position? float? 各种选择器(*, &amp;gt;, ~, :nth-child)? &lt;br&gt;&lt;br&gt;如果看到这里有任何一项完全没听说过没用过, 或者查各种文档后'大概'知道怎么用的同学们, 很遗憾, 你们现在算不上是一个合格的前端工程师. 如果不是, 请继续.&lt;br&gt;&lt;br&gt;### 程序员的基本素质和知识&lt;br&gt;&lt;br&gt;(有些人觉得前端不同于传统意义上的程序员, 这点我十分不赞同. 或许把前端工程师叫做JS程序员更加贴切, HTML和CSS就好比其他语言中的UI库)-&lt;br&gt;&lt;br&gt;- 高数, 基本的概率统计 (连简单的微分方程都不会解的朋友们就不要称自己为前端人员了!)&lt;br&gt;- 基本数据结构 能用JS写出linked list, stack, queue, (binary)tree, graph, hashtable么?&lt;br&gt;- 基本算法 能用JS实现各种search(linear, binary..), 各种sort(bubble, insertion, merge, quick, selection), 以及树的搜索(Breadth First/Depth First)和遍历(3种顺序)么?&lt;br&gt;- 设计模式 知道什么是singleton, factory, strategy, decrator么?&lt;br&gt;- Git 不要只是停留在把Github当做一个网络储存器的层面上, 知道branch, diff, merge么?&lt;br&gt;- 基本的英语能力(不要求听说, 只用来读/写文档资料)&lt;br&gt;- 基本的计算机知识 知道位运算, 溢出, thread, lock, concurrency, parallelism么?&lt;br&gt;- 熟悉unix的基本命令么? 知道ssh public/private key都是干嘛的么?&lt;br&gt;- 知道正则么? 能够熟练的使用么?&lt;br&gt;- 能写出详细的注释/文档, 让阅读你代码的人知道你要干嘛么? 能短时间内快速地读懂来自你同事或者其他地方(github, blog)的代码, 知道什么东西应该写在什么地方, 以便迅速地参与其中么?&lt;br&gt;- 给你一个你从来没有接触过的库/语言, 能能够在较短的时间内在你的代码里正确使用么?&lt;br&gt;- 有一个得心应手用的熟练地编辑器/IDE么? 不要求大家都是vim/emacs大神, 但也不要做什么都是用鼠标来点.&lt;br&gt;- 基本的检索查询能力(google, stackoverflow, MDN)&lt;br&gt;- 单独思考解决问题的能力, 团队合作, 与人相处&lt;br&gt;&lt;br&gt;如果以上的内容都有所了解(这里不会强调精通), 恭喜你, 你拥有了成为前端工程师的基础知识. 继续.&lt;br&gt;&lt;br&gt;### 前端专业知识&lt;br&gt;- 知道什么是AMD, COMMONJS么? 知道call, apply, bind么? 知道JS中foreach, filter, some, every么? 知道怎么实现functional JS(curry等)么?&lt;br&gt;- 知道各种所谓的高级HTML的API(File, Web Audio, WebSocket)么?&lt;br&gt;- 知道各种CSS Preprocessors么? 能讲出他们各自的优点和缺点么? 熟悉并且会用其中的一种么?&lt;br&gt;- 知道各种CSS框架么? 能讲出他们各自的优点和缺点么? 熟悉并且会用其中的一种么?&lt;br&gt;- 知道canvas, SVG么?&lt;br&gt;- 知道怎么把你的东西做成responsive, cross-browser support么? &lt;br&gt;- 知道什么是SEO并且怎么优化么? 知道各种meta data的含义么?&lt;br&gt;- 知道什么是Ajax, restful, get, post么? 知道怎么和后台交互么?&lt;br&gt;- 知道各种JS框架(Angular, Backbone, Ember, React, Meteor, Knockout...)么? 能讲出他们各自的优点和缺点么? 熟悉并且会用其中的一种或多种么?&lt;br&gt;- 知道什么是webkit么? 知道怎么用浏览器的各种工具来调试和debug代码么?&lt;br&gt;- 知道现在前端一般的工作流程(gulp, grunt, git, svn, npm)么?&lt;br&gt;- 知道怎么测试代码么? 知道BDD, TDD, Unit Test么? 知道怎么测试你的前端工程么(mocha, sinon, jasmin, qUnit..)?&lt;br&gt;- 知道前端templating(Mustache, underscore, handlebars)是干嘛的, 怎么用么?&lt;br&gt;- 知道npm, V8, node, express, socket么? (这里补充一点, 现在越来越多的公司都采用: '前端网页 -&amp;gt; 前端后台 -&amp;gt; 后台'这种构架来搭建东西, 也就是说, 前端工程师不仅要做传统前端的网页, 还要写自己的后台, 来跟真正的后台进行交互, 至于前端的后台用什么语言来写, 一般是node/python/ruby, 不太会用到庞大的java, 所以这里我把node列为前端工程师必须要掌握的技能之一) 知道cache, authentication么?&lt;br&gt;- (如果要用node)知道route, middleware, cluster, nodemon, pm2, server-side rendering么?&lt;br&gt;- 另外, 前端这个行业跟传统的c/c++/java程序员还是有一定的差别的. 由于是新兴产业, 所以各种行业标准, 框架, 库会随时随地的产生和更新 (作为一个c程序员, 十年前怎么写东西现在还是怎么写东西). 今天出了node和react, 明天又出了io和mean. 所以, 积极关注各种前端产品, 跟上变化的节奏, 也是身为一个前端程序员必备的技能之一. 知道ECMAScript 6里怎么写class么? 知道react, flux, reflux么? 知道polymer, dart么? 知道meteor么?&lt;br&gt;&lt;br&gt;(暂时能想到的就这么多, 待补充..)&lt;br&gt;&lt;br&gt;在从包括google, facebook, apple等各大公司的面试, 以及周围做前端小伙伴们的经历中, 发现现在在美国, 没刷过3, 4遍cc150和leetcode的同学们都只敢投投简历不敢去面试, 因为觉得铁定过不了...&lt;br&gt;&lt;br&gt;附上一些之前亲身经历的面试题:&lt;br&gt;&lt;br&gt;#### Facebook 1: &lt;br&gt;&lt;br&gt;Puzzle Materials&lt;br&gt;Given a set of events, render the events on a single day calendar (similar to Outlook, Calendar.app, and Google Calendar). There are several properties of the layout:&lt;br&gt;&lt;br&gt;1. No events may visually overlap.&lt;br&gt;2. If two events collide in time, they must have the same width.&lt;br&gt;3. An event should utilize the maximum width available, but constraint 2) takes precedence over this constraint.&lt;br&gt;&lt;br&gt;Each event is represented by a JS object with a start and end attribute. The value of these attributes is the number of minutes since 9am. So {start:30, end:90) represents an event from 9:30am to 10:30am. The events should be rendered in a container that is 620px wide (600px + 10px padding on the left/right) and 720px (the day will end at 9pm). The styling of the events should match the attached screenshot.&lt;br&gt;&lt;br&gt;You may structure your code however you like, but you must implement the following function in the global namespace. The function takes in an array of events and will lay out the events according to the above description.&lt;br&gt;&lt;br&gt;function layOutDay(events) {}&lt;br&gt;This function will be invoked from the console for testing purposes. If it cannot be invoked, the submission will be rejected.&lt;br&gt;&lt;br&gt;In your submission, please implement the calendar with the following input:&lt;br&gt;&lt;br&gt;[ {start: 30, end: 150}, {start: 540, end: 600}, {start: 560, end: 620}, {start: 610, end: 670} ];&lt;br&gt;&lt;br&gt;FAQ&lt;br&gt;Are frameworks such as JQuery, MooTools, etc. allowed?  Yes, but please include the file with your source code.&lt;br&gt;Is there a maximum bound on the number of events?  You can assume a maximum of 100 events for rendering reasons, but your solution should be generalized.&lt;br&gt;What browsers need to be supported? Your solution should work in all modern standards-compliant browsers.&lt;br&gt;Does my solution need to match the image pixel for pixel? No, we will not be testing for pixel matching.&lt;br&gt;How will you be testing my solution? We will be running tests from the browser console by invoking the layOutDay() function. Your solution should not require a local web server (e.g. run from localhost) or have any other dependencies besides your html/css/js.&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/00c4aa9ad4dce12a0d436790dd730f49_b.jpg&quot; data-rawwidth=&quot;726&quot; data-rawheight=&quot;805&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;726&quot; data-original=&quot;https://pic2.zhimg.com/00c4aa9ad4dce12a0d436790dd730f49_r.jpg&quot;&gt;&lt;br&gt;#### Facebook 2:&lt;br&gt;&lt;br&gt;Question: How would you flatten an array in JavaScript?&lt;br&gt;&lt;br&gt;Answer: flatten of an array means, if one or more array elements are also array, you will took out those elements and you will have a plain array. For example, if you if array is like [1, 2, [3, 4], [5, [6, 7]], 8] your flatten array would be [1, 2, 3, 4, 5, 6, 7, 8]&lt;br&gt;&lt;br&gt;#### APPLE: &lt;br&gt;&lt;br&gt;Given a node from a DOM tree find the node in the same position from an identical DOM tree.&lt;br&gt;&lt;br&gt;#### Google 1:&lt;br&gt;&lt;br&gt;Question: How would you flatten an array in JavaScript?&lt;br&gt;&lt;br&gt;Answer: flatten of an array means, if one or more array elements are also array, you will took out those elements and you will have a plain array. For example, if you if array is like [1, 2, [3, 4], [5, [6, 7]], 8] your flatten array would be [1, 2, 3, 4, 5, 6, 7, 8]&lt;br&gt;&lt;br&gt;#### Google 2:&lt;br&gt;&lt;br&gt;Alex is standing on the top left cell (1,1) of a n*m table. The table has n rows and m columns. Initially, he is facing its right cell. He moves on the table in the following way: &lt;br&gt;&lt;br&gt;&amp;gt;He moves one step forward. &lt;br&gt;&amp;gt;He turns to his right &lt;br&gt;&amp;gt;While moving forward, if he would go out of the table or reach a visited cell, he turns to his right. &lt;br&gt;&lt;br&gt;He moves in the table as much as he can. Can you find out the number of cells he visits before he stops? &lt;br&gt;&lt;br&gt;For example, given a 9x9 grid, the following would be his moves. The number on each cell represents the step he would land on that particular cell. &lt;br&gt;1 2 55 54 51 50 47 46 45 &lt;br&gt;4 3 56 53 52 49 48 43 44 &lt;br&gt;5 6 57 58 79 78 77 42 41 &lt;br&gt;8 7 60 59 80 75 76 39 40 &lt;br&gt;9 10 61 62 81 74 73 38 37 &lt;br&gt;12 11 64 63 68 69 72 35 36 &lt;br&gt;13 14 65 66 67 70 71 34 33 &lt;br&gt;16 15 20 21 24 25 28 29 32 &lt;br&gt;17 18 19 22 23 26 27 30 31 &lt;br&gt;&lt;br&gt;Input: &lt;br&gt;The first line of the input contains two integer numbers n and m. &lt;br&gt;n and m are between 1 and 100. &lt;br&gt;&lt;br&gt;Output: &lt;br&gt;Print an integer to the output being the answer of the test. &lt;br&gt;&lt;br&gt;Sample input #00: &lt;br&gt;3 3 &lt;br&gt;&lt;br&gt;Sample output #00: &lt;br&gt;9 &lt;br&gt;&lt;br&gt;Sample input #01: &lt;br&gt;7 4 &lt;br&gt;&lt;br&gt;Sample output #01: &lt;br&gt;18&lt;br&gt;&lt;br&gt;&lt;br&gt;从这些面试题可以看出的是, 前端工程师也是程序员, 面试同样逃不出各种算法和数据结构的问题, 同时还会被问很多前端专业领域的东西, 引用Facebook HR给我发的一封邮件中的一句话: &lt;br&gt;&lt;br&gt;The primary technical focus of these interviews will be JavaScript, HTML, and CSS, but at Facebook we are software engineers first, and web specialists second. This means that there may be a sufficient amount of focus on general computer science concepts like algorithms, design patterns, data structures, etc. &lt;br&gt;&lt;br&gt;(翻译: 技术面试的主要会集中在JS, HTML和CSS. 但是在Facebook, 我们首先应该是一个软件工程师, 其次才是web的专业人员, 这意味着相当大的一部分面试会涉及到cs的知识比如算法, 设计模式和数据结构等等.)&lt;br&gt;&lt;br&gt;另外想到一个之前面试Amazon的一道题, 觉得特别好. 写出来跟大家分享(大神们见笑了~):&lt;br&gt;&lt;br&gt;问题: swap two integers without temp (交换两个整数, 不能用任何临时变量)&lt;br&gt;&lt;br&gt;一般答案是这样的:&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;function swapNumb(a, b){
  console.log('before swap: ','a: ', a, 'b: ', b);
  b = b - a;
  a = a + b;
  b = a - b;
  console.log('after swap: ','a: ', a, 'b: ', b);  
}


&amp;gt; swapNumb(2, 3);
  a: 2 and b: 3
  a: 3 and b: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;如果你这么写面试官会喜欢你:&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;function swapNumb(a, b){
  console.log(&quot;a: &quot; + a + &quot; and b: &quot; + b);
  a = a ^ b;
  b = a ^ b;
  a = a ^ b;
  console.log(&quot;a: &quot; + a + &quot; and b: &quot; + b);
}

&amp;gt; swapNumb(2, 3);
  a: 2 and b: 3
  a: 3 and b: 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;所以, 那些成天'所谓'的前端工程师们(只是针对某些朋友), 请不要再误导即将或者想要跨入这个行业的新同学们了. 那些想要涉及前端行业的同学们, 首先不要觉得跟其他语言程序员相比前端的门槛低, 更不要觉得前端是一个可有可无的存在. 前端(程序员)挣得多待遇好, 因为我们值这个价钱. 如果羡慕或有兴趣就请努力学习思考然后加入这个圈子里来.连一个花10秒钟google(baidu)一下就能知道答案的问题都要拿到知乎上来问的朋友们, 请不要毁了知乎这么好的一个平台, 另外那些什么东西都'大概明白'的朋友们, 请不要在以一个前端工程师的视角来说一些'毫无意义'的话.&lt;br&gt;&lt;br&gt;咦, 气氛突然严肃了, 哈哈哈, 以上内容不针对任何人, 随便吐槽两句, 如果有不对的地方和不妥当的内容请指正, 谢谢!</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic2.zhimg.com/00c4aa9ad4dce12a0d436790dd730f49_200x112.jpg" data-rawwidth="726" data-rawheight="805" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic2.zhimg.com/00c4aa9ad4dce12a0d436790dd730f49_r.jpg">
看了知乎上这么多讨论关于前端这个职位的问题, 什么关于前端难不难, 好不好找工作, 有没有用, 好不好学, 好不好转其他的职位, 待遇好不好等等的问题, 想谈谈自己对前端的看法. 到底所谓的前端都应该干些什么都应该会写什么呢? 本人身边有太多的人会切几张图…

<a href="/question/28860309/answer/42522021" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-03-20" target="_blank" href="/question/28860309/answer/42522021">编辑于 2015-03-21</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3727101"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>136 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="83" data-type="Answer">
<link itemprop="url" href="/question/28187933/answer/77050877">
<meta itemprop="answer-id" content="26245612" />
<meta itemprop="answer-url-token" content="77050877" />
<meta itemprop="answerCount" content="59" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/28187933" target="_blank" data-id="3457761" data-za-element-name="Title">
web前端菜鸟，好迷茫?
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/28187933/answer/77050877">
<!-- <meta itemprop="answer-id" content="26245612">
<meta itemprop="answer-url-token" content="77050877"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>878</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">878</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$cccccccccwalle"
target="_blank" href="/people/cccccccccwalle"
>walle</a></span><span title="不知道说什么" class="bio">
不知道说什么
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="878" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">878</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3457761" data-action="/answer/content" data-author-name="walle" data-entry-url="/question/28187933/answer/77050877">

<textarea hidden class="content">计算机行业很多领域都符合82定律，也就是20%的东西的使用频率占到80%，所以很适合囫囵吞枣，因此我们的重点就是把这20%学起来，而首先要做的就是把这20%的东西找出来。&lt;br&gt;在我看来前端这20%的东西大概就是常用的html标签，css的盒子模型，基本的原生js，以及熟练使用jquery，ajax，常见浏览器的兼容。&lt;br&gt;拿下这些东西意义非凡，一方面证明你适合做前端这份工作，另一方面这些技能能让你找到一份工作。让你能够从容地去学习剩下的80%。&lt;br&gt;总之就是专心对付最重要的东西，那些什么less、sass、angular这类的东西，当你把我之前说的基础打好之后，学习起来畅通无阻，随学随用。&lt;br&gt;最后我觉得最难的就是实践，只有实践才能学到真正的技术，新人很难参与一些有价值有意义的项目，没有这些项目又很难成长，所以自己有项目可参与应该珍惜，没项目应该多造一些有价值的轮子。&lt;br&gt;&lt;br&gt;&lt;b&gt;感谢不点赞的都是&lt;/b&gt;&lt;b&gt;耍流氓&lt;/b&gt;&lt;b&gt;！！！！&lt;/b&gt;&lt;br&gt;&lt;b&gt;　　　　　　　　耍流氓！！！&lt;/b&gt;&lt;br&gt;&lt;b&gt;　　　　　　　　耍流氓！！！&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;一夜之间赞已接近最高票，受宠若惊，决定一不做二不休，把最高赞给夺过来。&lt;/b&gt;&lt;br&gt;&lt;b&gt;评论里 &lt;a data-hash=&quot;65f95e7615af19954cdf74bb3e400801&quot; href=&quot;//www.zhihu.com/people/65f95e7615af19954cdf74bb3e400801&quot; class=&quot;member_mention&quot; data-editable=&quot;true&quot; data-title=&quot;@吴林&quot; data-hovercard=&quot;p$b$65f95e7615af19954cdf74bb3e400801&quot;&gt;@吴林&lt;/a&gt;朋友说写个提纲或者专栏，专栏就搞不起了，那就简单列个提纲，以期抛砖引玉。&lt;/b&gt;&lt;br&gt;&lt;br&gt;1.html的语法、格式，常用的标签极其作用，理解标签的嵌套，学习使用firefox+firebug或者chrom的调试工具，能够使用这些工具调试html、css、js、断点调试、抓包&lt;br&gt;&lt;br&gt;2.如何引入css、js（有多少种方法，各种方法有什么区别），理解id、class属性的区别，学会css的常用选择器，理解盒子模型（padding，margin，border，width，height，），css坐标系，css布局（position的absolute、relative 、fixed、static），css浮动（float：left、right ）和清除浮动（clear）,display:inline、block、inline-block、&lt;b&gt;flex&lt;/b&gt;&lt;br&gt;&lt;br&gt;3.js的执行顺序，基本的编程基础（变量、运算、流程控制、数组、调用函数、自定义函数、对象）、json、js的dom操作、js的事件机制（委托、绑定、监听，冒泡和阻止冒泡，兼容性），了解ajax的xmlhttprequest及其创建方法（多浏览器兼容）、跨域，明白其工作原理，评论里有朋友说http协议，确实是我疏忽，http协议是web的根本，所以其重要性再怎么强调都不为过，熟悉http协议对web开发的方方面面都有不少帮助，比如理解及使用ajax，比如调试程序、抓取数据等等，不过http是一个很杂很细的东西，内容很多，我建议也囫囵吞枣式地学习，先了解、熟悉简单的，以后在项目中遇到深入点的再进一步学习。&lt;br&gt;&lt;br&gt;4、使用jquery解放你的开发工作，学会jq选择器，修改属性、监听事件、修改css，学会写jquery插件。这一步我觉得可以和第3步穿插学习&lt;br&gt;&lt;br&gt;5、搭建服务器，弄个傻瓜服务器比如wamp，phpstudy等软件，可以一键建立一个apache+php+mysql的服务器，前期可以把你的静态页发布到本地服务器，使用本地服务器配合ajax学习。&lt;br&gt;&lt;br&gt;6、学点服务器端，建议php+mysql。&lt;br&gt;服务器端脚本其实很简单，总结起来就是4个东西：SESSION、COOKIE、Request、Response，结合http协议理解如何从Request取得数据，经过处理后Response给客户端。这就是整个过程。&lt;br&gt;至于mysql也就是基本的sql语句。如何使用php进行CURD操作。这块其实很难总结，基本上以实现业务为主。&lt;br&gt;&lt;br&gt;7、来点框架，理解MVC模式、推荐个比较流行的MVC框架：ThinkPHP，简洁好用不解释，国人弄的，文档和例子什么的非常丰富。&lt;br&gt;&lt;br&gt;写了乱七八糟一堆，大家凑合着看，建议从1往7学习。</textarea>


<div class="zh-summary summary clearfix">

计算机行业很多领域都符合82定律，也就是20%的东西的使用频率占到80%，所以很适合囫囵吞枣，因此我们的重点就是把这20%学起来，而首先要做的就是把这20%的东西找出来。 在我看来前端这20%的东西大概就是常用的html标签，css的盒子模型，基本的原生js，以及…

<a href="/question/28187933/answer/77050877" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-12-16" target="_blank" href="/question/28187933/answer/77050877">编辑于 2016-10-09</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3457761"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>49 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="84" data-type="Answer">
<link itemprop="url" href="/question/38825761/answer/87073877">
<meta itemprop="answer-id" content="30262894" />
<meta itemprop="answer-url-token" content="87073877" />
<meta itemprop="answerCount" content="249" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/38825761" target="_blank" data-id="7737551" data-za-element-name="Title">
有哪些产品经理认为很简单，实则开发很难的技术？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/38825761/answer/87073877">
<!-- <meta itemprop="answer-id" content="30262894">
<meta itemprop="answer-url-token" content="87073877"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>877</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">877</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$superwyh"
target="_blank" href="/people/superwyh"
>王亚晖</a></span><span title="做过游戏，在搞漫画" class="bio">
做过游戏，在搞漫画
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="877" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">877</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7737551" data-action="/answer/content" data-author-name="王亚晖" data-entry-url="/question/38825761/answer/87073877">

<textarea hidden class="content">1.富文本编辑器&lt;br&gt;&lt;br&gt;我说的就是像知乎这种你回答答案时候用的编辑器，市面上有很多现成开源的，但你们有没有尝试自己写过？这玩意不只没有很多人想象中的那么容易，甚至坑到绝对不是一个人能搞定的，我曾经尝试写过 Javascript 和 Objective - C 的，均是写到一半发现这个轮子比造车还困难。&lt;br&gt;&lt;br&gt;2.推荐系统&lt;br&gt;&lt;br&gt;推荐系统不只是难开发，更重要的是很多产品经理其实都没想明白究竟要推荐什么，我听过很多有趣的反馈，说希望给每个用户推荐他们想看的内容，或者推荐他们关注的热门内容，这个想看或者热门都不是随便说说而已的 ……&lt;br&gt;&lt;br&gt;3.搜索&lt;br&gt;&lt;br&gt;你就看知乎和豆瓣这两家都是创业公司的巨无霸了，他们的搜索做好了么？&lt;br&gt;&lt;br&gt;4.绝大多数的动画效果&lt;br&gt;&lt;br&gt;很多产品在动画效果上都会给设计师一个模棱两可的要求，然后设计师又抛给程序员一个非常酷炫的效果，但其实多数都非常耗工时。有兴趣的人可以试着从零写写 QQ app 里面那个拖拽小数字小红圈消除所有未读提示的效果，就是那个带着数字小红圈拖拽时候的胶装效果。&lt;br&gt;&lt;br&gt;5.支付&lt;br&gt;&lt;br&gt;我见过不下三个团队的 boss 要求自己产品里加入自己的支付系统，不应用支付宝等第三方，但又要达到第三方的功能，我估摸着没有20倍以上的员工数量就是开玩笑。&lt;br&gt;&lt;br&gt;6.跟效率有关的绝大多数内容&lt;br&gt;&lt;br&gt;绝大多数要明显降低用户等候时间或者提升处理能力的都不是一般人能写的。&lt;br&gt;&lt;br&gt;&lt;br&gt;所以我强调过非常多次，产品经理的技术背景非常重要，不要求你多牛，但至少懂点 ……</textarea>


<div class="zh-summary summary clearfix">

1.富文本编辑器 我说的就是像知乎这种你回答答案时候用的编辑器，市面上有很多现成开源的，但你们有没有尝试自己写过？这玩意不只没有很多人想象中的那么容易，甚至坑到绝对不是一个人能搞定的，我曾经尝试写过 Javascript 和 Objective - C 的，均是写到一…

<a href="/question/38825761/answer/87073877" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-02-19" target="_blank" href="/question/38825761/answer/87073877">编辑于 2016-12-11</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7737551"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>91 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="2">
<meta name="disableCopyAvatar" content="https://pic1.zhimg.com/892631b9705eff977de8a7d343b6ab20_s.jpg">

<span class="zg-bull">&bull;</span>


<a href="/copyright/apply?answer=87073877" target="_blank" class="meta-item copyright">申请转载</a>



<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="85" data-type="Answer">
<link itemprop="url" href="/question/22818104/answer/22744803">
<meta itemprop="answer-id" content="4305772" />
<meta itemprop="answer-url-token" content="22744803" />
<meta itemprop="answerCount" content="4" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/22818104" target="_blank" data-id="1307959" data-za-element-name="Title">
网上常能见到的一段 JS 随机数生成算法如下，为什么用 9301, 49297, 233280 这三个数字做基数？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/22818104/answer/22744803">
<!-- <meta itemprop="answer-id" content="4305772">
<meta itemprop="answer-url-token" content="22744803"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>877</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">877</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$akfish"
target="_blank" href="/people/akfish"
>猫杀</a></span><span title="自由开发者" class="bio">
自由开发者
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="877" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">877</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1307959" data-action="/answer/content" data-author-name="猫杀" data-entry-url="/question/22818104/answer/22744803">

<textarea hidden class="content">很多人认为这是简单的Magic Number，其实这背后有内在的原因，这三个数字并不是随便乱选出来的。&lt;br&gt;&lt;br&gt;&lt;b&gt;入门级的选择标准&lt;/b&gt;&lt;br&gt;这种伪随机数生成器叫做线性同余生成器（LCG, Linear Congruential Generator)，几乎所有的运行库提供的rand都是采用的LCG，形如：&lt;br&gt;&lt;img src=&quot;//www.zhihu.com/equation?tex=I_%7Bn%2B1%7D%3DaI_n%2Bc%5C+%28mod%5C+m%29&quot; alt=&quot;I_{n+1}=aI_n+c\ (mod\ m)&quot; eeimg=&quot;1&quot;&gt;&lt;br&gt;生成的伪随机数序列最大周期m，范围在0到m-1之间。要达到这个最大周期，必须满足&lt;br&gt;&lt;ul&gt;&lt;li&gt;c与m互质&lt;/li&gt;&lt;li&gt;a - 1可以被m的所有质因数整除&lt;/li&gt;&lt;li&gt;如果m是4的倍数，a - 1也必须是4的倍数&lt;/li&gt;&lt;/ul&gt;以上三条被称为Hull-Dobell定理。&lt;br&gt;作为一个伪随机数生成器，周期不够大是不好意思混的，所以这是要求之一。&lt;br&gt;可以看到，a=9301, c = 49297, m = 233280这组参数，以上三条全部满足。&lt;br&gt;&lt;br&gt;&lt;b&gt;进阶级的选择标准&lt;/b&gt;&lt;br&gt;要在伪随机数生成器界混，仅仅入门是不够的。&lt;br&gt;从工程的角度来讲，&lt;img src=&quot;//www.zhihu.com/equation?tex=%28m-1%29a%2Bc&quot; alt=&quot;(m-1)a+c&quot; eeimg=&quot;1&quot;&gt;的值要（在合理的范围内）足够小，以避免溢出的问题。&lt;br&gt;从安全（实用）性的角度来讲，还要满足良好的随机性，这一点可以通过Knuth's Spectral Test来评估（见[2][3]），要通过2,3,4,5以及6维的Spectral Test才行。Spectral Test考察的就是生成的伪随机数序列在超空间的网格结构（lattice structure），当年IBM的RANDU子程序闹出的乌龙，连3维的Spectral Test就不能通过，上图嘲讽下：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/85a7b8faa747bb9e450f67567510f9bf_b.jpg&quot; data-rawwidth=&quot;800&quot; data-rawheight=&quot;441&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;800&quot; data-original=&quot;https://pic4.zhimg.com/85a7b8faa747bb9e450f67567510f9bf_r.jpg&quot;&gt;其中每个点代表三个连续的RANDU生成的伪随机数值，可以看到所有伪随机数分布在了15个二维平面上。&lt;br&gt;&lt;br&gt;在这种要求面前，c的值最好：&lt;br&gt;&lt;ul&gt;&lt;li&gt;是质数 （c = 49297就是质数）&lt;/li&gt;&lt;li&gt;接近&lt;img src=&quot;//www.zhihu.com/equation?tex=%28%5Cfrac%7B1%7D%7B2%7D-%5Cfrac%7B1%7D%7B6%7D%5Csqrt%7B3%7D+%29m&quot; alt=&quot;(\frac{1}{2}-\frac{1}{6}\sqrt{3} )m&quot; eeimg=&quot;1&quot;&gt;,(m = 233280时为49297.86460172205)&lt;/li&gt;&lt;/ul&gt;所以有了这样一些基本的标准，能够选择的参数范围就小了很多，弄个程序跑下Spectral Test，就能得到可选的参数组。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/2c21e0205bb26aa909dcd5829f76bf01_b.jpg&quot; data-rawwidth=&quot;651&quot; data-rawheight=&quot;640&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;651&quot; data-original=&quot;https://pic2.zhimg.com/2c21e0205bb26aa909dcd5829f76bf01_r.jpg&quot;&gt;&lt;br&gt;如果想要更加详尽的了解LCG伪随机数生成器的性质以及参数选取、测试的数学理论，可以尝试阅读《计算机程序设计艺术》卷2第3章。&lt;br&gt;&lt;br&gt;参考资料：&lt;br&gt;[1] &lt;a href=&quot;//link.zhihu.com/?target=http%3A//nuclear.fis.ucm.es/COMP-PHYS/RANDOM/RandomNumbers.pdf&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;nuclear.fis.ucm.es/COMP&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;-PHYS/RANDOM/RandomNumbers.pdf&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[2] &lt;a href=&quot;//link.zhihu.com/?target=http%3A//random.mat.sbg.ac.at/tests/theory/spectral/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;random.mat.sbg.ac.at/te&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;sts/theory/spectral/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;[3] Knuth, Donald E. (1981), The Art of Computer Programming volume 2: Seminumerical algorithms (2nd ed.), Addison-Wesley, p. 89.</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic4.zhimg.com/85a7b8faa747bb9e450f67567510f9bf_200x112.jpg" data-rawwidth="800" data-rawheight="441" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic4.zhimg.com/85a7b8faa747bb9e450f67567510f9bf_r.jpg">
很多人认为这是简单的Magic Number，其实这背后有内在的原因，这三个数字并不是随便乱选出来的。 <b>入门级的选择标准</b> 这种伪随机数生成器叫做线性同余生成器（LCG, Linear Congruential Generator)，几乎所有的运行库提供的rand都是采用的LCG，形如： I_{n+1}…

<a href="/question/22818104/answer/22744803" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2014-02-22" target="_blank" href="/question/22818104/answer/22744803">编辑于 2014-02-25</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1307959"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>48 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="86" data-type="Answer">
<link itemprop="url" href="/question/39019943/answer/79268472">
<meta itemprop="answer-id" content="27134705" />
<meta itemprop="answer-url-token" content="79268472" />
<meta itemprop="answerCount" content="30" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/39019943" target="_blank" data-id="7815191" data-za-element-name="Title">
js 可以跨域得到 cookie？QQ 邮箱被一封邮件黑了？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/39019943/answer/79268472">
<!-- <meta itemprop="answer-id" content="27134705">
<meta itemprop="answer-url-token" content="79268472"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>872</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">872</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$Rufus"
target="_blank" href="/people/Rufus"
>鲁小夫</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/Rufus#hilightbadge" target="_blank">前端开发、JavaScript话题优秀回答者</a></span>



<span title="程序员" class="bio">
程序员
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="872" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">872</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7815191" data-action="/answer/content" data-author-name="鲁小夫" data-entry-url="/question/39019943/answer/79268472">

<textarea hidden class="content">好问题。&lt;br&gt;&lt;br&gt;&lt;b&gt;首先警告一下所有人，题述里这个链接，url789这个域名，不要打开，不要打开，不要打开，好奇害死人，手贱丢隐私。&lt;/b&gt;&lt;br&gt;&lt;br&gt;研究了一下，腾讯的山寨程序员没有做参数检查，把参数直接拼到 HTML 里去，造成脚本注入漏洞，然后被攻击者找到了加以利用。&lt;br&gt;&lt;br&gt;复现的方法很简单了。&lt;br&gt;&lt;br&gt;原攻击方式用的是 POST 提交，我这里用 GET 也能重现。&lt;br&gt;&lt;br&gt;我构造一个url，注入一个脚本&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;alert(document.cookie)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;url 如下&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://m.exmail.qq.com/cgi-bin/login?uin=aaaa&amp;amp;domain=bbbb%26quot%3B%3Breturn+false%3B%26quot%3B%26lt%3B%2Fscript%26gt%3B%26lt%3Bscript%26gt%3Balert(document.cookie)%26lt%3B%2Fscript%26gt%3B&amp;amp;aliastype=other
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;你只要打开了，会出现一个 alert 框，内容是你在这个域名下的 cookie。&lt;br&gt;&lt;br&gt;那么攻击者不 alert，攻击者把你的 cookie 发送到他的服务器上，你的隐私就没了，他可以随便进入你的 QQ 邮箱。&lt;br&gt;&lt;br&gt;奥妙呢就在这里了。&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;128&quot; data-rawwidth=&quot;1144&quot; src=&quot;https://pic1.zhimg.com/12be219f27fadcb58fcc78eb55ce49fc_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1144&quot; data-original=&quot;https://pic1.zhimg.com/12be219f27fadcb58fcc78eb55ce49fc_r.png&quot;&gt;&lt;br&gt;腾讯的程序员，赶紧的吧，修复漏洞，然后给用户道歉去吧。&lt;br&gt;&lt;br&gt;=============&lt;br&gt;&lt;br&gt;补充一下攻击者注入的脚本&lt;br&gt;&lt;br&gt;&lt;img data-rawheight=&quot;459&quot; data-rawwidth=&quot;993&quot; src=&quot;https://pic4.zhimg.com/ad7d80914218f1c44aaf2d7eaace412f_b.png&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;993&quot; data-original=&quot;https://pic4.zhimg.com/ad7d80914218f1c44aaf2d7eaace412f_r.png&quot;&gt;&lt;br&gt;非常地有想法，当前 frame 地址、顶层 frame 地址、cookie，还用了 try catch 抓异常，不错不错，就是用 escape() 略显山寨，他这里应该用 encodeURIComponent() 。&lt;br&gt;&lt;br&gt;==============&lt;br&gt;&lt;br&gt;更新，腾讯还不只这一个 XSS 漏洞，有其他答主发出来了另一个洞，也被腾讯忽略了。&lt;br&gt;&lt;br&gt;我估计也只能通过把事情闹大的方式才能引起腾讯注意了。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.wooyun.org/bugs/wooyun-2015-0144918&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;QQ邮箱连接存在xss可直接获取用户敏感信息&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;==============&lt;br&gt;&lt;br&gt;拖了一个月终于给修了，看来事儿还是得闹大才能解决。&lt;br&gt;&lt;br&gt;补充说明：漏洞是恶性bug，bug 不一定是漏洞，bug 可以慢慢修，排优先级，漏洞要第一时间响应。对于已经存在很久，并且已经被恶意利用的漏洞，我们公开讨论它可以引起关注，有利于问题的解决。</textarea>


<div class="zh-summary summary clearfix">
<img data-rawheight="128" data-rawwidth="1144" src="https://pic1.zhimg.com/12be219f27fadcb58fcc78eb55ce49fc_200x112.png" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic1.zhimg.com/12be219f27fadcb58fcc78eb55ce49fc_r.png">
好问题。 <b>首先警告一下所有人，题述里这个链接，url789这个域名，不要打开，不要打开，不要打开，好奇害死人，手贱丢隐私。</b> 研究了一下，腾讯的山寨程序员没有做参数检查，把参数直接拼到 HTML 里去，造成脚本注入漏洞，然后被攻击者找到了加以利用。 复现…

<a href="/question/39019943/answer/79268472" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-12-30" target="_blank" href="/question/39019943/answer/79268472">编辑于 2016-04-09</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7815191"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>135 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic3.zhimg.com/b50d7f9ee_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="87" data-type="Answer">
<link itemprop="url" href="/question/22098326/answer/79755339">
<meta itemprop="answer-id" content="27329510" />
<meta itemprop="answer-url-token" content="79755339" />
<meta itemprop="answerCount" content="94" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/22098326" target="_blank" data-id="1020138" data-za-element-name="Title">
Node.js 未来会超越 Java 吗？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/22098326/answer/79755339">
<!-- <meta itemprop="answer-id" content="27329510">
<meta itemprop="answer-url-token" content="79755339"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>866</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">866</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$jianru-lin"
target="_blank" href="/people/jianru-lin"
>林建入</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/jianru-lin#hilightbadge" target="_blank">编程话题优秀回答者</a></span>



<span title="软件设计" class="bio">
软件设计
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="866" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">866</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1020138" data-action="/answer/content" data-author-name="林建入" data-entry-url="/question/22098326/answer/79755339">

<textarea hidden class="content">你可能看到了 node.js 的种种优点，但却忽略了它存在的各种问题：&lt;br&gt;&lt;ul&gt;&lt;li&gt;在虚拟机层面 node.js 基于的 v8 VM 看起来很不错，但和 Java 的 VM 一比，差距甚远。在服务器领域，特别是拥有众多 CPU 和大量内存的环境下，Java 的 VM 几乎是你能在地球上找到的最好的 VM。而 v8 既不能充分利用多 CPU 的性能，也不能将内存充分利用。你唯一能做的事情就是开很多个 node.js 实例来缓解，但这进一步带来了更多的问题。&lt;/li&gt;&lt;li&gt;在语言层面 JavaScript 本身的设计让你感觉很灵活，因为它基本上是不对类型进行约束的，只有当运行过程中发生了错误才会提示你，毕竟在浏览器环境内，这算不上什么问题；但在一个团队内进行协作时，你会深刻的明白类型系统如果能在运行前就帮你找出那些低级的类型错误问题，将会节省你多少的时间和金钱。特别是别忘了，系统总是在演进的，一个稍微复杂些的业务系统就拥有几十个乃至上百个类型，而类型修改又往往很频繁，想想这个过程里会发生些什么你就明白了。&lt;/li&gt;&lt;li&gt;在领域应用层面 node.js 在 Web 开发领域特别是其中的前端部分已经达到了惊人的繁荣程度，甚至有不少重要系统的后端部分也基于 node.js 完成。但如果仅凭这些就轻易的认为 node.js 将会一统全栈打败包括 Java 在内的其它语言是很幼稚的。首先，在一个大型的系统架构中，整个系统是拆分成很多很小的业务系统的，这些系统往往通过消息队列（如 RabbitMQ、Kafka 等等）相互连接起来。也许在小型 Web 站点中，你从来没用过这些。但相信我，在但凡稍微大一些的业务系统中，都是这么干的。这些消息队列服务存在的理由就是将各个子系统解耦。这样一来，你可以在前端部分应用 node.js 进行快速开发，在业务处理部分使用 Java 来完成。数据分析系统却可以使用 Python/Scala （例如基于 Spark）实现。大型业务系统的架构者们都是些经验丰富的老手，他们知道每个语言/系统的利弊，也知道世界总在变，今天是 node.js、明天也许就是另一个新秀，因此在整个业务系统中，你要做的根本不是“统一”，反而是“分离”。这样的设计才能够预留出扩展和变更的机会。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;综上所述，我相信 node.js 会拥有大量的用户，但其未来发展也存在天花板，适用领域有局限性。</textarea>


<div class="zh-summary summary clearfix">

你可能看到了 node.js 的种种优点，但却忽略了它存在的各种问题： 在虚拟机层面 node.js 基于的 v8 VM 看起来很不错，但和 Java 的 VM 一比，差距甚远。在服务器领域，特别是拥有众多 CPU 和大量内存的环境下，Java 的 VM 几乎是你能在地球上找到的最好的 V…

<a href="/question/22098326/answer/79755339" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/22098326/answer/79755339">发布于 2016-01-03</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1020138"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>71 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="88" data-type="Answer">
<link itemprop="url" href="/question/30809709/answer/52499916">
<meta itemprop="answer-id" content="16404652" />
<meta itemprop="answer-url-token" content="52499916" />
<meta itemprop="answerCount" content="80" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/30809709" target="_blank" data-id="4506254" data-za-element-name="Title">
在国内前端领域里优秀的人很多，为什么没人做出 angularjs 、jQuery 之类优秀的框架？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/30809709/answer/52499916">
<!-- <meta itemprop="answer-id" content="16404652">
<meta itemprop="answer-url-token" content="52499916"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>849</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">849</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$evanyou"
target="_blank" href="/people/evanyou"
>尤雨溪</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/evanyou#hilightbadge" target="_blank">前端开发、JavaScript、前端工程师话题优秀回答者</a></span>



<span title="meteor / vue.js" class="bio">
m…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="849" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">849</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="4506254" data-action="/answer/content" data-author-name="尤雨溪" data-entry-url="/question/30809709/answer/52499916">

<textarea hidden class="content">一个框架能不能火，最关键的不是技术实现上多 nb，而是在于这个框架是否代表了一种（在其所处的时代）先进的开发理念。&lt;br&gt;&lt;br&gt;举例来说，在大部分开发者都在为浏览器兼容性和设计糟糕的原生 DOM API 叫苦连天的时候，jQuery 的横空出世自然显得光彩夺目。那个年代，大家根本不把前端当应用来写，能爽快的操作 DOM 就已经足够成为王道了。jQuery 简洁的语法，华丽的链式 API，同时掩盖了各种兼容问题，能不火吗？&lt;br&gt;&lt;br&gt;慢慢地，大家发现前端要做应用，光有华丽的 DOM 操作也不够，还得有应用结构。所以 Backbone 出现了，把 MVX 的概念引入了前端，让大家发现原来前端也是可以有架构的。&lt;br&gt;&lt;br&gt;再接着，大家发现 Backbone 的视图层依然需要手动侦听 model 的变化做各种 DOM 操作，数据到视图的映射依然繁琐。于是大家开始推崇 MVVM 数据绑定，（其实 Knockout 是和 Backbone 差不多时间出现的，只不过由于其实现不如 Backbone 来得简明易懂，所以不如 Backbone 火），于是 Angular 火了。&lt;br&gt;&lt;br&gt;不得不承认，即使是放眼全球，前端开发理念相比软件开发的其他领域，也基本上是属于一个跟随的状态。比如最近函数式编程就在对前端开发产生着巨大的冲击 - 首当其冲的就是以幂等渲染函数为核心概念的 React。由于 React 本身的函数式血脉，以它作为渲染层引入其他函数式理念变得触手可及，于是我们看见现在国外前端在研究的都是 immutability, FRP, uni-directional data flow, stateless stores, isomorphic application 之类看上去高大上的话题。&lt;br&gt;&lt;br&gt;如果你现在去基于一个已经普及的理念新写一个框架，即使实现得再好，也不过是造了一个轮子。当然，造一个同类理念中最好的轮子，还是会有很多人来用，但这毕竟只是一个改进的轮子，大家不会把你当做一个划时代的东西去推崇。只有当你把一个从没在这个领域出现过的理念实现了，才能够达到 jQuery, Backbone, Angular, React 这些里程碑式的框架所达到的地位。（顺便广告下，在前后端数据通信这块，Meteor 可以算是一个里程碑式的存在，Relay 可能是下一个）&lt;br&gt;&lt;br&gt;所以说到底，能不能搞出风靡的东西，一部分是眼界，一部分是时势。首先只有把眼界开拓到当前领域的边界之外，才可能做出开拓这个领域的东西。国内的前端界目前基本是处于跟随国外前端界的状况（就像国外前端界跟随整个软件开发领域一样），从眼界上来说就差了一个身位，又如何奢求能够做出划时代的东西？&lt;br&gt;&lt;br&gt;另一部分的时势，就是你所实现的理念是否正好顺应了当前业界的普遍需求。太超前或是太落后，都火不了。&lt;br&gt;&lt;br&gt;需要说明的是，眼界和工程实力是两个东西。单就工程实力而言，我相信国内的工程师们完全不比国外的差，差距就在眼界上。首先如贺老所说，英语水平是一个整体上限制了眼界的障碍；其次，如今国外的前端工程师受过正统 CS 理论训练的比例估计也远远高于国内；最后，国内的公司加班严重，能完成工作任务就不错了，哪里还有力气搞开源（除非把开源弄成 KPI）。所以说到底是个大环境问题。还有一个原因，就是英语足够好的就肉身翻墙了，你懂的。</textarea>


<div class="zh-summary summary clearfix">

一个框架能不能火，最关键的不是技术实现上多 nb，而是在于这个框架是否代表了一种（在其所处的时代）先进的开发理念。 举例来说，在大部分开发者都在为浏览器兼容性和设计糟糕的原生 DOM API 叫苦连天的时候，jQuery 的横空出世自然显得光彩夺目。那个年代…

<a href="/question/30809709/answer/52499916" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-06-24" target="_blank" href="/question/30809709/answer/52499916">编辑于 2015-06-26</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-4506254"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>53 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="89" data-type="Answer">
<link itemprop="url" href="/question/39721183/answer/83536633">
<meta itemprop="answer-id" content="28844960" />
<meta itemprop="answer-url-token" content="83536633" />
<meta itemprop="answerCount" content="53" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/39721183" target="_blank" data-id="8096051" data-za-element-name="Title">
如何自学计算机前端开发？精细的自学步骤是什么样的？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/39721183/answer/83536633">
<!-- <meta itemprop="answer-id" content="28844960">
<meta itemprop="answer-url-token" content="83536633"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>847</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">847</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$jiangshui"
target="_blank" href="/people/jiangshui"
>于江水</a></span><span title="淘宝前端 yujiangshui.com" class="bio">
淘宝前端 <a href="//link.zhihu.com/?target=http%3A//yujiangshui.com" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">http://</span><span class="visible">yujiangshui.com</span><span class="invisible"></span><i class="icon-external"></i></a>
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="847" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">847</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="8096051" data-action="/answer/content" data-author-name="于江水" data-entry-url="/question/39721183/answer/83536633">

<textarea hidden class="content">从你的描述来看，你只是为了学前端而学，而不是热爱。正确的学习过程应该是：&lt;br&gt;&lt;br&gt;1. 我想做一个个人网站，或者给我们团队或者小组做一些介绍页面。怎么做？搜索发现要学习：&lt;b&gt;HTML、CSS&lt;/b&gt;。&lt;br&gt;2. 发现一个网站设计的好漂亮，交互真赞，动画效果真好。我想在我自己网站上也放上，可是我看不懂它的代码？搜索发现要学习：&lt;b&gt;交互视觉、CSS3 动画&lt;/b&gt;等。&lt;br&gt;3. 他们网站上都有那种点击弹出浮层的功能，还有一些其他的更复杂的交互效果。怎么实现的？学习 &lt;b&gt;JavaScript&lt;/b&gt;。&lt;br&gt;4. 有小学同学说我的个人网站错位了，问了下他用的是 IE7 访问的，怎么办？搜索了解一些&lt;b&gt;浏览器兼容性问题（不是很必要）、学习使用 jQuery&lt;/b&gt;。&lt;br&gt;5. 我想在微信朋友圈分享一下我的网站，结果缩放的好小，而且有错位。怎么解决这个问题？搜索发现要学习 &lt;b&gt;响应式相关&lt;/b&gt;。&lt;br&gt;6. 分享了之后，发现打开速度好慢啊，要等十几秒才能打开。怎么办？学一下前端性能优化相关。&lt;br&gt;7. 网站交互功能和效果越来越多，写的 JS 和 CSS 代码越来越多，感觉写起来好慢，出了 bug 很难定位问题。怎么办？搜索发现要学习：&lt;b&gt;Emmet、Less、SCSS 等辅助工具&lt;/b&gt;用法，JS 模块化 &lt;b&gt;require.js、sea.js 以及对应的 AMD、CMD 以及 CommonJS 模块化规范&lt;/b&gt;等。&lt;br&gt;8. JS 更复杂了，而且要与其他同学合作开发。发现需要学习一些前端框架来提高开发效率，比如 &lt;b&gt;React、Angular、Vue&lt;/b&gt;，此外还需要一些打包构建工具，将 JS 编译之后发布使用。需要学习 &lt;b&gt;Webpack、Grunt、Gulp 等工具用法&lt;/b&gt;。&lt;br&gt;9. 网页和应用是开发好了，可是是静态的，没法有数据更新，怎么办？学习前后端数据沟通，&lt;b&gt;Ajax 请求、JSON 数据格式、Fetch API&lt;/b&gt;。当然由此延伸，最好还要&lt;b&gt;了解 PHP、Java Velocity、Nodejs 这些后端的知识&lt;/b&gt;，还要对 &lt;b&gt;HTTP 的一些状态码、请求类型&lt;/b&gt;等有所了解。&lt;br&gt;10. 应用部署到哪里？搜索了解：虚拟主机、域名注册、VPS、云主机、Paas、Laas、DNS 解析、在中国做网站要备案但是服务器放在国外就不需要等等。&lt;br&gt;11. 每次新创建应用，在我的服务器上都要配置一遍 PHP 环境、Nodejs 环境，有的应用对 PHP 版本要求还不同，怎么办？搜索了解虚拟化技术，Docker 帮你极好的解决这个问题。&lt;br&gt;12. 每次发布还要自己手动上传代码到服务器，而且要自己在本地打包、运行单元测试，好麻烦啊。搜索发现可以自己搭建一套持续集成系统，用 git push 代码，自动触发构建，运行单元测试，成功后自动 build 然后给你上传到服务器上面。你只需要写代码就可以了。推荐：&lt;b&gt;gogs + drone + docker&lt;/b&gt;。&lt;br&gt;&lt;br&gt;。。。。。。后面还有很多可以玩的&lt;br&gt;&lt;br&gt;曾经有个人私信问我前端入门要多久？要怎么入门？我跟他简单说了一些，然后说如果没有基础，至少要一年的不断学习、挖掘问题、解决总结、做项目锻炼才可以入门。他说：呵呵，我觉得只要三个月就行吧，我还要找工作。如果题主也是这种心态，我建议。。。</textarea>


<div class="zh-summary summary clearfix">

从你的描述来看，你只是为了学前端而学，而不是热爱。正确的学习过程应该是： 1. 我想做一个个人网站，或者给我们团队或者小组做一些介绍页面。怎么做？搜索发现要学习：<b>HTML、CSS</b>。 2. 发现一个网站设计的好漂亮，交互真赞，动画效果真好。我想在我自己网…

<a href="/question/39721183/answer/83536633" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/39721183/answer/83536633">发布于 2016-01-27</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-8096051"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>78 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="90" data-type="Answer">
<link itemprop="url" href="/question/37379084/answer/71894611">
<meta itemprop="answer-id" content="24179217" />
<meta itemprop="answer-url-token" content="71894611" />
<meta itemprop="answerCount" content="20" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/37379084" target="_blank" data-id="7158556" data-za-element-name="Title">
Node.js 在双十一中有哪些应用，表现如何？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/37379084/answer/71894611">
<!-- <meta itemprop="answer-id" content="24179217">
<meta itemprop="answer-url-token" content="71894611"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>826</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">826</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$robinqu"
target="_blank" href="/people/robinqu"
>瞿龙</a></span><span title="程序员，业余摄影师" class="bio">
程序员，业余摄影师
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="826" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">826</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7158556" data-action="/answer/content" data-author-name="瞿龙" data-entry-url="/question/37379084/answer/71894611">

<textarea hidden class="content">利益相关，负责淘系业务会场支撑系统的架构设计和开发。&lt;br&gt;&lt;br&gt;一句话概括：你们根本不知道现在大促（包括日常、双十一）是多么依赖Node.js。&lt;br&gt;&lt;br&gt;（后文用Node、node、nodejs、NodeJs均指Node.js）&lt;br&gt;&lt;br&gt;&lt;b&gt;Node在阿里内部的当前背景&lt;br&gt;&lt;/b&gt;&lt;br&gt;两年前，你可以说node在阿里内部就像是玩具一样，仅仅被一些了解node前端用在淘系部分业务，进行着“前后端分离”的事情。内部也有一些优秀的node开发者，如淘系代表的苏大师、朴大师，纯技术流代表则有原云OS团队的各种大神。&lt;br&gt;&lt;br&gt;但是从去年开始，天时地利人和，node在阿里内部已经遍地开花。&lt;br&gt;&lt;br&gt;从业务划分上来分析：&lt;br&gt;&lt;ul&gt;&lt;li&gt;支撑业务线上产品：包括淘宝、支付宝、1688，有大量系统已经使用node直接面向终端用户&lt;br&gt;&lt;/li&gt;&lt;li&gt;支撑内部日常工作的内部在线系统：各种内部工具系统，这块本来就是适合用node来敏捷开发的&lt;br&gt;&lt;/li&gt;&lt;li&gt;本地开发工具：阿里体系内各BU都有完整的toolchain，尤其是前端团队，用脚趾头想都是用node实现的&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;从技术架构上来分析，有两种形态：&lt;br&gt;&lt;ul&gt;&lt;li&gt;所谓的“前后端分离”：目前在基础产品线已经比较流行了，未来还会继续推广&lt;br&gt;&lt;/li&gt;&lt;li&gt;全栈应用：目前利用node完成所有业务逻辑的系统在阿里内的确不多，但其原因并不是node不够稳定（后面会继续分析）。但是随着组织架构的进化、对前端岗位职业规划的优化，完全使用node开发的关键应用会越来越多&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;b&gt;大促相关&lt;/b&gt;&lt;br&gt;&lt;br&gt;扯了这么多，回到问题本身。只说一个最直接的，大家今年访问到的所有www域页面（包括首页、频道、会场等）全部是一个全栈node应用支撑的。相比以往大促使用的技术方案，已经被证明的优势如下：&lt;br&gt;&lt;ul&gt;&lt;li&gt;节省了巨大的服务器资源&lt;br&gt;&lt;/li&gt;&lt;li&gt;提供页面安全性、稳定性&lt;br&gt;&lt;/li&gt;&lt;li&gt;对业务个性化需求的支持更好&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;（括号1：具体实现细节只能憋着不说……）&lt;br&gt;（括号2：评论有问技术细节的。只能简单说。前端技术：以前cdn+php+rsync，现在cdn+node+xtemplate +redis+oss；后端：以前java，现在node+java，本财年内会全部全部node。前端部分以前QPS低的可怕，XSS数量感人，整个体系没人敢去扩展。）&lt;br&gt;&lt;br&gt;表现？我们之前是出过一次严重故障，后果大家都可以猜到了。但是，正式那次故障，让PE体系和老板们知道了，原来我们的这么多页面都是node支撑的。&lt;br&gt;&lt;br&gt;大促当天，我们的系统没有出现过任何投诉，来自运营、前端的答疑竟然比日常还少。系统各项指标正常，符合之前的预期。大家最后都是在买买买。&lt;br&gt;&lt;br&gt;而之前提到的其它node应用，都不同程度上直接或间接的支撑了大促。&lt;br&gt;&lt;br&gt;&lt;b&gt;node应用对比java应用的表现？&lt;/b&gt;&lt;br&gt;&lt;br&gt;题主的问题，似乎我已经回答完毕了。但是我自己在扩展一下吧。那些质疑node的人，也多半会不由自主的把node和java进行对比。&lt;br&gt;&lt;br&gt;目前java仍然是阿里的根基，基础产品线（交易、detail、购物车等）目前看不到迁移到别的语言的可能。因为实在太稳定了，相关的容灾方案也跑了这么多年。没有明显的收益，人家为何要换技术？&lt;br&gt;&lt;br&gt;从已经官方公布的本次支付数据来看，峰值8.59万每秒。位于上游的应用，是什么数字？我这里只能憋着不能讲。面对如此巨大的TPS，不是说JVM多牛逼就可以解决的。这里主要有三方面：&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;基础设施：应用监控与日志、流量分配、流量降级、企业级中间件等，都需要语言框架级别的配套设施，这些node都没有。虽然朴大师主导的alinode已经开始beta了，虽然内部也有一些node中间团队（例如支付宝的苏千大师出品的各种东西），但和java比起来，还相差甚远。&lt;br&gt;&lt;/li&gt;&lt;li&gt;生态促进：这是比第一条更要命的。如果说稳定业务已经长期用java，不更换技术是正常的。那么新业务的开发，大家发现上下游全是java应用，那么就开始纠结自己为何要不走寻常路了。现在阿里内不的全栈node业务都没有关联性，不如java应用拥有如此强大的关系网。这一点也决定了，这个java开发即使转岗，也是使用的同一套技术和框架，对接类似的配套业务。&lt;br&gt;&lt;/li&gt;&lt;li&gt;人才储备：java发展了多年，有众多的研究员级别的大神为java体系撑腰，并直接参与java和jvm的开发。反观node体系，阿里内部并无一个能全方位托底之人（考虑复杂架构设计、性能与稳定性分析、运维等各角度）。node本身的contributor名单中，目前也还为有阿里的人（据说马上有）。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;这些差距，毫不夸张的说，需要5年甚至10年的追赶。就现在的状况，就算老板让我去用node重写一些交易业务，我也不敢去做。&lt;br&gt;&lt;br&gt;所以，目前核心的交易链路，是没有任何全栈node应用的。node在这块的表现自然没法评价。硬要评价，也是“无表现”。&lt;br&gt;&lt;br&gt;&lt;b&gt;总结&lt;/b&gt;&lt;br&gt;&lt;br&gt;node的应用场景在阿里内部还没有完全铺开。node社区本身已经进入了指数期，剩下的是我们node开发在自己企业内部进行落地。&lt;br&gt;&lt;br&gt;但是在其已经应用的领域，其表现是非常好的。&lt;br&gt;&lt;br&gt;PS &lt;br&gt;最后软文一把，希望对node感兴趣的Javascript开发、C/C++、Java开发加入我们团队，探索node在淘系业务的未来。&lt;br&gt;咨询邮箱： long.qul@alibaba-inc.com&lt;br&gt;团队博客：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//taobaofed.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Taobao FED | 淘宝前端团队&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>


<div class="zh-summary summary clearfix">

利益相关，负责淘系业务会场支撑系统的架构设计和开发。 一句话概括：你们根本不知道现在大促（包括日常、双十一）是多么依赖Node.js。 （后文用Node、node、nodejs、NodeJs均指Node.js） <b>Node在阿里内部的当前背景 </b> 两年前，你可以说node在阿里内部就像是…

<a href="/question/37379084/answer/71894611" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-11-12" target="_blank" href="/question/37379084/answer/71894611">编辑于 2015-11-13</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7158556"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>99 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic2.zhimg.com/758c601ef2c584d5974daf8c74d7f23d_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="91" data-type="Answer">
<link itemprop="url" href="/question/34147508/answer/63068656">
<meta itemprop="answer-id" content="20641495" />
<meta itemprop="answer-url-token" content="63068656" />
<meta itemprop="answerCount" content="38" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/34147508" target="_blank" data-id="5865610" data-za-element-name="Title">
网站为什么 JS 调用尽量放到网页底部？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/34147508/answer/63068656">
<!-- <meta itemprop="answer-id" content="20641495">
<meta itemprop="answer-url-token" content="63068656"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>826</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">826</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$igetit"
target="_blank" href="/people/igetit"
>igetit</a></span><span title="还有些理想……" class="bio">
还有些理想……
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="826" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">826</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="5865610" data-action="/answer/content" data-author-name="igetit" data-entry-url="/question/34147508/answer/63068656">

<textarea hidden class="content">这是个Meta级别的好问题！如果你想把web前端性能优化到极致，一定要认真地去了解这个原则背后的原理，而非表面的技巧。&lt;br&gt;&lt;br&gt;&lt;b&gt;（已完结，转载请署名，否则保留追究的权利）&lt;/b&gt;&lt;br&gt;&lt;br&gt;事实上，如果对web优化比较了解，只要一句话就能说清楚了。&lt;b&gt;web页面性能优化其精髓就是——将浏览器基本无序的资源加载请求用js有序地控制起来，包括js本身。&lt;/b&gt;&lt;br&gt;&lt;br&gt;这个原则几乎适用于所有web场景，只是它演变出来的具体做法千差万别，PC端和H5端由于环境不一样，也要有不同的玩法，而Bigpipe也是基于这个理念。但请问你能理解吗？&lt;br&gt;&lt;br&gt;如果你能理解，那么可以不往下看，如果不能理解，建议看看，或许有收获的。&lt;b&gt;我主要以PC端几个知名电商网站的优化为案例，来说明将js放在html不同位置都有什么不同。&lt;/b&gt;&lt;br&gt;&lt;br&gt;-----------&lt;br&gt;&lt;b&gt;一、为什么我会认为这是个好问题？！&lt;/b&gt;&lt;br&gt;&lt;br&gt;在我带过的几个电商项目前端团队中，就因为这个问题开过几个不开窍的前端。&lt;br&gt;&lt;br&gt;理由很简单，也比较霸道。这几天我们项目又在做前端性能优化，又有同事拿着这个疑惑来问我，呵呵，不会再乱开人了。&lt;br&gt;&lt;br&gt;以前为此开人，可能是我没能力用通俗易懂的文字来描述好这个问题，难免有误伤。为了避免这样的事情，我决定要好好把问题说清楚，就从浏览器渲染的原则开始！&lt;br&gt;&lt;br&gt;&lt;b&gt;二、是不是网页JS调用都尽量放到网页底部？&lt;/b&gt;&lt;br&gt;&lt;br&gt;按知乎的原则，先要问是不是，再问为什么，但这个'是不是'对于做前端技术的人来说，一眼就能看出个所以然。&lt;br&gt;&lt;br&gt;显然，不是的！但性能优化做得好的网站基本上是这个原则。给两个我认为前端优化做得比较好的知名海淘类电商，大家去观摩一下别人的做法：&lt;br&gt;&lt;br&gt;-----------&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.kaola.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;网易考拉海购！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.beibei.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;贝贝网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;-----------&lt;br&gt;&lt;br&gt;当然，我们不能用Bigpipe这种极端的优化技术流派来解答，或许是解答不了的，但即便是bigpipe其背后的原理也是和这个原则并没有冲突的，大道至简，底层的原理是一样的，只是它尽全力地利用每一次http请求，用前端的技术手段来加载足够多的资源。&lt;br&gt;&lt;br&gt;当然了，题主应该是一个前端开发，而且应该是在碰到页面优化需求或学习上的疑惑了，可能有人强逼这TA按照这样的原则去做，但又不知道什么别人为啥要求他这么做，于是就有了这个问题！&lt;br&gt;&lt;br&gt;至于情况是不是这样的，我只是瞎猜的。但是，我带的前端团队里面有不少同学存在同样的疑惑，因为我有这样一个规范：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/5c60a0428572a3264793df3819ba0f28_b.png&quot; data-rawwidth=&quot;757&quot; data-rawheight=&quot;753&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;757&quot; data-original=&quot;https://pic1.zhimg.com/5c60a0428572a3264793df3819ba0f28_r.png&quot;&gt;不知道有多少团队有这样的标准化demo模板规范？这是我1年多以前做的了，在这里——&lt;a href=&quot;//link.zhihu.com/?target=http%3A//pjg.pw/framework/front-end-dev-docc.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;基于gulp的前端框架开发规范&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。大家可以去我的博客看看，权当参考。当然，现在这个规范已经有了新版本。&lt;br&gt;&lt;br&gt;--------------------&lt;br&gt;&lt;b&gt;三、为什么网页JS调用都尽量放到网页底部？&lt;/b&gt;&lt;br&gt;&lt;br&gt;这部分如果《高性能网站建设指南》这本书上有详细说明的并且我也认同的，就直接截图贴过来，这里我只说自己的理解部分。还有，对于书本上的东西，我的态度是——尽信书，不如无书。&lt;br&gt;&lt;br&gt;&lt;b&gt;（一）大家的做法是不是一样的？&lt;/b&gt;&lt;br&gt;&lt;br&gt;ok，我先把问题分解一下。&lt;br&gt;&lt;br&gt;首先这里有个关键词——尽量。《高性能网站建设指南》这本书里面用的词是“如果可以的话”。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/2a9ff662555a6a963cb71fb98e36ca69_b.jpg&quot; data-rawwidth=&quot;711&quot; data-rawheight=&quot;337&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;711&quot; data-original=&quot;https://pic2.zhimg.com/2a9ff662555a6a963cb71fb98e36ca69_r.jpg&quot;&gt;&lt;br&gt;也就是说，js不完全是一定要放在页面底部的，但是你要了解清楚以下两个问题了：&lt;br&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;什么是尽量的（可以的）那部分js代码？&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;什么是不尽量的&lt;b&gt;（不可以的）&lt;/b&gt;那部分呢？&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;只有了解清楚这两个问题，你才知道如何去安排js在页面中的位置。ok，我们来看看考拉网和贝贝网的首页源代码。&lt;br&gt;&lt;ol&gt;&lt;li&gt;&lt;b&gt;考拉网：&lt;/b&gt;&amp;lt;head&amp;gt;&amp;lt;/head &amp;gt;之间就一段让IE9以下浏览器兼容HTML5标签的js代码，这是一个底层的兼容脚本，不涉及任何页面逻辑，而它的全部页面逻辑都是放置在脚步。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;贝贝网：&lt;/b&gt;&amp;lt;head&amp;gt;&amp;lt;/head &amp;gt;之间放置的是一些全局设置和一些统计脚本，也不涉及页面逻辑，逻辑部分js也是放在页面底部。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;我们项目的：&lt;/b&gt;做法是两者的结合，heah标签内就的js脚本就只是定义几个全局的命名空间和一段统计脚本，没了，而业务逻辑js就放置页面最底部。&lt;/li&gt;&lt;/ol&gt;&lt;img src=&quot;https://pic2.zhimg.com/a337d5d4b8164a7befaf84af8b56bc15_b.jpg&quot; data-rawwidth=&quot;789&quot; data-rawheight=&quot;500&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;789&quot; data-original=&quot;https://pic2.zhimg.com/a337d5d4b8164a7befaf84af8b56bc15_r.jpg&quot;&gt;&lt;br&gt;整体对比来看，css样式规划大家都基本相同，是1个全局+1个当前，文件名上通过md5戳来解决强缓存问题，js的缓存解决方案也是一样的做法。&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/805ed2242c25a6ad04a7597924285f25_b.png&quot; data-rawwidth=&quot;486&quot; data-rawheight=&quot;318&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;486&quot; data-original=&quot;https://pic2.zhimg.com/805ed2242c25a6ad04a7597924285f25_r.png&quot;&gt;&lt;br&gt;这是我们的PC端js的大致布局。考拉网也是类似分配方式，只是把core和common合并在一起（超过了200K），我们没有。我是觉得合并在一起这样模块太大了，不太利于弱网用户，但多一次http请求，有利有弊吧。&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/9d8964c97f9324d4595ff4b7228507b2_b.jpg&quot; data-rawwidth=&quot;953&quot; data-rawheight=&quot;646&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;953&quot; data-original=&quot;https://pic3.zhimg.com/9d8964c97f9324d4595ff4b7228507b2_r.jpg&quot;&gt;&lt;br&gt;有部分人可能会问，为啥不统统合并在一起，就1个HTTP请求了？我只能呵呵，网站不是只有1个首页，还有很多其他页面呢，只要把js底层库和常用的公共类库加载一次，其他页面就可以被缓存起来（form cache或304）&lt;br&gt;&lt;br&gt;这个前端技术表面的对比，是不是有点意思呢？&lt;br&gt;&lt;br&gt;我们几个都是海淘类垂直电商，只是定位和强势品类有些小差别，但在业务层面其实是基本相同的，都是海淘。也就是说，我们互为竞争对手！那么，很显然我们不可能相互沟通、开会，然后通报我用什么前端架构，前后端协作开发的模式等等技术问题，但是为什么做法上大家是那么的一致呢？&lt;br&gt;&lt;br&gt;这就是问题了！我绝对保证不认识考拉的前端架构设计师，但我的前端设计方案出来的结果几乎是一模一样的！为什么呢？&lt;br&gt;&lt;br&gt;简单点说，条条道路通罗马。就这样，没为什么。后面我汇以网易考拉为案例，逆向分析他们的做法，进而尝试窥探他们的前端架构设计方案。不一定正确，只是个人看法。&lt;br&gt;&lt;br&gt;如果你想得到绝对正确的答案，就想办法进入里面，或者发一个类似这样的问题（&lt;a href=&quot;http://www.zhihu.com/question/27745673&quot; class=&quot;internal&quot;&gt;美团的前端架构是怎样的？ - 前端开发&lt;/a&gt;），看看有没有人出来回复。&lt;br&gt;&lt;br&gt;&lt;b&gt;-------2015年09月10日22:56:43---------&lt;br&gt;&lt;/b&gt;&lt;b&gt;这里上一个简单的web优化对比图(&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.alibench.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里测，专业的网站即时探测工具&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/b&gt;&lt;b&gt;)：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/96f3eb9fceb9be6a6d8250006e4f6525_b.jpg&quot; data-rawwidth=&quot;1024&quot; data-rawheight=&quot;1698&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1024&quot; data-original=&quot;https://pic2.zhimg.com/96f3eb9fceb9be6a6d8250006e4f6525_r.jpg&quot;&gt;对比只是一个参考，不见得我们的技术开发人员实力很好，很多就是一般水平的。而且电商的竞争很多时候不仅仅是技术力量的角力，还有产品理念，运营能力，市场推广等等综合因素决定的，技术只是基础，特别是后进场的玩家，我们的项目上线才4个多月，我不想透露太多，避免中枪。&lt;br&gt;&lt;br&gt;这里是显摆的，我们项目最近优化的结果：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/c11a932ee11a5792f5319c4d6b421fd9_b.png&quot; data-rawwidth=&quot;1029&quot; data-rawheight=&quot;508&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1029&quot; data-original=&quot;https://pic2.zhimg.com/c11a932ee11a5792f5319c4d6b421fd9_r.png&quot;&gt;&lt;b&gt;这次的优化心得：&lt;/b&gt;&lt;br&gt;由于我们运营增加了2个第三方统计，是的我们对第三方静态内容缓存控制力度下降了，但是我们改善了gzip和图片的压缩优化，比前几天提高了几分，但我认为还有优化空间，比如：&lt;br&gt;&lt;ul&gt;&lt;li&gt;css用到的雪碧图的压缩比例还不够，需要改进前端构建框架，改进图片压缩的算法，下个星期上一个行版本，看看效果&lt;br&gt;&lt;/li&gt;&lt;li&gt;html文档并没有迷你化，要将服务端的模板弄到前端构建流程里面，控制起来做压缩，这个有利有弊，利就是可以在发布到服务端前作压缩，弊端就是迷你化后不太方便调试&lt;/li&gt;&lt;/ul&gt;这两点弄好了，上90分应该不成问题。如果也是做这一块的，可以将经验分享出来，相互学习。我们和考拉网的代码量几乎一致，交互也基本相同，有一定对比价值。&lt;br&gt;&lt;br&gt;----------&lt;br&gt;&lt;b&gt;这里必须补充一点：&lt;/b&gt;&lt;br&gt;&lt;b&gt;用类似&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.alibench.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;阿里测&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这种工具来对比，只能作为一种参考，如果大家的业务不同，页面的Dom数量差异太多，且交互场景也有很大差别，那么这种对比是没有任何意义的。&lt;/b&gt;&lt;br&gt;----------&lt;br&gt;&lt;br&gt;&lt;b&gt;（二）js在页面中不同位置带来的影响或效果区别&lt;/b&gt;&lt;br&gt;&lt;br&gt;（这里将是讲浏览器资源加载原理和js执行原理的，用通俗易懂的方式说明白需要死掉很多脑细胞，查阅很多很多资料，可能包括已经还给老师的E文，会慢一点点。我争取说得通俗易懂，但发现很难，大家要有心理准备。）&lt;br&gt;&lt;br&gt;要彻底搞懂，为什么别人建议js放在页面的底部，那么我需要从js的语言机制及其运行环境说起。&lt;br&gt;&lt;br&gt;&lt;b&gt;1，浏览器不是单线程的，它多线程的，如果有必要它还是多进程的。&lt;/b&gt;&lt;br&gt;&lt;br&gt;很多同学并不理解浏览器不是单线程的，别问我为什么，暂时不打算做代课老师，这里有两篇，自己去理解。&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ued.ctrip.com/blog/%3Fp%3D3287&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;浏览器是怎样工作的（一）：基础知识&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//ued.ctrip.com/blog/%3Fp%3D3295&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;浏览器是怎样工作的：渲染引擎，HTML解析（连载二）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;例如，Webkit或是Gecko引擎，都可能有如下线程：&lt;br&gt;&lt;ul&gt;&lt;li&gt;javascript引擎线程&lt;br&gt;&lt;/li&gt;&lt;li&gt;界面渲染线程&lt;br&gt;&lt;/li&gt;&lt;li&gt;浏览器事件触发线程&lt;br&gt;&lt;/li&gt;&lt;li&gt;Http请求线程&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;&lt;br&gt;2，js是单线程的&lt;/b&gt;&lt;br&gt;&lt;br&gt;证明的脚本：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/d4668c35dba4e13e5e26772326b1efb0_b.jpg&quot; data-rawwidth=&quot;576&quot; data-rawheight=&quot;319&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;576&quot; data-original=&quot;https://pic1.zhimg.com/d4668c35dba4e13e5e26772326b1efb0_r.jpg&quot;&gt;&lt;br&gt;在1万次循环迭代过程中，foo()一直先打印了1万次‘first’，定时时间执行时间为0，它也不去执行里面的mylog函数，而是等待循环结束后，再输出1万次‘second’，看起来像运行了两次迭代，是不是表现很怪异？&lt;br&gt;&lt;br&gt;为什么？&lt;br&gt;&lt;br&gt;因为&lt;strong&gt;JS运行在浏览器中，是单线程的，每个浏览器页面就是一个JS线程&lt;/strong&gt;，既然是单线程的，在某个特定的时刻只有特定的代码能够被执行，并阻塞其它的代码。而浏览器是多线程的，它又一个名叫&lt;strong&gt;Event driven（&lt;/strong&gt;&lt;strong&gt;事件驱动&lt;/strong&gt;&lt;strong&gt;）的线程，而且浏览器&lt;/strong&gt;&lt;b&gt;具备&lt;/b&gt;&lt;strong&gt;Asynchronized（&lt;/strong&gt;&lt;strong&gt;异步&lt;/strong&gt;&lt;strong&gt;）&lt;/strong&gt;执行事件的特性，会创建事件并放入执行队列中，异步执行。&lt;br&gt;&lt;br&gt;浏览器定义的异步事件有很多种，例如mouse click（鼠标点击事件）, a timer firing（定时器触发事件）, 或者an XMLHttpRequest completing（XMLHttpRequest完成回调事件），一旦js代码中有这样的事件代码，浏览器就会将它们放入执行队列，等待当前js代码执行完成之后，再按队列情况逐个执行。&lt;br&gt;&lt;br&gt;于是，我们就看到了上面的  setTimeout(mylog, 0);  这段代码被执行的怪异表现了，也就是mylog的执行顺序被改变了。&lt;br&gt;&lt;blockquote&gt;一个有用的知识点： setTimeout(func, 0)的作用&lt;br&gt;&lt;ul&gt;&lt;li&gt;让浏览器渲染当前的变化（很多浏览器UI render和js执行是放在一个线程中，线程阻塞会导致界面无法更新渲染）&lt;/li&gt;&lt;li&gt;重新评估”script is running too long”警告&lt;/li&gt;&lt;li&gt;改变代码块的执行顺序&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;b&gt;3，浏览器对资源的加载是线性的，可并行的，但js除外&lt;/b&gt;&lt;br&gt;&lt;br&gt;当我们在浏览器的地址栏里输入一个url地址，访问一个新页面时候，页面展示的快慢就是由一个单线程所控制，这个线程叫做UI线程，UI线程会根据页面里资源（资源是html文件、图片、css等）书写的先后顺序，它会按照资源的类型发起http请求来获取资源，当http请求处理完毕也就意味着资源加载结束。&lt;br&gt;&lt;br&gt;但是碰到javascript文件则不同，它的加载过程被分为两步，第一步和加载css文件和图片一样，就是执行一个http请求下载外部的js文件，但是javascript完成http操作后并不意味操作完毕，UI线程就会通知javascript引擎线程来执行它，如果javascript代码执行时间过长，那么用户就会明显感觉到页面的延迟。&lt;br&gt;&lt;br&gt;为什么浏览器不能把javascript代码的加载过程拆分为下载和执行两个并行的过程，这样就可以充分利用时间完成http请求，这样不是就能提升页面的加载效率了吗？&lt;br&gt;&lt;br&gt;答案当然是否定的。&lt;br&gt;&lt;br&gt;因为javascript是一个&lt;a href=&quot;//link.zhihu.com/?target=http%3A//baike.baidu.com/view/1757849.htm&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;图灵完备&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的编程语言，js代码是有智力的，它除了可以完成逻辑性的工作，还可以通过操作页面元素来改变页面的UI渲染，如果我们忽略javascript对网页UI界面渲染的影响，让它下载和运行是分开的（也可以理解为js代码可以延迟执行），结果会造成页面展示的混乱，或多次重绘。很显然，这样的做法是不合适的，因此，js脚本的下载和执行必须是一个完整的操作，是不能被割裂的。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/c89638665187ba132e58603eb21cb540_b.jpg&quot; data-rawwidth=&quot;1436&quot; data-rawheight=&quot;619&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1436&quot; data-original=&quot;https://pic1.zhimg.com/c89638665187ba132e58603eb21cb540_r.jpg&quot;&gt;百度首页的资源下载瀑布图（没有任何缓存状态下，所有http请求响应状态都是200）&lt;br&gt;&lt;br&gt;既然拆分js的下载和执行是不可行的，但为了提升用户体验，加快UI线程的执行又是一个无法回避的问题，于是浏览器就换了种方式，让它在同一个时间可以下载多个资源。&lt;br&gt;&lt;br&gt;例如上面百度的截图，在同一个域名下，firefox可以同时下载两种图片（chrome可以同时下载4个静态资源），不过这是针对图片和css文件，对于js文件似乎还是一个接着一个的下载，下载一个执行一个，不过到了js执行时候还是要严格按照顺序执行。当然，我在途中用黄色标记的几个js是并行加载的，其实是先前某个js发起的请求（这种做法就是无阻塞的js加载，也叫异步加载，后面我会说明这个东西有什么好坏）。&lt;br&gt;&lt;br&gt;多个http连接并行下载资源就好比多个线程共同完成某个任务，如果并行http连接更多，那么能有更多http资源同时被下载，但是浏览器提供并行执行的http连接实在太少了，例如上面firefox才两个，chrome也只有4个，那如何突破浏览器的连接个数的限制了？&lt;br&gt;&lt;br&gt;方法很简单就是将常用的，稳定的静态资源统一放在静态资源服务器上，由统一的域名对外提供连接，而这个域名要和主域名不一样就可以了。也就是将静态资源放在CDN节点上，单独用一个域名来对应。&lt;br&gt;&lt;br&gt;到这里，可能有人会问，是不是给每个静态资源分配一个域名，让所有资源都可以并行下载就会达到最佳状态了呢？&lt;br&gt;&lt;br&gt;答案当然也是否定的。简单滴说，有两个方面原因：&lt;br&gt;&lt;br&gt;一方面，我们采用的是http1.1版协议，它的特点是资源下载过程是一个长连接，而长连接的好处是在页面和服务端频繁交互时效率更好，但http协议有时候不是那么的可靠，导致服务器要维护一些无用的长连接，访问的人次越多越糟糕。另一方面，当我们同时在一个页面中使用的域名过多，会导致dns解析的开销增大。&lt;br&gt;&lt;br&gt;那么，多少个域是最合适的呢？好像是雅虎军规中有提过，最佳的建议是2个。也就是图片一个CDN域，css和js一个域。&lt;br&gt;&lt;br&gt;&lt;b&gt;4，&lt;/b&gt;&lt;b&gt;放到网页顶部的js就一定阻塞页面渲染吗？&lt;/b&gt;&lt;br&gt;&lt;br&gt;刚才说了，js之所以会阻塞UI线程的执行，是因为javascript能影响甚至控制UI渲染的过程，而页面加载的规则是要顺序执行，所以在碰到js代码时候UI线程就会通知js引擎来执行它。&lt;br&gt;&lt;br&gt;然而，很早很早以前，很多程序员不知道这个特点或者知道但被忽视，因此导致编写代码时候将用于展示的代码和用于处理逻辑的代码混淆在一起，这样做的后果是使js代码造成的阻塞更加严重，于是业界良心的雅虎出台了这个军规——将js脚本放置到html文档的末尾。&lt;br&gt;&lt;br&gt;如果不想深究这个话题，其实到这里就可以结束了。但是，我个人不是很喜欢按常规套路出牌，比如对于军规进行一个反问——难道将js脚本放置在head部分就一定会阻塞页面渲染吗？&lt;br&gt;&lt;br&gt;答案其实依然是否定的。我简单用常用的jQuery.lazyload插件整了两个简单的测试&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//sandbox.runjs.cn/show/mute4dfe&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;sandbox.runjs.cn/show/m&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;ute4dfe&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; --&amp;gt;这个是所有js在头部的&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//sandbox.runjs.cn/show/bnam8lfs&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;sandbox.runjs.cn/show/b&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nam8lfs&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; --&amp;gt;这个是所有js在尾部的&lt;br&gt;（这里请对比源代码）&lt;br&gt;两者的效果是一致的，但如果我们把js头部的lazyload实例化的脚本改成不放在  $(document).ready() 这个方法里，而是直接实例，那么lazyload就失效了。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//原来的&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img.lazy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazyload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果改成这样，并放在head标签内部，那么lazyload就失效&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//但是如果我们将这个放在所有的img元素以后，那么lazyload就又生效了&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img.lazy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazyload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;为什么会这样？&lt;br&gt;&lt;br&gt;虽然我们将js全部放在头部，但事实上是利用jq的一个延迟执行的接口——$(document).ready() ，让js逻辑（ $(&quot;img.lazy&quot;).lazyload(); ）的执行延迟到文档准备好了之后，因而保障了lazyload在执行的时候，页面中的img标签是存在的。&lt;br&gt;&lt;br&gt;但是，如果不放在这个接口里面，那么头部的js逻辑就会在文档准备完成之前执行，这时候页面中还没有img元素，因此也就失效了。&lt;br&gt;&lt;br&gt;不过，如果我们将这段实例化的逻辑弄到后面（所有img标签之后），即便不放在$(document).ready里面执行，lazyload就又能生效了。&lt;br&gt;&lt;br&gt;但这个时候，其实这段逻辑依赖的jQuery库和lazyload插件并不需要放在head里面了，而只要保持在实例化的逻辑之前一点点就可以了，而这种做法就是雅虎军规推荐的。&lt;br&gt;&lt;br&gt;当然，这里的结论是&lt;b&gt;“放到网页顶部的js不一定阻塞页面渲染”，只要将实例化的js接口或方法封装在&lt;/b&gt;$(document).ready接口内，这样就可以保障逻辑能够顺利进行。&lt;br&gt;也可以这么写：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;img.lazy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazyload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;b&gt;5，为什么电商网站喜欢将&lt;/b&gt;&lt;b&gt;js逻辑放在脚部呢？&lt;/b&gt;&lt;br&gt;&lt;br&gt;很显然，这并不是海淘电商的前端架构设计者有特殊的癖好，而是业务优化的需要。但是，这个需要结合不同的架构情况来具体分析，如果涉及到需要用前端模板引擎渲染页面的，情况就更加复杂了。&lt;br&gt;&lt;br&gt;比如&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.vip.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;唯品会&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，大家先去观摩一下她的首页，是不是有很多类似这样的代码：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 导航选择分区浮层 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;J_selectArea_list&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sel-area-box-inner&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;J-areaBinner&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ico-arw&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/i&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sab-tit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;请选择所在的收货地区&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sab-table&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mars_sead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;home_top_zone_link&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/th&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;td&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;J_select_item&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mars_sead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;te_home_head_diqu_link&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{$warehouse}&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{$id}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/span&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/table&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 导航选择分区浮层 end --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这就是前端模板引擎的标志性代码。那么，就这种情况，我先提出几个疑问：&lt;br&gt;&lt;br&gt;a，请问当页面有大量这样的代码需要处理和维护时，页面中的js到底怎么布置才是合理的呢？&lt;br&gt;b，你不觉得，这样的模板维护起来是不太容易吗？直接放置在页面上，如果这个页面要经常变动（首页显然是变动频率比较高的），前端后端都可能有人来维护这份代码，请问冲突了怎么解决呢？有没有办法将冲突风险降到最低？&lt;br&gt;c，请问如果我们不把这些文件直接放在页面上，比如将它们弄到在某个js里面，这样做可以吗？&lt;br&gt;d，如果要这样做，如何让前端开发人员容易维护这样的代码，比如保存即可看到效果，需要怎样一种前端架构设计来完成这需求呢？&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;严重声明：&lt;/b&gt;&lt;br&gt;1. 这里并不是想拿VIP开刷，而是我真的一时半会找不到更合适、更有代表性的对象了。这些问题涉及前端开发模式选择的问题，这个章节我不打算展开，留给后面的前端架构分析来补充！&lt;br&gt;2. 虽然我觉得VIP的做法还有更好的选择，但并不是说换我去实施就一定比现在负责这一块的同行做得更好，真心不是这样的。电商这一个领域，很多时候业务的实现都是有时限的，特别是VIP这种高速发展的电商，因此这里只是一种局外人的视角，随便说说罢了。&lt;/blockquote&gt;&lt;br&gt;&lt;b&gt;先解决这个问题——&lt;/b&gt;&lt;br&gt;&lt;b&gt;为什么我会说电商喜欢将js放在页面的尾部是因为业务优化的需要呢？&lt;/b&gt;&lt;br&gt;至少我已经找到了3家（就是前面对比的），因此这不是个例。这里要搞清楚“电商的业务优化需要”是什么？&lt;br&gt;&lt;br&gt;首先，我们要知道，电商其实就是和钱打交道的网站，卖东西，然后收钱，本质上和你我他家门口的小卖部没啥两样，只是我们通过网络来进行，而网络这种东西是不透明的，你不知道卖东西的是不是一条狗还是一只猫，当然买东西的一样，大家相互信任的基础是非常薄弱的。&lt;br&gt;&lt;br&gt;好在淘宝等一大批先驱将网络支付的这种文化或习惯培养了起来，我们后进场的电商玩家就要基于各种在线支付手段来完成买卖，但是玩家人数很多啊，而且都不是BAT级别的，本来用户对于这种电商的信任度就比较低，大家对于任何可以提高用户体验的细节都要做到斤斤计较，能有多完美就要多完美。&lt;br&gt;&lt;br&gt;还有很多，但必须打住...我只是为了照顾部分客官，打了这么多废话出来，其实就是想说明电商的竞争非常激烈，极致的用户体验是分出胜负手的关键，这就是前端技术发挥余力的地方了。比如，尽快输出首屏幕的页面内容，尽快地让用户可以进行交互，等等吧。首页首屏秒开已经是电商的最低要求了，秒开，你懂吧？&lt;br&gt;&lt;br&gt;&lt;b&gt;那么，电商的首页首屏都有啥内容呢？如何以极限的速度呈现给用户呢？&lt;/b&gt;&lt;br&gt;&lt;br&gt;咱们是前端，我只能限制在前端的范畴。假设html文档都是150Kb左右，gzip之后是30Kb左右，网络带宽一样，而用户获得文档的时间基本是一致的。在这些前提下，我们同时获得文档之后，如何根据html结构布置js及其交互逻辑，才能以最快速度呈现首屏内容并提供交互呢？&lt;br&gt;&lt;br&gt;这里就以考拉网为例，其首屏内容如下图：&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/d00c43c0251a039d3828e96a60367ccf_b.png&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;900&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic4.zhimg.com/d00c43c0251a039d3828e96a60367ccf_r.png&quot;&gt;&lt;br&gt;其首屏内容可细分为&lt;br&gt;&lt;ol&gt;&lt;li&gt;header部分（包括topbar、logo、搜索框和导航）&lt;br&gt;&lt;/li&gt;&lt;li&gt;slider广告幻灯片（多图）&lt;br&gt;&lt;/li&gt;&lt;li&gt;四个优势提醒（网易自营，低价保障，闪电发货，全场包邮）&lt;br&gt;&lt;/li&gt;&lt;li&gt;一个通栏广告（就是App下载的那个）&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;由于浏览器线性加载的特点，首屏内容看到之前，我们至少会得到文档内容和css样式，如果我们第一时间让用户看到页面，那么，这里就应该只有首屏的图片就可以了，比如logo、购物侧图标、banner大图，四个优势对应的图标以及广告图片。&lt;br&gt;&lt;br&gt;如果我们将js布置在head里面，那么碰到js就要第一时间去加载js，这里就要消耗浏览器加载资源，对吗？而且js是阻塞方式加载的，即便是加载足够快，但也阻挡了首屏的内容！也就是，将js放在这里是不合适的。&lt;br&gt;&lt;br&gt;但是，我们将js放到文档的后面，如果前面有很多很多的图片资源，那么浏览器发起js加载请求可能就要等这些图片加载之后，那么首屏的页面却需要js提供交互了，比如幻灯片就是这种情况，那么首屏之后的内容就不能干扰js的加载，否则用户体验就很差，因为发生了TTI延迟问题（这个TTI兄弟，它有很多可以诉说的故事，切莫着急，俺会慢慢道来滴）。&lt;br&gt;&lt;br&gt;&lt;b&gt;事实上，网易考拉网的首页首屏内容的呈现的优化空间，至少有两点：&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;第1点：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/5d3ee0961fca6fb6c18dec3c9d2a5f1c_b.jpg&quot; data-rawwidth=&quot;1125&quot; data-rawheight=&quot;475&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1125&quot; data-original=&quot;https://pic1.zhimg.com/5d3ee0961fca6fb6c18dec3c9d2a5f1c_r.jpg&quot;&gt;导航里面有很多“热卖大牌”，带有logo的，这些logo图片是直接用src发请求的，这是完全没有必要的，因为第一次进来用户没有触发导航下拉之前看不到这些东西，或者他可能从来到这里到离开，都不会点击打开下拉列表。&lt;br&gt;&lt;br&gt;比如我就是一个案例，在没有写这个文章之前，也不知道导航里面有那么多图片的，研究了源代码才发现这里还有那么多精彩，因此建议用js控制起来，用户没有触发之前就不要发起请求了。&lt;br&gt;&lt;br&gt;&lt;b&gt;第2点：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/b3c1e9abc5c4da5fb33183c3240d5dce_b.jpg&quot; data-rawwidth=&quot;1245&quot; data-rawheight=&quot;560&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1245&quot; data-original=&quot;https://pic3.zhimg.com/b3c1e9abc5c4da5fb33183c3240d5dce_r.jpg&quot;&gt;首屏内容中轮播大图在用户进来之后就全部加载了，这也是没有必要的，只需要其中的一张即可。也就是，进入页面后用img的scr发起一个下载请求，其他img不要即刻去发起下载，而是等到js加载之后，用js来发起其他图片请求，等待所有轮播图片都加载完成之后，再执行轮播的逻辑。&lt;br&gt;&lt;br&gt;但是，如果要用js控制轮播图的加载就会有一个技术上的难点，如何知道轮播图片加载完成了呢？是全部完成之后再提供轮播切换交互，还是出现加载完一张就多一个切换，抑或是当加载到第n张之后就开始提供可交互，而不管n张以后的是否加载完成呢？此外，如果是要兼容IE6/7/8，坑很多。&lt;br&gt;&lt;br&gt;&lt;b&gt;按照这个思路，在兼顾SEO的前提下，&lt;/b&gt;&lt;b&gt;PC端&lt;/b&gt;&lt;b&gt;电商首页首屏要以极限的速度呈现给用户，我的做法是：&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;也就是说，&lt;/b&gt;&lt;b&gt;电商&lt;/b&gt;&lt;b&gt;网站&lt;/b&gt;&lt;b&gt;PC端做极限的性能优化，其精髓就是——&lt;/b&gt;&lt;b&gt;将浏览器基本无序的资源加载请求有序地控制起来，包括js本身，这就是js要放在脚步的缘由。&lt;/b&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;除了首屏看得见的资源（主要是图片资源）外，其他资源一律需要通过js来控制，而不能随意地发起http请求&lt;/b&gt;&lt;b&gt;（包括首屏看不到的资源）&lt;/b&gt;&lt;b&gt;。按照这个原则，js只能放在body标签闭合之前，并且js逻辑不能随意书写！&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;其实这样做是有代价的，图片资源无法被搜索引擎正常抓取！但是这个对于电商来说，重要吗？大家都是要通过购买流量来PK的，所以不太重要。不同版本的浏览器下，对于资源下载都有一定优化，webkit内核的浏览器表现好很多，其他浏览器尤其是老版本的IE表现有时候让人搞不明。&lt;br&gt;&lt;br&gt;以考拉网为案例，说明电商网站喜欢将js放在底部，其缘由其实是因为业务优化需要，但并不是每一家都会这么做，典型的代表例如Tmall、VIP等，为什么有还是有不少电商是不放在底部的呢？&lt;br&gt;&lt;br&gt;其实很多时候还是要看业务需要，以及和一开始的技术选型有关，这个真不是一时半会可以说得清楚的，这里就不展开了。&lt;br&gt;&lt;br&gt;-----编辑于2015-09-13 09:12:23-----&lt;br&gt;&lt;b&gt;（三）逆向分析考拉网的前端架构方案&lt;/b&gt;&lt;br&gt;&lt;br&gt;这里分享的是根据别人将js放在底部，并且只能看到一大堆压缩优化后的代码，如何去学习别人前端架构设计的一种方法或途径。&lt;br&gt;&lt;br&gt;当然，我经常这么做，收获颇大，有时候想偷窥别人的源代码，这样才是最接近真实情况的，有时候确实也能瞎猫撞上死耗子。不管怎样，我觉得这种方法还是可行的，分享给大家。&lt;br&gt;&lt;br&gt;还是以考拉网为例。我先把首页html框架抽出来，梳理出大致页面结构，然后结合js，来看看别人是怎么做的。考拉的首页html框架如下：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;网易考拉海购&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://mm.bst.126.net/build/combo_f0ae46c.css?v=201509122013&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://mm.bst.126.net/build/combo_935bd74.css?v=201509122013&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;indexPage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topNav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hide&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;网易考拉海购&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;docHead&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topTabBox&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;topBgWrap clearfix&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- sliderBox --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-slogan&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 四个优势列表 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mainBgWrap clearfix&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-recomds&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 每日上新列表 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-halfbanner&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 四个半屏banner列表 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w-tit1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;big&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;今日限时特卖&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hotsaleblock&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 今日限时特卖列表 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-recomds m-recomds-next&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w-tit2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;big&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;下期特卖预告&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 下期特卖预告列表 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w-tit1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;big&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;全球精选&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-hslist clearfix&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 全球精选列表 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;article&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-mustbuy&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;w-tit1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;big&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 海淘必买 / &lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 海淘必买列表 --&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rightBar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;m-rightbar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 左侧导航 --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 这里语义有点问题，应该是右侧那条黑色Bar --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;footer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;docFoot&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- footer导航、版权区域 --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://mm.bst.126.net/build/combo_a235696.js?v=201509122013&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//对导航效果进行初始化&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里为啥不判断 Core 是否存在呢？还不够严谨。&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;navInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://mm.bst.126.net/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;201509122013&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1442105236646&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://mm.bst.126.net/build/combo_ef4c658.js?v=201509122013&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//对导航效果进行初始化&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里的判断严谨多了&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//连续并列运算可简化判断，而且效率更高，请学习！&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quickInit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quickInit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//code here，省略&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://kxlogo.knet.cn/seallogo.dll?sn=e15040881010058239iy2f000000&amp;amp;size=0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://analytics.163.com/ntes.js&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;_ntes_nacc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;kaola&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//声明要统计的域&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;neteaseTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//网易自家的统计跟踪&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;neteaseClickStat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//网易自家对用户行文跟踪&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//code here&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这里还是一大堆第三方统计&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这份html结构可以膜拜一下，它在语义化方面做得非常出彩，几乎完美，特别是对H标签的使用非常合理，出神入化了，功力非常深厚，这种做法和163首页的做法如出一辙。可想而知，这一首页的html开发者应该系出同门，同样也可以想到网易内部的技术培训应该是完善的，建议大家好好观摩，值得学习。&lt;br&gt;&lt;br&gt;好了，神拜完了。我们开始吧。&lt;b&gt;第一个问题，网易考拉的js底层框架或类库是什么？&lt;/b&gt;&lt;br&gt;&lt;br&gt;咱们就从它的第一个js文件找找起，这就应该是他们的最基础的框架或类库，就这个 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//mm.bst.126.net/build/combo_a235696.js&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;mm.bst.126.net/build/co&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;mbo_a235696.js&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;br&gt;&lt;br&gt;大家不妨点击打开，然后格式化看看，工具比如&lt;a href=&quot;//link.zhihu.com/?target=http%3A//tool.oschina.net/codeformat/js&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;在线代码格式化&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，或者在Sublime text中安装一个格式化的插件，我用的是 &lt;a href=&quot;//link.zhihu.com/?target=https%3A//packagecontrol.io/packages/HTML-CSS-JS%2520Prettify&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML-CSS-JS Prettify&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; ，这个比较好用，其他编辑器没研究。格式化完成后，很容易找到 jquery: &quot;1.4.2&quot; 。就是这个了，底层是jquery-1.4.2版本，和官方的&lt;a href=&quot;//link.zhihu.com/?target=http%3A//code.jquery.com/jquery-1.4.2.js&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;code.jquery.com/jquery-&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;1.4.2.js&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;对比一下，没有改动。&lt;br&gt;&lt;br&gt;继续分解压缩后的代码，如下（跪求源码）：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;//jquery 1.4.2
!function(e, t) {
    e.jQuery = e.$ = g
}(window);

//这里是一个二维码生成器基类，全局的
//学习点，QRCode定义在全局，但其实则放在一个闭包内部，避免污染
var QRCode;
!function() {
    QRCode = function(t, e) {
        //code
    }, QRCode.prototype.makeCode = function(t) {
        //code
    }, QRCode.prototype.makeImage = function() {
        //code
    }, QRCode.prototype.clear = function() {
        //code
    }, QRCode.CorrectLevel = l
}();

//这里又是一个闭包，闭包内部主要是用来扩展jQuery的方法
//例如扩展Number/String原型方法、判断IE678、cookie等等
!function(e, t, i) {
    //一大堆code
    //这里有个有意思的东西，应该是一个弹窗
    //不过是用Core.loadCdnJS异步加载的
    t.dialog = t.dialog || function() {
        var e = arguments;
        Core.loadCdnJS(&quot;js/dialog.js&quot;, function() {
            t.dialog.apply(t, e)
        })
    }
}(window, jQuery);

//这里就是页面上看到的自定义基类
var CopyCore = Core;
var Core = function(e, t, i) {
    //一大堆code
}(window, jQuery);
jQuery(window).unload(function() {
    //code
});
//(⊙o⊙)…这里是让自定义基类Core在文档准备完成后初始化
jQuery(document).ready(function() {
    Core.init()
});
//按语义，easyNav应该是一个快速导航的方法
var easyNav = function(e, t, i, n) {
    //其实不用纠结是干什么的
};
//这里又是一个自运行的闭包
!function(e, t, i, n, o) {
    //反正就是一大堆业务逻辑相关的代码
    //其实不用纠结是干什么的
}(window, jQuery, Core, easyNav);

//这里又是一个自运行的闭包
!function() {
    //这里里面好像是一些修复js原生方法缺陷的代码，比如json的处理
    //其实不用纠结是干什么的
}();
//这里定义了一个全局对象，带两个属性
this._nisas = {
    _$host: location.host,
    _$doc: document
};

//这里又是一个自运行的闭包
!function(e) {
    //密密麻麻的不知道干什么，猜测是用来加密的，看得头晕眼花的
}(this._nisas);

//这里也还是一个自运行的闭包
!function(e, t, i) {
    //autoSearch,也就是搜索时，输入关键词后自动联想的方法
}(window, jQuery);

//这里依然是一个自运行的闭包
!function(e, i, n) {
    //目测就是一个弹出层登录注册业务空间
}(window, jQuery, easyNav);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;----编辑于2015-09-13 12:54:22，继续偷窥----&lt;br&gt;这个文件 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//mm.bst.126.net/build/combo_ef4c658.js&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;mm.bst.126.net/build/co&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;mbo_ef4c658.js&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，内容就比较简单了，脉络如下：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//一大堆业务逻辑，目测是全局的，比如用户状态处理、加入购物车等&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;easyNav&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//easySlider,幻灯片逻辑，比较简单的，但做法值得借鉴&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//这可以学习一下，不知道是自己写的还是第三方库改的&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;easySlider&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//也是一大堆业务逻辑,首页用到的 Core.quickInit 方法&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;quickInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;myInit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//签到，领取优惠券等逻辑&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;yigouPop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;getCoupon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;checkIsNewer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;initTemplates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//code&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;jQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;到这里，我们基本得到了网易考拉的js业务框架模型，就是基于jQuery进行的扩展，然后定义名为‘ Core’的基类，后面均是继承这个基类来扩展业务，其实没有想象的那样复杂，反而非常简单。&lt;br&gt;&lt;br&gt;&lt;b&gt;简单就是高效，这是值得学习的，做架构就要将复杂的业务简单化。&lt;/b&gt;&lt;br&gt;&lt;br&gt;但问题是如何维护这样的代码？开发中肯定不是长成这样子的。团队配合开发，一定是分模块的，除非考拉只有一两个前端，这显然不合理嘛！如果要想得到这样的结果，并且容易维护，那么它的原来面目是怎样的呢？&lt;br&gt;&lt;br&gt;我画一个乱猜js目录结构示意图（重申，是乱猜的）：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/fcaafa4fe01f5e1bb89ba43dd5bed2c5_b.jpg&quot; data-rawwidth=&quot;1516&quot; data-rawheight=&quot;1095&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1516&quot; data-original=&quot;https://pic2.zhimg.com/fcaafa4fe01f5e1bb89ba43dd5bed2c5_r.jpg&quot;&gt;(请点击放大)&lt;br&gt;&lt;br&gt;在考拉的js源码里面，我们没有发现AMD或CMD的模块化身影，模块都是同步加载的，那么在开发中是如何调试呢？每一个js文件就写一个src请求吗？显然不合理。那么，他们是怎么做的呢？&lt;br&gt;&lt;br&gt;现在的前端本地都应该安装了nodejs环境了的，这是前提，那么能想方法有多：&lt;br&gt;&lt;br&gt;&lt;b&gt;方式1：&lt;/b&gt;&lt;br&gt;grunt直接本地combo，在开发状态下就如图所示，直接生成一份没有压缩的代码，比如core_debug.js，这个放置在某个地方，前端开发就直接构造URL，例如&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&quot;http://localhost:8080/build/core_debug.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;http://localhost:8080/build/index_debug.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;在开发状态下只需要弄一个grunt的任务监控，监控模块的变化，一旦有修改就马上生成新的，开发人员F5刷新一下页面就能看到页面了，或者开一个自动刷新页面的grunt任务。&lt;br&gt;&lt;br&gt;&lt;b&gt;方式2：&lt;/b&gt;&lt;br&gt;前端架构师写一个本地的在线combo服务器，服务器指向前端源码目录，然后让开发人员自己构造请求，然后combo服务器自动返回结果。类似这样：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script src=&quot;http://localhost:3333/??core/baseFn.js,core/core.js,core/core-init.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;我以前写过名为‘一款淘宝风格的静态资源在线COMBO服务器’，有兴趣可以试试 &lt;a href=&quot;//link.zhihu.com/?target=http%3A//lmtdit.github.io/static-combo/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Static-combo&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，支持css和js。&lt;br&gt;&lt;br&gt;&lt;b&gt;方式3:&lt;/b&gt;&lt;br&gt;借助后端开发语言（一般就是php了，其实nodejs也可以），建立一个具备后端语言抽象能力的前端开发调试环境，然后弄一个js初始化的函数，比如写成这样：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;%- init_js('core/baseFn.js,core/core.js,core/core-init.js') %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;输出的结果就如同上面的就可以了，这样的函数很容易实现的。其他语言版本也一样的。&lt;br&gt;&lt;br&gt;方法4、5、6、7、8……方法很多了，就不赘述了。&lt;br&gt;&lt;br&gt;开发好了之后，如何发版？如何解决由于内容摘要变化而引起的js引用路径变化的问题呢？这方面的原因和解析，可以参考FIS的做法，&lt;br&gt;&lt;br&gt;好了，这个问题基本到这里就超出了话题的范围。再深入，估计都没人再看了。&lt;br&gt;&lt;br&gt;&lt;b&gt;（四）之前的一些疑问解答&lt;/b&gt;&lt;br&gt;&lt;b&gt;&lt;br&gt;1，先针对VIP业务的几个问题&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;问题1：当我们要在页面中使用客户端渲染页面时，而渲染的模板结构代码直接书写在页面中，JS怎样布置才合理？&lt;/b&gt;&lt;br&gt;&lt;br&gt;很显然，由于模板是在页面中的，那么在这些代码之前最好将核心类库以及js模板引擎库放在它们的前面，就是这两段script代码。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//s2.vipstatic.com/js/public/jquery-1.10.2.js?12015091101&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;//s2.vipstatic.com/js/public/core3.js?12015091101&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;看了一下，VIP用的是CMD模块化方案来实现core3.js，这个文件内部就是很多CMD模块合并起来的底层类库，挂载在VIPSHOP这个全局对象下，有部分公共方法则挂载在jQuery下，比如前端MVC渲染引擎就是jQuery.Template，这里的核心类库的实现方法很有意思，也是一种比较独特的实现，值得学习。&lt;br&gt;&lt;br&gt;不过在这里有一个做法让我百思不得其解，访问量如此之大的为啥还是采用覆盖式发布前端代码？跪求大神出来解答。静态资源覆盖式发布这个话题，在&lt;a href=&quot;http://www.zhihu.com/question/20790576&quot; class=&quot;internal&quot;&gt;大公司里怎样开发和部署前端代码？&lt;/a&gt;这里有分析解答，我就不赘述了。这里只探讨当页面中存在前端模板时，我们到底如何布置js的位置。&lt;br&gt;&lt;br&gt;这里需要补充一个知识点“&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/tags/att_script_type.asp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;HTML &amp;lt;script&amp;gt; 标签的 type 属性&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;”，type属性并没有包含“text/html”这个类型，也就是当页面碰到这个&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3school.com.cn/tags/att_script_type.asp&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;script&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;标签时并不会当做js来处理，而是作为一个display=none的标签不做渲染。&lt;br&gt;&lt;br&gt;但是VIP页面上存在大量这样的标签，我们其实也知道这是一个前端模板引擎，需要替换为页面结构内容才有用，但是前提是有可以替换的内容才行。为此，在VIP的首页html文档上存在大量的后端输出的json内容，存储在 VIPTE 这个对象下。当用户获得html之后，这些内容就可用作渲染的数据了。&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/04d422e1b37c6a0406fc0fa6bfdf6dcc_b.png&quot; data-rawwidth=&quot;767&quot; data-rawheight=&quot;368&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;767&quot; data-original=&quot;https://pic1.zhimg.com/04d422e1b37c6a0406fc0fa6bfdf6dcc_r.png&quot;&gt;&lt;br&gt;在这种情况下，为了更快地将 script type=&quot;text/html&quot; 标签内的东西渲染出来，那么就必须尽早部署前端的MVC渲染引擎，也就是core3.js，但这个文件又是基于jQuery的，jQuery又必须在它之前。这就是为什么要将这两个js放在 head 内第一时间加载的原因了。&lt;br&gt;&lt;br&gt;当然，将js部署在head第一时间发起下载请求，但是之前我已经说过了，如果要以极限的速度呈现首屏的内容，js放在head中并不是最佳的做法，但由于需要处理前端MVC的模板，不得已才将其放在了这里，这对于VIP的业务而言才是最合理的。&lt;br&gt;&lt;br&gt;&lt;b&gt;问题2：这样的模板维护起来容易吗？有没有更好的方法处理前端MVC模板？&lt;/b&gt;&lt;br&gt;&lt;br&gt;很显然，VIP的view层模板引擎系统应该是PHP提供的语言支持，可能是由前端和后端来共同维护，那么这样将大量的前端MVC模板书写在后端的模板上，在我看来这是不太容易维护的，因为前后端都可能要对其进行修改，即便主要由前端开发人员来维护，可能也会频繁改动，如果是多人维护的就非常容易导致代码冲突。&lt;br&gt;&lt;br&gt;当然，如果利用php模板包含的方式进行一定的抽象是可以将冲突的风险降低，但是还是可能被后端修改，这依然不是最完美的解决方案。而且，这种前端MVC的方式来做页面的渲染存在SEO问题，既然如此，前端MVC模板是否直接打印在html文档上，还是放在其他地方，对于搜索引擎而言都是一样的。&lt;br&gt;&lt;br&gt;那么，有没有更好的方式来处理前端模板引擎呢？&lt;br&gt;&lt;br&gt;我认为，可以将这样的模板直接编译成js对象，不再通过抓取DOM的方式来获取模板内容，这样做至少有以下几个好处：&lt;br&gt;&lt;ul&gt;&lt;li&gt;可以省去DOM遍历这一个耗费性能的过程，DOM操作一直以来都是耗费性能的，不是吗？&lt;br&gt;&lt;/li&gt;&lt;li&gt;从服务端模板抽离出来之后，单独由前端来维护还可以降低代码冲突，进而降低前后端协作开发的耦合度。&lt;br&gt;&lt;/li&gt;&lt;li&gt;模板编译成js之后，可以放入到CDN进行内容分发，而不再是从服务器端输出，不仅可提高用户加载的效率，还可以减小服务端输出的文档大小，降低带宽消耗。&lt;/li&gt;&lt;li&gt;一旦这样实施了，那么jquery和core3.js就没有必要放 head 内做前置加载了，不是吗？&lt;/li&gt;&lt;/ul&gt;很显然，如果有办法实施这样的做法，那将是一举多得的，问题是如何去实现呢？&lt;br&gt;&lt;br&gt;&lt;b&gt;问题3：如何将前端MVC模板html编译成js对象？构建框架如何设计？&lt;/b&gt;&lt;br&gt;&lt;br&gt;事实上，当我们需要使用前端MVC的时候，都会存在这样一个问题，我负责的项目也一样碰到了！这里涉及前端构建框架的设计了，深层次的需求其是要解决&lt;b&gt;前端MVC模板html的开发维护问题，为什么这么说？&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;因为开发人员不可能直接维护这样的东西：&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/865671ae765d41aacf06cfe8771f64d4_b.png&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;900&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic1.zhimg.com/865671ae765d41aacf06cfe8771f64d4_r.png&quot;&gt;我们将前端mvc模板编译成js，这只是我们想要的结果，但绝非是过程，开发人员维护的应该是容易看懂的html源文件，然后通过构建编译成上图中的js对象。&lt;br&gt;&lt;br&gt;我给出的做法是这样：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/0aabe4b696f41ca2c8dc9d6741d03849_b.jpg&quot; data-rawwidth=&quot;1110&quot; data-rawheight=&quot;781&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1110&quot; data-original=&quot;https://pic2.zhimg.com/0aabe4b696f41ca2c8dc9d6741d03849_r.jpg&quot;&gt;这里需要注意的是，html修改后即时编译，编译后如何快速调试，这个过程的开发体验不好，前端开发人员是不会接受这种间接的模板维护机制的。&lt;br&gt;&lt;br&gt;同理，很多带UI的js控件或插件，也可以建立类似LEES/SASS to Javasctipt的维护机制，把css自动编译成js模块，进而实现页面独立空间的js化，而开发维护的源码又是前端人员熟悉不过的html或less。&lt;br&gt;&lt;br&gt;事实上，这种机制有点类似react.js的做法，只是在我建立这种机制的时候，还不晓得存在react.js这种东西。也罢，我不否认react.js的理念真的很牛逼，但它想要实现的东西咱也有自己的做法，也一样能够解决问题，不用崇洋媚外。&lt;br&gt;&lt;br&gt;从这个角度看，VIP的前端业务的实现完全可以考虑迁移至React.js来实现。当然，这只是我的个人看法，瞎猜的。&lt;br&gt;&lt;br&gt;&lt;b&gt;2，JS的同步加载和异步加载对于TTI的影响&lt;/b&gt;&lt;br&gt;&lt;br&gt;其实不管我们将js放在heah部分还是body结束之前，都可以使用异步加载js，这种加载方式并不占用浏览器默认发起的http请求，因此可以实现某种意义上的多个js同步下载，这看起来对于加快js脚本的下载是有好处的，但事实上是这样的吗？&lt;br&gt;&lt;br&gt;当我们采用这种异步加载机制时，达到多个js同步开始下载，但由于每个js的大小是不一样的，而且网络状态也并非时时刻刻稳定的，那么浏览器并不知道同步开始下载的N个js何时才下载完成。为了解决这个问题，就需要一种机制来监控或处理js下载队列，并通过轮询的方式保障所监控的js已经下载完成，这样才能用它了处理业务。&lt;br&gt;&lt;br&gt;这就是AMD或CMD这两种规范要解决的问题，它们都是从commonJS规范演变出来的针对浏览器的实现，分别对应的代表或代表类库就是我们熟悉的Require.JS和Sea.JS。&lt;br&gt;&lt;br&gt;这两者的区别不是这个话题要讨论的，事实上，只有在异步模式下，两者才会有所区别，如果是combo成同步，就没有区别了。在这里我参数从两个维度来分析两者的区别，可能组合有以下6种：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/362ff90d882b8171c5a49635d7ef9e80_b.png&quot; data-rawwidth=&quot;511&quot; data-rawheight=&quot;263&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;511&quot; data-original=&quot;https://pic1.zhimg.com/362ff90d882b8171c5a49635d7ef9e80_r.png&quot;&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;A组合：&lt;/b&gt;将所有js放在头部直接请求，这种是很多传统网站的做法，估计现在没有多少电商是这样做吧？当然也不是没有，海淘电商还有一家，很知名。在我看来，技术储备的不足至少是其被贝贝网超越的很重要原因之一。&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;B组合：&lt;/b&gt;这就是考拉网和我们的做法，也是雅虎军规提倡的做法；&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;C组合：&lt;/b&gt;很多刚刚接触require.js或sea.js的前端开发者常用的方式之一，我开始也这么用require.js，估计一开始这样使用异步js的人不在少数；&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;D组合：&lt;/b&gt;很多刚刚接触require.js或sea.js的前端开发者常用的方式之二，我曾经这么用require.js，废话同上；&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;E组合：&lt;/b&gt;异步加载器和核心类库放在头部，其他当前页面模块或插件异步加载，这是VIP所采用的方式；&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;b&gt;F组合：&lt;/b&gt;异步加载器和核心类库放在尾部，其他当前页面模块或插件异步加载，这其实是贝贝网的这种做法。&lt;/li&gt;&lt;/ul&gt;在这么多种组合中，A组合可以不用拿出来谈了，已经证明最不合适的做法；B组合也谈得非常详细了，还是俩聊其他组合。E组合也有详细的分析，我不想再废话；这里主要谈C、D和F这三种组合。&lt;br&gt;&lt;br&gt;其实C和D这两种形式PK，一定是D更优化，对比的情形和AB两种对比是一样的，也就是我这里只需要对比BD这两种做法即可。在这里，我只能用自己负责的项目来对比，如图：&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/795b36081ef095f0126ff88444efce68_b.jpg&quot; data-rawwidth=&quot;749&quot; data-rawheight=&quot;216&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;749&quot; data-original=&quot;https://pic1.zhimg.com/795b36081ef095f0126ff88444efce68_r.jpg&quot;&gt;在这两种模式下，同一个页面的在打开后，不做任何下滑的动作，网络请求的状态对比如下：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/161d17abeefc7fd73eb4f5fc525ab581_b.png&quot; data-rawwidth=&quot;791&quot; data-rawheight=&quot;194&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;791&quot; data-original=&quot;https://pic2.zhimg.com/161d17abeefc7fd73eb4f5fc525ab581_r.png&quot;&gt;异步模式下，要下载的资源总体积要稍微大一点点，这是由于异步请求的js没有压缩造成的，但总体区别不是很大。&lt;br&gt;&lt;br&gt;在这种状态下，分别模拟1Mbps、2Mbps、4Mbps、30Mbps的网络请求，统计domContentLoaded时间（蓝线，Dom准备时间）和load时间（红线，window load时间），详细数据如下：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/6b8090e776c88ac11ab08ef668fa3521_b.png&quot; data-rawwidth=&quot;790&quot; data-rawheight=&quot;661&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;790&quot; data-original=&quot;https://pic2.zhimg.com/6b8090e776c88ac11ab08ef668fa3521_r.png&quot;&gt;将平均值抽取出来，对比如下：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/69bca3989928ce2c3684ff8acf990202_b.png&quot; data-rawwidth=&quot;806&quot; data-rawheight=&quot;444&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;806&quot; data-original=&quot;https://pic3.zhimg.com/69bca3989928ce2c3684ff8acf990202_r.png&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/cbcd517ed29721bf5844b08705a7f301_b.png&quot; data-rawwidth=&quot;818&quot; data-rawheight=&quot;476&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;818&quot; data-original=&quot;https://pic2.zhimg.com/cbcd517ed29721bf5844b08705a7f301_r.png&quot;&gt;&lt;br&gt;从对比可以看出，异步请求时可以更快获取DomLoaded明显快一点，但整体的准备时间就要明显比同步状态要慢一些，而且弱网状态下，后者的差距就更加明显；&lt;br&gt;而同步模式下，虽然获得并解析Doc文档内容的时间稍微慢一点点，但是最后所有资源load完的时间则要明显快于异步的模式。&lt;br&gt;&lt;br&gt;当然，两则要去除异步请求没有js没有压缩的影响，但是要要明白一点，同步模式下，我们在书写js逻辑时，是没有必要等待DomReady才去执行逻辑的，即chrome的蓝线之前也就是在即可执行js逻辑了，提供交互，在之前我有用lazyload做过演示，我们对于这个时间的控制力度是非常容易掌控的。&lt;br&gt;&lt;br&gt;但是异步则不然，因为在Dom loaded蓝线之后，异步发起的请求可能还并没有完全下载完成，对于异步的那些模块如何才下载完成，我们是不知道到，但一定是在蓝线之后，而在红线之前的某个时刻，模块越多、网速越卡，这个时间就越不准确。&lt;br&gt;&lt;br&gt;当然，最佳的网络状态下，Dom loaded蓝线好了之后，所有模块都已经准备好了，但是对于开发人员而言，我们掌控不了这个时间，只能交给不靠谱的网络去控制，这才是最大的问题！&lt;br&gt;&lt;br&gt;也就是说，虽然同步模式下加载js并执行逻辑会阻塞页面后续发起的请求，我们却可以准确地控制js可执行的时间，也就是在蓝线前一点点，但必须保障js是放在底部的！&lt;br&gt;&lt;br&gt;相反，虽然如果我们在页面中加载少量的js（最少就是加载异步js请求库，比如require.js），然后由这个库去发起请求，那么何时才能提供交互，TTI时间就不是在我们控制范围内了，并且在弱网状态下，异步对于TTI延迟的影响就越明显！&lt;br&gt;&lt;br&gt;我在一开始就提出这样的概念——&lt;br&gt;&lt;br&gt;&lt;b&gt;web页面性能优化其精髓就是将浏览器基本无序的资源加载请求用js有序地控制起来，包括js本身。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;而当我们使用异步去发起请求，虽然可以将dom loaded时间提前一点，但是却意味着我们失去了对异步模块的掌控，而将其何时加载完成交给不太靠谱的网络，&lt;/b&gt;&lt;b&gt;这才是我不赞成异步作为性能优化的手段的根本原因。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;我需要页面资源加载的控制权，失控是不能被接受的。&lt;/b&gt;但是，这结论有什么用呢？&lt;br&gt;&lt;blockquote&gt;&lt;b&gt;补充：什么是所指的“控制权”？&lt;/b&gt;&lt;br&gt;&lt;br&gt;所谓的控制权，简单滴说就是要按开发者的意愿来进行一种程序开发思维。在这里，它包括js的加载时机，js文件或模块加载的先后顺序、页面逻辑执行的先后次序等多个方面的控制权。&lt;br&gt;&lt;br&gt;js的加载时机和由js发起异步js的时机，这两个都是很容易控制的，但异步发起的js加载请求，每个用户的网络状况是不一样的，而且是不稳定的，模块加载的先后顺序就很难控制，甚至容易失控。&lt;br&gt;&lt;br&gt;当模块加载的先后次序无法精确控制的情况下，页面逻辑执行的先后次序就很难控制，意味着我们失去了页面的控制权。&lt;/blockquote&gt;&lt;b&gt;网络上有很多很多网站优化指南，其中一则就是用异步请求js来优化性能。这种优化技巧似乎和结论并不符合，尤其针对H5网站，这优化技巧反而让网站的体验更加糟糕，因为用户很多时候是处于不稳定的弱网环境下！&lt;/b&gt;&lt;br&gt;&lt;br&gt;我们可以去看看淘宝H5页面（&lt;a href=&quot;//link.zhihu.com/?target=https%3A//m.taobao.com/%23index&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;手机淘宝&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;）或百度手机（&lt;a href=&quot;//link.zhihu.com/?target=http%3A//m.baidu.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;m.baidu.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这个需要模拟手机访问）的源代码，两个都是极端的同步js模式，都是直接将css、js打印在html页面上！这样虽然增加了文档的内容大小，文档下载的时间延迟了一点，但却将http请求数降到最低，并且将TTI提前了，页面可以以最快的速度响应用户的各种操作，这才是有价值的优化方案。&lt;br&gt;&lt;br&gt;但是，请问我们如何维护这样的页面？这就是设计更深层次的前端开发模式的设计问题了，但已经超出了本文讨论的范畴，我就不想再赘述。&lt;br&gt;&lt;br&gt;此外，有一种情况，就是&lt;b&gt;B组合和F组合，两种那个更优化？不打算用数据来分析了，没有这个条件，但理论上可以这么解析：&lt;/b&gt;&lt;br&gt;&lt;br&gt;如果采用F组合，那么只要对于公共模块以及私有模块combo机制设计合理，公共模块combo成一个文件（加载1次，其他页面共用缓存），然后将首屏交互的js模块及其依赖计算出来合并成一个js模块并采用同步加载，而其他非首屏的js模块及其依赖则合并成1个文件，再用js发起异步请求，这样做应该是电商网站最优的方案。&lt;br&gt;&lt;br&gt;但是，这样的对于前端架构设计的要求就非常高了，特别是模块的依赖分析，需要精通算法，对性能优化有深刻认识以及非常熟悉业务（否则怎么知道哪些是首屏交互的模块呢），这样的人才请问到哪里找啊？&lt;br&gt;&lt;br&gt;基于此，这就是我最终还是采用B方案来设计我们的前端构建框架的原因，简单方便。同样地，网易考拉的前端架构师也估计是这么考虑的。&lt;br&gt;&lt;br&gt;&lt;b&gt;---写在最后---&lt;/b&gt;&lt;br&gt;&lt;br&gt;在我完成这个话题之后，不过时间已经有点晚了，我还没有下班，回到家就没再关注这个话题，但总觉得还存在问题，一早就爬起来看，好在已经有人发现问题了，&lt;b&gt;很感谢&lt;/b&gt;&lt;a href=&quot;http://www.zhihu.com/people/Tech_Query&quot; class=&quot;internal&quot;&gt;水歌&lt;/a&gt;同学的指正！&lt;br&gt;&lt;br&gt;不管怎样，在回复这个话题的过程中，我也学到了很多东西，进一步加深了自己对于页面优化的理解&lt;b&gt;。&lt;/b&gt;总之，感谢题主提出这样好话题，也感谢各位的关注。&lt;br&gt;&lt;br&gt;（完）&lt;br&gt;-----&lt;br&gt;转载必须署名！</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic1.zhimg.com/5c60a0428572a3264793df3819ba0f28_200x112.png" data-rawwidth="757" data-rawheight="753" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic1.zhimg.com/5c60a0428572a3264793df3819ba0f28_r.png">
这是个Meta级别的好问题！如果你想把web前端性能优化到极致，一定要认真地去了解这个原则背后的原理，而非表面的技巧。 <b>（已完结，转载请署名，否则保留追究的权利）</b> 事实上，如果对web优化比较了解，只要一句话就能说清楚了。<b>web页面性能优化其精髓就是—…</b>

<a href="/question/34147508/answer/63068656" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-09-10" target="_blank" href="/question/34147508/answer/63068656">编辑于 2015-09-16</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-5865610"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>115 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="92" data-type="Answer">
<link itemprop="url" href="/question/31640769/answer/52824098">
<meta itemprop="answer-id" content="16534570" />
<meta itemprop="answer-url-token" content="52824098" />
<meta itemprop="answerCount" content="62" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/31640769" target="_blank" data-id="4855525" data-za-element-name="Title">
post 相比get 有很多优点，为什么现在的HTTP通信中大多数请求还是使用get？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/31640769/answer/52824098">
<!-- <meta itemprop="answer-id" content="16534570">
<meta itemprop="answer-url-token" content="52824098"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>823</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">823</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$fredriklo"
target="_blank" href="/people/fredriklo"
>罗志宇</a></span><span title="Opera 欧朋 CTO" class="bio">
Opera 欧朋 CTO
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="823" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">823</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="4855525" data-action="/answer/content" data-author-name="罗志宇" data-entry-url="/question/31640769/answer/52824098">

<textarea hidden class="content">好吧， 除了哲学方式的回答以外，下面是一个浏览器从业人员的看法&lt;br&gt;&lt;br&gt;事实上GET 和 POST 在实践上面有非常大的区别，这两种方法在语义上面并非能互相取代。&lt;br&gt;&lt;br&gt;&lt;b&gt;POST 是否比 GET 安全&lt;/b&gt;&lt;br&gt;&lt;br&gt;是的， POST要比GET安全一点点，注意，是一点点。。。&lt;br&gt;&lt;br&gt;说这两者都是明文传送当然是没有错的了，但是这里有一个细节，就是GET的URL会被放在浏览器历史和WEB 服务器日志里面。&lt;br&gt;&lt;br&gt;POST 发完基本就木有了。。&lt;br&gt;&lt;br&gt;所以如果你把关键数据放在GET里面，被人偷窥了浏览器，或者WEB服务器被入侵日志被人倒去了，基本泄露可能性100%。而POST来说，日志没有记录，只要数据库服务器不被入侵，基本还是安全的。&lt;br&gt;&lt;br&gt;当然如果被抓了包，这一切都没有什么卵用，所以，HTTPS该用还是得用。&lt;br&gt;&lt;img src=&quot;https://pic4.zhimg.com/9f31fcc819580c252df56caa39393a03_b.jpg&quot; data-rawwidth=&quot;458&quot; data-rawheight=&quot;441&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;458&quot; data-original=&quot;https://pic4.zhimg.com/9f31fcc819580c252df56caa39393a03_r.jpg&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;GET 相对 POST 的优势是什么&lt;/b&gt;&lt;br&gt;&lt;br&gt;最大的优势是， GET 的URL可以人肉手输啊。。。你在地址栏打个POST给我看看。本质上面， GET 的所有信息都在URL， 所以很方便的记录下来重复使用。&lt;br&gt;&lt;br&gt;所以如果你希望&lt;br&gt;－ 请求中的URL可以被手动输入&lt;br&gt;－ 请求中的URL可以被存在书签里，或者历史里，或者快速拨号里面，或者分享给别人。&lt;br&gt;－ 请求中的URL是可以被搜索引擎收录的。&lt;br&gt;－ 带云压缩的浏览器，比如Opera mini/Turbo 2, 只有GET才能在服务器端被预取的。&lt;br&gt;－ 请求中的URL可以被缓存。&lt;br&gt;&lt;br&gt;请使用GET. &lt;br&gt;&lt;br&gt;大家有没有注意到，其实这里面很多方面的要求是和网站的运营相关的，而不是技术相关的。任何的技术行为中，其实多多少少都能看到商业的影子。&lt;br&gt;&lt;br&gt;反之，就用POST. 特别是有一些东西你是不想让人家可以在浏览器地址栏里面可以输入的。比如，如果你设计一个blog系统, 设计这样一个URL来删掉所有帖子。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http://myblog.com/?action=delete_all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;我只能说很快你就知道什么叫不作死就不会死这个道理了，搜索引擎的爬虫分分钟教你做人。&lt;br&gt;&lt;br&gt;另外一个准则是，可以重复的交互，比如取个数据，跳个页面， 用GET.&lt;br&gt;不可以重复的操作， 比如创建一个条目/修改一条记录， 用POST, 因为POST不能被缓存，所以浏览器不会多次提交。&lt;br&gt;&lt;br&gt;WEB API 的设计相对于网页来说更加复杂，同时也有GET/POST的问题，目前主流接受的方法是RESTful, 参见这里&lt;br&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Representational_state_transfer%23cite_note-4&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Representational state transfer&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;这个是趋势：&lt;br&gt;&lt;br&gt;&lt;img src=&quot;https://pic1.zhimg.com/55e77732c3e371893e82e0a213e65e18_b.jpg&quot; data-rawwidth=&quot;500&quot; data-rawheight=&quot;287&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;500&quot; data-original=&quot;https://pic1.zhimg.com/55e77732c3e371893e82e0a213e65e18_r.jpg&quot;&gt;&lt;br&gt;同时对于何时用GET, W3C 也有一篇文章专门解释：&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/2001/tag/doc/whenToUseGet.html&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://www.&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;w3.org/2001/tag/doc/whe&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;nToUseGet.html&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;摘一点出来：&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;&lt;p&gt;1.3 Quick Checklist for Choosing HTTP GET or POST&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Use GET if:&lt;ul&gt;&lt;li&gt;The interaction is more like a question (i.e., it is a safe operation such as a query, read operation, or lookup).&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;p&gt;and&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;Use POST if:&lt;ul&gt;&lt;li&gt;The interaction is more like an order, or&lt;/li&gt;&lt;li&gt;The interaction changes the state of the resource in a way that the user would perceive (e.g., a subscription to a service), or o The user be held accountable for the results of the interaction.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;However, before the final decision to use HTTP GET or POST, please also consider considerations for sensitive data and practical considerations.&lt;/p&gt;&lt;/blockquote&gt;</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic4.zhimg.com/9f31fcc819580c252df56caa39393a03_200x112.jpg" data-rawwidth="458" data-rawheight="441" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic4.zhimg.com/9f31fcc819580c252df56caa39393a03_r.jpg">
好吧， 除了哲学方式的回答以外，下面是一个浏览器从业人员的看法 事实上GET 和 POST 在实践上面有非常大的区别，这两种方法在语义上面并非能互相取代。 <b>POST 是否比 GET 安全</b> 是的， POST要比GET安全一点点，注意，是一点点。。。 说这两者都是明文传送当…

<a href="/question/31640769/answer/52824098" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-06-26" target="_blank" href="/question/31640769/answer/52824098">编辑于 2015-06-28</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-4855525"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>49 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="93" data-type="Answer">
<link itemprop="url" href="/question/34682699/answer/81858413">
<meta itemprop="answer-id" content="28172620" />
<meta itemprop="answer-url-token" content="81858413" />
<meta itemprop="answerCount" content="44" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/34682699" target="_blank" data-id="6079593" data-za-element-name="Title">
Chrome 的审查元素功能有哪些奇技淫巧？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/34682699/answer/81858413">
<!-- <meta itemprop="answer-id" content="28172620">
<meta itemprop="answer-url-token" content="81858413"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>812</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">812</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$xiaoyu2er"
target="_blank" href="/people/xiaoyu2er"
>小鱼二</a></span><span title="南大前端交流群/Angular2兴趣小组 私信🙃" class="bio">
南大前端交流群/Angular2兴趣小组 私信 
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="812" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">812</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="6079593" data-action="/answer/content" data-author-name="小鱼二" data-entry-url="/question/34682699/answer/81858413">

<textarea hidden class="content">&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4565261.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome开发者工具不完全指南（一、基础功能篇）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4579121.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome开发者工具不完全指南（二、进阶篇）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4585983.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome开发者工具不完全指南：（三、性能篇）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4607497.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome开发者工具不完全指南（四、性能进阶篇）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4624241.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome开发者工具不完全指南（五、移动篇）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4641796.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chrome开发者工具不完全指南（六、插件篇）&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;好东西要分享 :)&lt;br&gt;&lt;br&gt;==== 补充 ======&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developers.google.com/web/tools/chrome-devtools/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;https://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;developers.google.com/w&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;eb/tools/chrome-devtools/&lt;/span&gt;&lt;span class=&quot;ellipsis&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/28531079&quot; class=&quot;internal&quot;&gt;Chrome 有哪些鲜为人知的用法？ - 软件&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/31178/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;用Chrome开发者工具做JavaScript性能分析&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//toutiao.com/i6196430737636180481/%23rd&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端杂谈 - 深入了解Chrome开发工具&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>


<div class="zh-summary summary clearfix">

<a href="//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4565261.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chrome开发者工具不完全指南（一、基础功能篇）<i class="icon-external"></i></a> <a href="//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4579121.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chrome开发者工具不完全指南（二、进阶篇）<i class="icon-external"></i></a> <a href="//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4585983.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chrome开发者工具不完全指南：（三、性能篇）<i class="icon-external"></i></a> <a href="//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4607497.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chrome开发者工具不完全指南（四、性能进阶篇）<i class="icon-external"></i></a> <a href="//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4624241.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chrome开发者工具不完全指南（五、移动篇）<i class="icon-external"></i></a> <a href="//link.zhihu.com/?target=http%3A//www.cnblogs.com/constantince/p/4641796.html" class=" wrap external" target="_blank" rel="nofollow noreferrer">Chrome开发者工具不完全…<i class="icon-external"></i></a>

<a href="/question/34682699/answer/81858413" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-01-16" target="_blank" href="/question/34682699/answer/81858413">编辑于 2016-10-02</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-6079593"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>16 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="94" data-type="Answer">
<link itemprop="url" href="/question/38825761/answer/86917279">
<meta itemprop="answer-id" content="30199955" />
<meta itemprop="answer-url-token" content="86917279" />
<meta itemprop="answerCount" content="249" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/38825761" target="_blank" data-id="7737551" data-za-element-name="Title">
有哪些产品经理认为很简单，实则开发很难的技术？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/38825761/answer/86917279">
<!-- <meta itemprop="answer-id" content="30199955">
<meta itemprop="answer-url-token" content="86917279"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>808</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">808</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$laufei"
target="_blank" href="/people/laufei"
>刘飞</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/laufei#hilightbadge" target="_blank">产品经理话题优秀回答者</a></span>



<span title="想当作家的工科男" class="bio">
想当作家的工科男
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="808" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">808</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="7737551" data-action="/answer/content" data-author-name="刘飞" data-entry-url="/question/38825761/answer/86917279">

<textarea hidden class="content">下周我们要做三个需求，磊哥你先别激动，听我说完。这次的都很简单，我们文档都才两页，放心。&lt;br&gt;&lt;br&gt;第一个是搜索，只要实现能搜到东西就行啦，只有一个框，输入文字，点击搜索，输出结果。容易吧？也不用实时显示搜索结果、不用有什么历史搜索记录啥的功能，能用就可以。毅哥你也先别说话。&lt;br&gt;&lt;br&gt;第二个是聊天，这个也是要求能用就行，界面上咱们不要花哨的东西，就是对话气泡、下面有个输入框就可以啦。当然能发语音和图片最好。听说有那种第三方平台和开源代码可以用，你们随便弄弄应该就行。林林你也坐住，马上就结束。&lt;br&gt;&lt;br&gt;第三个是社区，你看咱们产品还没有地方给大家讨论交流，多不合适。就完全仿照贴吧做就好啦，能发帖、看帖、评论就行，当然，如果有提醒和推送通知也最好啦。咱也不要求太多，知道你们都不容易。是吧。&lt;br&gt;&lt;br&gt;这三个需求你们看下周能做完不？&lt;br&gt;&lt;br&gt;哎？你们别走啊？...啊，就是说嘛，我就相信你们会回来的。哎？你们手里拿着扫帚拖把干嘛？啊！别打我啊！我哪有问题你们说，不要使用暴力......</textarea>


<div class="zh-summary summary clearfix">

下周我们要做三个需求，磊哥你先别激动，听我说完。这次的都很简单，我们文档都才两页，放心。 第一个是搜索，只要实现能搜到东西就行啦，只有一个框，输入文字，点击搜索，输出结果。容易吧？也不用实时显示搜索结果、不用有什么历史搜索记录啥的功能，能…

<a href="/question/38825761/answer/86917279" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/38825761/answer/86917279">发布于 2016-02-18</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-7737551"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>142 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="2">
<meta name="disableCopyAvatar" content="https://pic2.zhimg.com/3ccc6a72c77b13111353777cb33c3659_s.jpg">

<span class="zg-bull">&bull;</span>


<a href="/copyright/apply?answer=86917279" target="_blank" class="meta-item copyright">申请转载</a>



<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="95" data-type="Answer">
<link itemprop="url" href="/question/19862294/answer/13918296">
<meta itemprop="answer-id" content="687266" />
<meta itemprop="answer-url-token" content="13918296" />
<meta itemprop="answerCount" content="43" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/19862294" target="_blank" data-id="124866" data-za-element-name="Title">
如何帮助前端新人入门和提高？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/19862294/answer/13918296">
<!-- <meta itemprop="answer-id" content="687266">
<meta itemprop="answer-url-token" content="13918296"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>791</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">791</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$smallni"
target="_blank" href="/people/smallni"
>丁小倪</a></span><span title="前端攻城师@Tencent" class="bio">
前端攻城师@Tencent
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="791" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">791</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="124866" data-action="/answer/content" data-author-name="丁小倪" data-entry-url="/question/19862294/answer/13918296">

<textarea hidden class="content">四年后来mark一下，很多同学在评论区问能不能做徒弟之类的，还有私信问一些新手如何入门之类的，问的同学太多，无法一一回复，请各位见谅。&lt;br&gt;当时回答这个问题时，还在其他公司，而目前已加入腾讯四年多的时间，带着一个小的前端团队，最近也是有意向对各位入门以及入门后不知道如何提升的同学一些针对性的指导，方式可以是微信，QQ或者邮件等方式，当然机会合适，你可以来深圳，我们当面交流。于是，我想尝试性的收三位徒弟，等几年后再看这几位同学发展的如何，也算是对自己在这个行业的一点考验。&lt;br&gt;以下是具体报名的方式：&lt;br&gt;&lt;b&gt;邮件到 smallni#&lt;a href=&quot;//link.zhihu.com/?target=http%3A//vip.qq.com&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;vip.qq.com&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（请将#换成@） &lt;/b&gt;&lt;br&gt;简单的介绍一下你自己：&lt;br&gt;&lt;u&gt;姓名：&lt;/u&gt;&lt;br&gt;&lt;u&gt;性别：&lt;/u&gt;&lt;br&gt;&lt;u&gt;毕业院校：&lt;/u&gt;&lt;br&gt;&lt;u&gt;所学专业：&lt;/u&gt;&lt;br&gt;&lt;u&gt;平时兴趣爱好：&lt;/u&gt;&lt;br&gt;&lt;u&gt;常上的前端网站：&lt;/u&gt;&lt;br&gt;&lt;u&gt;目前的困惑及希望得到的帮助：&lt;/u&gt;&lt;br&gt;&lt;u&gt;最后附上你的一个最得意的前端作品：&lt;/u&gt;&lt;br&gt;------------------------------------&lt;br&gt;我会在收到邮件后1个月内周知各位结果，感谢大家。&lt;br&gt;--------------------------------------------&lt;br&gt;我来谈一下我的感受吧，@Gino 所言极是，谁都希望招一个有经验的前端人员，那样也可以减少公司的培训成本。但目前中国整个大的环境是没有一所高校开设了前端相关的专业，前端的被重视程度还不够，很多公司和很多人都还对前端这个职位停留在“美工”或者“页面仔”的认知程度上，这样一来前端的价值就不足以很好的被体现，真正做的比较优秀的前端也就少之又少，所以公司需要招一些热爱但不怎么熟练的前端回来培养，谁刚开始不是这样过来的对吗？&lt;br&gt;新人都是从最基本的html css神马的开始摸索的，我记得我在高中那会还在用frontpage拖table来做网页，自己只是兴趣所趋，&amp;lt;div&amp;gt; css这些概念当时全然不知。说实话，如果不是自己对前端这个行业感兴趣，自己也不会选择了计算机专业，毕业后也不会一直从事着前端行业，也不会对html css js神马的喜欢到一种偏爱的程度。前端入门容易，但说实话精通真的很难，无论哪个大牛都不敢说自己是精通，因为前端知识体系不仅有广度还要有深度，每天跟代码在一起生活，唯一能支持下去的动力恐怕就是兴趣了吧。如果你不爱一个东西，那么永远也不会做好。&lt;br&gt;&lt;br&gt;&lt;b&gt;好吧，前面YY了一下。&lt;/b&gt;下面讲讲具体的如何帮助新人入门和提高吧：&lt;br&gt;&lt;br&gt;去年在前一家公司培养过2个实习生，现在的一个已经当了小组的leader，但另一个放弃了这个职业，去考研去了。当时我是接到上面leader的通知，让我来培养今年进来的2个实习生。2个实习生刚来时我出了一些题目测试了一下他们对前端基本知识的掌握程度，当时我就泪奔了。。可以说他们是一张白纸，啥也不会。。唯一有的好像就是兴趣。。好吧，公司既然把这个任务给我了，再难也要迎难而上，也不应该打击2位实习生的信心。&lt;br&gt;&lt;br&gt;Leader给我下了硬性指标，三个月内要让他们能参与到项目中来，我粗略算了下 有点紧，但如果他们有学习的动力还是没什么问题的。首先我为他们制定了一个三个月的学习计划，大致上分为第一个月、第二个月、第三个月，然后每个月再划分到每个星期，每个星期划分到每天。每天学习的东西做日报，每周一次周报并且我会出一些测试题给他们做，每月一次综合测试。三个月之后让他们参与一个项目测试并做三个月的总结。（是不是很像大学期间的写论文报告？但工作了之后有时总结真的很重要，能够正视自己的不足）&lt;br&gt;&lt;br&gt;&lt;b&gt;当然，学习所有的基本知识之前，第一天需要培养的是“思想”！&lt;/b&gt;要让他们知道什么是前端以及当前前端业界的一个趋势，不然在不清楚自己定位的情况下去学东西永远会在迷茫，只有清楚自己想要的才会更好地去努力。我特别传达给他们的概念就是永远不要把自己当做一个代码机器，不然自己以后真的走上前端之路会得抑郁症，在前端工作中享受前端所带来的乐趣是最高的境界。&lt;br&gt;前端不是页面仔，不是美工，前端直接面向了最终用户，前端是针线活，需要细心和耐心，前端需要不断地学习新知识，前端需要不断研究出现的问题，前端需要关注用户体验，前端需要了解用户心理，前端也需要了解程序员的心理，前端还需要了解设计师天马行空的想法 : )&lt;br&gt;&lt;br&gt;第一个月主要让他们对一些专业术语和前端整体的知识体系做了概览（包括html、css、js、dom、bom等），当然这里必须要去了解的是W3C的诞生以及它的发展历程，还有各大浏览器厂商的发展历程以及当今不断变化的市场格局。前半个月对html所有的标签做一个系统的学习，并对常用的标签(div\p\h1-h6\span\img\ul\dl\ol\li)做重点的理解和DEMO书写，这里我特别传达了语义化的概念给他们希望他们合理的使用标签，而不是根据自己的心情随意的使用标签。后半个月对css的所有属性做通览，并对常用的CSS属性做重点理解和实战，这里我没有让他们对所有的CSS属性做很详细的了解（有些CSS属性可能我们自己一辈子都不会用到，以后遇到的时候学会查API即可）。这过程中还传达了hack这个概念给他们，以及对待hack的态度和常用实例。&lt;br&gt;&lt;br&gt; 第二个月主要是JS的学习（话说一个月学习JS真的是太难太难了，虽然是个脚本语言但要注意的地方特别多），首先对JS基础的一些东西的学习（词法结构、数据类型和值、变量、表达式和运算符、语句等等一些基础知识），在学JS期间我发现他们明显比第一个月学习html和css来的烦躁，但好得他们有学过编程，有些基础。基础学好之后，就是客户端的一些知识的学习，dom\bom等等，如何对dom操作，关于性能这方面的东西暂时没有传达给他们，等他们达到一定知识程度上我希望他们学习如何优化。后半个月就是让他们接触一个JS框架，并学会高效快速的写出页面交互代码。&lt;br&gt;&lt;br&gt;第三个月基本就是实战，html+css+js，每周基本都要写好几个页面，然后我会带他们一起去review，并指出所存在的问题，顺便让他们自己记录下，总结，下次再写页面时避免。&lt;br&gt;&lt;br&gt; 当然这三个月期间，他们还需要学会前端工具的使用(svn\dw\notepad++\vim\zen-coding\ps等等)，工具我没有过多的去教他们，这个纯粹是一个使用熟练度的问题，只要自己多操作即可。&lt;br&gt;&lt;br&gt; 最后再这三个月的学习过程中我发现其中一个（是个女孩子）每天下班后经常留在公司，把白天遇到的一些问题代码实战，然后发现了她的一个本本，上面记录了遇到的问题，另外一个男孩子也偶尔会留下来，但几乎很少。三个月之后男孩子说自己要考研了，走了，我想他可能真的不适合前端，也许是有自己的理想，女孩子留了下来，并且迅速的融入了项目团队。（这里我对我这个徒弟还是比较自豪的，前端没有性别之分，女孩子也可以很出色）&lt;br&gt;&lt;br&gt;说到底，前端新人，如果你是一个导师，要学会去传达一个正确的观念 ，并让他们永远保持着学习的激情，&lt;b&gt;不要小看一张白纸，如果给他一支水笔，他也会描绘出一幅美好的蓝图&lt;/b&gt;。</textarea>


<div class="zh-summary summary clearfix">

四年后来mark一下，很多同学在评论区问能不能做徒弟之类的，还有私信问一些新手如何入门之类的，问的同学太多，无法一一回复，请各位见谅。 当时回答这个问题时，还在其他公司，而目前已加入腾讯四年多的时间，带着一个小的前端团队，最近也是有意向对各位…

<a href="/question/19862294/answer/13918296" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2012-02-24" target="_blank" href="/question/19862294/answer/13918296">编辑于 2016-11-05</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-124866"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>171 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="96" data-type="Answer">
<link itemprop="url" href="/question/50473087/answer/121270115">
<meta itemprop="answer-id" content="43999251" />
<meta itemprop="answer-url-token" content="121270115" />
<meta itemprop="answerCount" content="116" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/50473087" target="_blank" data-id="12405930" data-za-element-name="Title">
前端程序员会不会被淘汰？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/50473087/answer/121270115">
<!-- <meta itemprop="answer-id" content="43999251">
<meta itemprop="answer-url-token" content="121270115"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>785</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">785</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$leeluolee"
target="_blank" href="/people/leeluolee"
>郑海波</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/leeluolee#hilightbadge" target="_blank">前端开发、JavaScript话题优秀回答者</a></span>



<span title="网易程序猿" class="bio">
网易程序猿
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="785" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">785</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="12405930" data-action="/answer/content" data-author-name="郑海波" data-entry-url="/question/50473087/answer/121270115">

<textarea hidden class="content">&lt;blockquote&gt;求帮我们自动生成一下 现在在开发的网页代码。对了，&lt;b&gt;纯业务代码10W行&lt;/b&gt;。（单页的姑且算网页吧） &lt;/blockquote&gt;&lt;br&gt;&lt;br&gt;因为你视野不够才只能看到这些，你根本看不到现在大型电商类网站的工程复杂度，也不知道现在越来越多&quot;toB&quot;类应用开始提供Web化的服务，引入以前难以想象的业务复杂度。当然你更看不到现在一份代码多端运行适配需要的模块抽象能力。&lt;br&gt;&lt;br&gt;这些源于你没有脚踏实地的去开始学习，去看那些你现在垫着脚都看不到的景象。而把时间浑浑噩噩在『我学xx划不划算』、『学xx会不会更赚钱』&lt;br&gt;&lt;br&gt;学习、职业规划这东西，不要太贪，想笔直不曲的走上完美的路线，根本不可能。&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;坑踩了才是你的经验，自己思考实践才是自己的积累。&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;每个知识都有共通点，前端也一样。比如你可以发现，优秀的程序员往往抽象总结能力会比一般的职业好得多，更容易把零散的知识点整理成框架。这都跨行了，你还在纠结程序员的细分岗位？&lt;br&gt;&lt;br&gt;再回头看看你忧虑, 你看到工具生成的网页效果还不错，&lt;b&gt;为什么你脑瓜子不清醒一些，去做那个开发更好工具的人&lt;/b&gt;，而不是考虑着工具是不是抢了你饭碗。 &lt;br&gt;&lt;br&gt;另外我也想吐槽一下，为什么现在知乎上越来越多年轻人，常常有这番景象&lt;br&gt;&lt;ol&gt;&lt;li&gt;刚学个Hello world 就&lt;b&gt;『遇到了瓶颈怎么办』&lt;/b&gt;&lt;/li&gt;&lt;li&gt;还没看个几页破书就&lt;b&gt;『xxx，我该何去何从』&lt;/b&gt;&lt;/li&gt;&lt;li&gt;还不知道自己能干嘛就&lt;b&gt;『xx职业有是否有前途』&lt;/b&gt;&lt;br&gt;&lt;/li&gt;&lt;/ol&gt;&lt;b&gt;这些孩子最终有成才的么？能不能给我个反例？&lt;/b&gt;&lt;br&gt;&lt;br&gt;我记得我刚工作那会，可是天天都觉得大把的事情压着，根本没这闲工夫思考这些东西。&lt;br&gt;&lt;br&gt;最近说话是糙了点，见谅。</textarea>


<div class="zh-summary summary clearfix">

求帮我们自动生成一下 现在在开发的网页代码。对了，<b>纯业务代码10W行</b>。（单页的姑且算网页吧） 因为你视野不够才只能看到这些，你根本看不到现在大型电商类网站的工程复杂度，也不知道现在越来越多"toB"类应用开始提供Web化的服务，引入以前难以想象的业务…

<a href="/question/50473087/answer/121270115" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-09-10" target="_blank" href="/question/50473087/answer/121270115">编辑于 2016-09-10</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-12405930"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>111 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="97" data-type="Answer">
<link itemprop="url" href="/question/22426434/answer/21433867">
<meta itemprop="answer-id" content="3771436" />
<meta itemprop="answer-url-token" content="21433867" />
<meta itemprop="answerCount" content="45" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/22426434" target="_blank" data-id="1151448" data-za-element-name="Title">
还要多少年, 前端开发才能像客户端开发那样轻松？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/22426434/answer/21433867">
<!-- <meta itemprop="answer-id" content="3771436">
<meta itemprop="answer-url-token" content="21433867"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>762</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">762</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$sharpmaster"
target="_blank" href="/people/sharpmaster"
>徐飞</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/sharpmaster#hilightbadge" target="_blank">前端开发、JavaScript、前端工程师话题优秀回答者</a></span>



<span title="三流程序员，二流架构师" class="bio">
…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="762" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">762</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="1151448" data-action="/answer/content" data-author-name="徐飞" data-entry-url="/question/22426434/answer/21433867">

<textarea hidden class="content">我们来分析一下究竟哪些因素让前端开发这么困扰。&lt;br&gt;&lt;br&gt;先看看界面部分吧。&lt;br&gt;&lt;br&gt;#1. 命令式还是声明式&lt;br&gt;毫无疑问，就写界面来说，声明式的代码编写效率远高于命令式：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;Panel title=&quot;Test&quot;&amp;gt;
  &amp;lt;Button label=&quot;Click me&quot;/&amp;gt;
&amp;lt;/Panel&amp;gt;

Panel p = new Panel();
p.title = &quot;Test&quot;;
Button b = new Button();
b.label = &quot;Click me&quot;;
p.add(b);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;第一种容易写，容易理解。&lt;br&gt;&lt;br&gt;#2. 控件标签集&lt;br&gt;不管你的软件面向什么行业，至少都要一些控件，或者是基本的表单输入，或者是复杂的比如树形表格，里面还可以跨行跨列渲染的。&lt;br&gt;&lt;br&gt;如果我们有一套映射到控件的标签，那么写代码是肯定会简单很多的，比如说，在HTML里面没有原生的Panel，那么，刚才第一段代码可能就要变成：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div class=&quot;panel panel-default&quot;&amp;gt;
  &amp;lt;div class=&quot;panel-heading&quot;&amp;gt;
    &amp;lt;h3 class=&quot;panel-title&quot;&amp;gt;Simple HTML Loader&amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div class=&quot;panel-body&quot;&amp;gt;
    &amp;lt;button&amp;gt;Click me&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;我们为了使得界面代码编写更高效，毫无疑问会倾向于把这么一堆东西简化成一个Panel标签，这样就会逐步建立一套面向自己行业的标签集。&lt;br&gt;&lt;br&gt;#3. 带逻辑的控件&lt;br&gt;刚才这个例子为什么简单呢，因为它只是一个普通容器，静态的，不带逻辑，所以即使你用什么静态模板也能解决问题。如果复杂一点，是一个TabNavigator，就要考虑切换的事件，再复杂一些是个树形表格，那就更麻烦了。&lt;br&gt;&lt;br&gt;我们来看jQuery提供的插件方式实现TabNaviator：&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;div id=&quot;tabs&quot;&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#tabs-1&quot;&amp;gt;Nunc tincidunt&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#tabs-2&quot;&amp;gt;Proin dolor&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#tabs-3&quot;&amp;gt;Aenean lacinia&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;
  &amp;lt;div id=&quot;tabs-1&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;tabs-2&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;tabs-3&quot;&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
  $(function() {
    $( &quot;#tabs&quot; ).tabs();
  });
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;从我个人的角度看，这种代码很愚蠢。蠢在何处呢？HTML这类声明式的界面描述语言，写起来本来应当直观一些的，但是被这么一搞，又往命令式的方向去了。而且两种东西混杂，声明和渲染居然分了两处，又增加了维护的成本。&lt;br&gt;&lt;br&gt;难道就没有别的办法来解决这个问题吗？&lt;br&gt;&lt;br&gt;我们看看其他语言和框架，比如Flex和Silverlight。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;mx:TabNavigator id=&quot;tn&quot;  width=&quot;100%&quot; height=&quot;100%&quot;&amp;gt;
  &amp;lt;!-- Define each panel using a VBox container. --&amp;gt;
  &amp;lt;mx:VBox label=&quot;Panel 1&quot;&amp;gt;
    &amp;lt;mx:Label text=&quot;TabNavigator container panel 1&quot;/&amp;gt;
  &amp;lt;/mx:VBox&amp;gt;

  &amp;lt;mx:VBox label=&quot;Panel 2&quot;&amp;gt;
    &amp;lt;mx:Label text=&quot;TabNavigator container panel 2&quot;/&amp;gt;
  &amp;lt;/mx:VBox&amp;gt;

  &amp;lt;mx:VBox label=&quot;Panel 3&quot;&amp;gt;
    &amp;lt;mx:Label text=&quot;TabNavigator container panel 3&quot;/&amp;gt;
  &amp;lt;/mx:VBox&amp;gt;
&amp;lt;/mx:TabNavigator&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;br&gt;上面这段是Flex里面的TabNavigator，在这个链接底部有运行结果：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//help.adobe.com/zh_CN/FlashPlatform/reference/actionscript/3/mx/containers/TabNavigator.html%3Ffilter_flex%3D4.1%26filter_flashplayer%3D10.2%26filter_air%3D2.6&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;TabNavigator&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;为什么它可以看不到逻辑的代码，但是又确实能有动作呢，因为它的实现类是mx.containers.TabNavigator，在这个代码里，可以自己手动去处理一切内部实现，但是暴露给业务开发人员的就是这么简单的标签。&lt;br&gt;&lt;br&gt;我们看看在HTML和JS这个体系里用什么办法去解决。不要提JSF这类服务端技术，因为它的思路也是不好的，展示代码的生成和渲染都不在一个地方，会有很多问题。&lt;br&gt;&lt;br&gt;#4. Polymer与Angular&lt;br&gt;&lt;br&gt;早期IE里有HTC，也就是HTML Components，因为别的浏览器厂商不喜欢，所以快要消亡了。在W3C新的HTML规范里，有一个Web Components，参见这里：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.w3.org/TR/components-intro/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Introduction to Web Components&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;这个东西跟HTC的思想本出同源，它引入了Custom Elements和Shadow DOM这两个概念，也就是说，我可以自定义一个标签，然后在内部随便怎么折腾，用这个标签的人可以很方便。&lt;br&gt;&lt;br&gt;很美好，是不是，但是只适用于比较新的浏览器，基于这个理念架构的框架Polymer的目标也只是支持一些比较新的浏览器。&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/polymer/polymer&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Polymer&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;那么怎么办呢？我们还有Angular，它也可以自定义标签，然后用directive的方式写内部实现。&lt;br&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;tabs&amp;gt;
  &amp;lt;pane title=&quot;Localization&quot;&amp;gt;
  &amp;lt;/pane&amp;gt;
  &amp;lt;pane title=&quot;Pluralization&quot;&amp;gt;
  &amp;lt;/pane&amp;gt;
&amp;lt;/tabs&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;script id=&quot;components.js&quot;&amp;gt;
  angular.module('components', [])

    .directive('tabs', function() {
      return {
        restrict: 'E',
        transclude: true,
        scope: {},
        controller: function($scope, $element) {
          var panes = $scope.panes = [];

          $scope.select = function(pane) {
            angular.forEach(panes, function(pane) {
              pane.selected = false;
            });
            pane.selected = true;
          }

          this.addPane = function(pane) {
            if (panes.length == 0) $scope.select(pane);
            panes.push(pane);
          }
        },
        template:
          '&amp;lt;div class=&quot;tabbable&quot;&amp;gt;' +
            '&amp;lt;ul class=&quot;nav nav-tabs&quot;&amp;gt;' +
              '&amp;lt;li ng-repeat=&quot;pane in panes&quot; ng-class=&quot;{active:pane.selected}&quot;&amp;gt;'+
                '&amp;lt;a href=&quot;&quot; ng-click=&quot;select(pane)&quot;&amp;gt;{{pane.title}}&amp;lt;/a&amp;gt;' +
              '&amp;lt;/li&amp;gt;' +
            '&amp;lt;/ul&amp;gt;' +
            '&amp;lt;div class=&quot;tab-content&quot; ng-transclude&amp;gt;&amp;lt;/div&amp;gt;' +
          '&amp;lt;/div&amp;gt;',
        replace: true
      };
    })

    .directive('pane', function() {
      return {
        require: '^tabs',
        restrict: 'E',
        transclude: true,
        scope: { title: '@' },
        link: function(scope, element, attrs, tabsCtrl) {
          tabsCtrl.addPane(scope);
        },
        template:
          '&amp;lt;div class=&quot;tab-pane&quot; ng-class=&quot;{active: selected}&quot; ng-transclude&amp;gt;' +
          '&amp;lt;/div&amp;gt;',
        replace: true
      };
    })
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;这么一来，也就有些接近我们的目标了，看到现在，我们还记得目标是什么吗？是尽可能精简的面向领域的容器和控件标签集，有了这个，写界面代码才能更简单。&lt;br&gt;&lt;br&gt;#5. 为什么HTML默认标签集这么小&lt;br&gt;&lt;br&gt;事情结束了吗？没有呢。我们的HTML体系为什么标签集这么小？因为他要解决的是通用领域的东西，怎样才能通用呢？要的是尽可能无歧义。&lt;br&gt;&lt;br&gt;怎样的东西会没有歧义？那就是它的含义尽可能少，比如说单行文本输入框，总没人对它有歧义吧，它无非就是可以设置最大最小长度，是否只读，是否禁用，最多通过某种规则来限制输入字符，最多最多，也就这些可做的了，大家都认同。&lt;br&gt;&lt;br&gt;Button就不同了，一开始他是&amp;lt;input type=&quot;button&quot; value=&quot;Click&quot;/&amp;gt;，后来大家想要各种各样的button，于是开放了&amp;lt;button&amp;gt;&amp;lt;/button&amp;gt;这样的标签，可以在里面写各种HTML，我记得当时很多人在中间加上下和左右两层marquee，简直玩坏了。&lt;br&gt;&lt;br&gt;现在HTML里面又有了数字输入，日期时间输入这样的东西，数字的没什么疑问，就是最大最小值，步进值等等，日期时间这个就复杂了，它怎么做，都有人不满意。有人要日期排左边，有人要时间排上面，有人只要年和月，有人只要分和秒。有人要点空白表示选中，有人要双击日期表示选中，还有人想用农历、波斯历、尼泊尔历，简直没完了，还不如不做，谁要谁自己做……&lt;br&gt;&lt;br&gt;所以，面向各领域的人们，自己动手，丰衣足食吧。&lt;br&gt;&lt;br&gt;#6. 界面修饰&lt;br&gt;&lt;br&gt;好了，控件集的问题解决了，我们来看看界面的修饰。&lt;br&gt;&lt;br&gt;你们发现没有，不管用什么非HTML的标签体系，可能写代码会很快，但是有时候要修饰界面，比如只是调整一下所有容器的边距，某些按钮的圆角之类，就会生不如死。&lt;br&gt;&lt;br&gt;这时候你会发现，HTML里面的CSS真是神器，什么都能干，而且是面向切面的，只要你的HTML结构是良好的，完全不需要调整这个层面的代码。为什么其他体系的CSS没有这么强呢？比如说Flex也可以写CSS，QT也可以写CSS。&lt;br&gt;&lt;br&gt;因为CSS的部分实在是太复杂了，复杂到整个浏览器里面绝大部分的代码都在处理这方面的东西，像Google的Chrome团队有1000多人，别的体系没法有这么大投入，只能看着羡慕。&lt;br&gt;&lt;br&gt;上次看到一个问题，近30年来软件开发体系有哪些本质的改进？我觉得CSS真的可以入选，这是一个把结构和展现完全分离的典范，并且实现得很好。&lt;br&gt;&lt;br&gt;我们的前端开发一般都是面向某个领域的，不管什么领域，CSS方向都可以有一个很独立的规划，因为它可以不影响界面的结构。所以这个方面，其实不太会对前端开发造成太多压力，压力只集中在维护CSS的人群身上。&lt;br&gt;&lt;br&gt;好了，上面扯了那么多，其实到现在还在界面的层次，一直没有去谈到真正的逻辑。那么，最让我们困扰的部分是哪里呢？ &lt;br&gt;&lt;br&gt;#7. 模块化和加载&lt;br&gt;&lt;br&gt;Web前端开发有个最苦闷的事情就是选型，因为HTML这个体系很开放，提供的默认能力又不是很足够，如果要做复杂交互的东西，会需要很多额外的工作。有各种框架从各种角度来解决问题，但怎么把这些东西整合到正好符合自己的需要，是一个很花精力的事情，很多时候恨不得自己把全部轮子都造一遍。&lt;br&gt;&lt;br&gt;真正的开发工作中，跨浏览器，踩各种坑应该是最烦闷的事，其他部分，如果有做好自己领域里标签的定义，或者不用标签用其他方式，应该不算特别困难。&lt;br&gt;有人说JavaScript语言本身比较松散，所以写业务逻辑比较头疼，这不算大问题。基于B/S的开发，有一个大坑是你在运行的时候要先把代码加载过来，然后才能跑。你看那些C/S软件，有这困扰吗？再看看后端程序员，谁还要关心自己的代码执行之前要做的事情？&lt;br&gt;&lt;br&gt;所以后端程序员写前端代码，都情不自禁地会引入一大堆库。我们形象一点来描述一下这个过程：&lt;br&gt;&lt;br&gt;嗯，大家都用jQuery，我也引入，抄了两段代码发现真不错。咦，我要个树控件，网上逛了一圈，拿了个zTree回来。再埋头苦干半个小时，缺数据表格控件，于是过了一会，jQuery UI被整体引入了。再埋头苦干，上网乱点了点，浏览器跳出个广告，一看叫做Kendo UI，看看发现不错，引进来再说，用里面的某个控件。又过了一阵，听说最近Angular很火啊，看了看例子，表单功能怎么那么强，我也要用！捣鼓捣鼓又加进去了。项目里又要用图表库，看了半天眼睛都花了，百度的ECharts不错哦，引进来。哎呀我界面怎么那么丑，人家的怎么那么清爽，查看源码，一看，Bootstrap，去官网一看，真乃神器，不用简直对不起自己。&lt;br&gt;&lt;br&gt;没多久之后，这个界面已经融合了各种主流框架，代码写法五花八门，依赖了几M的JS库，更要命的是里面某些JS有冲突，某些样式也互相覆盖，快疯了。&lt;br&gt;&lt;br&gt;这里有哪些问题呢？&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;JS代码要先加载到界面才能执行，而这么几M的代码加载过来就要好久了，然后每个框架还要把自己初始化，又耗不少时间，半分钟之后自己写的JS才开始执行，用户等得都快怀孕了。&lt;/li&gt;&lt;li&gt;不管是JS还是CSS，都应当控制基准的代码，这件事的主要意义是避免冲突，因为整个体系都比较松散，如果不加控制，就会造成冲突。即使在服务端写Java，也有类签名一致性之类的问题，所以这个部分必须要重视。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;刚才这两点，第二点暂时不是我们要探讨的范围，第一点，引出的话题就是异步加载，这是一个可以展开说很多的话题，也不再说了。异步加载和缓存是面对复杂场景必做的优化措施。&lt;br&gt;&lt;br&gt;但是这个里面规范就有好几种，具体实现方式就更多了。ES6的module也许可以解决这个问题。&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wiki.ecmascript.org/doku.php%3Fid%3Dharmony%3Amodules&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;harmony:modules [ES Wiki]&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;#8. 逻辑的分层&lt;br&gt;&lt;br&gt;网站型和应用型Web程序对分层的需求是不一样的。网站型的逻辑大部分都在处理UI，而应用型可能有很多业务逻辑，这部分需要更好的组织，以便复用，或者即使我们的目标不包括复用，为了这个代码的可维护性，也需要有比较好的组织方式。&lt;br&gt;&lt;br&gt;本质上这些组织方式与传统的客户端软件开发没什么不同，主要要做的无非就是UI层的隔离，或者模板化，或者别的什么方式。纯逻辑的代码大家都会写，但这个逻辑怎么跟界面产生关系，这是个问题。&lt;br&gt;&lt;br&gt;有些框架通过在HTML元素上设置额外属性，然后启动的时候读取，在框架内部做一些相关的事情，比如Angular、Avalon和Knockout。有的框架在视图层中让开发人员手动去处理界面，就像未引入框架的那样，比如Backbone，两者是各有利弊的。&lt;br&gt;&lt;br&gt;前面这种，一般功能是会很强大，但是它自身所做的东西必须足够多，多得帮你做掉绝大部分本来该自己做的事，你才会特别爽。所以，用这类框架来做表单型应用的时候，是会非常舒服的，因为这些需求他做框架的时候能预见，所以比如校验、联动、存取之类的都会处理掉。假如你要做一个绘图类应用，这就麻烦了，不管你是用Canvas还是SVG，它所能帮到的都不多。这时候，后面这类可能反而适合一些。&lt;br&gt;&lt;br&gt;这些数据分层框架的原理是什么呢？是要做一层表单与数据的对应关系，所以他要检测数据的变动，比如一个Object，它某个值变更了，要去把对应的界面更改之类。这里面也有很多的坑，可以一步一步踩过来。。。&lt;br&gt;&lt;br&gt;到现在，我大致可以回答你的问题，什么情况下前端开发会比较轻松呢？&lt;br&gt;&lt;ul&gt;&lt;li&gt;针对自己领域的界面标签库比较完善，或者易于扩展&lt;/li&gt;&lt;li&gt;样式容易调整，并且独立于界面元素&lt;/li&gt;&lt;li&gt;逻辑模块化，层次分明，在某种统一规范上存在大量可用库&lt;/li&gt;&lt;/ul&gt;咦，我这三点好像在说微软的WPF体系吗？</textarea>


<div class="zh-summary summary clearfix">

我们来分析一下究竟哪些因素让前端开发这么困扰。 先看看界面部分吧。 #1. 命令式还是声明式 毫无疑问，就写界面来说，声明式的代码编写效率远高于命令式： &lt;Panel title="Test"&gt;
 &lt;Button label="Click me"/&gt;
&lt;/Panel&gt;

Panel p = new Panel();
p.title = …

<a href="/question/22426434/answer/21433867" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" target="_blank" href="/question/22426434/answer/21433867">发布于 2014-01-06</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-1151448"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>71 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="98" data-type="Answer">
<link itemprop="url" href="/question/52965880/answer/133178593">
<meta itemprop="answer-id" content="48791178" />
<meta itemprop="answer-url-token" content="133178593" />
<meta itemprop="answerCount" content="72" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/52965880" target="_blank" data-id="13404987" data-za-element-name="Title">
感觉技术提高很慢，怎么安抚浮躁的情绪？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/52965880/answer/133178593">
<!-- <meta itemprop="answer-id" content="48791178">
<meta itemprop="answer-url-token" content="133178593"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>754</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">754</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">
<span class="name">匿名用户</span>
</div>

<div class="zm-item-vote-info" data-votecount="754" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">754</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="13404987" data-action="/answer/content" data-author-name="匿名用户" data-entry-url="/question/52965880/answer/133178593">

<textarea hidden class="content">看题主列的这些无非：语言、框架、数据库。&lt;br&gt;&lt;br&gt;作为一个写了14年程序的老头子可以很负责任的告诉你：别整这些没用的。&lt;br&gt;&lt;br&gt;任何一个卓越的程序员，掌握任何一门语言、任何一个框架、任何一种数据库系统的时间都不应该超过三天。&lt;br&gt;&lt;br&gt;因为计算机科学里面，万变不离其宗，最核心的只有：算法、数据结构、体系结构。&lt;br&gt;&lt;br&gt;深入理解了相关的核心原理、思想以及常见系统以后，你看什么新玩意都应该能够瞬间抓住本质，吸收理解并且运用自如。&lt;br&gt;&lt;br&gt;如果你想成为行业里面的个中好手或者顶尖专家，可以多关注：硬件架构、操作系统原理、编译原理、分布式系统。&lt;br&gt;&lt;br&gt;这些能让你真正深刻理解计算机科学的核心。而其他任何东西、知识，都是从这些里面派生出来的。而且这些，说实话，魅力无穷，比其它东西有趣多了。&lt;br&gt;&lt;br&gt;除此以外，一个最卓越的程序员、或者工程师吧，并不是因为技术最好，而是因为有领导能力，以及对所在行业的深刻见地。&lt;br&gt;&lt;br&gt;比如如果你在移动互联网领域，那么卓越的程序员是这样的：&lt;br&gt;&lt;br&gt;- 能够充当半个产品经理，站在产品的层面思考问题、设计程序。能够与产品、质量部门出色的完成沟通。&lt;br&gt;&lt;br&gt;- 优秀的领导能力。能够凝结团队力量，获得团队的肯定与支持，确定技术方向。领导能力并不是说你一定是经理或者老板，而是在团队中，大家认可你的技术实力以及为人，自然而然的愿意听你的。&lt;br&gt;&lt;br&gt;- 对移动互联网行业特点、趋势有深刻的理解。知道竞争对手的优势劣势，清楚自家产品的价值和业务流。&lt;br&gt;&lt;br&gt;行业经验这个事情，太重要了。计算机说到底只是工具，离不开具体的行业应用。所以熟悉具体行业又精通计算机的人，才是最或缺的复合型人才。&lt;br&gt;&lt;br&gt;----------------------------&lt;br&gt;&lt;br&gt;以上这些很可能题主早都已经了解了，那就当我废话了吧。&lt;br&gt;&lt;br&gt;再来聊聊感觉进步很慢这件事。&lt;br&gt;&lt;br&gt;在我的职业生涯里面，也无数次感觉进步很慢，碰到了上升的瓶颈。怎么回事呢？&lt;br&gt;&lt;br&gt;其实，学习任何东西都跟练长跑一样，跑到某个公里数的时候，你会精疲力尽感到再也跑不下去了。这恰恰是你的身体极限快要被突破的时候。此时，坚持下去，再慢再难也坚持下去。&lt;br&gt;&lt;br&gt;很快你会发现步子开始轻盈了，前进的速度也变快了。那么恭喜你突破了现在的瓶颈，朝下一个极限出发吧。&lt;br&gt;&lt;br&gt;-------------------------------&lt;br&gt;&lt;br&gt;补充下回答：&lt;br&gt;&lt;br&gt;看到评论里面有些朋友还在纠结框架几天掌握的问题，请不要太较真了。每个人对框架的应用程度不同，以我个人的应用程度和体验来看，三天足够了。&lt;br&gt;&lt;br&gt;而且我说的三天，不同人学习效率、空闲时间、上手速度、基础和经验、应用需求都不一样，真的没办法比较。&lt;br&gt;&lt;br&gt;有的人可以全神贯注、废寝忘食，排除一切干扰，三天学会一个新东西也不是什么奇怪的事情。有的人挤不出时间，自己本来忙的就不可开交，注意力没办法集中，学习效率可想而知。&lt;br&gt;&lt;br&gt;所以请明白我的重点，是不要花过多时间精力在追逐新语言、新框架上。这些都是表面的东西，况且现在的新框架层出不穷，三天两头就换一拨新潮流、新的技术栈，几乎已经沦为了某些群体个人喜好、个人崇拜的玩具，我认为对于想踏踏实实掌握计算机科学精髓的人来说，并不值得花过多时间追逐。&lt;br&gt;&lt;br&gt;作为卓越的程序员，首先看清楚方向，弄明白技巧、技能、思想之间的差别以及孰轻孰重，然后就是多一点点坚持，并不需要多少特别的技术上的指导，我认为已经足够了。</textarea>


<div class="zh-summary summary clearfix">

看题主列的这些无非：语言、框架、数据库。 作为一个写了14年程序的老头子可以很负责任的告诉你：别整这些没用的。 任何一个卓越的程序员，掌握任何一门语言、任何一个框架、任何一种数据库系统的时间都不应该超过三天。 因为计算机科学里面，万变不离其宗…

<a href="/question/52965880/answer/133178593" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-11-27" target="_blank" href="/question/52965880/answer/133178593">编辑于 2016-11-27</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-13404987"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>89 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="1">
<meta name="disableCopyAvatar" content="">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-1" target="_blank" class="meta-item copyright">
作者保留权利
</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="99" data-type="Answer">
<link itemprop="url" href="/question/29231884/answer/43674970">
<meta itemprop="answer-id" content="12864289" />
<meta itemprop="answer-url-token" content="43674970" />
<meta itemprop="answerCount" content="12" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/29231884" target="_blank" data-id="3875628" data-za-element-name="Title">
非计算机想从事前端开发，如何找到实习？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/29231884/answer/43674970">
<!-- <meta itemprop="answer-id" content="12864289">
<meta itemprop="answer-url-token" content="43674970"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>749</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">749</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$yubolun"
target="_blank" href="/people/yubolun"
>余博伦</a></span><span title="https://yubolun.com" class="bio">
<a href="//link.zhihu.com/?target=https%3A//yubolun.com" class=" external" target="_blank" rel="nofollow noreferrer"><span class="invisible">https://</span><span class="visible">yubolun.com</span><span class="invisible"></span><i class="icon-external"></i></a>
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="749" data-async-voters="1">



<span class="voters text"><a href="#" class="more text"><span class="js-voteCount">749</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="3875628" data-action="/answer/content" data-author-name="余博伦" data-entry-url="/question/29231884/answer/43674970">

<textarea hidden class="content">&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;#2016/08/09 答案重构
#2016/03/15 更新googlehosts地址
#2015/06/10 更新书单，更新排版
#2015/06/09 增加资源推荐条目
#2015/05/21 更新资源推荐列表
#2015/04/22 补充说明、重新排版
#2015/04/19 更新百度经验失效链接
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;===========================&lt;br&gt;&lt;blockquote&gt;为了避免误导和重复，我修改了这个问题的回答。&lt;br&gt;一切以非计算机专业找前端开发实习为出发点，进行学习安排和准备工作。&lt;br&gt;参考了拉钩网上知乎、搜狐、百度等公司招前端实习生的要求，总结出以下几条：&lt;/blockquote&gt;&lt;b&gt;基本要求&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;熟练掌握 HTML、CSS、JavaScript，能够写出清晰、清晰的代码&lt;br&gt;&lt;/li&gt;&lt;li&gt;了解常见的前端库和工具，例如，jQuery、AngularJS、Backbone.js、React、Grunt、Gulp 等&lt;br&gt;&lt;/li&gt;&lt;li&gt;对计算机相关基础知识有较好的理解，了解常用的数据结构和算法&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;加分项&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;有个人博客&lt;/p&gt;&lt;/li&gt;&lt;li&gt;有Github且参与过开源项目&lt;/li&gt;&lt;li&gt;了解Python等后端语言&lt;/li&gt;&lt;li&gt;可以阅读英文文档等&lt;/li&gt;&lt;/ul&gt;===========================&lt;br&gt;&lt;blockquote&gt;你需要掌握的知识&lt;/blockquote&gt;&lt;b&gt;基础&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;HTML&lt;br&gt;&lt;/li&gt;&lt;li&gt;CSS&lt;br&gt;&lt;/li&gt;&lt;li&gt;JavaScript&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;框架&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;jQuery&lt;br&gt;&lt;/li&gt;&lt;li&gt;Bootstrap&lt;br&gt;&lt;/li&gt;&lt;li&gt;React&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;工具&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;gulp&lt;br&gt;&lt;/li&gt;&lt;li&gt;Git&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;社区&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Github&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;博客&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;jekyll&lt;br&gt;&lt;/li&gt;&lt;li&gt;hexo&lt;/li&gt;&lt;li&gt;wordpress&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;后端&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;Python&lt;br&gt;&lt;/li&gt;&lt;/ul&gt;===========================&lt;br&gt;&lt;blockquote&gt;为了避免混淆视听和不必要的麻烦，我这里就少放几个链接&lt;/blockquote&gt;&lt;b&gt;1.HTML/CSS/JavaScript/jQuery/Bootstrap/React/Git都可以在菜鸟教程学习：&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.runoob.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;菜鸟教程 - 学的不仅是技术，更是梦想！&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;2.学习使用Github&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//wiki.jikexueyuan.com/project/github-basics/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub 教程_GitHub 使用手册&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;3.搭建博客（任选其一）&lt;/b&gt;&lt;br&gt;在Github上就可以搭建静态博客，只不过后期发布文章可能需要用到命令行，对初学者不友好。&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;搭建一个免费的，无限流量的Blog----github Pages和Jekyll入门&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//xuanwo.org/2015/03/26/hexo-intor/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;史上最详细的Hexo博客搭建图文教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;在daocloud上可以一键创建wordpress博客，赠送的免费券可以用一段时间&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//www.freehao123.com/docker-daocloud/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Docker免费空间申请-DaoCloud使用教程安装WordPress部署Docker镜像&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;4.为开源项目贡献代码&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//blog.jobbole.com/65147/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;如何在Github上为开源贡献力量？&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;5.学习gulp&lt;/b&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.gulpjs.com.cn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;gulp.js - 基于流的自动化构建工具。&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//markpop.github.io/2014/09/17/Gulp%25E5%2585%25A5%25E9%2597%25A8%25E6%2595%2599%25E7%25A8%258B/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Gulp入门教程&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;6.学习python&lt;/b&gt;&lt;br&gt;零基础python教程：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//python.xiaoleilu.com/&quot; class=&quot; external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;&lt;span class=&quot;invisible&quot;&gt;http://&lt;/span&gt;&lt;span class=&quot;visible&quot;&gt;python.xiaoleilu.com/&lt;/span&gt;&lt;span class=&quot;invisible&quot;&gt;&lt;/span&gt;&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;===========================&lt;br&gt;&lt;b&gt;如何找公司&lt;/b&gt;&lt;br&gt;应聘难度从易到难为：&lt;br&gt;非互联网公司但有Web开发需求的&amp;lt;互联网小型创业公司&amp;lt;知名网站、应用&amp;lt;BAT&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.jobtong.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;周伯通招聘 - 最靠谱的移动互联网招聘社区&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.lagou.com/jobs/list_%25E5%2589%258D%25E7%25AB%25AF%25E5%25BC%2580%25E5%258F%2591%3Fpx%3Ddefault%26gx%3D%25E5%25AE%259E%25E4%25B9%25A0&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;找工作-互联网招聘求职网&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;b&gt;如何写简历&lt;/b&gt;&lt;br&gt;公司招码农基本不看学历，介于咱们是半路出家的新手，BAT就不考虑了，重点考虑一些小型创业公司或者非互联网企业但是有Web开发需求的&lt;br&gt;简历里不要说热爱工作，心态乐观一类的废话&lt;br&gt;掌握的技术别说精通要说熟悉&lt;br&gt;直接上干货，把你所有开发过的作品全都罗列出来，能够在线上访问的最好&lt;br&gt;最后补充一下英语优势之类的&lt;br&gt;再推荐一个特别火的Github项目&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/geekcompany/ResumeSample&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;geekcompany/ResumeSample · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;里面有各式程序员简历模板&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.uisdc.com/front-end-engineer-resume&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;经验之谈！前端工程师的简历到底要怎么写？&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;如何面试&lt;/b&gt;&lt;br&gt;&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/markyun/My-blog/tree/master/Front-end-Developer-Questions&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;前端面试题&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;===========================&lt;br&gt;学习过程中很多时候会用到google，如果你不会翻墙，还可以使用这个：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//google.yubolun.com/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Google Hosts&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;</textarea>


<div class="zh-summary summary clearfix">

#2016/08/09 答案重构
#2016/03/15 更新googlehosts地址
#2015/06/10 更新书单，更新排版
#2015/06/09 增加资源推荐条目
#2015/05/21 更新资源推荐列表
#2015/04/22 补充说明、重新排版
#2015/04/19 更新百度经验失效链接=========================== 为了…

<a href="/question/29231884/answer/43674970" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2015-04-02" target="_blank" href="/question/29231884/answer/43674970">编辑于 2016-08-09</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-3875628"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>95 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic2.zhimg.com/5a6f5a9ca7fecba72f27bade8ac47881_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="feed-item feed-item-hook folding" itemprop="question" itemscope itemtype="http://schema.org/Question" data-score="100" data-type="Answer">
<link itemprop="url" href="/question/49176184/answer/116675413">
<meta itemprop="answer-id" content="42154043" />
<meta itemprop="answer-url-token" content="116675413" />
<meta itemprop="answerCount" content="5" />
<meta itemprop="isTopQuestion" content="false" />
<div class="feed-main">
<div class="content">
<h2><a class="question_link" href="/question/49176184" target="_blank" data-id="11886522" data-za-element-name="Title">
JavaScript的功能是不是都是靠C或者C++这种编译语言提供的？
</a></h2>
<div class="expandable entry-body">
<link itemprop="url" href="/question/49176184/answer/116675413">
<!-- <meta itemprop="answer-id" content="42154043">
<meta itemprop="answer-url-token" content="116675413"> -->

<div class="zm-item-vote">
<a class="zm-item-vote-count js-expand js-vote-count" href="javascript:;" data-bind-votecount>747</a>
</div>

<div class="zm-votebar">
<button class="up ">
<i class="icon vote-arrow"></i>
<span class="count">747</span>
<span class="label sr-only">赞同</span>
</button>
<button class="down ">
<i class="icon vote-arrow"></i>
<span class="label sr-only">反对</span>
</button>
</div>



<div class="zm-item-answer-author-info">

<span class="summary-wrapper">
<span class="author-link-line">

<a class="author-link"
data-hovercard="p$t$rednaxelafx"
target="_blank" href="/people/rednaxelafx"
>RednaxelaFX</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span></span><span class="badge-summary"><a href="/people/rednaxelafx#hilightbadge" target="_blank">编程、编译原理、编程语言等 7 个话题优秀回答者</a></span>



<span title="JavaScript引擎研发" class="bio">
Ja…
</span>
</span>
</div>

<div class="zm-item-vote-info" data-votecount="747" data-async-voters="1">


<span class="answer-tag">
<span class="text">收录于 </span>


<span class="text">编辑推荐</span>



</span>


<span class="zg-bull text">•</span><span class="voters text"><a href="#" class="more text"><span class="js-voteCount">747</span>&nbsp;人赞同</a></span>


</div>
<div class="zm-item-rich-text expandable js-collapse-body" data-resourceid="11886522" data-action="/answer/content" data-author-name="RednaxelaFX" data-entry-url="/question/49176184/answer/116675413">

<textarea hidden class="content">糟糕，废话写太多了。请题主（和其他对这个话题感兴趣的同学）耐心看到最后…&lt;br&gt;没耐心的话请直接跳到最后一部分看Tachyon相关的介绍。&lt;br&gt;&lt;br&gt;JavaScript引擎的实现多如牛毛啊。用C或C++实现的固然很多，但其它语言实现的也不少哇。随便举几个例子：&lt;br&gt;&lt;ul&gt;&lt;li&gt;D：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.digitalmars.com/dscript/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DMDScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Java：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//developer.mozilla.org/en-US/docs/Mozilla/Projects/Rhino&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rhino&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;//link.zhihu.com/?target=http%3A//openjdk.java.net/projects/nashorn/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Nashorn&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;//link.zhihu.com/?target=http%3A//dynjs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DynJS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.oracle.com/technetwork/oracle-labs/program-languages/overview/index-2301583.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Truffle/JS&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt; 等 &lt;/li&gt;&lt;li&gt;C#：Managed JScript、SPUR 等&lt;/li&gt;&lt;li&gt;F#：IronJS&lt;/li&gt;&lt;li&gt;Python：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/sumukhbarve/jispy&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;jispy&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（实现了一个JavaScript子集）&lt;/li&gt;&lt;li&gt;RPython：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//bitbucket.org/pypy/lang-js/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;lang-js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;（项目已挂）&lt;/li&gt;&lt;li&gt;JavaScript：Narcissus、Continuum、Babel、Tachyon 等&lt;/li&gt;&lt;li&gt;… 大概还有很多我没列举或者不知道的&lt;/li&gt;&lt;/ul&gt;以前收集过一些JavaScript引擎的实现的资料，请参考：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//hllvm.group.iteye.com/group/topic/37596&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;[链接帖] 各JavaScript引擎的简介，及相关资料/博客收集帖&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;别的runtime / VM相关，之前回答过一发：&lt;a href=&quot;https://www.zhihu.com/question/27875742/answer/39279855&quot; class=&quot;internal&quot;&gt;是否存在Runtime System 或VM 不由C 或C++ 实现的编程语言？ - RednaxelaFX 的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;原问题：&lt;br&gt;&lt;blockquote&gt;感觉JavaScript的运行环境都是编译语言写出来的&lt;br&gt;&lt;/blockquote&gt;不一定。题主看上面列举的那些实现，是不是都是用“编译语言”实现的？&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;那么对于一些与操作系统或者复杂运算等功能，是不是都是靠编译语言完成，然后由JavaScript调用这种方式实现的？&lt;br&gt;&lt;/blockquote&gt;前提条件已经为假，后面这个推论就不用看了。&lt;br&gt;&lt;br&gt;JavaScript在语言层面并没有暴露任何操作系统层面的功能。它的本意是要嵌在某种宿主环境里，由宿主注入它希望暴露出来的功能。例如说V8自身并没有读写文件的能力，而Node.js作为一个宿主环境注入操作文件的API给V8，在Node.js里写JavaScript就可以操作文件了。&lt;br&gt;于是宿主是不是都是“编译型语言”实现的呢？也不一定。浏览器是最常见的宿主环境，确实大多数浏览器都是C或者C++实现的，但也有用Java、C#、Rust等语言实现的；而其它类型的宿主环境也有很多，例如说用Java实现的好几种服务器端环境（Node.jar / Avatar.js、Vert.x / Nodyn）。&lt;br&gt;&lt;br&gt;========================================&lt;br&gt;&lt;br&gt;&lt;blockquote&gt;那JIT技术在编译成机器码后，编译后的机器码能否脱离解释器独自运行呢？&lt;/blockquote&gt;题主很可能把“解释器”（interpreter）跟“运行时”（runtime）混为一谈了。&lt;br&gt;&lt;br&gt;“运行时”，或者全称“运行时环境”（runtime environment）、“运行时支持库”（runtime library），是为编程语言在运行的时候提供支持功能的环境/库。大多数高级编程语言都要带着一个运行时库，要么用于支持语言层面的功能，要么提供标准库的实现。&lt;br&gt;&lt;br&gt;典型的运行时库的例子：&lt;br&gt;&lt;ul&gt;&lt;li&gt;C：msvcrt、libc、glibc、libSystem.dylib&lt;/li&gt;&lt;li&gt;C++：msvcrt、libstdc++、libc++&lt;/li&gt;&lt;li&gt;D：Phobos、Tango，还有抽象的DRuntime&lt;/li&gt;&lt;li&gt;Go：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//golang.org/pkg/runtime/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Go runtime&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Rust：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//doc.rust-lang.org/0.12.0/guide-runtime.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Rust Runtime&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;C#：.NET Framework（内含CLR）、.NET Core（内含CoreCLR）、.NET Native（内含Minimal Runtime）、Mono（内含Mono） 等&lt;/li&gt;&lt;li&gt;Java：Oracle JRE（内含HotSpot VM）、IBM JRE（内含J9 VM） 等&lt;/li&gt;&lt;li&gt;… 等等&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;大家都认同C语言是“编译型语言”，但是大家会一边嫌弃Java、.NET带着个“虚拟机”（实际上不仅指VM而指整个runtime），却不在意大部分用C写的程序也要带着运行时库，特别是实现C标准库的各种CRT（C Runtime）实现。&lt;br&gt;上面列举的情况里，C、C++、Rust等语言的“特别之处”在于，当只使用语言的相当大的特定子集时，它就不需要依赖于标准运行时库——不与标准库/运行时库链接——而可以独立运行。这些个子集可以几乎包含语言的所有语法结构。&lt;br&gt;这就使得这些语言适合编写最底层的软件代码，例如操作系统内核——这里所有运行时支持都得自己实现。&lt;br&gt;&lt;ul&gt;&lt;li&gt;C：只要不使用标准库，基本上整个语言都可以脱离标准库运行。特别的，只用宏（macro）所实现的库功能都会在编译时展开，所以不需要额外的运行时库来提供支持。&lt;/li&gt;&lt;li&gt;C++：不用有需要运行时支持的运算符和标准库，语言的很大子集可以脱离标准库/运行时库运行。特别的，标准库里有很多功能是用纯模版实现的，这些都会在编译时展开，所以不需要额外的运行时库来提供支持。&lt;/li&gt;&lt;li&gt;Rust：语言自身的语法结构以及大量的标准库功能都以“zero-overhead”为设计目标，尽可能做成可内联/可展开的，因而语言的几乎所有语法和相当大量的标准库功能都不需要带上运行时库来支持。主要是线程、I/O等功能会用到运行时库。&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;怎样的C程序会需要带上标准运行时库呢？只要用了下列功能的任何一个就需要：&lt;br&gt;&lt;ul&gt;&lt;li&gt;动态内存管理：malloc、calloc、realloc、free 等&lt;/li&gt;&lt;li&gt;文件访问：fopen、fseek、fclose 等&lt;/li&gt;&lt;li&gt;输入输出：puts、printf、scanf 等&lt;/li&gt;&lt;li&gt;字符串操作与内存块操作：strlen、strcpy / memcpy、memset、strstr 等&lt;br&gt;&lt;/li&gt;&lt;li&gt;数学函数：sin、cos、tan、pow、exp、abs、div、sqrt、fma 等&lt;/li&gt;&lt;li&gt;算法：qsort、bsearch 等&lt;/li&gt;&lt;/ul&gt;（当然，优化编译器可以把上述函数中一些简单的函数在编译时彻底内联，这样就不需要在编译后带上运行时库了。但其实这可以看作一种特殊的静态链接，还是跟标准库“链接”上了）&lt;br&gt;所以一般大家写的应用层面的C语言的程序，其实都是得带着运行时库的。无论是静态链接还是动态链接，带着就是带着了，不必害羞。&lt;br&gt;&lt;br&gt;C++的话，在上述C的情况之上，还有一些东西只要用了就需要标准运行时库：&lt;br&gt;&lt;ul&gt;&lt;li&gt;动态内存管理：在C标准库之外，还有C++标准库里的默认operator new、operator delete 等&lt;/li&gt;&lt;li&gt;RTTI：dynamic_cast&amp;lt;&amp;gt;、typeid()、std::type_info 等&lt;/li&gt;&lt;li&gt;线程API：std::thread 等&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;怎样的Java程序需要带上运行时库呢？&lt;br&gt;&lt;ul&gt;&lt;li&gt;动态内存管理：new运算符以及所有会隐式创建对象的功能，以及自动回收无用内存（GC）的功能&lt;/li&gt;&lt;li&gt;动态类加载与链接&lt;/li&gt;&lt;li&gt;反射&lt;/li&gt;&lt;li&gt;多线程支持&lt;/li&gt;&lt;li&gt;（以上功能需要JVM内直接实现，是语言内建功能就需要的）&lt;/li&gt;&lt;li&gt;其它标准库功能：集合、I/O、文件、字符串，等等。这些功能可以在JVM之上的层面实现&lt;/li&gt;&lt;li&gt;…&lt;/li&gt;&lt;/ul&gt;如果不使用动态类加载、反射等功能，运行时需要维护的元数据就可以大幅减少，并且可以对程序做的静态分析的精度可以大幅提升。Java ME的CLDC就是这样的子集，它的JVM就比Java SE的JVM简单得多。&lt;br&gt;&lt;br&gt;如果上面这些高级功能都不用，是不是可以得到一个不需要带额外的运行时库的Java子集呢？&lt;br&gt;答案是肯定的。如果把Java语法当C语法来写，只用静态方法（因为不能new）和原始类型（因为引用类型要用都得new），不用任何复杂的标准库功能，那么这个Java的子集是可以完全彻底编译成可裸奔的目标程序，不需要跟运行时库链接。此时的这个子集其实就跟没了指针和自定义值类型的C几乎一样…&lt;br&gt;大家实现过“&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.cs.tufts.edu/%7Esguyer/classes/comp181-2006/minijava.html&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;MiniJava&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;”的编译器不？它所实现的基本上就是这样的不需要额外运行时支持库的Java子集。所以不要笑，这是实际存在的东西。&lt;br&gt;&lt;br&gt;上面Java的列表里没有提到解释器或者JIT编译器。为啥？因为它们并不是非要不可的。&lt;br&gt;如果不使用动态类加载的功能，那么可以事先把一个Java程序需要用到的代码全部编译到目标代码，也就是完全的AOT编译。这样在运行时就不需要解释器或者JIT编译器了。AOT编译、解释器、JIT编译都是实现Java程序执行的方式，挑任意一种或多种都可以。&lt;br&gt;&lt;br&gt;总有同学以写程序是否需要带运行时库来衡量一门语言是否能被“彻底编译”。这种表示方式是很具误导性的。上面已经展示了C与C++也需要带上运行时库的情况。&lt;b&gt;关键还是看某个具体程序使用了多复杂的功能，越复杂的功能就越需要带上一个复杂的运行时库。&lt;br&gt;&lt;/b&gt;&lt;br&gt;&lt;br&gt;更具有指导意义的说法是：&lt;b&gt;一门语言，剥离了运行时库也能使用的功能，与这门语言的完整功能相比，是多大的子集。&lt;/b&gt;这样就好说了：C语言剥离了运行时库也几乎可以使用整个语言所有的语法功能，只是不能用标准库函数了；而Java的话就会被限制在一个很小的子集里，写不出一般结构的Java程序了。&lt;br&gt;&lt;br&gt;另外一种有指导意义的问题：&lt;b&gt;一门语言是否能只靠自己来实现自己，最终得到一个可以独立运行的程序。&lt;/b&gt;换句话说，这门语言是否可以“自举”。对这个感兴趣的话请继续往下读。&lt;br&gt;注意：一门语言是否能自举，跟这门语言的实现是否需要带一个运行时库，两者是没有必然联系的。&lt;br&gt;&lt;br&gt;========================================&lt;br&gt;&lt;br&gt;有些同学会喜欢偷换概念，把“不需要带运行时库”实质上定义为：&lt;br&gt;&lt;ul&gt;&lt;li&gt;除了CRT之外不需要带额外的运行时库：那其实只要让某个语言的实现只依赖C标准库所实现的运行时功能即可。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;诚然，很多操作系统都有配套的默认CRT，所以只需要依赖CRT常常意味着不用带“额外的”运行时库；但也有很多嵌入式系统有很各自特殊的设计，并不提供完整的C标准库支持，要用那些功能怎么办？还是得要么自己实现（等于自己实现了个运行时库），要么想办法带上个标准的运行时库。&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;可以把运行时库静态链接打包成单一的可执行文件：有这种想法的同学需要好好补习编译原理的基础知识。&lt;/li&gt;&lt;ul&gt;&lt;li&gt;打包成单一可执行文件有很多办法。一个普通的Java程序，完全可以把其所依赖的JAR包打包到可执行文件的资源里，而把其依赖的JVM功能静态链接到可执行文件里，最终也一样可以形成一个单一的可执行文件。其它带解释器或者复杂的运行时的语言实现也可以如法炮制。&lt;/li&gt;&lt;/ul&gt;&lt;/ul&gt;不要掉进这俩坑里了。透过现象看本质。&lt;br&gt;&lt;br&gt;========================================&lt;br&gt;&lt;br&gt;要说一门语言是否“可以编译”，其实&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Partial_evaluation%23Futamura_projections&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Futamura映射&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;的第一映射已经给出了答案：&lt;b&gt;只要能实现一门语言的解释器，就可以对这门语言做编译。&lt;/b&gt;&lt;br&gt;一门语言 L 如果可以被解释器 I 实现，至少说明这门语言是&lt;b&gt;可计算&lt;/b&gt;的。在这个前提下，把L语言的一段程序 S 与解释器 I 一起输入到一个partial evaluator，就可以得到编译后的程序 P。&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;S -\
    |-&amp;gt; [ Partial Evaluator ] -&amp;gt; P
I -/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;然后当我们要运行程序的时候，运行程序 P 并提供运行时输入，就得到了运行结果Result：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;Input -&amp;gt; [ P ] -&amp;gt; Result
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;本来一个解释器应该接受两种输入，一个是要解释执行的程序 S ，另一个是对 S 的输入 Input，最后运行得到结果：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;S     -\
       |-&amp;gt; [ I ] -&amp;gt; P
Input -/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这里partial evaluator做的事情就是：把程序 S 看作解释器 I 的固定输入，这样就可以依据S来把I的逻辑彻底展开，最后剩下的无法继续展开的程序 P 就是解释器 I 对程序 S 的特化，也就是编译的结果。&lt;br&gt;于是给程序 P 输入Input，就能得到跟原本解释执行一样的结果Result。&lt;br&gt;&lt;br&gt;对此过程的形象介绍，请跳传送门：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//codon.com/compilers-for-free&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Compilers for Free&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，这边就不展开说了。&lt;br&gt;&lt;b&gt;&amp;lt;- 重要的事情再说一次：对一门语言是否可以编译，可以的话如何通过实现一个解释器就达到编译的目的，请跳上面这个传送门。&lt;/b&gt;&lt;br&gt;&lt;br&gt;PyPy 和 Truffle 项目是此概念的非常好的例子。它们都通过partial evaluation，让用户只需要实现一门语言的解释器，就最终得到这门语言的编译器（和运行时）。&lt;br&gt;&lt;br&gt;========================================&lt;br&gt;&lt;br&gt;说了半天，这跟JavaScript有什么关系呢？&lt;br&gt;作为一门高级的脚本语言，JavaScript的语言内建的功能就有不少功能一般是需要运行时库的支持的：&lt;br&gt;&lt;ul&gt;&lt;li&gt;动态内存管理：new以及其它动态创建对象的语法（对象字面量、数组字面量、正则表达式字面量）、无限制的闭包，以及对应的自动回收无用内存的功能&lt;/li&gt;&lt;li&gt;内建类型涉及的标准库函数实现：Object、Number、String、Boolean、Function、Date、RegExp等内建类型，以及它们的相关函数 等&lt;/li&gt;&lt;li&gt;反射：typeof，with，类型间的转换 等&lt;/li&gt;&lt;li&gt;… 最后的大魔王：eval （以及Function构造函数或其它能把字符串当作程序代码来执行的功能）&lt;/li&gt;&lt;/ul&gt;就算把一个JavaScript程序事先彻底编译到目标代码，如果要支持eval的话，最终还是得把一个解释器或JIT编译器带在运行时库里，因为程序运行过程中还可能动态加载新的代码，而这未知的输入是无法事先编译为目标代码的。&lt;br&gt;&lt;br&gt;那要是不用eval（以及其它能把字符串当作程序代码来执行的功能）呢？那就消除了动态加载（未被编译的）JavaScript代码的可能性。&lt;br&gt;于是就有可能事先把JavaScript程序编译到目标机器码，而与其配套的运行时里不需要带上解释器或者JIT编译器这样的执行引擎。反射、GC、标准库之类的功能还是可以由运行时库来提供。&lt;br&gt;&lt;br&gt;那如果不用反射、&lt;br&gt;不用复杂的内建类型、&lt;br&gt;不用动态内存分配…&lt;br&gt;&lt;br&gt;剥离到最后的“裸”的JavaScript的子集是怎样的呢？&lt;br&gt;——看看&lt;a href=&quot;//link.zhihu.com/?target=http%3A//asmjs.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;asm.js&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;就知道了。用它是可以写出基本脱离运行时库的程序的，只要实现合适的AOT编译器。&lt;br&gt;但它自身的功能很受限，如果不跟宿主环境注入的函数搭配使用的话，自身是做不了什么事的；而宿主环境注入了函数给asm.js用的话，对asm.js来说这个宿主环境就成为“运行时库”的一部分了。&lt;br&gt;&lt;br&gt;还是回到前面提到过的：&lt;b&gt;关键还是看某个具体程序使用了多复杂的功能，越复杂的功能就越需要带上一个复杂的运行时库。&lt;/b&gt;&lt;br&gt;&lt;br&gt;========================================&lt;br&gt;&lt;br&gt;本回答开头提到的JavaScript引擎的实现中，最特别的一个是当时是在读博士生的Maxime Chevalier-Boisvert所实现的Tachyon VM。&lt;br&gt;&lt;br&gt;源码：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Tachyon-Team/Tachyon&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;GitHub - Tachyon-Team/Tachyon&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;可自举版的源码：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/Tachyon-Team/Tachyon/tree/dls2011/source&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tachyon/source at dls2011 · Tachyon-Team/Tachyon · GitHub&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;论文：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.iro.umontreal.ca/%7Edufour/pubs/dls2011.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Bootstrapping a Self-Hosted Research Virtual Machine for JavaScript&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，发表于DLS 2011&lt;br&gt;演讲稿：&lt;a href=&quot;//link.zhihu.com/?target=http%3A//www.sable.mcgill.ca/%7Eclump/cdp2010/ChevalierCDP10.pdf&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Tachyon: a Meta-circular Optimizing JavaScript Virtual Machine&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;以前我在另一个回答里提到过这个JavaScript引擎：&lt;br&gt;&lt;a href=&quot;https://www.zhihu.com/question/20004379/answer/18600484&quot; class=&quot;internal&quot;&gt;用 JavaScript 写成的 JavaScript 解释器，意义是什么？ - RednaxelaFX 的回答&lt;/a&gt;&lt;br&gt;&lt;br&gt;Tachyon最好玩的地方在于：它自身是用JavaScript实现的，并且它可以独立运行（最终不需要运行在Tachyon之外的别的JavaScript引擎上）。&lt;br&gt;&lt;br&gt;它是怎么做到的？用JavaScript实现的parser有许多现成的了，其中不乏像&lt;a href=&quot;//link.zhihu.com/?target=http%3A//esprima.org/&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Esprima&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;这样高质量又流行的实现。用JavaScript实现的JavaScript解释器也有不少了。但它们都得在一个现成的JavaScript引擎上运行啊。&lt;br&gt;要做一个能独立于别的JavaScript引擎而运行的实现，还得实现对象模型和GC，这些都需要指针操作，而JavaScript语言自身并不提供指针运算以及裸内存访问的功能，咋破？&lt;br&gt;&lt;br&gt;&lt;b&gt;秘方的思路就是“自举”（bootstrap），而实现机制就是“编译”。&lt;/b&gt;&lt;br&gt;&lt;br&gt;相当多编程语言的编译器都是用自己实现的，许多C和C++编译器都是如此。例如说老的GCC自身是用C语言实现的，新的GCC、Clang自身是用C++实现的。它们要如何“编译自己”，也是要经过一个自举的过程。&lt;br&gt;但对许多不熟悉编译原理的同学来说，JavaScript（以及Java、C#、Python等语言）也能做到这点应该还是件新奇事吧。&lt;br&gt;&lt;br&gt;Tachyon作为一个JavaScript引擎，有对象模型、内建类型的库函数、GC（在DLS 2011时尚未完成但思路是明确的，后来实现了一个copying GC）等等常见的组件，而更重要的是，它的执行引擎部分是通过编译器的形式来实现的。这个编译器既可以当作AOT编译器用，也可以当作JIT编译器用。&lt;br&gt;&lt;br&gt;引用Tachyon论文里的一张图来讲解它的bootstrap过程：&lt;br&gt;&lt;img src=&quot;https://pic2.zhimg.com/98e9e268c20782ce3c26bced88726441_b.png&quot; data-rawwidth=&quot;650&quot; data-rawheight=&quot;444&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;650&quot; data-original=&quot;https://pic2.zhimg.com/98e9e268c20782ce3c26bced88726441_r.png&quot;&gt;这张图的表述方式是所谓“T形图”：&lt;a href=&quot;//link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Tombstone_diagram&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;T-diagram&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;。每个小T形的三个顶点分别表示：&lt;br&gt;&lt;ul&gt;&lt;li&gt;左边：编译器的输入语言&lt;/li&gt;&lt;li&gt;右边：编译器的输出语言&lt;/li&gt;&lt;li&gt;下面：实现编译器所用的语言&lt;/li&gt;&lt;/ul&gt;具体到Tachyon，它包含一个用JavaScript实现的、能把JavaScript源码编译到32位x86机器码的编译器。所以用T形图表示就是：&lt;br&gt;&lt;img src=&quot;https://pic3.zhimg.com/a20ff1d9c8e3685543af055f563c2dd6_b.jpg&quot; data-rawwidth=&quot;237&quot; data-rawheight=&quot;165&quot; class=&quot;content_image&quot; width=&quot;237&quot;&gt;那么如果把Tachyon自身（大图左边的T形）作为Tachyon（大图下面的T形）的输入，把自己编译成x86机器码，得到的就是能直接在x86上运行的、把JavaScript源码编译为x86机器码的Tachyon（大图右边的T形）。这就是Tachyon的bootstrap过程。&lt;br&gt;注意到大图下面的T形的下面还有一个小长方形，这是在boostrap过程中用于运行Tachyon的宿主JavaScript引擎。具体来说这里用的是V8的shell。&lt;br&gt;&lt;br&gt;有了自己实现的、能把JavaScript源码编译到x86机器码的编译器之后，事情就变得好玩了。要实现高性能的值表现形式、对象模型、GC等功能，必须要用到指针运算和裸内存访问。&lt;br&gt;JavaScript自身没有提供这样的功能，但现在Tachyon有自己的编译器了，就可以在编译器里做些扩展，给Tachyon所支持的的JavaScript添加私有扩展，仅用于实现Tachyon自身（而不将这些扩展暴露给上层JavaScript应用代码）。&lt;br&gt;&lt;br&gt;Tachyon具体是怎么做的呢？它用的机制叫做Inlined IR，简称“IIR”。&lt;br&gt;顾名思义，IIR就是可以在普通JavaScript语法的源码里，混入指定的编译器IR来表达要执行的操作，就跟内联汇编的意图和作用类似。&lt;br&gt;例如说，要实现ES5的Object.getPrototypeOf函数，Tachyon的实现是：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;15.2.3.2 Get the prototype of an object&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getPrototypeOf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;boxIsObjExt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'non-object value in getPrototypeOf'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_obj_proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这看起来还是个普通的JavaScript函数，但里面有些奇怪的函数调用，boxIsObjExt()、get_obj_proto()。&lt;br&gt;&lt;br&gt;让我们看看get_obj_proto是如何实现的：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;get_obj_proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tachyon:arg obj box&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tachyon:inline&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tachyon:noglobal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;tachyon:ret box&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IRType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;这看起来就不那么普通了。首先，函数开头有若干Tachyon特有的directive字符串，用于在维持JavaScript基本语法的前提下，给Tachyon的编译器部分提供额外的静态声明信息，例如这里：&lt;br&gt;&lt;ul&gt;&lt;li&gt;tachyon:arg obj box：声明了参数列表有一个参数，名为obj，类型为box（装箱的指针类型）&lt;/li&gt;&lt;li&gt;tachyon:inline：这个函数的实现应该被内联到caller一侧&lt;/li&gt;&lt;li&gt;tachyon:noglobal：这个函数不会访问任何全局变量&lt;/li&gt;&lt;li&gt;tachyon:ret box：返回类型为box&lt;/li&gt;&lt;/ul&gt;接下来pint(4)告诉Tachyon编译器这里要一个值为4的platform int类型的值（等同C的intptr_t）。&lt;br&gt;&lt;br&gt;最后终于来到最有趣的iir.load()调用。这个调用实际的意思是：这并不是一个真的函数调用，而是一条内联IR（IIR）；这条IR的语义是：以obj指针为基地址、offset为偏移量，加载（load）一个类型为box的值出来。&lt;br&gt;要是用伪C代码来表示这个语义，那就是：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* char* obj */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;也就是base+offset形式的指针解引用。&lt;br&gt;&lt;br&gt;上面的get_obj_proto()函数，对应最终生成的机器码，会是类似这样的：（这里按Tachyon论文用AT&amp;amp;T语法）&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;movl 4(%reg_src), %reg_dst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;就是一条简单的mov指令，实现了指针运算和裸内存访问。&lt;br&gt;&lt;br&gt;通过这种IIR机制，Tachyon就可以使用普通的JavaScript语法来表达扩展的语义，从而可以实现对象模型、GC等底层功能对指针运算、裸内存访问等功能的需求。&lt;br&gt;&lt;br&gt;有了这扩展语义的JavaScript，那是不是Tachyon整体都需要用到这样的扩展语义呢？并不是。&lt;br&gt;还是回到前面提到的bootstrap过程：在bootstrap过程中，&lt;br&gt;&lt;ul&gt;&lt;li&gt;Tachyon的编译器部分需要由V8执行，所以这个编译器无法使用任何扩展的JavaScript语义——因为V8并不理解这些扩展——而它也不需要用。&lt;br&gt;&lt;/li&gt;&lt;li&gt;Tachyon的运行时部分的大部分高层功能其实也不需要用到扩展的语义。&lt;/li&gt;&lt;li&gt;Tachyon的运行时的底层功能，如对象模型和GC，在boostrap中并不需要运行，只需要被Tachyon自己编译成机器码。它们才真正需要使用到扩展的语义。&lt;/li&gt;&lt;/ul&gt;简单图示一下：&lt;br&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt; [ compiler ] [ stdlib ] [ ... ]           standard ES5
-----------------------------------------
 [ object model ] [ garbage collector ]   extended ES5 with IIR
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br&gt;值得一提的是，Tachyon在bootstrap结束后并不只是把自己从JavaScript源码编译到了x86机器码，还生成了运行自己所需要的初始对象（例如Object、Number等内建类型对应的构造函数对象、prototype对象等等）。&lt;br&gt;这些初始对象作为静态数据与生成的机器码一起打包成ELF格式，构成最终的可执行文件。&lt;br&gt;&lt;br&gt;是不是很有趣的实现？&lt;br&gt;&lt;br&gt;（注：Tachyon能自举的版本在前面提到了，是开DLS 2011会议时发布的版本。&lt;br&gt;后来作者的注意方向转到别处去了，暂时放下了Tachyon的自举功能，而专注开发别的部分去了。&lt;br&gt;后来出于她自己的兴趣与导师指导方向的不一致，她停止了Tachyon的开发，而另起炉灶用D语言写了一个新的JavaScript引擎，&lt;a href=&quot;//link.zhihu.com/?target=https%3A//github.com/higgsjs/Higgs&quot; class=&quot; wrap external&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Higgs&lt;i class=&quot;icon-external&quot;&gt;&lt;/i&gt;&lt;/a&gt;，用于研究对JavaScript的优化编译。&lt;br&gt;这段经历使得Tachyon在被停止开发前还不算很完善。但它已经实现的功能足以演示用JavaScript实现可自举的JavaScript引擎的可行性，以及一种实际实现的思路。）&lt;br&gt;&lt;br&gt;========================================&lt;br&gt;&lt;br&gt;回到题主最初的问题：&lt;br&gt;&lt;blockquote&gt;JavaScript的功能是不是都是靠C或者C++这种编译语言提供的？&lt;/blockquote&gt;虽然并不都是靠C或C++来实现的，但如果想实现一个不需要别的宿主环境（例如别的JavaScript引擎、JVM之类）而可以独立运行的JavaScript引擎，拥有一个对应的编译器是必要的。&lt;br&gt;用C或C++来实现的话，这“对应的编译器”就是普通的C或C++编译器；&lt;br&gt;而如果用JavaScript自己来实现自己的话，这“对应的编译器”就得自己来实现，就像Tachyon那样。</textarea>


<div class="zh-summary summary clearfix">
<img src="https://pic2.zhimg.com/98e9e268c20782ce3c26bced88726441_200x112.png" data-rawwidth="650" data-rawheight="444" class="origin_image inline-img zh-lightbox-thumb" data-original="https://pic2.zhimg.com/98e9e268c20782ce3c26bced88726441_r.png">
糟糕，废话写太多了。请题主（和其他对这个话题感兴趣的同学）耐心看到最后… 没耐心的话请直接跳到最后一部分看Tachyon相关的介绍。 JavaScript引擎的实现多如牛毛啊。用C或C++实现的固然很多，但其它语言实现的也不少哇。随便举几个例子： D：<a href="//link.zhihu.com/?target=http%3A//www.digitalmars.com/dscript/" class=" wrap external" target="_blank" rel="nofollow noreferrer">DMDScript<i class="icon-external"></i></a>Ja…

<a href="/question/49176184/answer/116675413" class="toggle-expand">显示全部</a>

</div>



<p class="visible-expanded"><a itemprop="url" class="answer-date-link meta-item" data-tooltip="s$t$发布于 2016-08-13" target="_blank" href="/question/49176184/answer/116675413">编辑于 2016-08-16</a></p>

</div>
</div>
<div class="zm-item-meta feed-meta">
<div class="zm-item-meta answer-actions clearfix js-contentActions">
<div class="zm-meta-panel">

<a data-follow="q:link" class="follow-link zg-follow meta-item" href="javascript:;" id="sfb-11886522"><i class="z-icon-follow"></i>关注问题</a>

<a href="#" name="addcomment" class="meta-item toggle-comment js-toggleCommentBox">
<i class="z-icon-comment"></i>49 条评论</a>


<a href="#" class="meta-item zu-autohide js-thank" data-thanked="false"><i class="z-icon-thank"></i>感谢</a>



<a href="#" class="meta-item zu-autohide js-share"><i class="z-icon-share"></i>分享</a>

<a href="#" class="meta-item zu-autohide js-collect"><i class="z-icon-collect"></i>收藏</a>





<span class="zg-bull zu-autohide">&bull;</span>

<a href="#" class="meta-item zu-autohide js-noHelp">没有帮助</a>

<span class="zg-bull zu-autohide">&bull;</span>
<a href="#" class="meta-item zu-autohide js-report">举报</a>




<meta name="copyrightStatus" content="0">
<meta name="disableCopyAvatar" content="https://pic1.zhimg.com/ee07454da2fc6d007c29ca9b393f94ac_s.jpg">

<span class="zg-bull">&bull;</span>

<a href="/terms#sec-licence-6" target="_blank" class="meta-item copyright">禁止转载</a>


<button class="meta-item item-collapse js-collapse">
<i class="z-icon-fold"></i>收起
</button>
</div>
</div>
</div>
</div>
</div>
</div>
</div>

<div class="zm-invite-pager">

<span><a href="?page=4">上一页</a></span>





<span><a href="?page=1">1</a></span>

<span>...</span>



<span><a href="?page=3">3</a></span>



<span><a href="?page=4">4</a></span>



<span class="zg-gray-normal">5</span>



<span><a href="?page=6">6</a></span>



<span><a href="?page=7">7</a></span>



<span>...</span>

<span><a href="?page=50">50</a></span>



<span><a href="?page=6">下一页</a></span>

</div>

</div>
</div>

</div>
</div>


<div class="zu-main-sidebar" data-za-module="RightSideBar">

<div class="zm-side-section">
<div class="zm-side-section-inner">
<div class="topic-header-side zm-entry-head-wrap">

<div class="clearfix"><div id="zh-topic-side-head">

<a href="javascript:;" name="focus" class="zg-mr10 zu-entry-focus-button zg-btn-white" id="tf-225">取消关注</a>

<div class="zm-topic-side-followers-info">

<a href="/topic/19550901/followers"><strong>108696</strong></a> 人关注了该话题

</div>
</div></div>
<div style="margin-top: 15px;">

<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/organize">组织</a>
<span class="zg-bull">•</span>
<a class="zg-link-litblue-normal js-may-disable" href="/topic/19550901/manage">管理</a>
<span class="zg-bull">•</span>

<a class="zg-link-litblue-normal" href="/topic/19550901/log">日志</a>
</div>

</div>
</div>
</div>

<div class="zm-side-section">
<div class="zm-side-section-inner">
<h3 class="zm-topic-side-organize-title">描述
</h3>
<div id="zh-topic-desc" data-resourceid="225" data-action="/topic-introduction">
<div class="zm-editable-content" data-editable-maxlength="130" ></div>
</div>
</div>
</div>
<div class="shameimaru-placeholder" data-loc="topic_up" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

<div class="zm-side-section" id="zh-topic-side-parents-list">
<div class="zm-side-section-inner parent-topic">
<h3 class="zm-topic-side-organize-title">父话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19550516"
data-hovercard="t$b$19550516" data-token="19550516" data-topicid="98" data-za-element-name="Title">
Web 开发
</a>

<a class="zm-item-tag"
href="/topic/19552332"
data-hovercard="t$b$19552332" data-token="19552332" data-topicid="708" data-za-element-name="Title">
软件开发
</a>

<a class="zm-item-tag"
href="/topic/19561719"
data-hovercard="t$b$19561719" data-token="19561719" data-topicid="3839" data-za-element-name="Title">
网站开发
</a>

</div>
</div>
</div>
<div class="zm-side-section" id="zh-topic-side-children-list">
<div class="zm-side-section-inner child-topic">
<h3 class="zm-topic-side-organize-title">子话题
</h3>
<div class="clearfix">

<a class="zm-item-tag"
href="/topic/19552521"
data-hovercard="t$b$19552521" data-token="19552521" data-topicid="769" data-za-element-name="Title">
JavaScript
</a>

<a class="zm-item-tag"
href="/topic/19551326"
data-hovercard="t$b$19551326" data-token="19551326" data-topicid="369" data-za-element-name="Title">
CSS
</a>

<a class="zm-item-tag"
href="/topic/19573936"
data-hovercard="t$b$19573936" data-token="19573936" data-topicid="7912" data-za-element-name="Title">
前端工程师
</a>

<a class="zm-item-tag"
href="/topic/19551323"
data-hovercard="t$b$19551323" data-token="19551323" data-topicid="367" data-za-element-name="Title">
HTML
</a>

<a class="zm-item-tag"
href="/topic/19583739"
data-hovercard="t$b$19583739" data-token="19583739" data-topicid="11152" data-za-element-name="Title">
前端性能优化
</a>

<a class="zm-item-tag"
href="/topic/19806306"
data-hovercard="t$b$19806306" data-token="19806306" data-topicid="87560" data-za-element-name="Title">
前端框架
</a>

<a class="zm-item-tag"
href="/topic/19621319"
data-hovercard="t$b$19621319" data-token="19621319" data-topicid="23778" data-za-element-name="Title">
前端开发框架和库
</a>

<a class="zm-item-tag"
href="/topic/19590813"
data-hovercard="t$b$19590813" data-token="19590813" data-topicid="13512" data-za-element-name="Title">
前端入门
</a>

<a class="zm-item-tag"
href="/topic/19597369"
data-hovercard="t$b$19597369" data-token="19597369" data-topicid="15721" data-za-element-name="Title">
浏览器兼容性
</a>

<a class="zm-item-tag"
href="/topic/19566907"
data-hovercard="t$b$19566907" data-token="19566907" data-topicid="5573" data-za-element-name="Title">
Div+CSS
</a>

</div>

<a class="zg-link-litblue zm-topic-side-title-link" href="/topic/19550901/organize/entire#anchor-children-topic">共有 31 个子话题，查看话题结构 » </a>

</div>
</div>


<div class="zm-side-section">
<div class="zm-side-section-inner" id="zh-topic-top-answerer">
<h3>

<a href="/topic/19550901/top-writer" class='SidebarListNav-sideLink Link--light' target="_blank">
查看全部 »
</a>

活跃回答者</h3>
<div class='zm-topic-side-person-list'>

<div class="zm-topic-side-person-item">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/sharpmaster" data-hovercard="p$t$sharpmaster" class="author-link">徐飞</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="三流程序员，二流架构师">三</span>流程序员，二流架构师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/sharpmaster/topic/19550901/answers">在该话题下有 91 个回答，8980 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/ecfeb2b0c_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/fouber" data-hovercard="p$t$fouber" class="author-link">张云龙</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="全民直播CTO">全</span>民直播CTO

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/fouber/topic/19550901/answers">在该话题下有 30 个回答，9722 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic4.zhimg.com/7be980a0f_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/evanyou" data-hovercard="p$t$evanyou" class="author-link">尤雨溪</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="不会搞艺术的程序员不是好设计师">不</span>会搞艺术的程序员不是好设计师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/evanyou/topic/19550901/answers">在该话题下有 128 个回答，12K 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic2.zhimg.com/191ec5daa9b4d6931eed0eba8a9cf39d_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/kejun" data-hovercard="p$t$kejun" class="author-link">张克军</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="豆瓣前端工程师">豆</span>瓣前端工程师

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/kejun/topic/19550901/answers">在该话题下有 40 个回答，3330 赞同</a>


</div>
</div>
</div>

<div class="zm-topic-side-person-item">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="zm-list-avatar-link">
<img class="zm-list-avatar" src="https://pic1.zhimg.com/da8e974dc_s.jpg" />
</a>
<div class="zm-topic-side-person-item-content">
<a href="/people/he-shi-jun" data-hovercard="p$t$he-shi-jun" class="author-link">贺师俊</a><span class="icon icon-badge-best_answerer icon-badge" data-tooltip="s$b$优秀回答者"></span><div class="ellipsis"><span class="badge-summary">优秀回答者</span>
<span class="bio" title="Web开发者">W</span>eb开发者

</div>
<div class="zg-gray-normal">
<a class="gray_link" href="/people/he-shi-jun/topic/19550901/answers">在该话题下有 396 个回答，14K 赞同</a>


</div>
</div>
</div>


</div>
</div>
</div>


<div class="shameimaru-placeholder" data-loc="topic_down" data-params='{&quot;topic_token&quot;: &quot;19550901&quot;}'></div>

</div>


</div>


<div id="zh-footer" class="zh-footer">
<div class="content zg-wrap clearfix">
<ul>

<li><a href="https://liukanshan.zhihu.com" target="_blank">刘看山</a></li>

<li><a href="/question/19581624" target="_blank">知乎指南</a></li>
<li><a href="javascript:;" id="js-feedback-button">建议反馈</a></li>

<li><a href="/app" target="_blank">移动应用</a></li>
<li><a href="/careers">加入知乎</a></li>
<li><a href="/terms" target="_blank">知乎协议</a></li>
<li><a href="/jubao" target="_blank">举报投诉</a></li>
<li><a href="/contact">联系我们</a></li>

</ul>

<span class="copy">&copy; 2017 知乎</span>

</div>
</div>

<script type="text/json" class="json-inline" data-name="guiders2">{"exclusive-popover":{},"section":{},"editor":[]}</script>
<script type="text/json" class="json-inline" data-name="current_user">["\u6587\u5200\u6c34\u539f","liu-yuan-39-9","https:\/\/pic2.zhimg.com\/56a9754ca686ba7d3b1e725c6452ccd1_s.png","649f8fe7032b205a3cbbbb875135734d","\u534a\u8def\u51fa\u5bb6\u5b66\u5b89\u5353",0,0,true,"174596549@qq.com","http:\/\/mail.qq.com",0,false,false,false,"32745954738176",false,false,false,true,null]</script>
<script type="text/json" class="json-inline" data-name="user_status">[null,null,false]</script>
<script type="text/json" class="json-inline" data-name="env">["zhihu.com","comet.zhihu.com",false,null,false,false]</script>
<script type="text/json" class="json-inline" data-name="permissions">[]</script>


<script type="text/json" class="json-inline" data-name="ga_vars">{"user_created":1378258190000,"now":1486364960000,"abtest_mask":"---------0--------------------","user_attr":[1,0,0,"-",1],"user_hash":"649f8fe7032b205a3cbbbb875135734d"}</script>

<script type="text/json" class="json-inline" data-name="ra-urls">{"Copyright":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Copyright.98ac6609.js","PayUIApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PayUIApp.ca78ba78.js","CouponApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CouponApp.66b486a6.js","PaymentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/PaymentApp.7f16d61c.js","Community":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Community.920e484a.js","Report":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/Report.26635627.js","OrgOpHelp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/OrgOpHelp.f1709e97.js","common":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/common.a4dd3236.js","BalanceApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/BalanceApp.14e3a013.js","AnswerWarrant":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/AnswerWarrant.97f134aa.js","CommentApp":"https:\/\/static.zhihu.com\/static\/revved\/-\/apps\/CommentApp.7556991d.js"}</script>

<script type="text/json" class="json-inline" data-name="current_topic">[["\u524d\u7aef\u5f00\u53d1","19550901","https:\/\/pic1.zhimg.com\/v2-8e66233f5558e741bad3a8c50b9566c8_s.jpg",225],[["Web \u5f00\u53d1","19550516","https:\/\/pic3.zhimg.com\/891b4f32a_s.jpg"],["\u8f6f\u4ef6\u5f00\u53d1","19552332","https:\/\/pic2.zhimg.com\/185d9c33d_s.jpg"],["\u7f51\u7ad9\u5f00\u53d1","19561719","https:\/\/pic2.zhimg.com\/78645670d_s.jpg"]],1,0,"",0]</script>

<script src="https://static.zhihu.com/static/revved/-/js/vendor.cb14a042.js"></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/base.6cca0b95.js"></script>

<script src="https://static.zhihu.com/static/revved/-/js/closure/common.31d4e5c0.js"></script>


<script src="https://static.zhihu.com/static/revved/-/js/closure/richtexteditor.71ca49de.js" async></script>
<script src="https://static.zhihu.com/static/revved/-/js/closure/page-main.c075e49f.js"></script>
<meta name="entry" content="ZH.entryT" data-module-id="page-main">

<script type="text/zscript" znonce="2edab3693d994cfbb843c013e577ddf4"></script>

<input type="hidden" name="_xsrf" value="b08047425d2b394c9b9106bb47ce2ec8"/>
</body>
</html>